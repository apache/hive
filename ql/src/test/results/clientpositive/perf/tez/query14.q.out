Warning: Shuffle Join MERGEJOIN[1138][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 17' is a cross product
Warning: Shuffle Join MERGEJOIN[1174][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1148][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
Warning: Shuffle Join MERGEJOIN[1181][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 23' is a cross product
Warning: Shuffle Join MERGEJOIN[1158][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 24' is a cross product
Warning: Shuffle Join MERGEJOIN[1188][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 25' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@avg_sales
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@avg_sales
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 6 (BROADCAST_EDGE)
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Map 7 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE), Union 3 (CONTAINS)

Vertex dependency in Stage-4
Map 26 <- Reducer 32 (BROADCAST_EDGE)
Map 71 <- Reducer 57 (BROADCAST_EDGE)
Map 72 <- Reducer 63 (BROADCAST_EDGE)
Map 73 <- Reducer 69 (BROADCAST_EDGE)
Map 74 <- Reducer 37 (BROADCAST_EDGE)
Map 75 <- Reducer 42 (BROADCAST_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 20 <- Union 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 36 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 24 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 41 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 28 <- Map 70 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE), Reducer 48 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 32 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 31 (SIMPLE_EDGE), Map 74 (SIMPLE_EDGE)
Reducer 34 <- Map 70 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 35 <- Reducer 34 (SIMPLE_EDGE), Reducer 52 (SIMPLE_EDGE)
Reducer 36 <- Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 38 <- Map 31 (SIMPLE_EDGE), Map 75 (SIMPLE_EDGE)
Reducer 39 <- Map 70 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE), Reducer 56 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 43 <- Map 31 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE)
Reducer 44 <- Map 70 (SIMPLE_EDGE), Reducer 43 (SIMPLE_EDGE)
Reducer 45 <- Reducer 44 (SIMPLE_EDGE), Union 46 (CONTAINS)
Reducer 47 <- Union 46 (SIMPLE_EDGE)
Reducer 48 <- Map 70 (SIMPLE_EDGE), Reducer 47 (SIMPLE_EDGE)
Reducer 49 <- Reducer 44 (SIMPLE_EDGE), Union 50 (CONTAINS)
Reducer 51 <- Union 50 (SIMPLE_EDGE)
Reducer 52 <- Map 70 (SIMPLE_EDGE), Reducer 51 (SIMPLE_EDGE)
Reducer 53 <- Reducer 44 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 55 <- Union 54 (SIMPLE_EDGE)
Reducer 56 <- Map 70 (SIMPLE_EDGE), Reducer 55 (SIMPLE_EDGE)
Reducer 57 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 31 (SIMPLE_EDGE), Map 72 (SIMPLE_EDGE)
Reducer 59 <- Map 70 (SIMPLE_EDGE), Reducer 58 (SIMPLE_EDGE)
Reducer 60 <- Reducer 59 (SIMPLE_EDGE), Union 46 (CONTAINS)
Reducer 61 <- Reducer 59 (SIMPLE_EDGE), Union 50 (CONTAINS)
Reducer 62 <- Reducer 59 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 63 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 31 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE)
Reducer 65 <- Map 70 (SIMPLE_EDGE), Reducer 64 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (SIMPLE_EDGE), Union 46 (CONTAINS)
Reducer 67 <- Reducer 65 (SIMPLE_EDGE), Union 50 (CONTAINS)
Reducer 68 <- Reducer 65 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 69 <- Map 31 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Fetch Operator
    limit:100
    Stage-4
      Reducer 21 vectorized
      File Output Operator [FS_1317]
        Limit [LIM_1316] (rows=100 width=253)
          Number of rows:100
          Select Operator [SEL_1315] (rows=304320 width=253)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 20 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1314]
              Select Operator [SEL_1313] (rows=304320 width=253)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1312] (rows=304320 width=253)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 19 [SIMPLE_EDGE]
                  <-Reducer 18 [CONTAINS]
                    Reduce Output Operator [RS_1180]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1179] (rows=608640 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1178] (rows=121728 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1176] (rows=40576 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1175] (rows=40576 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1174] (rows=121728 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_254]
                                  Merge Join Operator [MERGEJOIN_1138] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1236]
                                      Select Operator [SEL_1234] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1232] (rows=1 width=112)
                                          predicate:average_sales is not null
                                          TableScan [TS_137] (rows=1 width=0)
                                            default@avg_sales,avg_sales,Tbl:PARTIAL,Col:COMPLETE,Output:["average_sales"]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1242]
                                      Select Operator [SEL_1241] (rows=1 width=8)
                                        Filter Operator [FIL_1240] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1239] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1235]
                                              Group By Operator [GBY_1233] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_1231] (rows=1 width=0)
                                                   Please refer to the previous TableScan [TS_137]
                              <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1311]
                                  Filter Operator [FIL_1310] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1309] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 29 [SIMPLE_EDGE]
                                      SHUFFLE [RS_247]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_246] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_244] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1168] (rows=15062131 width=11)
                                              Conds:RS_241._col3=RS_242._col0(Left Semi),Output:["_col0","_col1","_col2","_col4","_col5"]
                                            <-Reducer 28 [SIMPLE_EDGE]
                                              SHUFFLE [RS_241]
                                                PartitionCols:_col3
                                                Select Operator [SEL_163] (rows=15062131 width=15)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Merge Join Operator [MERGEJOIN_1140] (rows=15062131 width=15)
                                                    Conds:RS_160._col1=RS_1296._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1296]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1287] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1278] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                          TableScan [TS_154] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 27 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_160]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1139] (rows=15062131 width=4)
                                                        Conds:RS_1277._col0=RS_1249._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1249]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1247] (rows=50 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1245] (rows=50 width=12)
                                                              predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                              TableScan [TS_151] (rows=73049 width=12)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1277]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1276] (rows=550076554 width=118)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1275] (rows=550076554 width=118)
                                                              predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_158_date_dim_d_date_sk_min) AND DynamicValue(RS_158_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_158_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_148] (rows=575995635 width=118)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                              <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1274]
                                                                  Group By Operator [GBY_1273] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1267]
                                                                      Group By Operator [GBY_1261] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1250] (rows=50 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1247]
                                            <-Reducer 48 [SIMPLE_EDGE]
                                              SHUFFLE [RS_242]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_240] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1147] (rows=724 width=4)
                                                    Conds:RS_1297._col1, _col2, _col3=RS_1308._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1297]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1288] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1279] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1308]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1307] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1306] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1305] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 46 [SIMPLE_EDGE]
                                                            <-Reducer 45 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1349]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1348] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1347] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 44 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_184]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_183] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1142] (rows=14628613 width=11)
                                                                          Conds:RS_179._col1=RS_1298._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 70 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1298]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1289] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1280] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_154]
                                                                        <-Reducer 43 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_179]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1141] (rows=14736682 width=4)
                                                                              Conds:RS_1346._col0=RS_1255._col0(Inner),Output:["_col1"]
                                                                            <-Map 31 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1255]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1248] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1246] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                     Please refer to the previous TableScan [TS_151]
                                                                            <-Map 71 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1346]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1345] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1344] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_177_d1_d_date_sk_min) AND DynamicValue(RS_177_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_177_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_167] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 57 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1343]
                                                                                        Group By Operator [GBY_1342] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1270]
                                                                                            Group By Operator [GBY_1264] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1256] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                            <-Reducer 60 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1363]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1362] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1361] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 59 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_204]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_203] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1144] (rows=7620440 width=11)
                                                                          Conds:RS_199._col1=RS_1299._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 70 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1299]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1290] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1281] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_154]
                                                                        <-Reducer 58 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_199]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1143] (rows=7676736 width=4)
                                                                              Conds:RS_1360._col0=RS_1257._col0(Inner),Output:["_col1"]
                                                                            <-Map 31 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1257]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                                            <-Map 72 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1360]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1359] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1358] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_197_d2_d_date_sk_min) AND DynamicValue(RS_197_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_197_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_187] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1357]
                                                                                        Group By Operator [GBY_1356] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1271]
                                                                                            Group By Operator [GBY_1265] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1258] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                            <-Reducer 66 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1377]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1376] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1375] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 65 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_225]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_224] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1146] (rows=3828623 width=11)
                                                                          Conds:RS_220._col1=RS_1300._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 70 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1300]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1291] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1282] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_154]
                                                                        <-Reducer 64 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_220]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1145] (rows=3856907 width=4)
                                                                              Conds:RS_1374._col0=RS_1259._col0(Inner),Output:["_col1"]
                                                                            <-Map 31 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1259]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                                            <-Map 73 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1374]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1373] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1372] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_218_d3_d_date_sk_min) AND DynamicValue(RS_218_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_218_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_208] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 69 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1371]
                                                                                        Group By Operator [GBY_1370] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1272]
                                                                                            Group By Operator [GBY_1266] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1260] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1248]
                  <-Reducer 23 [CONTAINS]
                    Reduce Output Operator [RS_1187]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1186] (rows=608640 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1185] (rows=121728 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1183] (rows=40576 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1182] (rows=40576 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1181] (rows=121728 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 22 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_376]
                                  Merge Join Operator [MERGEJOIN_1148] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1237]
                                       Please refer to the previous Select Operator [SEL_1234]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1243]
                                       Please refer to the previous Select Operator [SEL_1241]
                              <-Reducer 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1329]
                                  Filter Operator [FIL_1328] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1327] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 35 [SIMPLE_EDGE]
                                      SHUFFLE [RS_369]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_368] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_366] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1170] (rows=7790806 width=106)
                                              Conds:RS_363._col3=RS_364._col0(Left Semi),Output:["_col0","_col1","_col2","_col4","_col5"]
                                            <-Reducer 34 [SIMPLE_EDGE]
                                              SHUFFLE [RS_363]
                                                PartitionCols:_col3
                                                Select Operator [SEL_285] (rows=7790806 width=110)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Merge Join Operator [MERGEJOIN_1150] (rows=7790806 width=110)
                                                    Conds:RS_282._col1=RS_1301._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1301]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1292] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1283] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 33 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_282]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1149] (rows=7790806 width=98)
                                                        Conds:RS_1322._col0=RS_1251._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1251]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1247]
                                                      <-Map 74 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1322]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1321] (rows=286549727 width=123)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1320] (rows=286549727 width=123)
                                                              predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_280_date_dim_d_date_sk_min) AND DynamicValue(RS_280_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_280_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_270] (rows=287989836 width=123)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                              <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1319]
                                                                  Group By Operator [GBY_1318] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1268]
                                                                      Group By Operator [GBY_1262] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1252] (rows=50 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1247]
                                            <-Reducer 52 [SIMPLE_EDGE]
                                              SHUFFLE [RS_364]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_362] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1157] (rows=724 width=4)
                                                    Conds:RS_1302._col1, _col2, _col3=RS_1326._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1302]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1293] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1284] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 51 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1326]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1325] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1324] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1323] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 50 [SIMPLE_EDGE]
                                                            <-Reducer 49 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1352]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1351] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1350] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 44 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_306]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_183]
                                                            <-Reducer 61 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1366]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1365] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1364] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 59 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_326]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_203]
                                                            <-Reducer 67 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1380]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1379] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1378] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 65 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_347]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_224]
                  <-Reducer 25 [CONTAINS]
                    Reduce Output Operator [RS_1194]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1193] (rows=608640 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1192] (rows=121728 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1190] (rows=40576 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1189] (rows=40576 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1188] (rows=121728 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_499]
                                  Merge Join Operator [MERGEJOIN_1158] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1238]
                                       Please refer to the previous Select Operator [SEL_1234]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1244]
                                       Please refer to the previous Select Operator [SEL_1241]
                              <-Reducer 41 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1341]
                                  Filter Operator [FIL_1340] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1339] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 40 [SIMPLE_EDGE]
                                      SHUFFLE [RS_492]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_491] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_489] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1172] (rows=3942084 width=126)
                                              Conds:RS_486._col3=RS_487._col0(Left Semi),Output:["_col0","_col1","_col2","_col4","_col5"]
                                            <-Reducer 39 [SIMPLE_EDGE]
                                              SHUFFLE [RS_486]
                                                PartitionCols:_col3
                                                Select Operator [SEL_408] (rows=3942084 width=130)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Merge Join Operator [MERGEJOIN_1160] (rows=3942084 width=130)
                                                    Conds:RS_405._col1=RS_1303._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1303]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1294] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1285] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 38 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_405]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1159] (rows=3942084 width=118)
                                                        Conds:RS_1334._col0=RS_1253._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1253]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1247]
                                                      <-Map 75 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1334]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1333] (rows=143966864 width=123)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1332] (rows=143966864 width=123)
                                                              predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_403_date_dim_d_date_sk_min) AND DynamicValue(RS_403_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_403_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_393] (rows=144002668 width=123)
                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                              <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1331]
                                                                  Group By Operator [GBY_1330] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1269]
                                                                      Group By Operator [GBY_1263] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1254] (rows=50 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1247]
                                            <-Reducer 56 [SIMPLE_EDGE]
                                              SHUFFLE [RS_487]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_485] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1167] (rows=724 width=4)
                                                    Conds:RS_1304._col1, _col2, _col3=RS_1338._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1304]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1295] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1286] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 55 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1338]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1337] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1336] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1335] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 54 [SIMPLE_EDGE]
                                                            <-Reducer 53 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1355]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1354] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1353] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 44 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_429]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_183]
                                                            <-Reducer 62 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1369]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1368] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1367] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 59 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_449]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_203]
                                                            <-Reducer 68 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1383]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1382] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1381] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 65 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_470]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_224]
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 4 vectorized
              File Output Operator [FS_114]
                table:{"name:":"default.avg_sales"}
                Select Operator [SEL_113] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_112] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Union 3 [CUSTOM_SIMPLE_EDGE]
                    <-Reducer 12 [CONTAINS]
                      Reduce Output Operator [RS_100]
                        Group By Operator [GBY_99] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_98] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_96] (rows=3856907 width=114)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_95] (rows=3856907 width=114)
                                Conds:RS_136._col0=RS_128._col0(Inner),Output:["_col1","_col2"]
                              <-Map 13 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_128]
                                  PartitionCols:_col0
                                  Select Operator [SEL_127] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_126] (rows=1957 width=8)
                                      predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                      TableScan [TS_24] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_136]
                                  PartitionCols:_col0
                                  Select Operator [SEL_135] (rows=143966864 width=119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_134] (rows=143966864 width=119)
                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_21] (rows=144002668 width=119)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_133]
                                          Group By Operator [GBY_132] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_131]
                                              Group By Operator [GBY_130] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_129] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_127]
                    <-Reducer 2 [CONTAINS]
                      Reduce Output Operator [RS_88]
                        Group By Operator [GBY_87] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_86] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_84] (rows=14736682 width=0)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_83] (rows=14736682 width=0)
                                Conds:RS_111._col0=RS_103._col0(Inner),Output:["_col1","_col2"]
                              <-Map 5 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_103]
                                  PartitionCols:_col0
                                  Select Operator [SEL_102] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_101] (rows=1957 width=8)
                                      predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                      TableScan [TS_3] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_111]
                                  PartitionCols:_col0
                                  Select Operator [SEL_110] (rows=550076554 width=114)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_109] (rows=550076554 width=114)
                                      predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_0] (rows=575995635 width=114)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                      <-Reducer 6 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_108]
                                          Group By Operator [GBY_107] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_106]
                                              Group By Operator [GBY_105] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_104] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_102]
                    <-Reducer 8 [CONTAINS]
                      Reduce Output Operator [RS_94]
                        Group By Operator [GBY_93] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_92] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_90] (rows=7676736 width=94)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_89] (rows=7676736 width=94)
                                Conds:RS_125._col0=RS_117._col0(Inner),Output:["_col1","_col2"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_117]
                                  PartitionCols:_col0
                                  Select Operator [SEL_116] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_115] (rows=1957 width=8)
                                      predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                      TableScan [TS_13] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_125]
                                  PartitionCols:_col0
                                  Select Operator [SEL_124] (rows=286549727 width=119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_123] (rows=286549727 width=119)
                                      predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_10] (rows=287989836 width=119)
                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_122]
                                          Group By Operator [GBY_121] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_120]
                                              Group By Operator [GBY_119] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_118] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_116]
        Stage-0
          Move Operator
             Please refer to the previous Stage-1

