Warning: Shuffle Join MERGEJOIN[902][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[914][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[926][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Union 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 13 <- Map 1 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 15 <- Union 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE), Reducer 55 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 19 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 20 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 24 <- Union 23 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 21 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 21 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 30 <- Union 29 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 31 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 33 <- Map 31 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 34 <- Map 31 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 36 <- Map 35 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 37 <- Map 35 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 38 <- Map 35 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 40 <- Map 39 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 41 <- Map 39 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 42 <- Map 39 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 46 <- Map 45 (SIMPLE_EDGE), Map 49 (SIMPLE_EDGE)
Reducer 47 <- Map 56 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE), Reducer 58 (ONE_TO_ONE_EDGE)
Reducer 48 <- Reducer 47 (SIMPLE_EDGE)
Reducer 5 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE), Reducer 48 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 50 <- Map 49 (SIMPLE_EDGE), Map 91 (SIMPLE_EDGE)
Reducer 51 <- Map 56 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE), Reducer 68 (ONE_TO_ONE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE)
Reducer 53 <- Map 49 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE)
Reducer 54 <- Map 56 (SIMPLE_EDGE), Reducer 53 (SIMPLE_EDGE), Reducer 77 (ONE_TO_ONE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE)
Reducer 57 <- Map 56 (SIMPLE_EDGE), Reducer 62 (ONE_TO_ONE_EDGE)
Reducer 58 <- Reducer 57 (SIMPLE_EDGE)
Reducer 59 <- Map 56 (SIMPLE_EDGE), Reducer 85 (SIMPLE_EDGE)
Reducer 60 <- Reducer 59 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 62 <- Union 61 (SIMPLE_EDGE)
Reducer 63 <- Map 56 (SIMPLE_EDGE), Reducer 87 (SIMPLE_EDGE)
Reducer 64 <- Reducer 63 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 65 <- Map 56 (SIMPLE_EDGE), Reducer 88 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 67 <- Map 56 (SIMPLE_EDGE), Reducer 72 (ONE_TO_ONE_EDGE)
Reducer 68 <- Reducer 67 (SIMPLE_EDGE)
Reducer 69 <- Map 56 (SIMPLE_EDGE), Reducer 85 (SIMPLE_EDGE)
Reducer 7 <- Union 6 (SIMPLE_EDGE)
Reducer 70 <- Reducer 69 (SIMPLE_EDGE), Union 71 (CONTAINS)
Reducer 72 <- Union 71 (SIMPLE_EDGE)
Reducer 73 <- Reducer 69 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 75 <- Union 74 (SIMPLE_EDGE)
Reducer 76 <- Map 56 (SIMPLE_EDGE), Reducer 75 (ONE_TO_ONE_EDGE)
Reducer 77 <- Reducer 76 (SIMPLE_EDGE)
Reducer 78 <- Map 56 (SIMPLE_EDGE), Reducer 87 (SIMPLE_EDGE)
Reducer 79 <- Reducer 78 (SIMPLE_EDGE), Union 71 (CONTAINS)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 80 <- Reducer 78 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 81 <- Map 56 (SIMPLE_EDGE), Reducer 88 (SIMPLE_EDGE)
Reducer 82 <- Reducer 81 (SIMPLE_EDGE), Union 71 (CONTAINS)
Reducer 83 <- Reducer 81 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 85 <- Map 84 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE)
Reducer 87 <- Map 86 (SIMPLE_EDGE), Map 89 (SIMPLE_EDGE)
Reducer 88 <- Map 86 (SIMPLE_EDGE), Map 90 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 10 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_1134]
        Limit [LIM_1133] (rows=100 width=237)
          Number of rows:100
          Select Operator [SEL_1132] (rows=1016388080 width=237)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1131]
              Select Operator [SEL_1130] (rows=1016388080 width=237)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1129] (rows=1016388080 width=237)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 6 [SIMPLE_EDGE]
                  <-Reducer 12 [CONTAINS]
                    Reduce Output Operator [RS_919]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_918] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_916] (rows=116155905 width=264)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_915] (rows=116155905 width=264)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_914] (rows=348467716 width=264)
                              Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1140]
                                Select Operator [SEL_1139] (rows=1 width=8)
                                  Filter Operator [FIL_1138] (rows=1 width=8)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_1137] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_1136] (rows=1 width=8)
                                        Group By Operator [GBY_1135] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Union 10 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 19 [CONTAINS]
                                            Reduce Output Operator [RS_943]
                                              Group By Operator [GBY_942] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_941] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_939] (rows=316788826 width=135)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_938] (rows=316788826 width=135)
                                                      Conds:RS_1178._col0=RS_1184._col0(Inner),Output:["_col1"]
                                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1184]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1181] (rows=8116 width=1119)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1180] (rows=8116 width=1119)
                                                            predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                            TableScan [TS_13] (rows=73049 width=1119)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1178]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1176] (rows=287989836 width=135)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_1175] (rows=287989836 width=135)
                                                            predicate:cs_sold_date_sk is not null
                                                            TableScan [TS_10] (rows=287989836 width=135)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_quantity"]
                                          <-Reducer 33 [CONTAINS]
                                            Reduce Output Operator [RS_979]
                                              Group By Operator [GBY_978] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_977] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_975] (rows=158402938 width=135)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_974] (rows=158402938 width=135)
                                                      Conds:RS_1196._col0=RS_1202._col0(Inner),Output:["_col1"]
                                                    <-Map 35 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1202]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1199] (rows=8116 width=1119)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1198] (rows=8116 width=1119)
                                                            predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                            TableScan [TS_24] (rows=73049 width=1119)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                    <-Map 31 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1196]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1194] (rows=144002668 width=135)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_1193] (rows=144002668 width=135)
                                                            predicate:ws_sold_date_sk is not null
                                                            TableScan [TS_21] (rows=144002668 width=135)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_quantity"]
                                          <-Reducer 9 [CONTAINS]
                                            Reduce Output Operator [RS_913]
                                              Group By Operator [GBY_912] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_911] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_909] (rows=633595212 width=88)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_908] (rows=633595212 width=88)
                                                      Conds:RS_1061._col0=RS_1070._col0(Inner),Output:["_col1"]
                                                    <-Map 86 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1070]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1064] (rows=8116 width=1119)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1063] (rows=8116 width=1119)
                                                            predicate:(d_date_sk is not null and d_year BETWEEN 1999 AND 2001)
                                                            TableScan [TS_97] (rows=73049 width=1119)
                                                              default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1061]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1059] (rows=575995635 width=88)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_1058] (rows=575995635 width=88)
                                                            predicate:ss_sold_date_sk is not null
                                                            TableScan [TS_0] (rows=575995635 width=88)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_quantity"]
                            <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1143]
                                Select Operator [SEL_1142] (rows=1 width=120)
                                  Output:["_col0"]
                                  Group By Operator [GBY_1141] (rows=1 width=120)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                  <-Union 26 [CUSTOM_SIMPLE_EDGE]
                                    <-Reducer 25 [CONTAINS]
                                      Reduce Output Operator [RS_961]
                                        Group By Operator [GBY_960] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_959] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_957] (rows=316788826 width=135)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_956] (rows=316788826 width=135)
                                                Conds:RS_1191._col0=RS_1185._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1185]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1181]
                                              <-Map 43 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1191]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1189] (rows=287989836 width=135)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_1188] (rows=287989836 width=135)
                                                      predicate:cs_sold_date_sk is not null
                                                      TableScan [TS_55] (rows=287989836 width=135)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                    <-Reducer 37 [CONTAINS]
                                      Reduce Output Operator [RS_997]
                                        Group By Operator [GBY_996] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_995] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_993] (rows=158402938 width=135)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_992] (rows=158402938 width=135)
                                                Conds:RS_1209._col0=RS_1203._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 35 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1203]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1199]
                                              <-Map 44 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1209]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1207] (rows=144002668 width=135)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_1206] (rows=144002668 width=135)
                                                      predicate:ws_sold_date_sk is not null
                                                      TableScan [TS_66] (rows=144002668 width=135)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                    <-Reducer 41 [CONTAINS]
                                      Reduce Output Operator [RS_1015]
                                        Group By Operator [GBY_1014] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_1013] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_1011] (rows=633595212 width=88)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_1010] (rows=633595212 width=88)
                                                Conds:RS_1214._col0=RS_1071._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 86 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1071]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1064]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1214]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1212] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_1211] (rows=575995635 width=88)
                                                      predicate:ss_sold_date_sk is not null
                                                      TableScan [TS_45] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                            <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1154]
                                Group By Operator [GBY_1153] (rows=348467716 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 51 [SIMPLE_EDGE]
                                  SHUFFLE [RS_369]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_368] (rows=696935432 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                      Select Operator [SEL_366] (rows=696935432 width=135)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Merge Join Operator [MERGEJOIN_877] (rows=696935432 width=135)
                                          Conds:RS_362._col1=RS_1118._col0(Inner),RS_362._col1=RS_1152._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_1118]
                                            PartitionCols:_col0
                                            Select Operator [SEL_1106] (rows=462000 width=1436)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_1097] (rows=462000 width=1436)
                                                predicate:i_item_sk is not null
                                                TableScan [TS_91] (rows=462000 width=1436)
                                                  default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                        <-Reducer 50 [SIMPLE_EDGE]
                                          SHUFFLE [RS_362]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_869] (rows=316788826 width=135)
                                              Conds:RS_1146._col0=RS_1089._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1089]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1087] (rows=18262 width=1119)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_1086] (rows=18262 width=1119)
                                                    predicate:((d_moy = 11) and (d_year = 2000) and d_date_sk is not null)
                                                    TableScan [TS_85] (rows=73049 width=1119)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                            <-Map 91 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1146]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1145] (rows=287989836 width=135)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_1144] (rows=287989836 width=135)
                                                    predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                    TableScan [TS_271] (rows=287989836 width=135)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                        <-Reducer 68 [ONE_TO_ONE_EDGE] vectorized
                                          FORWARD [RS_1152]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_1151] (rows=254100 width=1436)
                                              Output:["_col0"],keys:KEY._col0
                                            <-Reducer 67 [SIMPLE_EDGE]
                                              SHUFFLE [RS_356]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_355] (rows=508200 width=1436)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_876] (rows=508200 width=1436)
                                                    Conds:RS_1114._col1, _col2, _col3=RS_1150._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 56 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1114]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1102] (rows=462000 width=1436)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1093] (rows=462000 width=1436)
                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_91]
                                                  <-Reducer 72 [ONE_TO_ONE_EDGE] vectorized
                                                    FORWARD [RS_1150]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1149] (rows=1 width=108)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1148] (rows=1 width=108)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1147] (rows=304916424 width=108)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 71 [SIMPLE_EDGE]
                                                            <-Reducer 70 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1236]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1235] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1234] (rows=348477374 width=88)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 69 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_300]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_299] (rows=696954748 width=88)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                        Merge Join Operator [MERGEJOIN_871] (rows=696954748 width=88)
                                                                          Conds:RS_295._col1=RS_1115._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1115]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1103] (rows=462000 width=1436)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1094] (rows=462000 width=1436)
                                                                                predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_91]
                                                                        <-Reducer 85 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_295]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_855] (rows=633595212 width=88)
                                                                              Conds:RS_1218._col0=RS_1065._col0(Inner),Output:["_col1"]
                                                                            <-Map 86 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1065]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1064]
                                                                            <-Map 84 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1218]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1217] (rows=575995635 width=88)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1216] (rows=575995635 width=88)
                                                                                    predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                                                    TableScan [TS_94] (rows=575995635 width=88)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                            <-Reducer 79 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1242]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1241] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1240] (rows=174233858 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 78 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_320]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_319] (rows=348467716 width=135)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                        Merge Join Operator [MERGEJOIN_873] (rows=348467716 width=135)
                                                                          Conds:RS_315._col1=RS_1116._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1116]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1104] (rows=462000 width=1436)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1095] (rows=462000 width=1436)
                                                                                predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_91]
                                                                        <-Reducer 87 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_315]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_857] (rows=316788826 width=135)
                                                                              Conds:RS_1224._col0=RS_1066._col0(Inner),Output:["_col1"]
                                                                            <-Map 86 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1066]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1064]
                                                                            <-Map 89 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1224]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1223] (rows=287989836 width=135)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1222] (rows=287989836 width=135)
                                                                                    predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                    TableScan [TS_114] (rows=287989836 width=135)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                            <-Reducer 82 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1248]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1247] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1246] (rows=87121617 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 81 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_341]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_340] (rows=174243235 width=135)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                        Merge Join Operator [MERGEJOIN_875] (rows=174243235 width=135)
                                                                          Conds:RS_336._col1=RS_1117._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1117]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1105] (rows=462000 width=1436)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1096] (rows=462000 width=1436)
                                                                                predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_91]
                                                                        <-Reducer 88 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_336]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_859] (rows=158402938 width=135)
                                                                              Conds:RS_1230._col0=RS_1067._col0(Inner),Output:["_col1"]
                                                                            <-Map 86 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1067]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1064]
                                                                            <-Map 90 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1230]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1229] (rows=144002668 width=135)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1228] (rows=144002668 width=135)
                                                                                    predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                    TableScan [TS_135] (rows=144002668 width=135)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk"]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_931]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_930] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_928] (rows=58081078 width=264)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_927] (rows=58081078 width=264)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_926] (rows=174243235 width=264)
                              Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1160]
                                Select Operator [SEL_1159] (rows=1 width=8)
                                  Filter Operator [FIL_1158] (rows=1 width=8)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_1157] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_1156] (rows=1 width=8)
                                        Group By Operator [GBY_1155] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Union 14 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 13 [CONTAINS]
                                            Reduce Output Operator [RS_925]
                                              Group By Operator [GBY_924] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_923] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_921] (rows=633595212 width=88)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_920] (rows=633595212 width=88)
                                                      Conds:RS_1062._col0=RS_1072._col0(Inner),Output:["_col1"]
                                                    <-Map 86 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1072]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1064]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1062]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1059]
                                          <-Reducer 20 [CONTAINS]
                                            Reduce Output Operator [RS_949]
                                              Group By Operator [GBY_948] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_947] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_945] (rows=316788826 width=135)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_944] (rows=316788826 width=135)
                                                      Conds:RS_1179._col0=RS_1186._col0(Inner),Output:["_col1"]
                                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1186]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1181]
                                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1179]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1176]
                                          <-Reducer 34 [CONTAINS]
                                            Reduce Output Operator [RS_985]
                                              Group By Operator [GBY_984] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_983] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_981] (rows=158402938 width=135)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_980] (rows=158402938 width=135)
                                                      Conds:RS_1197._col0=RS_1204._col0(Inner),Output:["_col1"]
                                                    <-Map 35 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1204]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1199]
                                                    <-Map 31 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1197]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1194]
                            <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1163]
                                Select Operator [SEL_1162] (rows=1 width=120)
                                  Output:["_col0"]
                                  Group By Operator [GBY_1161] (rows=1 width=120)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                  <-Union 29 [CUSTOM_SIMPLE_EDGE]
                                    <-Reducer 28 [CONTAINS]
                                      Reduce Output Operator [RS_967]
                                        Group By Operator [GBY_966] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_965] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_963] (rows=316788826 width=135)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_962] (rows=316788826 width=135)
                                                Conds:RS_1192._col0=RS_1187._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1187]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1181]
                                              <-Map 43 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1192]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1189]
                                    <-Reducer 38 [CONTAINS]
                                      Reduce Output Operator [RS_1003]
                                        Group By Operator [GBY_1002] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_1001] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_999] (rows=158402938 width=135)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_998] (rows=158402938 width=135)
                                                Conds:RS_1210._col0=RS_1205._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 35 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1205]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1199]
                                              <-Map 44 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1210]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1207]
                                    <-Reducer 42 [CONTAINS]
                                      Reduce Output Operator [RS_1021]
                                        Group By Operator [GBY_1020] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_1019] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_1017] (rows=633595212 width=88)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_1016] (rows=633595212 width=88)
                                                Conds:RS_1215._col0=RS_1073._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 86 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1073]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1064]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1215]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1212]
                            <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1174]
                                Group By Operator [GBY_1173] (rows=174243235 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 54 [SIMPLE_EDGE]
                                  SHUFFLE [RS_559]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_558] (rows=348486471 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                      Select Operator [SEL_556] (rows=348486471 width=135)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Merge Join Operator [MERGEJOIN_892] (rows=348486471 width=135)
                                          Conds:RS_552._col1=RS_1120._col0(Inner),RS_552._col1=RS_1172._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_1120]
                                            PartitionCols:_col0
                                            Select Operator [SEL_1108] (rows=462000 width=1436)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_1099] (rows=462000 width=1436)
                                                predicate:i_item_sk is not null
                                                 Please refer to the previous TableScan [TS_91]
                                        <-Reducer 53 [SIMPLE_EDGE]
                                          SHUFFLE [RS_552]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_884] (rows=158402938 width=135)
                                              Conds:RS_1166._col0=RS_1090._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1090]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_1087]
                                            <-Map 92 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1166]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1165] (rows=144002668 width=135)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_1164] (rows=144002668 width=135)
                                                    predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_461] (rows=144002668 width=135)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                        <-Reducer 77 [ONE_TO_ONE_EDGE] vectorized
                                          FORWARD [RS_1172]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_1171] (rows=254100 width=1436)
                                              Output:["_col0"],keys:KEY._col0
                                            <-Reducer 76 [SIMPLE_EDGE]
                                              SHUFFLE [RS_546]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_545] (rows=508200 width=1436)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_891] (rows=508200 width=1436)
                                                    Conds:RS_1119._col1, _col2, _col3=RS_1170._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 56 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1119]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1107] (rows=462000 width=1436)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1098] (rows=462000 width=1436)
                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_91]
                                                  <-Reducer 75 [ONE_TO_ONE_EDGE] vectorized
                                                    FORWARD [RS_1170]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1169] (rows=1 width=108)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1168] (rows=1 width=108)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1167] (rows=304916424 width=108)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 74 [SIMPLE_EDGE]
                                                            <-Reducer 73 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1239]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1238] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1237] (rows=348477374 width=88)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 69 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_490]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_299]
                                                            <-Reducer 80 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1245]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1244] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1243] (rows=174233858 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 78 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_510]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_319]
                                                            <-Reducer 83 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1251]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1250] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1249] (rows=87121617 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 81 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_531]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_340]
                  <-Reducer 5 [CONTAINS]
                    Reduce Output Operator [RS_907]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_906] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_904] (rows=232318249 width=217)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_903] (rows=232318249 width=217)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_902] (rows=696954748 width=217)
                              Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1082]
                                Select Operator [SEL_1081] (rows=1 width=120)
                                  Output:["_col0"]
                                  Group By Operator [GBY_1080] (rows=1 width=120)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                  <-Union 23 [CUSTOM_SIMPLE_EDGE]
                                    <-Reducer 22 [CONTAINS]
                                      Reduce Output Operator [RS_955]
                                        Group By Operator [GBY_954] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_953] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_951] (rows=316788826 width=135)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_950] (rows=316788826 width=135)
                                                Conds:RS_1190._col0=RS_1183._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1183]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1181]
                                              <-Map 43 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1190]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1189]
                                    <-Reducer 36 [CONTAINS]
                                      Reduce Output Operator [RS_991]
                                        Group By Operator [GBY_990] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_989] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_987] (rows=158402938 width=135)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_986] (rows=158402938 width=135)
                                                Conds:RS_1208._col0=RS_1201._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 35 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1201]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1199]
                                              <-Map 44 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1208]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1207]
                                    <-Reducer 40 [CONTAINS]
                                      Reduce Output Operator [RS_1009]
                                        Group By Operator [GBY_1008] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                          Select Operator [SEL_1007] (rows=1108786976 width=108)
                                            Output:["_col0"]
                                            Select Operator [SEL_1005] (rows=633595212 width=88)
                                              Output:["_col0","_col1"]
                                              Merge Join Operator [MERGEJOIN_1004] (rows=633595212 width=88)
                                                Conds:RS_1213._col0=RS_1069._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 86 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1069]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1064]
                                              <-Map 39 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1213]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1212]
                            <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1079]
                                Select Operator [SEL_1078] (rows=1 width=8)
                                  Filter Operator [FIL_1077] (rows=1 width=8)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_1076] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_1075] (rows=1 width=8)
                                        Group By Operator [GBY_1074] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 18 [CONTAINS]
                                            Reduce Output Operator [RS_937]
                                              Group By Operator [GBY_936] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_935] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_933] (rows=316788826 width=135)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_932] (rows=316788826 width=135)
                                                      Conds:RS_1177._col0=RS_1182._col0(Inner),Output:["_col1"]
                                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1182]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1181]
                                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1177]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1176]
                                          <-Reducer 2 [CONTAINS]
                                            Reduce Output Operator [RS_901]
                                              Group By Operator [GBY_900] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_899] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_897] (rows=633595212 width=88)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_896] (rows=633595212 width=88)
                                                      Conds:RS_1060._col0=RS_1068._col0(Inner),Output:["_col1"]
                                                    <-Map 86 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1068]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1064]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1060]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1059]
                                          <-Reducer 32 [CONTAINS]
                                            Reduce Output Operator [RS_973]
                                              Group By Operator [GBY_972] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_971] (rows=1108786976 width=108)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_969] (rows=158402938 width=135)
                                                    Output:["_col0"]
                                                    Merge Join Operator [MERGEJOIN_968] (rows=158402938 width=135)
                                                      Conds:RS_1195._col0=RS_1200._col0(Inner),Output:["_col1"]
                                                    <-Map 35 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1200]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1199]
                                                    <-Map 31 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1195]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1194]
                            <-Reducer 48 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1128]
                                Group By Operator [GBY_1127] (rows=696954748 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 47 [SIMPLE_EDGE]
                                  SHUFFLE [RS_180]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_179] (rows=1393909496 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                      Select Operator [SEL_177] (rows=1393909496 width=88)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Merge Join Operator [MERGEJOIN_862] (rows=1393909496 width=88)
                                          Conds:RS_173._col1=RS_1113._col0(Inner),RS_173._col1=RS_1126._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_1113]
                                            PartitionCols:_col0
                                            Select Operator [SEL_1101] (rows=462000 width=1436)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_1092] (rows=462000 width=1436)
                                                predicate:i_item_sk is not null
                                                 Please refer to the previous TableScan [TS_91]
                                        <-Reducer 46 [SIMPLE_EDGE]
                                          SHUFFLE [RS_173]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_854] (rows=633595212 width=88)
                                              Conds:RS_1085._col0=RS_1088._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1088]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_1087]
                                            <-Map 45 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1085]
                                                PartitionCols:_col0
                                                Select Operator [SEL_1084] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_1083] (rows=575995635 width=88)
                                                    predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_82] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                        <-Reducer 58 [ONE_TO_ONE_EDGE] vectorized
                                          FORWARD [RS_1126]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_1125] (rows=254100 width=1436)
                                              Output:["_col0"],keys:KEY._col0
                                            <-Reducer 57 [SIMPLE_EDGE]
                                              SHUFFLE [RS_167]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_166] (rows=508200 width=1436)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_861] (rows=508200 width=1436)
                                                    Conds:RS_1109._col1, _col2, _col3=RS_1124._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 56 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1109]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1100] (rows=462000 width=1436)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1091] (rows=462000 width=1436)
                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_91]
                                                  <-Reducer 62 [ONE_TO_ONE_EDGE] vectorized
                                                    FORWARD [RS_1124]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1123] (rows=1 width=108)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1122] (rows=1 width=108)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1121] (rows=304916424 width=108)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 61 [SIMPLE_EDGE]
                                                            <-Reducer 60 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1221]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1220] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1219] (rows=348477374 width=88)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 59 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_111]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_110] (rows=696954748 width=88)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                        Merge Join Operator [MERGEJOIN_856] (rows=696954748 width=88)
                                                                          Conds:RS_106._col1=RS_1110._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1110]
                                                                            PartitionCols:_col0
                                                                             Please refer to the previous Select Operator [SEL_1100]
                                                                        <-Reducer 85 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_106]
                                                                            PartitionCols:_col1
                                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_855]
                                                            <-Reducer 64 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1227]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1226] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1225] (rows=174233858 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 63 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_131]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_130] (rows=348467716 width=135)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                        Merge Join Operator [MERGEJOIN_858] (rows=348467716 width=135)
                                                                          Conds:RS_126._col1=RS_1111._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1111]
                                                                            PartitionCols:_col0
                                                                             Please refer to the previous Select Operator [SEL_1100]
                                                                        <-Reducer 87 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_126]
                                                                            PartitionCols:_col1
                                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_857]
                                                            <-Reducer 66 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1233]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1232] (rows=609832849 width=108)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1231] (rows=87121617 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 65 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_152]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_151] (rows=174243235 width=135)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                        Merge Join Operator [MERGEJOIN_860] (rows=174243235 width=135)
                                                                          Conds:RS_147._col1=RS_1112._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                        <-Map 56 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1112]
                                                                            PartitionCols:_col0
                                                                             Please refer to the previous Select Operator [SEL_1100]
                                                                        <-Reducer 88 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_147]
                                                                            PartitionCols:_col1
                                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_859]

