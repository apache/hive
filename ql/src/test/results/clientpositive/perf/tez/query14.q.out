Warning: Shuffle Join MERGEJOIN[1454][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[1466][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1456][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[1479][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[1458][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1492][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 99 (BROADCAST_EDGE)
Map 101 <- Reducer 96 (BROADCAST_EDGE)
Map 102 <- Reducer 98 (BROADCAST_EDGE)
Map 103 <- Reducer 63 (BROADCAST_EDGE)
Map 104 <- Reducer 68 (BROADCAST_EDGE)
Map 20 <- Reducer 25 (BROADCAST_EDGE)
Map 36 <- Reducer 41 (BROADCAST_EDGE)
Map 46 <- Reducer 100 (BROADCAST_EDGE)
Map 50 <- Reducer 29 (BROADCAST_EDGE)
Map 51 <- Reducer 43 (BROADCAST_EDGE)
Map 52 <- Reducer 58 (BROADCAST_EDGE)
Map 91 <- Reducer 94 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 100 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Union 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 62 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 35 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 67 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 23 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 25 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 28 <- Union 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 35 <- Union 34 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 38 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 39 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 43 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 45 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 47 <- Map 46 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 48 <- Map 46 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 49 <- Map 46 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 5 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 52 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 54 <- Map 69 (SIMPLE_EDGE), Reducer 53 (SIMPLE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE), Reducer 70 (SIMPLE_EDGE)
Reducer 56 <- Reducer 55 (SIMPLE_EDGE)
Reducer 58 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 103 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 56 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Map 69 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE), Reducer 78 (SIMPLE_EDGE)
Reducer 62 <- Reducer 61 (SIMPLE_EDGE)
Reducer 63 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 104 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 65 <- Map 69 (SIMPLE_EDGE), Reducer 64 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (SIMPLE_EDGE), Reducer 82 (SIMPLE_EDGE)
Reducer 67 <- Reducer 66 (SIMPLE_EDGE)
Reducer 68 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Reducer 74 (SIMPLE_EDGE)
Reducer 71 <- Map 69 (SIMPLE_EDGE), Reducer 92 (SIMPLE_EDGE)
Reducer 72 <- Reducer 71 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 74 <- Union 73 (SIMPLE_EDGE)
Reducer 75 <- Reducer 71 (SIMPLE_EDGE), Union 76 (CONTAINS)
Reducer 77 <- Union 76 (SIMPLE_EDGE)
Reducer 78 <- Map 69 (SIMPLE_EDGE), Reducer 77 (SIMPLE_EDGE)
Reducer 79 <- Reducer 71 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 81 <- Union 80 (SIMPLE_EDGE)
Reducer 82 <- Map 69 (SIMPLE_EDGE), Reducer 81 (SIMPLE_EDGE)
Reducer 83 <- Map 69 (SIMPLE_EDGE), Reducer 95 (SIMPLE_EDGE)
Reducer 84 <- Reducer 83 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 85 <- Reducer 83 (SIMPLE_EDGE), Union 76 (CONTAINS)
Reducer 86 <- Reducer 83 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 87 <- Map 69 (SIMPLE_EDGE), Reducer 97 (SIMPLE_EDGE)
Reducer 88 <- Reducer 87 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 89 <- Reducer 87 (SIMPLE_EDGE), Union 76 (CONTAINS)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)
Reducer 90 <- Reducer 87 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 92 <- Map 91 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE)
Reducer 94 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 95 <- Map 101 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE)
Reducer 96 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 97 <- Map 102 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE)
Reducer 98 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 99 <- Map 93 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1726]
        Limit [LIM_1725] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1724] (rows=304320 width=222)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1723]
              Select Operator [SEL_1722] (rows=304320 width=222)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1721] (rows=304320 width=230)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_1485]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1484] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1483] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1481] (rows=40576 width=222)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1480] (rows=40576 width=243)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1479] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_383]
                                  Merge Join Operator [MERGEJOIN_1456] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1732]
                                      Select Operator [SEL_1731] (rows=1 width=8)
                                        Filter Operator [FIL_1730] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1729] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1728] (rows=1 width=8)
                                              Group By Operator [GBY_1727] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 11 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 10 [CONTAINS]
                                                  Reduce Output Operator [RS_1478]
                                                    Group By Operator [GBY_1477] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1476] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1474] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1473] (rows=14736682 width=0)
                                                            Conds:RS_1656._col0=RS_1637._col0(Inner),Output:["_col1"]
                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1637]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1626] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1625] (rows=1957 width=8)
                                                                  predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                  TableScan [TS_99] (rows=73049 width=8)
                                                                    default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1656]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1654] (rows=550076554 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1653] (rows=550076554 width=7)
                                                                  predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_0] (rows=575995635 width=7)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity"]
                                                                  <-Reducer 99 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1652]
                                                                      Group By Operator [GBY_1651] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_1649]
                                                                          Group By Operator [GBY_1644] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1634] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1626]
                                                <-Reducer 22 [CONTAINS]
                                                  Reduce Output Operator [RS_1510]
                                                    Group By Operator [GBY_1509] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1508] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1506] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1505] (rows=7676736 width=3)
                                                            Conds:RS_1790._col0=RS_1777._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1777]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1772] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1771] (rows=1957 width=8)
                                                                  predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                                  TableScan [TS_13] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1790]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1788] (rows=286549727 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1787] (rows=286549727 width=7)
                                                                  predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_10] (rows=287989836 width=7)
                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity"]
                                                                  <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1786]
                                                                      Group By Operator [GBY_1785] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1783]
                                                                          Group By Operator [GBY_1781] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1774] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1772]
                                                <-Reducer 38 [CONTAINS]
                                                  Reduce Output Operator [RS_1546]
                                                    Group By Operator [GBY_1545] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1544] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1542] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1541] (rows=3856907 width=3)
                                                            Conds:RS_1818._col0=RS_1805._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1805]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1800] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1799] (rows=1957 width=8)
                                                                  predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                                  TableScan [TS_24] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1818]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1816] (rows=143966864 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1815] (rows=143966864 width=7)
                                                                  predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_21] (rows=144002668 width=7)
                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity"]
                                                                  <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1814]
                                                                      Group By Operator [GBY_1813] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1811]
                                                                          Group By Operator [GBY_1809] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1802] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1800]
                                  <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1736]
                                      Select Operator [SEL_1735] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1734] (rows=1 width=120)
                                          predicate:(_col0 is not null and _col1 is not null)
                                          Group By Operator [GBY_1733] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                          <-Union 31 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 30 [CONTAINS]
                                              Reduce Output Operator [RS_1528]
                                                Group By Operator [GBY_1527] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1526] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1524] (rows=7676736 width=94)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1523] (rows=7676736 width=94)
                                                        Conds:RS_1797._col0=RS_1778._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1778]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1772]
                                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1797]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1795] (rows=286549727 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1794] (rows=286549727 width=119)
                                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_62_date_dim_d_date_sk_min) AND DynamicValue(RS_62_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_62_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_55] (rows=287989836 width=119)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                              <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1793]
                                                                  Group By Operator [GBY_1792] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1784]
                                                                      Group By Operator [GBY_1782] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1776] (rows=1957 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1772]
                                            <-Reducer 44 [CONTAINS]
                                              Reduce Output Operator [RS_1564]
                                                Group By Operator [GBY_1563] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1562] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1560] (rows=3856907 width=114)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1559] (rows=3856907 width=114)
                                                        Conds:RS_1825._col0=RS_1806._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1806]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1800]
                                                      <-Map 51 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1825]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1823] (rows=143966864 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1822] (rows=143966864 width=119)
                                                              predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_73_date_dim_d_date_sk_min) AND DynamicValue(RS_73_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_73_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_66] (rows=144002668 width=119)
                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                              <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1821]
                                                                  Group By Operator [GBY_1820] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1812]
                                                                      Group By Operator [GBY_1810] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1804] (rows=1957 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1800]
                                            <-Reducer 48 [CONTAINS]
                                              Reduce Output Operator [RS_1582]
                                                Group By Operator [GBY_1581] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1580] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1578] (rows=14736682 width=0)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1577] (rows=14736682 width=0)
                                                        Conds:RS_1832._col0=RS_1638._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 93 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1638]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1626]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1832]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1830] (rows=550076554 width=114)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1829] (rows=550076554 width=114)
                                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_45] (rows=575995635 width=114)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                              <-Reducer 100 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1828]
                                                                  Group By Operator [GBY_1827] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1650]
                                                                      Group By Operator [GBY_1645] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1636] (rows=1957 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1626]
                              <-Reducer 62 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1748]
                                  Filter Operator [FIL_1747] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1746] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 61 [SIMPLE_EDGE]
                                      SHUFFLE [RS_376]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_375] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_373] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1452] (rows=7790806 width=106)
                                              Conds:RS_370._col1=RS_371._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 60 [SIMPLE_EDGE]
                                              SHUFFLE [RS_370]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1428] (rows=7790806 width=110)
                                                  Conds:RS_365._col1=RS_1710._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1710]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1701] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1692] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                        TableScan [TS_90] (rows=462000 width=15)
                                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                <-Reducer 59 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_365]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1427] (rows=7790806 width=98)
                                                      Conds:RS_1741._col0=RS_1672._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 57 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1672]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1669] (rows=50 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1668] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                            TableScan [TS_87] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 103 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1741]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1740] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1739] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_363_date_dim_d_date_sk_min) AND DynamicValue(RS_363_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_363_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_278] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1738]
                                                                Group By Operator [GBY_1737] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1680]
                                                                    Group By Operator [GBY_1677] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1673] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1669]
                                            <-Reducer 78 [SIMPLE_EDGE]
                                              SHUFFLE [RS_371]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_369] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1435] (rows=724 width=4)
                                                    Conds:RS_1711._col1, _col2, _col3=RS_1745._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1711]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1702] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1693] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_90]
                                                  <-Reducer 77 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1745]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1744] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1743] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1742] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 76 [SIMPLE_EDGE]
                                                            <-Reducer 75 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1844]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1843] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1842] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 71 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_307]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_112] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1415] (rows=14628613 width=11)
                                                                          Conds:RS_108._col1=RS_1707._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 69 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1707]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1698] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1689] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_90]
                                                                        <-Reducer 92 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_108]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1414] (rows=14736682 width=4)
                                                                              Conds:RS_1838._col0=RS_1627._col0(Inner),Output:["_col1"]
                                                                            <-Map 93 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1627]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1626]
                                                                            <-Map 91 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1838]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1837] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1836] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_106_d1_d_date_sk_min) AND DynamicValue(RS_106_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_106_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_96] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 94 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1835]
                                                                                        Group By Operator [GBY_1834] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1646]
                                                                                            Group By Operator [GBY_1641] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1628] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1626]
                                                            <-Reducer 85 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1858]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1857] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1856] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 83 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_327]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_132] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1417] (rows=7620440 width=11)
                                                                          Conds:RS_128._col1=RS_1708._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 69 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1708]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1699] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1690] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_90]
                                                                        <-Reducer 95 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_128]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1416] (rows=7676736 width=4)
                                                                              Conds:RS_1852._col0=RS_1629._col0(Inner),Output:["_col1"]
                                                                            <-Map 93 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1629]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1626]
                                                                            <-Map 101 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1852]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1851] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1850] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_126_d2_d_date_sk_min) AND DynamicValue(RS_126_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_126_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_116] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 96 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1849]
                                                                                        Group By Operator [GBY_1848] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1647]
                                                                                            Group By Operator [GBY_1642] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1630] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1626]
                                                            <-Reducer 89 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1872]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1871] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1870] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 87 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_348]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_153] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1419] (rows=3828623 width=11)
                                                                          Conds:RS_149._col1=RS_1709._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 69 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1709]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1700] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1691] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_90]
                                                                        <-Reducer 97 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_149]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1418] (rows=3856907 width=4)
                                                                              Conds:RS_1866._col0=RS_1631._col0(Inner),Output:["_col1"]
                                                                            <-Map 93 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1631]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1626]
                                                                            <-Map 102 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1866]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1865] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1864] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_147_d3_d_date_sk_min) AND DynamicValue(RS_147_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_147_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_137] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 98 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1863]
                                                                                        Group By Operator [GBY_1862] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1648]
                                                                                            Group By Operator [GBY_1643] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1632] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1626]
                  <-Reducer 19 [CONTAINS]
                    Reduce Output Operator [RS_1498]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1497] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1496] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1494] (rows=40576 width=218)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1493] (rows=40576 width=243)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1492] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 18 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_578]
                                  Merge Join Operator [MERGEJOIN_1458] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1754]
                                      Select Operator [SEL_1753] (rows=1 width=8)
                                        Filter Operator [FIL_1752] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1751] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1750] (rows=1 width=8)
                                              Group By Operator [GBY_1749] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 16 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 15 [CONTAINS]
                                                  Reduce Output Operator [RS_1491]
                                                    Group By Operator [GBY_1490] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1489] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1487] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1486] (rows=14736682 width=0)
                                                            Conds:RS_1657._col0=RS_1639._col0(Inner),Output:["_col1"]
                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1639]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1626]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1657]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1654]
                                                <-Reducer 23 [CONTAINS]
                                                  Reduce Output Operator [RS_1516]
                                                    Group By Operator [GBY_1515] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1514] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1512] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1511] (rows=7676736 width=3)
                                                            Conds:RS_1791._col0=RS_1779._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1779]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1772]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1791]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1788]
                                                <-Reducer 39 [CONTAINS]
                                                  Reduce Output Operator [RS_1552]
                                                    Group By Operator [GBY_1551] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1550] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1548] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1547] (rows=3856907 width=3)
                                                            Conds:RS_1819._col0=RS_1807._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1807]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1800]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1819]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1816]
                                  <-Reducer 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1758]
                                      Select Operator [SEL_1757] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1756] (rows=1 width=120)
                                          predicate:(_col0 is not null and _col1 is not null)
                                          Group By Operator [GBY_1755] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                          <-Union 34 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 33 [CONTAINS]
                                              Reduce Output Operator [RS_1534]
                                                Group By Operator [GBY_1533] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1532] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1530] (rows=7676736 width=94)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1529] (rows=7676736 width=94)
                                                        Conds:RS_1798._col0=RS_1780._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1780]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1772]
                                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1798]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1795]
                                            <-Reducer 45 [CONTAINS]
                                              Reduce Output Operator [RS_1570]
                                                Group By Operator [GBY_1569] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1568] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1566] (rows=3856907 width=114)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1565] (rows=3856907 width=114)
                                                        Conds:RS_1826._col0=RS_1808._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1808]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1800]
                                                      <-Map 51 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1826]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1823]
                                            <-Reducer 49 [CONTAINS]
                                              Reduce Output Operator [RS_1588]
                                                Group By Operator [GBY_1587] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1586] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1584] (rows=14736682 width=0)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1583] (rows=14736682 width=0)
                                                        Conds:RS_1833._col0=RS_1640._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 93 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1640]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1626]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1833]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1830]
                              <-Reducer 67 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1770]
                                  Filter Operator [FIL_1769] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1768] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 66 [SIMPLE_EDGE]
                                      SHUFFLE [RS_571]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_570] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_568] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1453] (rows=3942084 width=126)
                                              Conds:RS_565._col1=RS_566._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 65 [SIMPLE_EDGE]
                                              SHUFFLE [RS_565]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1443] (rows=3942084 width=130)
                                                  Conds:RS_560._col1=RS_1712._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1712]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1703] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1694] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_90]
                                                <-Reducer 64 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_560]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1442] (rows=3942084 width=118)
                                                      Conds:RS_1763._col0=RS_1674._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 57 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1674]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1669]
                                                    <-Map 104 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1763]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1762] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1761] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_558_date_dim_d_date_sk_min) AND DynamicValue(RS_558_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_558_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_473] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1760]
                                                                Group By Operator [GBY_1759] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1681]
                                                                    Group By Operator [GBY_1678] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1675] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1669]
                                            <-Reducer 82 [SIMPLE_EDGE]
                                              SHUFFLE [RS_566]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_564] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1450] (rows=724 width=4)
                                                    Conds:RS_1713._col1, _col2, _col3=RS_1767._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1713]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1704] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1695] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_90]
                                                  <-Reducer 81 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1767]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1766] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1765] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1764] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 80 [SIMPLE_EDGE]
                                                            <-Reducer 79 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1847]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1846] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1845] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 71 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_502]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_112]
                                                            <-Reducer 86 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1861]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1860] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1859] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 83 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_522]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_132]
                                                            <-Reducer 90 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1875]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1874] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1873] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 87 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_543]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_153]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1472]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1471] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1470] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1468] (rows=40576 width=220)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1467] (rows=40576 width=243)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1466] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_189]
                                  Merge Join Operator [MERGEJOIN_1454] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1667]
                                      Select Operator [SEL_1666] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1665] (rows=1 width=120)
                                          predicate:(_col0 is not null and _col1 is not null)
                                          Group By Operator [GBY_1664] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                          <-Union 27 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 26 [CONTAINS]
                                              Reduce Output Operator [RS_1522]
                                                Group By Operator [GBY_1521] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1520] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1518] (rows=7676736 width=94)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1517] (rows=7676736 width=94)
                                                        Conds:RS_1796._col0=RS_1775._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1775]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1772]
                                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1796]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1795]
                                            <-Reducer 42 [CONTAINS]
                                              Reduce Output Operator [RS_1558]
                                                Group By Operator [GBY_1557] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1556] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1554] (rows=3856907 width=114)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1553] (rows=3856907 width=114)
                                                        Conds:RS_1824._col0=RS_1803._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1803]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1800]
                                                      <-Map 51 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1824]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1823]
                                            <-Reducer 47 [CONTAINS]
                                              Reduce Output Operator [RS_1576]
                                                Group By Operator [GBY_1575] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1574] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1572] (rows=14736682 width=0)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1571] (rows=14736682 width=0)
                                                        Conds:RS_1831._col0=RS_1635._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 93 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1635]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1626]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1831]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1830]
                                  <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1663]
                                      Select Operator [SEL_1662] (rows=1 width=8)
                                        Filter Operator [FIL_1661] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1660] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1659] (rows=1 width=8)
                                              Group By Operator [GBY_1658] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 2 [CONTAINS]
                                                  Reduce Output Operator [RS_1465]
                                                    Group By Operator [GBY_1464] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1463] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1461] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1460] (rows=14736682 width=0)
                                                            Conds:RS_1655._col0=RS_1633._col0(Inner),Output:["_col1"]
                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1633]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1626]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1655]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1654]
                                                <-Reducer 21 [CONTAINS]
                                                  Reduce Output Operator [RS_1504]
                                                    Group By Operator [GBY_1503] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1502] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1500] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1499] (rows=7676736 width=3)
                                                            Conds:RS_1789._col0=RS_1773._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1773]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1772]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1789]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1788]
                                                <-Reducer 37 [CONTAINS]
                                                  Reduce Output Operator [RS_1540]
                                                    Group By Operator [GBY_1539] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1538] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1536] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1535] (rows=3856907 width=3)
                                                            Conds:RS_1817._col0=RS_1801._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1801]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1800]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1817]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1816]
                              <-Reducer 56 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1720]
                                  Filter Operator [FIL_1719] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1718] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 55 [SIMPLE_EDGE]
                                      SHUFFLE [RS_182]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_181] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_179] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1451] (rows=15062131 width=11)
                                              Conds:RS_176._col1=RS_177._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 54 [SIMPLE_EDGE]
                                              SHUFFLE [RS_176]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1413] (rows=15062131 width=15)
                                                  Conds:RS_171._col1=RS_1705._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1705]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1696] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1687] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_90]
                                                <-Reducer 53 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_171]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1412] (rows=15062131 width=4)
                                                      Conds:RS_1686._col0=RS_1670._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 57 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1670]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1669]
                                                    <-Map 52 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1686]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1685] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1684] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_169_date_dim_d_date_sk_min) AND DynamicValue(RS_169_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_169_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_84] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 58 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1683]
                                                                Group By Operator [GBY_1682] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1679]
                                                                    Group By Operator [GBY_1676] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1671] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1669]
                                            <-Reducer 70 [SIMPLE_EDGE]
                                              SHUFFLE [RS_177]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_175] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1420] (rows=724 width=4)
                                                    Conds:RS_1706._col1, _col2, _col3=RS_1717._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1706]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1697] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1688] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_90]
                                                  <-Reducer 74 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1717]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1716] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1715] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1714] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 73 [SIMPLE_EDGE]
                                                            <-Reducer 72 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1841]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1840] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1839] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 71 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_113]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_112]
                                                            <-Reducer 84 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1855]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1854] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1853] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 83 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_133]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_132]
                                                            <-Reducer 88 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1869]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1868] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1867] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 87 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_154]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_153]

