Warning: Shuffle Join MERGEJOIN[1460][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[1472][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1462][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[1485][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[1464][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1498][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 105 (BROADCAST_EDGE)
Map 107 <- Reducer 102 (BROADCAST_EDGE)
Map 108 <- Reducer 104 (BROADCAST_EDGE)
Map 109 <- Reducer 63 (BROADCAST_EDGE)
Map 110 <- Reducer 68 (BROADCAST_EDGE)
Map 20 <- Reducer 25 (BROADCAST_EDGE)
Map 36 <- Reducer 41 (BROADCAST_EDGE)
Map 46 <- Reducer 106 (BROADCAST_EDGE)
Map 50 <- Reducer 29 (BROADCAST_EDGE)
Map 51 <- Reducer 43 (BROADCAST_EDGE)
Map 52 <- Reducer 58 (BROADCAST_EDGE)
Map 97 <- Reducer 100 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 100 <- Map 99 (CUSTOM_SIMPLE_EDGE)
Reducer 101 <- Map 107 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE)
Reducer 102 <- Map 99 (CUSTOM_SIMPLE_EDGE)
Reducer 103 <- Map 108 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE)
Reducer 104 <- Map 99 (CUSTOM_SIMPLE_EDGE)
Reducer 105 <- Map 99 (CUSTOM_SIMPLE_EDGE)
Reducer 106 <- Map 99 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Union 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 62 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 35 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 67 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 23 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 25 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 28 <- Union 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 35 <- Union 34 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 38 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 39 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 43 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 45 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 47 <- Map 46 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 48 <- Map 46 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 49 <- Map 46 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 5 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 52 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 54 <- Map 69 (SIMPLE_EDGE), Reducer 53 (SIMPLE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE), Reducer 71 (SIMPLE_EDGE)
Reducer 56 <- Reducer 55 (SIMPLE_EDGE)
Reducer 58 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 109 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 56 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Map 69 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE), Reducer 81 (SIMPLE_EDGE)
Reducer 62 <- Reducer 61 (SIMPLE_EDGE)
Reducer 63 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 110 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 65 <- Map 69 (SIMPLE_EDGE), Reducer 64 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (SIMPLE_EDGE), Reducer 90 (SIMPLE_EDGE)
Reducer 67 <- Reducer 66 (SIMPLE_EDGE)
Reducer 68 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Reducer 75 (SIMPLE_EDGE)
Reducer 71 <- Reducer 70 (SIMPLE_EDGE)
Reducer 72 <- Map 69 (SIMPLE_EDGE), Reducer 98 (SIMPLE_EDGE)
Reducer 73 <- Reducer 72 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 75 <- Union 74 (SIMPLE_EDGE)
Reducer 76 <- Map 69 (SIMPLE_EDGE), Reducer 101 (SIMPLE_EDGE)
Reducer 77 <- Reducer 76 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 78 <- Map 69 (SIMPLE_EDGE), Reducer 103 (SIMPLE_EDGE)
Reducer 79 <- Reducer 78 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 80 <- Map 69 (SIMPLE_EDGE), Reducer 85 (SIMPLE_EDGE)
Reducer 81 <- Reducer 80 (SIMPLE_EDGE)
Reducer 82 <- Map 69 (SIMPLE_EDGE), Reducer 98 (SIMPLE_EDGE)
Reducer 83 <- Reducer 82 (SIMPLE_EDGE), Union 84 (CONTAINS)
Reducer 85 <- Union 84 (SIMPLE_EDGE)
Reducer 86 <- Reducer 82 (SIMPLE_EDGE), Union 87 (CONTAINS)
Reducer 88 <- Union 87 (SIMPLE_EDGE)
Reducer 89 <- Map 69 (SIMPLE_EDGE), Reducer 88 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)
Reducer 90 <- Reducer 89 (SIMPLE_EDGE)
Reducer 91 <- Map 69 (SIMPLE_EDGE), Reducer 101 (SIMPLE_EDGE)
Reducer 92 <- Reducer 91 (SIMPLE_EDGE), Union 84 (CONTAINS)
Reducer 93 <- Reducer 91 (SIMPLE_EDGE), Union 87 (CONTAINS)
Reducer 94 <- Map 69 (SIMPLE_EDGE), Reducer 103 (SIMPLE_EDGE)
Reducer 95 <- Reducer 94 (SIMPLE_EDGE), Union 84 (CONTAINS)
Reducer 96 <- Reducer 94 (SIMPLE_EDGE), Union 87 (CONTAINS)
Reducer 98 <- Map 97 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1737]
        Limit [LIM_1736] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1735] (rows=304320 width=222)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1734]
              Select Operator [SEL_1733] (rows=304320 width=222)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1732] (rows=304320 width=230)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_1491]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1490] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1489] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1487] (rows=40576 width=222)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1486] (rows=40576 width=243)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1485] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_387]
                                  Merge Join Operator [MERGEJOIN_1462] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1743]
                                      Select Operator [SEL_1742] (rows=1 width=8)
                                        Filter Operator [FIL_1741] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1740] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1739] (rows=1 width=8)
                                              Group By Operator [GBY_1738] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 11 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 10 [CONTAINS]
                                                  Reduce Output Operator [RS_1484]
                                                    Group By Operator [GBY_1483] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1482] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1480] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1479] (rows=14736682 width=0)
                                                            Conds:RS_1662._col0=RS_1643._col0(Inner),Output:["_col1"]
                                                          <-Map 99 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1643]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1632] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1631] (rows=1957 width=8)
                                                                  predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                  TableScan [TS_99] (rows=73049 width=8)
                                                                    default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1662]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1660] (rows=550076554 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1659] (rows=550076554 width=7)
                                                                  predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_0] (rows=575995635 width=7)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity"]
                                                                  <-Reducer 105 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1658]
                                                                      Group By Operator [GBY_1657] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 99 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1655]
                                                                          Group By Operator [GBY_1650] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1640] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1632]
                                                <-Reducer 22 [CONTAINS]
                                                  Reduce Output Operator [RS_1516]
                                                    Group By Operator [GBY_1515] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1514] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1512] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1511] (rows=7676736 width=3)
                                                            Conds:RS_1805._col0=RS_1792._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1792]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1787] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1786] (rows=1957 width=8)
                                                                  predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                                  TableScan [TS_13] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1805]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1803] (rows=286549727 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1802] (rows=286549727 width=7)
                                                                  predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_10] (rows=287989836 width=7)
                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity"]
                                                                  <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1801]
                                                                      Group By Operator [GBY_1800] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1798]
                                                                          Group By Operator [GBY_1796] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1789] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1787]
                                                <-Reducer 38 [CONTAINS]
                                                  Reduce Output Operator [RS_1552]
                                                    Group By Operator [GBY_1551] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1550] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1548] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1547] (rows=3856907 width=3)
                                                            Conds:RS_1833._col0=RS_1820._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1820]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1815] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1814] (rows=1957 width=8)
                                                                  predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                                  TableScan [TS_24] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1833]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1831] (rows=143966864 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1830] (rows=143966864 width=7)
                                                                  predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                                                  TableScan [TS_21] (rows=144002668 width=7)
                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity"]
                                                                  <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1829]
                                                                      Group By Operator [GBY_1828] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1826]
                                                                          Group By Operator [GBY_1824] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1817] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1815]
                                  <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1747]
                                      Select Operator [SEL_1746] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1745] (rows=1 width=120)
                                          predicate:(_col0 is not null and _col1 is not null)
                                          Group By Operator [GBY_1744] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                          <-Union 31 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 30 [CONTAINS]
                                              Reduce Output Operator [RS_1534]
                                                Group By Operator [GBY_1533] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1532] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1530] (rows=7676736 width=94)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1529] (rows=7676736 width=94)
                                                        Conds:RS_1812._col0=RS_1793._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1793]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1787]
                                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1812]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1810] (rows=286549727 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1809] (rows=286549727 width=119)
                                                              predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_62_date_dim_d_date_sk_min) AND DynamicValue(RS_62_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_62_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_55] (rows=287989836 width=119)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                              <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1808]
                                                                  Group By Operator [GBY_1807] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1799]
                                                                      Group By Operator [GBY_1797] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1791] (rows=1957 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1787]
                                            <-Reducer 44 [CONTAINS]
                                              Reduce Output Operator [RS_1570]
                                                Group By Operator [GBY_1569] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1568] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1566] (rows=3856907 width=114)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1565] (rows=3856907 width=114)
                                                        Conds:RS_1840._col0=RS_1821._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1821]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1815]
                                                      <-Map 51 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1840]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1838] (rows=143966864 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1837] (rows=143966864 width=119)
                                                              predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_73_date_dim_d_date_sk_min) AND DynamicValue(RS_73_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_73_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_66] (rows=144002668 width=119)
                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                              <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1836]
                                                                  Group By Operator [GBY_1835] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1827]
                                                                      Group By Operator [GBY_1825] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1819] (rows=1957 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1815]
                                            <-Reducer 48 [CONTAINS]
                                              Reduce Output Operator [RS_1588]
                                                Group By Operator [GBY_1587] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1586] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1584] (rows=14736682 width=0)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1583] (rows=14736682 width=0)
                                                        Conds:RS_1847._col0=RS_1644._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 99 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1644]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1632]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1847]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1845] (rows=550076554 width=114)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1844] (rows=550076554 width=114)
                                                              predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_45] (rows=575995635 width=114)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                              <-Reducer 106 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1843]
                                                                  Group By Operator [GBY_1842] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 99 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1656]
                                                                      Group By Operator [GBY_1651] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1642] (rows=1957 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1632]
                              <-Reducer 62 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1761]
                                  Filter Operator [FIL_1760] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1759] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 61 [SIMPLE_EDGE]
                                      SHUFFLE [RS_380]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_379] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_377] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1458] (rows=7790806 width=106)
                                              Conds:RS_374._col1=RS_1758._col0(Inner),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 60 [SIMPLE_EDGE]
                                              SHUFFLE [RS_374]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1434] (rows=7790806 width=110)
                                                  Conds:RS_371._col1=RS_1720._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1720]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1708] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1699] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                        TableScan [TS_93] (rows=462000 width=15)
                                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                <-Reducer 59 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_371]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1433] (rows=7790806 width=98)
                                                      Conds:RS_1752._col0=RS_1678._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 57 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1678]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1675] (rows=50 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1674] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                            TableScan [TS_87] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 109 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1752]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1751] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1750] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_369_date_dim_d_date_sk_min) AND DynamicValue(RS_369_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_369_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_280] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1749]
                                                                Group By Operator [GBY_1748] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1686]
                                                                    Group By Operator [GBY_1683] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1679] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1675]
                                            <-Reducer 81 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1758]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_1757] (rows=362 width=4)
                                                  Output:["_col0"],keys:KEY._col0
                                                <-Reducer 80 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_365]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_364] (rows=362 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Merge Join Operator [MERGEJOIN_1441] (rows=724 width=4)
                                                        Conds:RS_1716._col1, _col2, _col3=RS_1756._col0, _col1, _col2(Inner),Output:["_col0"]
                                                      <-Map 69 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1716]
                                                          PartitionCols:_col1, _col2, _col3
                                                          Select Operator [SEL_1704] (rows=458612 width=15)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1695] (rows=458612 width=15)
                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                               Please refer to the previous TableScan [TS_93]
                                                      <-Reducer 85 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1756]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Select Operator [SEL_1755] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1754] (rows=1 width=20)
                                                              predicate:(_col3 = 3L)
                                                              Group By Operator [GBY_1753] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                              <-Union 84 [SIMPLE_EDGE]
                                                                <-Reducer 83 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1875]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1874] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1873] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 82 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_309]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_308] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1436] (rows=14628613 width=11)
                                                                              Conds:RS_304._col1=RS_1717._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 69 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1717]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1705] (rows=458612 width=15)
                                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                                  Filter Operator [FIL_1696] (rows=458612 width=15)
                                                                                    predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                     Please refer to the previous TableScan [TS_93]
                                                                            <-Reducer 98 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_304]
                                                                                PartitionCols:_col1
                                                                                Merge Join Operator [MERGEJOIN_1420] (rows=14736682 width=4)
                                                                                  Conds:RS_1853._col0=RS_1633._col0(Inner),Output:["_col1"]
                                                                                <-Map 99 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1633]
                                                                                    PartitionCols:_col0
                                                                                     Please refer to the previous Select Operator [SEL_1632]
                                                                                <-Map 97 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1853]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_1852] (rows=550076554 width=7)
                                                                                      Output:["_col0","_col1"]
                                                                                      Filter Operator [FIL_1851] (rows=550076554 width=7)
                                                                                        predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_106_d1_d_date_sk_min) AND DynamicValue(RS_106_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_106_d1_d_date_sk_bloom_filter)))
                                                                                        TableScan [TS_96] (rows=575995635 width=7)
                                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                        <-Reducer 100 [BROADCAST_EDGE] vectorized
                                                                                          BROADCAST [RS_1850]
                                                                                            Group By Operator [GBY_1849] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                            <-Map 99 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_1652]
                                                                                                Group By Operator [GBY_1647] (rows=1 width=12)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                  Select Operator [SEL_1634] (rows=1957 width=4)
                                                                                                    Output:["_col0"]
                                                                                                     Please refer to the previous Select Operator [SEL_1632]
                                                                <-Reducer 92 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1881]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1880] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1879] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 91 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_329]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_328] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1438] (rows=7620440 width=11)
                                                                              Conds:RS_324._col1=RS_1718._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 69 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1718]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1706] (rows=458612 width=15)
                                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                                  Filter Operator [FIL_1697] (rows=458612 width=15)
                                                                                    predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                     Please refer to the previous TableScan [TS_93]
                                                                            <-Reducer 101 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_324]
                                                                                PartitionCols:_col1
                                                                                Merge Join Operator [MERGEJOIN_1422] (rows=7676736 width=4)
                                                                                  Conds:RS_1861._col0=RS_1635._col0(Inner),Output:["_col1"]
                                                                                <-Map 99 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1635]
                                                                                    PartitionCols:_col0
                                                                                     Please refer to the previous Select Operator [SEL_1632]
                                                                                <-Map 107 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1861]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_1860] (rows=286549727 width=7)
                                                                                      Output:["_col0","_col1"]
                                                                                      Filter Operator [FIL_1859] (rows=286549727 width=7)
                                                                                        predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_126_d2_d_date_sk_min) AND DynamicValue(RS_126_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_126_d2_d_date_sk_bloom_filter)))
                                                                                        TableScan [TS_116] (rows=287989836 width=7)
                                                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                        <-Reducer 102 [BROADCAST_EDGE] vectorized
                                                                                          BROADCAST [RS_1858]
                                                                                            Group By Operator [GBY_1857] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                            <-Map 99 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_1653]
                                                                                                Group By Operator [GBY_1648] (rows=1 width=12)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                  Select Operator [SEL_1636] (rows=1957 width=4)
                                                                                                    Output:["_col0"]
                                                                                                     Please refer to the previous Select Operator [SEL_1632]
                                                                <-Reducer 95 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1887]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1886] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1885] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 94 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_350]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_349] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1440] (rows=3828623 width=11)
                                                                              Conds:RS_345._col1=RS_1719._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 69 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1719]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1707] (rows=458612 width=15)
                                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                                  Filter Operator [FIL_1698] (rows=458612 width=15)
                                                                                    predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                     Please refer to the previous TableScan [TS_93]
                                                                            <-Reducer 103 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_345]
                                                                                PartitionCols:_col1
                                                                                Merge Join Operator [MERGEJOIN_1424] (rows=3856907 width=4)
                                                                                  Conds:RS_1869._col0=RS_1637._col0(Inner),Output:["_col1"]
                                                                                <-Map 99 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1637]
                                                                                    PartitionCols:_col0
                                                                                     Please refer to the previous Select Operator [SEL_1632]
                                                                                <-Map 108 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1869]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_1868] (rows=143966864 width=7)
                                                                                      Output:["_col0","_col1"]
                                                                                      Filter Operator [FIL_1867] (rows=143966864 width=7)
                                                                                        predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_147_d3_d_date_sk_min) AND DynamicValue(RS_147_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_147_d3_d_date_sk_bloom_filter)))
                                                                                        TableScan [TS_137] (rows=144002668 width=7)
                                                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                        <-Reducer 104 [BROADCAST_EDGE] vectorized
                                                                                          BROADCAST [RS_1866]
                                                                                            Group By Operator [GBY_1865] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                            <-Map 99 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_1654]
                                                                                                Group By Operator [GBY_1649] (rows=1 width=12)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                  Select Operator [SEL_1638] (rows=1957 width=4)
                                                                                                    Output:["_col0"]
                                                                                                     Please refer to the previous Select Operator [SEL_1632]
                  <-Reducer 19 [CONTAINS]
                    Reduce Output Operator [RS_1504]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1503] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1502] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1500] (rows=40576 width=218)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1499] (rows=40576 width=243)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1498] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 18 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_584]
                                  Merge Join Operator [MERGEJOIN_1464] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1767]
                                      Select Operator [SEL_1766] (rows=1 width=8)
                                        Filter Operator [FIL_1765] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1764] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1763] (rows=1 width=8)
                                              Group By Operator [GBY_1762] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 16 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 15 [CONTAINS]
                                                  Reduce Output Operator [RS_1497]
                                                    Group By Operator [GBY_1496] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1495] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1493] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1492] (rows=14736682 width=0)
                                                            Conds:RS_1663._col0=RS_1645._col0(Inner),Output:["_col1"]
                                                          <-Map 99 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1645]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1632]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1663]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1660]
                                                <-Reducer 23 [CONTAINS]
                                                  Reduce Output Operator [RS_1522]
                                                    Group By Operator [GBY_1521] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1520] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1518] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1517] (rows=7676736 width=3)
                                                            Conds:RS_1806._col0=RS_1794._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1794]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1787]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1806]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1803]
                                                <-Reducer 39 [CONTAINS]
                                                  Reduce Output Operator [RS_1558]
                                                    Group By Operator [GBY_1557] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1556] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1554] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1553] (rows=3856907 width=3)
                                                            Conds:RS_1834._col0=RS_1822._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1822]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1815]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1834]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1831]
                                  <-Reducer 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1771]
                                      Select Operator [SEL_1770] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1769] (rows=1 width=120)
                                          predicate:(_col0 is not null and _col1 is not null)
                                          Group By Operator [GBY_1768] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                          <-Union 34 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 33 [CONTAINS]
                                              Reduce Output Operator [RS_1540]
                                                Group By Operator [GBY_1539] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1538] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1536] (rows=7676736 width=94)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1535] (rows=7676736 width=94)
                                                        Conds:RS_1813._col0=RS_1795._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1795]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1787]
                                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1813]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1810]
                                            <-Reducer 45 [CONTAINS]
                                              Reduce Output Operator [RS_1576]
                                                Group By Operator [GBY_1575] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1574] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1572] (rows=3856907 width=114)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1571] (rows=3856907 width=114)
                                                        Conds:RS_1841._col0=RS_1823._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1823]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1815]
                                                      <-Map 51 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1841]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1838]
                                            <-Reducer 49 [CONTAINS]
                                              Reduce Output Operator [RS_1594]
                                                Group By Operator [GBY_1593] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1592] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1590] (rows=14736682 width=0)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1589] (rows=14736682 width=0)
                                                        Conds:RS_1848._col0=RS_1646._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 99 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1646]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1632]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1848]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1845]
                              <-Reducer 67 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1785]
                                  Filter Operator [FIL_1784] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1783] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 66 [SIMPLE_EDGE]
                                      SHUFFLE [RS_577]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_576] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_574] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1459] (rows=3942084 width=126)
                                              Conds:RS_571._col1=RS_1782._col0(Inner),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 65 [SIMPLE_EDGE]
                                              SHUFFLE [RS_571]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1449] (rows=3942084 width=130)
                                                  Conds:RS_568._col1=RS_1722._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1722]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1710] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1701] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_93]
                                                <-Reducer 64 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_568]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1448] (rows=3942084 width=118)
                                                      Conds:RS_1776._col0=RS_1680._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 57 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1680]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1675]
                                                    <-Map 110 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1776]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1775] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1774] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_566_date_dim_d_date_sk_min) AND DynamicValue(RS_566_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_566_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_477] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1773]
                                                                Group By Operator [GBY_1772] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1687]
                                                                    Group By Operator [GBY_1684] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1681] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1675]
                                            <-Reducer 90 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1782]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_1781] (rows=362 width=4)
                                                  Output:["_col0"],keys:KEY._col0
                                                <-Reducer 89 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_562]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_561] (rows=362 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Merge Join Operator [MERGEJOIN_1456] (rows=724 width=4)
                                                        Conds:RS_1721._col1, _col2, _col3=RS_1780._col0, _col1, _col2(Inner),Output:["_col0"]
                                                      <-Map 69 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1721]
                                                          PartitionCols:_col1, _col2, _col3
                                                          Select Operator [SEL_1709] (rows=458612 width=15)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1700] (rows=458612 width=15)
                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                               Please refer to the previous TableScan [TS_93]
                                                      <-Reducer 88 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1780]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Select Operator [SEL_1779] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1778] (rows=1 width=20)
                                                              predicate:(_col3 = 3L)
                                                              Group By Operator [GBY_1777] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                              <-Union 87 [SIMPLE_EDGE]
                                                                <-Reducer 86 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1878]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1877] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1876] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 82 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_506]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_308]
                                                                <-Reducer 93 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1884]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1883] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1882] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 91 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_526]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_328]
                                                                <-Reducer 96 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1890]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1889] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1888] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 94 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_547]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                           Please refer to the previous Group By Operator [GBY_349]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1478]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1477] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1476] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1474] (rows=40576 width=220)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1473] (rows=40576 width=243)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1472] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_191]
                                  Merge Join Operator [MERGEJOIN_1460] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1673]
                                      Select Operator [SEL_1672] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1671] (rows=1 width=120)
                                          predicate:(_col0 is not null and _col1 is not null)
                                          Group By Operator [GBY_1670] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                          <-Union 27 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 26 [CONTAINS]
                                              Reduce Output Operator [RS_1528]
                                                Group By Operator [GBY_1527] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1526] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1524] (rows=7676736 width=94)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1523] (rows=7676736 width=94)
                                                        Conds:RS_1811._col0=RS_1790._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1790]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1787]
                                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1811]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1810]
                                            <-Reducer 42 [CONTAINS]
                                              Reduce Output Operator [RS_1564]
                                                Group By Operator [GBY_1563] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1562] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1560] (rows=3856907 width=114)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1559] (rows=3856907 width=114)
                                                        Conds:RS_1839._col0=RS_1818._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 40 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1818]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1815]
                                                      <-Map 51 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1839]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1838]
                                            <-Reducer 47 [CONTAINS]
                                              Reduce Output Operator [RS_1582]
                                                Group By Operator [GBY_1581] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                  Select Operator [SEL_1580] (rows=26270325 width=44)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1578] (rows=14736682 width=0)
                                                      Output:["_col0","_col1"]
                                                      Merge Join Operator [MERGEJOIN_1577] (rows=14736682 width=0)
                                                        Conds:RS_1846._col0=RS_1641._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 99 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1641]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1632]
                                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1846]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1845]
                                  <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1669]
                                      Select Operator [SEL_1668] (rows=1 width=8)
                                        Filter Operator [FIL_1667] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1666] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1665] (rows=1 width=8)
                                              Group By Operator [GBY_1664] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 2 [CONTAINS]
                                                  Reduce Output Operator [RS_1471]
                                                    Group By Operator [GBY_1470] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1469] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1467] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1466] (rows=14736682 width=0)
                                                            Conds:RS_1661._col0=RS_1639._col0(Inner),Output:["_col1"]
                                                          <-Map 99 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1639]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1632]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1661]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1660]
                                                <-Reducer 21 [CONTAINS]
                                                  Reduce Output Operator [RS_1510]
                                                    Group By Operator [GBY_1509] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1508] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1506] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1505] (rows=7676736 width=3)
                                                            Conds:RS_1804._col0=RS_1788._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1788]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1787]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1804]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1803]
                                                <-Reducer 37 [CONTAINS]
                                                  Reduce Output Operator [RS_1546]
                                                    Group By Operator [GBY_1545] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1544] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1542] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1541] (rows=3856907 width=3)
                                                            Conds:RS_1832._col0=RS_1816._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1816]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1815]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1832]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1831]
                              <-Reducer 56 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1731]
                                  Filter Operator [FIL_1730] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1729] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 55 [SIMPLE_EDGE]
                                      SHUFFLE [RS_184]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_183] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_181] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1457] (rows=15062131 width=11)
                                              Conds:RS_178._col1=RS_1728._col0(Inner),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 54 [SIMPLE_EDGE]
                                              SHUFFLE [RS_178]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1419] (rows=15062131 width=15)
                                                  Conds:RS_175._col1=RS_1715._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1715]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1703] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1694] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_93]
                                                <-Reducer 53 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_175]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1418] (rows=15062131 width=4)
                                                      Conds:RS_1692._col0=RS_1676._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 57 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1676]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1675]
                                                    <-Map 52 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1692]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1691] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1690] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_173_date_dim_d_date_sk_min) AND DynamicValue(RS_173_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_173_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_84] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 58 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1689]
                                                                Group By Operator [GBY_1688] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1685]
                                                                    Group By Operator [GBY_1682] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1677] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1675]
                                            <-Reducer 71 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1728]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_1727] (rows=362 width=4)
                                                  Output:["_col0"],keys:KEY._col0
                                                <-Reducer 70 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_169]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_168] (rows=362 width=4)
                                                      Output:["_col0"],keys:_col0
                                                      Merge Join Operator [MERGEJOIN_1426] (rows=724 width=4)
                                                        Conds:RS_1711._col1, _col2, _col3=RS_1726._col0, _col1, _col2(Inner),Output:["_col0"]
                                                      <-Map 69 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1711]
                                                          PartitionCols:_col1, _col2, _col3
                                                          Select Operator [SEL_1702] (rows=458612 width=15)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1693] (rows=458612 width=15)
                                                              predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                               Please refer to the previous TableScan [TS_93]
                                                      <-Reducer 75 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1726]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Select Operator [SEL_1725] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1724] (rows=1 width=20)
                                                              predicate:(_col3 = 3L)
                                                              Group By Operator [GBY_1723] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                              <-Union 74 [SIMPLE_EDGE]
                                                                <-Reducer 73 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1856]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1855] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1854] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 72 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_113]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_112] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1421] (rows=14628613 width=11)
                                                                              Conds:RS_108._col1=RS_1712._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 69 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1712]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1702]
                                                                            <-Reducer 98 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_108]
                                                                                PartitionCols:_col1
                                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_1420]
                                                                <-Reducer 77 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1864]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1863] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1862] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 76 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_133]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_132] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1423] (rows=7620440 width=11)
                                                                              Conds:RS_128._col1=RS_1713._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 69 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1713]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1702]
                                                                            <-Reducer 101 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_128]
                                                                                PartitionCols:_col1
                                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_1422]
                                                                <-Reducer 79 [CONTAINS] vectorized
                                                                  Reduce Output Operator [RS_1872]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1871] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                      Group By Operator [GBY_1870] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                      <-Reducer 78 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_154]
                                                                          PartitionCols:_col0, _col1, _col2
                                                                          Group By Operator [GBY_153] (rows=121728 width=19)
                                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                            Merge Join Operator [MERGEJOIN_1425] (rows=3828623 width=11)
                                                                              Conds:RS_149._col1=RS_1714._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                            <-Map 69 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1714]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1702]
                                                                            <-Reducer 103 [SIMPLE_EDGE]
                                                                              SHUFFLE [RS_149]
                                                                                PartitionCols:_col1
                                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_1424]

