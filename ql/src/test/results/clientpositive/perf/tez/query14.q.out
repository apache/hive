Warning: Shuffle Join MERGEJOIN[1440][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[1452][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1442][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[1465][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[1444][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1478][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 99 (BROADCAST_EDGE)
Map 101 <- Reducer 96 (BROADCAST_EDGE)
Map 102 <- Reducer 98 (BROADCAST_EDGE)
Map 103 <- Reducer 63 (BROADCAST_EDGE)
Map 104 <- Reducer 68 (BROADCAST_EDGE)
Map 20 <- Reducer 25 (BROADCAST_EDGE)
Map 36 <- Reducer 41 (BROADCAST_EDGE)
Map 46 <- Reducer 100 (BROADCAST_EDGE)
Map 50 <- Reducer 29 (BROADCAST_EDGE)
Map 51 <- Reducer 43 (BROADCAST_EDGE)
Map 52 <- Reducer 58 (BROADCAST_EDGE)
Map 91 <- Reducer 94 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 100 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Union 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 62 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 35 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 67 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 23 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 25 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 28 <- Union 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 24 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 24 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 35 <- Union 34 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 38 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 39 <- Map 36 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 43 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 45 <- Map 40 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 47 <- Map 46 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 48 <- Map 46 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 49 <- Map 46 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 5 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 52 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 54 <- Map 69 (SIMPLE_EDGE), Reducer 53 (SIMPLE_EDGE)
Reducer 55 <- Reducer 54 (ONE_TO_ONE_EDGE), Reducer 70 (SIMPLE_EDGE)
Reducer 56 <- Reducer 55 (SIMPLE_EDGE)
Reducer 58 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 103 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 56 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Map 69 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (ONE_TO_ONE_EDGE), Reducer 78 (SIMPLE_EDGE)
Reducer 62 <- Reducer 61 (SIMPLE_EDGE)
Reducer 63 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 104 (SIMPLE_EDGE), Map 57 (SIMPLE_EDGE)
Reducer 65 <- Map 69 (SIMPLE_EDGE), Reducer 64 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (ONE_TO_ONE_EDGE), Reducer 82 (SIMPLE_EDGE)
Reducer 67 <- Reducer 66 (SIMPLE_EDGE)
Reducer 68 <- Map 57 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Reducer 74 (ONE_TO_ONE_EDGE)
Reducer 71 <- Map 69 (SIMPLE_EDGE), Reducer 92 (SIMPLE_EDGE)
Reducer 72 <- Reducer 71 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 74 <- Union 73 (SIMPLE_EDGE)
Reducer 75 <- Reducer 71 (SIMPLE_EDGE), Union 76 (CONTAINS)
Reducer 77 <- Union 76 (SIMPLE_EDGE)
Reducer 78 <- Map 69 (SIMPLE_EDGE), Reducer 77 (ONE_TO_ONE_EDGE)
Reducer 79 <- Reducer 71 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 81 <- Union 80 (SIMPLE_EDGE)
Reducer 82 <- Map 69 (SIMPLE_EDGE), Reducer 81 (ONE_TO_ONE_EDGE)
Reducer 83 <- Map 69 (SIMPLE_EDGE), Reducer 95 (SIMPLE_EDGE)
Reducer 84 <- Reducer 83 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 85 <- Reducer 83 (SIMPLE_EDGE), Union 76 (CONTAINS)
Reducer 86 <- Reducer 83 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 87 <- Map 69 (SIMPLE_EDGE), Reducer 97 (SIMPLE_EDGE)
Reducer 88 <- Reducer 87 (SIMPLE_EDGE), Union 73 (CONTAINS)
Reducer 89 <- Reducer 87 (SIMPLE_EDGE), Union 76 (CONTAINS)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)
Reducer 90 <- Reducer 87 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 92 <- Map 91 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE)
Reducer 94 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 95 <- Map 101 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE)
Reducer 96 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 97 <- Map 102 (SIMPLE_EDGE), Map 93 (SIMPLE_EDGE)
Reducer 98 <- Map 93 (CUSTOM_SIMPLE_EDGE)
Reducer 99 <- Map 93 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1710]
        Limit [LIM_1709] (rows=7 width=192)
          Number of rows:100
          Select Operator [SEL_1708] (rows=7 width=192)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1707]
              Select Operator [SEL_1706] (rows=7 width=192)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1705] (rows=7 width=200)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_1471]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1470] (rows=7 width=200)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1469] (rows=3 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1467] (rows=1 width=223)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1466] (rows=1 width=244)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1465] (rows=1 width=244)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_377]
                                  Merge Join Operator [MERGEJOIN_1442] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1716]
                                      Select Operator [SEL_1715] (rows=1 width=8)
                                        Filter Operator [FIL_1714] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1713] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1712] (rows=1 width=8)
                                              Group By Operator [GBY_1711] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 11 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 10 [CONTAINS]
                                                  Reduce Output Operator [RS_1464]
                                                    Group By Operator [GBY_1463] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1462] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1460] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1459] (rows=14736682 width=0)
                                                            Conds:RS_1642._col0=RS_1623._col0(Inner),Output:["_col1"]
                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1623]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1612] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1611] (rows=1957 width=8)
                                                                  predicate:(d_date_sk is not null and d_year BETWEEN 1999 AND 2001)
                                                                  TableScan [TS_97] (rows=73049 width=8)
                                                                    default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1642]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1640] (rows=550076554 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1639] (rows=550076554 width=7)
                                                                  predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                                  TableScan [TS_0] (rows=575995635 width=7)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity"]
                                                                  <-Reducer 99 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1638]
                                                                      Group By Operator [GBY_1637] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_1635]
                                                                          Group By Operator [GBY_1630] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1620] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1612]
                                                <-Reducer 22 [CONTAINS]
                                                  Reduce Output Operator [RS_1496]
                                                    Group By Operator [GBY_1495] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1494] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1492] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1491] (rows=7676736 width=3)
                                                            Conds:RS_1770._col0=RS_1757._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1757]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1752] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1751] (rows=1957 width=8)
                                                                  predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                                  TableScan [TS_13] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1770]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1768] (rows=286549727 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1767] (rows=286549727 width=7)
                                                                  predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                                  TableScan [TS_10] (rows=287989836 width=7)
                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity"]
                                                                  <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1766]
                                                                      Group By Operator [GBY_1765] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1763]
                                                                          Group By Operator [GBY_1761] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1754] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1752]
                                                <-Reducer 38 [CONTAINS]
                                                  Reduce Output Operator [RS_1532]
                                                    Group By Operator [GBY_1531] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1530] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1528] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1527] (rows=3856907 width=3)
                                                            Conds:RS_1798._col0=RS_1785._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1785]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1780] (rows=1957 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1779] (rows=1957 width=8)
                                                                  predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                                  TableScan [TS_24] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1798]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1796] (rows=143966864 width=7)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_1795] (rows=143966864 width=7)
                                                                  predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                                                  TableScan [TS_21] (rows=144002668 width=7)
                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity"]
                                                                  <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_1794]
                                                                      Group By Operator [GBY_1793] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1791]
                                                                          Group By Operator [GBY_1789] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_1782] (rows=1957 width=4)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_1780]
                                  <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1719]
                                      Select Operator [SEL_1718] (rows=1 width=112)
                                        Output:["_col0"]
                                        Group By Operator [GBY_1717] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 31 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 30 [CONTAINS]
                                            Reduce Output Operator [RS_1514]
                                              Group By Operator [GBY_1513] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1512] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1510] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1509] (rows=7676736 width=94)
                                                      Conds:RS_1777._col0=RS_1758._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1758]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1752]
                                                    <-Map 50 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1777]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1775] (rows=286549727 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1774] (rows=286549727 width=119)
                                                            predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_62_date_dim_d_date_sk_min) AND DynamicValue(RS_62_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_62_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                            TableScan [TS_55] (rows=287989836 width=119)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1773]
                                                                Group By Operator [GBY_1772] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1764]
                                                                    Group By Operator [GBY_1762] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1756] (rows=1957 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1752]
                                          <-Reducer 44 [CONTAINS]
                                            Reduce Output Operator [RS_1550]
                                              Group By Operator [GBY_1549] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1548] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1546] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1545] (rows=3856907 width=114)
                                                      Conds:RS_1805._col0=RS_1786._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1786]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1780]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1805]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1803] (rows=143966864 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1802] (rows=143966864 width=119)
                                                            predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_73_date_dim_d_date_sk_min) AND DynamicValue(RS_73_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_73_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                                            TableScan [TS_66] (rows=144002668 width=119)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1801]
                                                                Group By Operator [GBY_1800] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1792]
                                                                    Group By Operator [GBY_1790] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1784] (rows=1957 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1780]
                                          <-Reducer 48 [CONTAINS]
                                            Reduce Output Operator [RS_1568]
                                              Group By Operator [GBY_1567] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1566] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1564] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1563] (rows=14736682 width=0)
                                                      Conds:RS_1812._col0=RS_1624._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 93 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1624]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1612]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1812]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1810] (rows=550076554 width=114)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1809] (rows=550076554 width=114)
                                                            predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                            TableScan [TS_45] (rows=575995635 width=114)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 100 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1808]
                                                                Group By Operator [GBY_1807] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1636]
                                                                    Group By Operator [GBY_1631] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1622] (rows=1957 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1612]
                              <-Reducer 62 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1730]
                                  Group By Operator [GBY_1729] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 61 [SIMPLE_EDGE]
                                    SHUFFLE [RS_371]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_370] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_368] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1438] (rows=1 width=128)
                                            Conds:RS_365._col1=RS_366._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                          <-Reducer 60 [ONE_TO_ONE_EDGE]
                                            FORWARD [RS_365]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1414] (rows=7790806 width=110)
                                                Conds:RS_360._col1=RS_1695._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                              <-Map 69 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1695]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1686] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1677] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                      TableScan [TS_88] (rows=462000 width=15)
                                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                              <-Reducer 59 [SIMPLE_EDGE]
                                                SHUFFLE [RS_360]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1413] (rows=7790806 width=98)
                                                    Conds:RS_1724._col0=RS_1657._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 57 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1657]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1654] (rows=50 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1653] (rows=50 width=12)
                                                          predicate:((d_moy = 11) and (d_year = 2000) and d_date_sk is not null)
                                                          TableScan [TS_85] (rows=73049 width=12)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                  <-Map 103 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1724]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1723] (rows=286549727 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1722] (rows=286549727 width=123)
                                                          predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_358_date_dim_d_date_sk_min) AND DynamicValue(RS_358_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_358_date_dim_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_273] (rows=287989836 width=123)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1721]
                                                              Group By Operator [GBY_1720] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1665]
                                                                  Group By Operator [GBY_1662] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1658] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1654]
                                          <-Reducer 78 [SIMPLE_EDGE]
                                            SHUFFLE [RS_366]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_364] (rows=362 width=4)
                                                Output:["_col0"],keys:_col0
                                                Merge Join Operator [MERGEJOIN_1421] (rows=724 width=4)
                                                  Conds:RS_1696._col1, _col2, _col3=RS_1728._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1696]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1687] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1678] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                         Please refer to the previous TableScan [TS_88]
                                                <-Reducer 77 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_1728]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1727] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1726] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1725] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 76 [SIMPLE_EDGE]
                                                          <-Reducer 75 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1824]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1823] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1822] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 71 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_302]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_110] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1401] (rows=14628613 width=11)
                                                                        Conds:RS_106._col1=RS_1692._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 69 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1692]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1683] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1674] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                               Please refer to the previous TableScan [TS_88]
                                                                      <-Reducer 92 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_106]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1400] (rows=14736682 width=4)
                                                                            Conds:RS_1818._col0=RS_1613._col0(Inner),Output:["_col1"]
                                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1613]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1612]
                                                                          <-Map 91 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1818]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1817] (rows=550076554 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1816] (rows=550076554 width=7)
                                                                                  predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_104_d1_d_date_sk_min) AND DynamicValue(RS_104_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_104_d1_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                                                  TableScan [TS_94] (rows=575995635 width=7)
                                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                  <-Reducer 94 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1815]
                                                                                      Group By Operator [GBY_1814] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1632]
                                                                                          Group By Operator [GBY_1627] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1614] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1612]
                                                          <-Reducer 85 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1838]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1837] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1836] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 83 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_322]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_130] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1403] (rows=7620440 width=11)
                                                                        Conds:RS_126._col1=RS_1693._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 69 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1693]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1684] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1675] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                               Please refer to the previous TableScan [TS_88]
                                                                      <-Reducer 95 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_126]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1402] (rows=7676736 width=4)
                                                                            Conds:RS_1832._col0=RS_1615._col0(Inner),Output:["_col1"]
                                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1615]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1612]
                                                                          <-Map 101 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1832]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1831] (rows=286549727 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1830] (rows=286549727 width=7)
                                                                                  predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_124_d2_d_date_sk_min) AND DynamicValue(RS_124_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_124_d2_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                  TableScan [TS_114] (rows=287989836 width=7)
                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                  <-Reducer 96 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1829]
                                                                                      Group By Operator [GBY_1828] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1633]
                                                                                          Group By Operator [GBY_1628] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1616] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1612]
                                                          <-Reducer 89 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1852]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1851] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1850] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 87 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_343]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_151] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1405] (rows=3828623 width=11)
                                                                        Conds:RS_147._col1=RS_1694._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 69 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1694]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1685] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1676] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                               Please refer to the previous TableScan [TS_88]
                                                                      <-Reducer 97 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_147]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1404] (rows=3856907 width=4)
                                                                            Conds:RS_1846._col0=RS_1617._col0(Inner),Output:["_col1"]
                                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1617]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1612]
                                                                          <-Map 102 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1846]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1845] (rows=143966864 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1844] (rows=143966864 width=7)
                                                                                  predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_145_d3_d_date_sk_min) AND DynamicValue(RS_145_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_145_d3_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                  TableScan [TS_135] (rows=144002668 width=7)
                                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                  <-Reducer 98 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1843]
                                                                                      Group By Operator [GBY_1842] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 93 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        PARTITION_ONLY_SHUFFLE [RS_1634]
                                                                                          Group By Operator [GBY_1629] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1618] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1612]
                  <-Reducer 19 [CONTAINS]
                    Reduce Output Operator [RS_1484]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1483] (rows=7 width=200)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1482] (rows=3 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1480] (rows=1 width=219)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1479] (rows=1 width=244)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1478] (rows=1 width=244)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 18 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_569]
                                  Merge Join Operator [MERGEJOIN_1444] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1736]
                                      Select Operator [SEL_1735] (rows=1 width=8)
                                        Filter Operator [FIL_1734] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1733] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1732] (rows=1 width=8)
                                              Group By Operator [GBY_1731] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 16 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 15 [CONTAINS]
                                                  Reduce Output Operator [RS_1477]
                                                    Group By Operator [GBY_1476] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1475] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1473] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1472] (rows=14736682 width=0)
                                                            Conds:RS_1643._col0=RS_1625._col0(Inner),Output:["_col1"]
                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1625]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1612]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1643]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1640]
                                                <-Reducer 23 [CONTAINS]
                                                  Reduce Output Operator [RS_1502]
                                                    Group By Operator [GBY_1501] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1500] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1498] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1497] (rows=7676736 width=3)
                                                            Conds:RS_1771._col0=RS_1759._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1759]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1752]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1771]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1768]
                                                <-Reducer 39 [CONTAINS]
                                                  Reduce Output Operator [RS_1538]
                                                    Group By Operator [GBY_1537] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1536] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1534] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1533] (rows=3856907 width=3)
                                                            Conds:RS_1799._col0=RS_1787._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1787]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1780]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1799]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1796]
                                  <-Reducer 35 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1739]
                                      Select Operator [SEL_1738] (rows=1 width=112)
                                        Output:["_col0"]
                                        Group By Operator [GBY_1737] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 34 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 33 [CONTAINS]
                                            Reduce Output Operator [RS_1520]
                                              Group By Operator [GBY_1519] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1518] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1516] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1515] (rows=7676736 width=94)
                                                      Conds:RS_1778._col0=RS_1760._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1760]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1752]
                                                    <-Map 50 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1778]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1775]
                                          <-Reducer 45 [CONTAINS]
                                            Reduce Output Operator [RS_1556]
                                              Group By Operator [GBY_1555] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1554] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1552] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1551] (rows=3856907 width=114)
                                                      Conds:RS_1806._col0=RS_1788._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1788]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1780]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1806]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1803]
                                          <-Reducer 49 [CONTAINS]
                                            Reduce Output Operator [RS_1574]
                                              Group By Operator [GBY_1573] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1572] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1570] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1569] (rows=14736682 width=0)
                                                      Conds:RS_1813._col0=RS_1626._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 93 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1626]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1612]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1813]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1810]
                              <-Reducer 67 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1750]
                                  Group By Operator [GBY_1749] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 66 [SIMPLE_EDGE]
                                    SHUFFLE [RS_563]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_562] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_560] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1439] (rows=1 width=128)
                                            Conds:RS_557._col1=RS_558._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                          <-Reducer 65 [ONE_TO_ONE_EDGE]
                                            FORWARD [RS_557]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1429] (rows=3942084 width=130)
                                                Conds:RS_552._col1=RS_1697._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                              <-Map 69 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1697]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1688] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1679] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                       Please refer to the previous TableScan [TS_88]
                                              <-Reducer 64 [SIMPLE_EDGE]
                                                SHUFFLE [RS_552]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1428] (rows=3942084 width=118)
                                                    Conds:RS_1744._col0=RS_1659._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 57 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1659]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1654]
                                                  <-Map 104 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1744]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1743] (rows=143966864 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1742] (rows=143966864 width=123)
                                                          predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_550_date_dim_d_date_sk_min) AND DynamicValue(RS_550_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_550_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_465] (rows=144002668 width=123)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1741]
                                                              Group By Operator [GBY_1740] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1666]
                                                                  Group By Operator [GBY_1663] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1660] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1654]
                                          <-Reducer 82 [SIMPLE_EDGE]
                                            SHUFFLE [RS_558]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_556] (rows=362 width=4)
                                                Output:["_col0"],keys:_col0
                                                Merge Join Operator [MERGEJOIN_1436] (rows=724 width=4)
                                                  Conds:RS_1698._col1, _col2, _col3=RS_1748._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1698]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1689] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1680] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                         Please refer to the previous TableScan [TS_88]
                                                <-Reducer 81 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_1748]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1747] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1746] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1745] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 80 [SIMPLE_EDGE]
                                                          <-Reducer 79 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1827]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1826] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1825] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 71 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_494]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_110]
                                                          <-Reducer 86 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1841]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1840] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1839] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 83 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_514]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_130]
                                                          <-Reducer 90 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1855]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1854] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1853] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 87 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_535]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_151]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1458]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1457] (rows=7 width=200)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1456] (rows=3 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1454] (rows=1 width=221)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1453] (rows=1 width=244)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1452] (rows=1 width=244)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_186]
                                  Merge Join Operator [MERGEJOIN_1440] (rows=1 width=112)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1652]
                                      Select Operator [SEL_1651] (rows=1 width=112)
                                        Output:["_col0"]
                                        Group By Operator [GBY_1650] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 27 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 26 [CONTAINS]
                                            Reduce Output Operator [RS_1508]
                                              Group By Operator [GBY_1507] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1506] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1504] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1503] (rows=7676736 width=94)
                                                      Conds:RS_1776._col0=RS_1755._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1755]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1752]
                                                    <-Map 50 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1776]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1775]
                                          <-Reducer 42 [CONTAINS]
                                            Reduce Output Operator [RS_1544]
                                              Group By Operator [GBY_1543] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1542] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1540] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1539] (rows=3856907 width=114)
                                                      Conds:RS_1804._col0=RS_1783._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1783]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1780]
                                                    <-Map 51 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1804]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1803]
                                          <-Reducer 47 [CONTAINS]
                                            Reduce Output Operator [RS_1562]
                                              Group By Operator [GBY_1561] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1560] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1558] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1557] (rows=14736682 width=0)
                                                      Conds:RS_1811._col0=RS_1621._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 93 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1621]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1612]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1811]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1810]
                                  <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1649]
                                      Select Operator [SEL_1648] (rows=1 width=8)
                                        Filter Operator [FIL_1647] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1646] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_1645] (rows=1 width=8)
                                              Group By Operator [GBY_1644] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                              <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                                <-Reducer 2 [CONTAINS]
                                                  Reduce Output Operator [RS_1451]
                                                    Group By Operator [GBY_1450] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1449] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1447] (rows=14736682 width=0)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1446] (rows=14736682 width=0)
                                                            Conds:RS_1641._col0=RS_1619._col0(Inner),Output:["_col1"]
                                                          <-Map 93 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1619]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1612]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1641]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1640]
                                                <-Reducer 21 [CONTAINS]
                                                  Reduce Output Operator [RS_1490]
                                                    Group By Operator [GBY_1489] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1488] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1486] (rows=7676736 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1485] (rows=7676736 width=3)
                                                            Conds:RS_1769._col0=RS_1753._col0(Inner),Output:["_col1"]
                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1753]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1752]
                                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1769]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1768]
                                                <-Reducer 37 [CONTAINS]
                                                  Reduce Output Operator [RS_1526]
                                                    Group By Operator [GBY_1525] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(_col0)"]
                                                      Select Operator [SEL_1524] (rows=26270325 width=1)
                                                        Output:["_col0"]
                                                        Select Operator [SEL_1522] (rows=3856907 width=3)
                                                          Output:["_col0"]
                                                          Merge Join Operator [MERGEJOIN_1521] (rows=3856907 width=3)
                                                            Conds:RS_1797._col0=RS_1781._col0(Inner),Output:["_col1"]
                                                          <-Map 40 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1781]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1780]
                                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1797]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_1796]
                              <-Reducer 56 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1704]
                                  Group By Operator [GBY_1703] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 55 [SIMPLE_EDGE]
                                    SHUFFLE [RS_180]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_179] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_177] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1437] (rows=1 width=128)
                                            Conds:RS_174._col1=RS_175._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                          <-Reducer 54 [ONE_TO_ONE_EDGE]
                                            FORWARD [RS_174]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1399] (rows=15062131 width=15)
                                                Conds:RS_169._col1=RS_1690._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                              <-Map 69 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1690]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1681] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1672] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                       Please refer to the previous TableScan [TS_88]
                                              <-Reducer 53 [SIMPLE_EDGE]
                                                SHUFFLE [RS_169]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1398] (rows=15062131 width=4)
                                                    Conds:RS_1671._col0=RS_1655._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 57 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1655]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1654]
                                                  <-Map 52 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1671]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1670] (rows=550076554 width=118)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1669] (rows=550076554 width=118)
                                                          predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_167_date_dim_d_date_sk_min) AND DynamicValue(RS_167_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_167_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_82] (rows=575995635 width=118)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 58 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1668]
                                                              Group By Operator [GBY_1667] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1664]
                                                                  Group By Operator [GBY_1661] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1656] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1654]
                                          <-Reducer 70 [SIMPLE_EDGE]
                                            SHUFFLE [RS_175]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_173] (rows=362 width=4)
                                                Output:["_col0"],keys:_col0
                                                Merge Join Operator [MERGEJOIN_1406] (rows=724 width=4)
                                                  Conds:RS_1691._col1, _col2, _col3=RS_1702._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 69 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1691]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1682] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1673] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                         Please refer to the previous TableScan [TS_88]
                                                <-Reducer 74 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_1702]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1701] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1700] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1699] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 73 [SIMPLE_EDGE]
                                                          <-Reducer 72 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1821]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1820] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1819] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 71 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_111]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_110]
                                                          <-Reducer 84 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1835]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1834] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1833] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 83 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_131]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_130]
                                                          <-Reducer 88 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1849]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1848] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1847] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 87 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_152]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_151]

