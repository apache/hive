Warning: Shuffle Join MERGEJOIN[1138][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 17' is a cross product
Warning: Shuffle Join MERGEJOIN[1174][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[1148][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 58' is a cross product
Warning: Shuffle Join MERGEJOIN[1193][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 59' is a cross product
Warning: Shuffle Join MERGEJOIN[1158][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 96' is a cross product
Warning: Shuffle Join MERGEJOIN[1212][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 97' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@avg_sales
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@avg_sales
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 6 (BROADCAST_EDGE)
Map 11 <- Reducer 14 (BROADCAST_EDGE)
Map 7 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE), Union 3 (CONTAINS)

Vertex dependency in Stage-4
<<<<<<< HEAD
<<<<<<< HEAD
Map 26 <- Reducer 42 (BROADCAST_EDGE), Reducer 47 (BROADCAST_EDGE)
Map 55 <- Reducer 42 (BROADCAST_EDGE), Reducer 47 (BROADCAST_EDGE)
Map 56 <- Reducer 42 (BROADCAST_EDGE), Reducer 47 (BROADCAST_EDGE)
=======
Map 26 <- Reducer 50 (BROADCAST_EDGE), Reducer 57 (BROADCAST_EDGE)
Map 71 <- Reducer 53 (BROADCAST_EDGE), Reducer 63 (BROADCAST_EDGE)
Map 72 <- Reducer 56 (BROADCAST_EDGE), Reducer 69 (BROADCAST_EDGE)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
Map 109 <- Reducer 116 (BROADCAST_EDGE)
Map 118 <- Reducer 123 (BROADCAST_EDGE)
Map 125 <- Reducer 130 (BROADCAST_EDGE)
Map 23 <- Reducer 29 (BROADCAST_EDGE)
Map 33 <- Reducer 40 (BROADCAST_EDGE)
Map 42 <- Reducer 47 (BROADCAST_EDGE)
Map 49 <- Reducer 54 (BROADCAST_EDGE)
Map 61 <- Reducer 67 (BROADCAST_EDGE)
Map 71 <- Reducer 78 (BROADCAST_EDGE)
Map 80 <- Reducer 85 (BROADCAST_EDGE)
Map 87 <- Reducer 92 (BROADCAST_EDGE)
Map 99 <- Reducer 105 (BROADCAST_EDGE)
Reducer 100 <- Map 104 (SIMPLE_EDGE), Map 99 (SIMPLE_EDGE)
Reducer 101 <- Map 106 (SIMPLE_EDGE), Reducer 100 (SIMPLE_EDGE)
Reducer 102 <- Reducer 101 (SIMPLE_EDGE), Reducer 108 (SIMPLE_EDGE)
Reducer 103 <- Reducer 102 (SIMPLE_EDGE)
Reducer 105 <- Map 104 (CUSTOM_SIMPLE_EDGE)
Reducer 108 <- Map 107 (SIMPLE_EDGE), Reducer 114 (SIMPLE_EDGE)
Reducer 110 <- Map 109 (SIMPLE_EDGE), Map 115 (SIMPLE_EDGE)
Reducer 111 <- Map 117 (SIMPLE_EDGE), Reducer 110 (SIMPLE_EDGE)
Reducer 112 <- Reducer 111 (SIMPLE_EDGE), Union 113 (CONTAINS)
Reducer 114 <- Union 113 (SIMPLE_EDGE)
Reducer 116 <- Map 115 (CUSTOM_SIMPLE_EDGE)
Reducer 119 <- Map 118 (SIMPLE_EDGE), Map 122 (SIMPLE_EDGE)
Reducer 120 <- Map 124 (SIMPLE_EDGE), Reducer 119 (SIMPLE_EDGE)
Reducer 121 <- Reducer 120 (SIMPLE_EDGE), Union 113 (CONTAINS)
Reducer 123 <- Map 122 (CUSTOM_SIMPLE_EDGE)
Reducer 126 <- Map 125 (SIMPLE_EDGE), Map 129 (SIMPLE_EDGE)
Reducer 127 <- Map 131 (SIMPLE_EDGE), Reducer 126 (SIMPLE_EDGE)
Reducer 128 <- Reducer 127 (SIMPLE_EDGE), Union 113 (CONTAINS)
Reducer 130 <- Map 129 (CUSTOM_SIMPLE_EDGE)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 22 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 20 <- Union 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
<<<<<<< HEAD
Reducer 22 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
<<<<<<< HEAD
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 38 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 24 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 40 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 28 <- Map 54 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 26 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 32 <- Map 54 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 35 <- Union 34 (SIMPLE_EDGE)
Reducer 36 <- Map 54 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Reducer 36 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 38 <- Reducer 37 (SIMPLE_EDGE)
Reducer 39 <- Reducer 36 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE)
Reducer 42 <- Map 41 (CUSTOM_SIMPLE_EDGE)
Reducer 43 <- Map 41 (SIMPLE_EDGE), Map 55 (SIMPLE_EDGE)
Reducer 44 <- Map 54 (SIMPLE_EDGE), Reducer 43 (SIMPLE_EDGE)
Reducer 45 <- Map 41 (SIMPLE_EDGE), Map 56 (SIMPLE_EDGE)
Reducer 46 <- Map 54 (SIMPLE_EDGE), Reducer 45 (SIMPLE_EDGE)
Reducer 47 <- Map 41 (CUSTOM_SIMPLE_EDGE)
Reducer 48 <- Map 41 (SIMPLE_EDGE), Map 55 (SIMPLE_EDGE)
Reducer 49 <- Map 54 (SIMPLE_EDGE), Reducer 48 (SIMPLE_EDGE)
Reducer 50 <- Reducer 49 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 51 <- Map 41 (SIMPLE_EDGE), Map 56 (SIMPLE_EDGE)
Reducer 52 <- Map 54 (SIMPLE_EDGE), Reducer 51 (SIMPLE_EDGE)
Reducer 53 <- Reducer 52 (SIMPLE_EDGE), Union 34 (CONTAINS)
=======
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 42 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 24 <- Map 15 (CUSTOM_SIMPLE_EDGE), Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 48 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Map 49 (SIMPLE_EDGE)
Reducer 28 <- Map 70 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 26 (SIMPLE_EDGE), Map 49 (SIMPLE_EDGE)
Reducer 32 <- Map 70 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 35 <- Union 34 (SIMPLE_EDGE)
Reducer 36 <- Map 70 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Reducer 32 (SIMPLE_EDGE), Union 38 (CONTAINS)
Reducer 39 <- Union 38 (SIMPLE_EDGE)
Reducer 40 <- Map 70 (SIMPLE_EDGE), Reducer 39 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (SIMPLE_EDGE), Reducer 52 (SIMPLE_EDGE)
Reducer 42 <- Reducer 41 (SIMPLE_EDGE)
Reducer 43 <- Reducer 32 (SIMPLE_EDGE), Union 44 (CONTAINS)
Reducer 45 <- Union 44 (SIMPLE_EDGE)
Reducer 46 <- Map 70 (SIMPLE_EDGE), Reducer 45 (SIMPLE_EDGE)
Reducer 47 <- Reducer 46 (SIMPLE_EDGE), Reducer 55 (SIMPLE_EDGE)
Reducer 48 <- Reducer 47 (SIMPLE_EDGE)
Reducer 50 <- Map 49 (CUSTOM_SIMPLE_EDGE)
Reducer 51 <- Map 49 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE)
Reducer 52 <- Map 70 (SIMPLE_EDGE), Reducer 51 (SIMPLE_EDGE)
Reducer 53 <- Map 49 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 49 (SIMPLE_EDGE), Map 72 (SIMPLE_EDGE)
Reducer 55 <- Map 70 (SIMPLE_EDGE), Reducer 54 (SIMPLE_EDGE)
Reducer 56 <- Map 49 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 49 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 49 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE)
Reducer 59 <- Map 70 (SIMPLE_EDGE), Reducer 58 (SIMPLE_EDGE)
Reducer 60 <- Reducer 59 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 61 <- Reducer 59 (SIMPLE_EDGE), Union 38 (CONTAINS)
Reducer 62 <- Reducer 59 (SIMPLE_EDGE), Union 44 (CONTAINS)
Reducer 63 <- Map 49 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 49 (SIMPLE_EDGE), Map 72 (SIMPLE_EDGE)
Reducer 65 <- Map 70 (SIMPLE_EDGE), Reducer 64 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (SIMPLE_EDGE), Union 34 (CONTAINS)
Reducer 67 <- Reducer 65 (SIMPLE_EDGE), Union 38 (CONTAINS)
Reducer 68 <- Reducer 65 (SIMPLE_EDGE), Union 44 (CONTAINS)
Reducer 69 <- Map 49 (CUSTOM_SIMPLE_EDGE)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
Reducer 24 <- Map 23 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 25 <- Map 30 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 29 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 31 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 34 <- Map 33 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 35 <- Map 41 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Reducer 35 (SIMPLE_EDGE), Union 37 (CONTAINS)
Reducer 38 <- Union 37 (SIMPLE_EDGE)
Reducer 40 <- Map 39 (CUSTOM_SIMPLE_EDGE)
Reducer 43 <- Map 42 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE)
Reducer 44 <- Map 48 (SIMPLE_EDGE), Reducer 43 (SIMPLE_EDGE)
Reducer 45 <- Reducer 44 (SIMPLE_EDGE), Union 37 (CONTAINS)
Reducer 47 <- Map 46 (CUSTOM_SIMPLE_EDGE)
Reducer 50 <- Map 49 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 51 <- Map 55 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE), Union 37 (CONTAINS)
Reducer 54 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 56 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 60 (CUSTOM_SIMPLE_EDGE), Reducer 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Reducer 58 (CUSTOM_SIMPLE_EDGE), Reducer 65 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 62 <- Map 61 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE)
Reducer 63 <- Map 68 (SIMPLE_EDGE), Reducer 62 (SIMPLE_EDGE)
Reducer 64 <- Reducer 63 (SIMPLE_EDGE), Reducer 70 (SIMPLE_EDGE)
Reducer 65 <- Reducer 64 (SIMPLE_EDGE)
Reducer 67 <- Map 66 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Reducer 76 (SIMPLE_EDGE)
Reducer 72 <- Map 71 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE)
Reducer 73 <- Map 79 (SIMPLE_EDGE), Reducer 72 (SIMPLE_EDGE)
Reducer 74 <- Reducer 73 (SIMPLE_EDGE), Union 75 (CONTAINS)
Reducer 76 <- Union 75 (SIMPLE_EDGE)
Reducer 78 <- Map 77 (CUSTOM_SIMPLE_EDGE)
Reducer 81 <- Map 80 (SIMPLE_EDGE), Map 84 (SIMPLE_EDGE)
Reducer 82 <- Map 86 (SIMPLE_EDGE), Reducer 81 (SIMPLE_EDGE)
Reducer 83 <- Reducer 82 (SIMPLE_EDGE), Union 75 (CONTAINS)
Reducer 85 <- Map 84 (CUSTOM_SIMPLE_EDGE)
Reducer 88 <- Map 87 (SIMPLE_EDGE), Map 91 (SIMPLE_EDGE)
Reducer 89 <- Map 93 (SIMPLE_EDGE), Reducer 88 (SIMPLE_EDGE)
Reducer 90 <- Reducer 89 (SIMPLE_EDGE), Union 75 (CONTAINS)
Reducer 92 <- Map 91 (CUSTOM_SIMPLE_EDGE)
Reducer 95 <- Map 94 (CUSTOM_SIMPLE_EDGE)
Reducer 96 <- Map 98 (CUSTOM_SIMPLE_EDGE), Reducer 95 (CUSTOM_SIMPLE_EDGE)
Reducer 97 <- Reducer 103 (CUSTOM_SIMPLE_EDGE), Reducer 96 (CUSTOM_SIMPLE_EDGE), Union 19 (CONTAINS)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"

Stage-3
  Fetch Operator
    limit:100
    Stage-4
      Reducer 21 vectorized
<<<<<<< HEAD
<<<<<<< HEAD
      File Output Operator [FS_1276]
        Limit [LIM_1275] (rows=100 width=253)
=======
      File Output Operator [FS_1270]
        Limit [LIM_1269] (rows=100 width=253)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
          Number of rows:100
          Select Operator [SEL_1268] (rows=304320 width=253)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 20 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1267]
              Select Operator [SEL_1266] (rows=304320 width=253)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
<<<<<<< HEAD
                Group By Operator [GBY_1271] (rows=304320 width=253)
=======
      File Output Operator [FS_1322]
        Limit [LIM_1321] (rows=100 width=253)
          Number of rows:100
          Select Operator [SEL_1320] (rows=304320 width=253)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 20 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1319]
              Select Operator [SEL_1318] (rows=304320 width=253)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1317] (rows=304320 width=253)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                Group By Operator [GBY_1265] (rows=304320 width=253)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 19 [SIMPLE_EDGE]
                  <-Reducer 18 [CONTAINS]
                    Reduce Output Operator [RS_1180]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1179] (rows=608640 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1178] (rows=121728 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1176] (rows=40576 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1175] (rows=40576 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1174] (rows=121728 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_254]
                                  Merge Join Operator [MERGEJOIN_1138] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
<<<<<<< HEAD
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                    PARTITION_ONLY_SHUFFLE [RS_1212]
                                      Select Operator [SEL_1210] (rows=1 width=112)
=======
                                    PARTITION_ONLY_SHUFFLE [RS_1236]
                                      Select Operator [SEL_1234] (rows=1 width=112)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                  <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1240]
                                      Select Operator [SEL_1239] (rows=1 width=112)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                        Output:["_col0"]
                                        Filter Operator [FIL_1238] (rows=1 width=112)
                                          predicate:average_sales is not null
                                          TableScan [TS_145] (rows=1 width=112)
                                            default@avg_sales,avg_sales,Tbl:COMPLETE,Col:NONE,Output:["average_sales"]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
<<<<<<< HEAD
                                    PARTITION_ONLY_SHUFFLE [RS_1218]
                                      Select Operator [SEL_1217] (rows=1 width=8)
                                        Filter Operator [FIL_1216] (rows=1 width=8)
=======
                                    PARTITION_ONLY_SHUFFLE [RS_1237]
                                      Select Operator [SEL_1236] (rows=1 width=8)
                                        Filter Operator [FIL_1235] (rows=1 width=8)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1234] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                            PARTITION_ONLY_SHUFFLE [RS_1211]
                                              Group By Operator [GBY_1209] (rows=1 width=8)
=======
                                    PARTITION_ONLY_SHUFFLE [RS_1242]
                                      Select Operator [SEL_1241] (rows=1 width=8)
                                        Filter Operator [FIL_1240] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1239] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1235]
                                              Group By Operator [GBY_1233] (rows=1 width=8)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_1207] (rows=1 width=0)
                                                   Please refer to the previous TableScan [TS_137]
                              <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                PARTITION_ONLY_SHUFFLE [RS_1270]
                                  Filter Operator [FIL_1269] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1268] (rows=121728 width=131)
=======
                                PARTITION_ONLY_SHUFFLE [RS_1316]
                                  Filter Operator [FIL_1315] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1314] (rows=121728 width=131)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                            PARTITION_ONLY_SHUFFLE [RS_1233]
                                              Group By Operator [GBY_1232] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_1231] (rows=1 width=0)
                                                  TableScan [TS_137] (rows=1 width=0)
                                                    default@avg_sales,avg_sales,Tbl:PARTIAL,Col:COMPLETE
                              <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1264]
                                  Filter Operator [FIL_1263] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1262] (rows=121728 width=131)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 26 [SIMPLE_EDGE]
                                      SHUFFLE [RS_247]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_246] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_244] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1168] (rows=15062131 width=11)
                                              Conds:RS_241._col3=RS_242._col0(Left Semi),Output:["_col0","_col1","_col2","_col4","_col5"]
<<<<<<< HEAD
<<<<<<< HEAD
=======
                                            <-Reducer 28 [SIMPLE_EDGE]
=======
                                            <-Reducer 25 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                              SHUFFLE [RS_241]
                                                PartitionCols:_col3
                                                Select Operator [SEL_163] (rows=15062131 width=15)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Merge Join Operator [MERGEJOIN_1140] (rows=15062131 width=15)
<<<<<<< HEAD
                                                    Conds:RS_160._col1=RS_1301._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1301]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1292] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1283] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                          TableScan [TS_154] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 27 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_160]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1139] (rows=15062131 width=4)
                                                        Conds:RS_1281._col0=RS_1249._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 49 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1249]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1247] (rows=50 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1245] (rows=50 width=12)
                                                              predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                              TableScan [TS_151] (rows=73049 width=12)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1281]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1279] (rows=550076554 width=118)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1277] (rows=550076554 width=118)
                                                              predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_158_date_dim_d_date_sk_min) AND DynamicValue(RS_158_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_158_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_148] (rows=575995635 width=118)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                              <-Reducer 50 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1274]
                                                                  Group By Operator [GBY_1273] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 49 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1267]
                                                                      Group By Operator [GBY_1261] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1250] (rows=50 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1247]
                                                              <-Reducer 57 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1276]
                                                                  Group By Operator [GBY_1275] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 49 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1270]
                                                                      Group By Operator [GBY_1264] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1256] (rows=1957 width=4)
                                                                          Output:["_col0"]
                                                                          Select Operator [SEL_1248] (rows=1957 width=4)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_1246] (rows=1957 width=8)
                                                                              predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                               Please refer to the previous TableScan [TS_151]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
                                            <-Reducer 36 [SIMPLE_EDGE]
=======
                                                    Conds:RS_160._col1=RS_1254._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 30 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1254]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1253] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1252] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                          TableScan [TS_154] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 24 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_160]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1139] (rows=15062131 width=4)
                                                        Conds:RS_1251._col0=RS_1243._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1243]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1242] (rows=50 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1241] (rows=50 width=12)
                                                              predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                              TableScan [TS_151] (rows=73049 width=12)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                      <-Map 23 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1251]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1250] (rows=550076554 width=118)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1249] (rows=550076554 width=118)
                                                              predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_158_date_dim_d_date_sk_min) AND DynamicValue(RS_158_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_158_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_148] (rows=575995635 width=118)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                              <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1248]
                                                                  Group By Operator [GBY_1247] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1246]
                                                                      Group By Operator [GBY_1245] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1244] (rows=50 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1242]
                                            <-Reducer 32 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                              SHUFFLE [RS_242]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_240] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1147] (rows=724 width=4)
<<<<<<< HEAD
<<<<<<< HEAD
                                                    Conds:RS_1260._col1, _col2, _col3=RS_1267._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 54 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1260]
=======
                                                    Conds:RS_1257._col1, _col2, _col3=RS_1261._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 31 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1257]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1256] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1255] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                          TableScan [TS_164] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1261]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1260] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1259] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1258] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 37 [SIMPLE_EDGE]
                                                            <-Reducer 36 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1287]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1286] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
<<<<<<< HEAD
                                                                  Group By Operator [GBY_1295] (rows=121728 width=19)
=======
                                                    Conds:RS_1302._col1, _col2, _col3=RS_1313._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1302]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1293] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1284] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 35 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1313]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1312] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1311] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1310] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 34 [SIMPLE_EDGE]
                                                            <-Reducer 33 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1359]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1358] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1357] (rows=121728 width=19)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                                                  Group By Operator [GBY_1285] (rows=121728 width=19)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 35 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_184]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_183] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1142] (rows=14628613 width=11)
<<<<<<< HEAD
<<<<<<< HEAD
                                                                          Conds:RS_179._col1=RS_1261._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 54 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1261]
=======
                                                                          Conds:RS_179._col1=RS_1284._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1284]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1283] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
<<<<<<< HEAD
                                                                              Filter Operator [FIL_1253] (rows=458612 width=15)
=======
                                                                          Conds:RS_179._col1=RS_1303._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 70 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1303]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1294] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1285] (rows=458612 width=15)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                                                              Filter Operator [FIL_1282] (rows=458612 width=15)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_173] (rows=462000 width=15)
                                                                                  default@item,iss,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 34 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_179]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1141] (rows=14736682 width=4)
<<<<<<< HEAD
<<<<<<< HEAD
                                                                              Conds:RS_1250._col0=RS_1229._col0(Inner),Output:["_col1"]
                                                                            <-Map 41 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1229]
=======
                                                                              Conds:RS_1281._col0=RS_1273._col0(Inner),Output:["_col1"]
                                                                            <-Map 39 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1273]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1272] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1271] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_170] (rows=73049 width=8)
                                                                                      default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 33 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1281]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1280] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1279] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_177_d1_d_date_sk_min) AND DynamicValue(RS_177_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_177_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_167] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 40 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1278]
                                                                                        Group By Operator [GBY_1277] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 39 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1276]
                                                                                            Group By Operator [GBY_1275] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1274] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1272]
                                                            <-Reducer 45 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1304]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1303] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1302] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
<<<<<<< HEAD
                                                                  <-Reducer 49 [SIMPLE_EDGE]
=======
                                                                              Conds:RS_1282._col0=RS_1255._col0(Inner),Output:["_col1"]
                                                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1255]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1282]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1280] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1278] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_177_d1_d_date_sk_min) AND DynamicValue(RS_177_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_177_d1_d_date_sk_bloom_filter)))
                                                                                     Please refer to the previous TableScan [TS_148]
                                                            <-Reducer 60 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1368]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1367] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1366] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 59 [SIMPLE_EDGE]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                                                  <-Reducer 44 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                    SHUFFLE [RS_204]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_203] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1144] (rows=7620440 width=11)
<<<<<<< HEAD
<<<<<<< HEAD
                                                                          Conds:RS_199._col1=RS_1262._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 54 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1262]
=======
                                                                          Conds:RS_199._col1=RS_1301._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 48 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1301]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1300] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1299] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_193] (rows=462000 width=15)
                                                                                  default@item,ics,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 43 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_199]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1143] (rows=7676736 width=4)
                                                                              Conds:RS_1298._col0=RS_1290._col0(Inner),Output:["_col1"]
                                                                            <-Map 46 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1290]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1289] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1288] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_190] (rows=73049 width=8)
                                                                                      default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 42 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1298]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1297] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1296] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_197_d2_d_date_sk_min) AND DynamicValue(RS_197_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_197_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_187] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 47 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1295]
                                                                                        Group By Operator [GBY_1294] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 46 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1293]
                                                                                            Group By Operator [GBY_1292] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1291] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1289]
                                                            <-Reducer 52 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1321]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1320] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1319] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
<<<<<<< HEAD
                                                                  <-Reducer 52 [SIMPLE_EDGE]
=======
                                                                          Conds:RS_199._col1=RS_1304._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 70 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1304]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1295] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1286] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_154]
                                                                        <-Reducer 58 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_199]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1143] (rows=7676736 width=4)
                                                                              Conds:RS_1335._col0=RS_1257._col0(Inner),Output:["_col1"]
                                                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1257]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                                            <-Map 71 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1335]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1333] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1331] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_197_d2_d_date_sk_min) AND DynamicValue(RS_197_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_197_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_187] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                                                    <-Reducer 53 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1330]
                                                                                        Group By Operator [GBY_1329] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 49 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1268]
                                                                                            Group By Operator [GBY_1262] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1252] (rows=50 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1247]
                                                                                    <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1328]
                                                                                        Group By Operator [GBY_1327] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 49 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1271]
                                                                                            Group By Operator [GBY_1265] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1258] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                            <-Reducer 66 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1377]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1376] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1375] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 65 [SIMPLE_EDGE]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                                                  <-Reducer 51 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                    SHUFFLE [RS_225]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_224] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1146] (rows=3828623 width=11)
<<<<<<< HEAD
<<<<<<< HEAD
                                                                          Conds:RS_220._col1=RS_1263._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 54 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1263]
=======
                                                                          Conds:RS_220._col1=RS_1318._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 55 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1318]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1317] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1316] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_214] (rows=462000 width=15)
                                                                                  default@item,iws,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 50 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_220]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1145] (rows=3856907 width=4)
                                                                              Conds:RS_1315._col0=RS_1307._col0(Inner),Output:["_col1"]
                                                                            <-Map 53 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1307]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1306] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1305] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_211] (rows=73049 width=8)
                                                                                      default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1315]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1314] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1313] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_218_d3_d_date_sk_min) AND DynamicValue(RS_218_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_218_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_208] (rows=144002668 width=7)
<<<<<<< HEAD
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                                                    <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1240]
                                                                                         Please refer to the previous Group By Operator [GBY_1237]
                                                                                    <-Reducer 47 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1244]
                                                                                         Please refer to the previous Group By Operator [GBY_1241]
                                            <-Reducer 28 [SIMPLE_EDGE]
                                              SHUFFLE [RS_241]
                                                PartitionCols:_col3
                                                Select Operator [SEL_163] (rows=15062131 width=15)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Merge Join Operator [MERGEJOIN_1140] (rows=15062131 width=15)
                                                    Conds:RS_160._col1=RS_1257._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 54 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1257]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1254] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1251] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 27 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_160]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1139] (rows=15062131 width=4)
                                                        Conds:RS_1249._col0=RS_1225._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 41 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1225]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1223]
                                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1249]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1247] (rows=550076554 width=118)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1245] (rows=550076554 width=118)
                                                              predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_158_date_dim_d_date_sk_min) AND DynamicValue(RS_158_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_158_date_dim_d_date_sk_bloom_filter)))
                                                               Please refer to the previous TableScan [TS_148]
=======
                                                                          Conds:RS_220._col1=RS_1305._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 70 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1305]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1296] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1287] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_154]
                                                                        <-Reducer 64 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_220]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1145] (rows=3856907 width=4)
                                                                              Conds:RS_1352._col0=RS_1259._col0(Inner),Output:["_col1"]
                                                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1259]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1248]
                                                                            <-Map 72 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1352]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1350] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1348] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_218_d3_d_date_sk_min) AND DynamicValue(RS_218_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_218_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_208] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                                                    <-Reducer 56 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1347]
                                                                                        Group By Operator [GBY_1346] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 49 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1269]
                                                                                            Group By Operator [GBY_1263] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1254] (rows=50 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1247]
                                                                                    <-Reducer 69 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1345]
                                                                                        Group By Operator [GBY_1344] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 49 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1272]
                                                                                            Group By Operator [GBY_1266] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1260] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1248]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
                  <-Reducer 23 [CONTAINS]
                    Reduce Output Operator [RS_1187]
=======
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 54 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1312]
                                                                                        Group By Operator [GBY_1311] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1310]
                                                                                            Group By Operator [GBY_1309] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1308] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1306]
                  <-Reducer 59 [CONTAINS]
                    Reduce Output Operator [RS_1199]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1198] (rows=608640 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1197] (rows=121728 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1195] (rows=40576 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1194] (rows=40576 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1193] (rows=121728 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 58 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_376]
                                  Merge Join Operator [MERGEJOIN_1148] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
<<<<<<< HEAD
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                    PARTITION_ONLY_SHUFFLE [RS_1213]
                                       Please refer to the previous Select Operator [SEL_1210]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1219]
                                       Please refer to the previous Select Operator [SEL_1217]
                              <-Reducer 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1285]
                                  Filter Operator [FIL_1284] (rows=121728 width=131)
=======
                                  <-Map 60 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1331]
                                      Select Operator [SEL_1330] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1329] (rows=1 width=112)
                                          predicate:average_sales is not null
                                          TableScan [TS_267] (rows=1 width=112)
                                            default@avg_sales,avg_sales,Tbl:COMPLETE,Col:NONE,Output:["average_sales"]
                                  <-Reducer 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1328]
                                      Select Operator [SEL_1327] (rows=1 width=8)
                                        Filter Operator [FIL_1326] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1325] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Map 56 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1324]
                                              Group By Operator [GBY_1323] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_1322] (rows=1 width=0)
                                                  TableScan [TS_259] (rows=1 width=0)
                                                    default@avg_sales,avg_sales,Tbl:PARTIAL,Col:COMPLETE
                              <-Reducer 65 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1355]
                                  Filter Operator [FIL_1354] (rows=121728 width=131)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1353] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
<<<<<<< HEAD
                                    <-Reducer 37 [SIMPLE_EDGE]
=======
                                    PARTITION_ONLY_SHUFFLE [RS_1237]
                                       Please refer to the previous Select Operator [SEL_1234]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1243]
                                       Please refer to the previous Select Operator [SEL_1241]
                              <-Reducer 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1339]
                                  Filter Operator [FIL_1338] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1337] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 41 [SIMPLE_EDGE]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                    <-Reducer 64 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                      SHUFFLE [RS_369]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_368] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_366] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1170] (rows=7790806 width=106)
                                              Conds:RS_363._col3=RS_364._col0(Left Semi),Output:["_col0","_col1","_col2","_col4","_col5"]
<<<<<<< HEAD
<<<<<<< HEAD
                                            <-Reducer 36 [SIMPLE_EDGE]
                                              SHUFFLE [RS_364]
                                                PartitionCols:_col0
                                                 Please refer to the previous Group By Operator [GBY_240]
                                            <-Reducer 44 [SIMPLE_EDGE]
=======
                                            <-Reducer 40 [SIMPLE_EDGE]
                                              SHUFFLE [RS_364]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_362] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1157] (rows=724 width=4)
                                                    Conds:RS_1307._col1, _col2, _col3=RS_1326._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1307]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1298] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1289] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 39 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1326]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1325] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1324] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1323] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 38 [SIMPLE_EDGE]
                                                            <-Reducer 37 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1362]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1361] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1360] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 32 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_306]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_183]
                                                            <-Reducer 61 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1371]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1370] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1369] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 59 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_326]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_203]
                                                            <-Reducer 67 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1380]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1379] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1378] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 65 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_347]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_224]
                                            <-Reducer 52 [SIMPLE_EDGE]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                            <-Reducer 63 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                              SHUFFLE [RS_363]
                                                PartitionCols:_col3
                                                Select Operator [SEL_285] (rows=7790806 width=110)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Merge Join Operator [MERGEJOIN_1150] (rows=7790806 width=110)
<<<<<<< HEAD
<<<<<<< HEAD
                                                    Conds:RS_282._col1=RS_1258._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 54 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1258]
=======
                                                    Conds:RS_282._col1=RS_1345._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 68 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1345]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1344] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1343] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                          TableScan [TS_276] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 62 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_282]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1149] (rows=7790806 width=98)
                                                        Conds:RS_1342._col0=RS_1334._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 66 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1334]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1333] (rows=50 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1332] (rows=50 width=12)
                                                              predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                              TableScan [TS_273] (rows=73049 width=12)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                      <-Map 61 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1342]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1341] (rows=286549727 width=123)
                                                            Output:["_col0","_col1","_col2","_col3"]
<<<<<<< HEAD
                                                            Filter Operator [FIL_1278] (rows=286549727 width=123)
=======
                                                    Conds:RS_282._col1=RS_1306._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1306]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1297] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1288] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 51 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_282]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1149] (rows=7790806 width=98)
                                                        Conds:RS_1336._col0=RS_1251._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 49 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1251]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1247]
                                                      <-Map 71 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1336]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1334] (rows=286549727 width=123)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1332] (rows=286549727 width=123)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                                            Filter Operator [FIL_1340] (rows=286549727 width=123)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                              predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_280_date_dim_d_date_sk_min) AND DynamicValue(RS_280_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_280_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_270] (rows=287989836 width=123)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                              <-Reducer 67 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1339]
                                                                  Group By Operator [GBY_1338] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 66 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1337]
                                                                      Group By Operator [GBY_1336] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1335] (rows=50 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1333]
                                            <-Reducer 70 [SIMPLE_EDGE]
                                              SHUFFLE [RS_364]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_362] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1157] (rows=724 width=4)
                                                    Conds:RS_1348._col1, _col2, _col3=RS_1352._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1348]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1347] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1346] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                          TableScan [TS_286] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 76 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1352]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1351] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1350] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1349] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 75 [SIMPLE_EDGE]
                                                            <-Reducer 74 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1372]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1371] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1370] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 73 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_306]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_305] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1152] (rows=14628613 width=11)
                                                                          Conds:RS_301._col1=RS_1369._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 79 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1369]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1368] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1367] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_295] (rows=462000 width=15)
                                                                                  default@item,iss,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 72 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_301]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1151] (rows=14736682 width=4)
                                                                              Conds:RS_1366._col0=RS_1358._col0(Inner),Output:["_col1"]
                                                                            <-Map 77 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1358]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1357] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1356] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_292] (rows=73049 width=8)
                                                                                      default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 71 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1366]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1365] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1364] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_299_d1_d_date_sk_min) AND DynamicValue(RS_299_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_299_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_289] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1363]
                                                                                        Group By Operator [GBY_1362] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 77 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1361]
                                                                                            Group By Operator [GBY_1360] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1359] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1357]
                                                            <-Reducer 83 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1389]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1388] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1387] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 82 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_326]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_325] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1154] (rows=7620440 width=11)
                                                                          Conds:RS_321._col1=RS_1386._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 86 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1386]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1385] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1384] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_315] (rows=462000 width=15)
                                                                                  default@item,ics,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 81 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_321]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1153] (rows=7676736 width=4)
                                                                              Conds:RS_1383._col0=RS_1375._col0(Inner),Output:["_col1"]
                                                                            <-Map 84 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1375]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1374] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1373] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_312] (rows=73049 width=8)
                                                                                      default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 80 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1383]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1382] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1381] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_319_d2_d_date_sk_min) AND DynamicValue(RS_319_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_319_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_309] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 85 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1380]
                                                                                        Group By Operator [GBY_1379] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 84 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1378]
                                                                                            Group By Operator [GBY_1377] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1376] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1374]
                                                            <-Reducer 90 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1406]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1405] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1404] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 89 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_347]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_346] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1156] (rows=3828623 width=11)
                                                                          Conds:RS_342._col1=RS_1403._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 93 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1403]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1402] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1401] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_336] (rows=462000 width=15)
                                                                                  default@item,iws,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 88 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_342]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1155] (rows=3856907 width=4)
                                                                              Conds:RS_1400._col0=RS_1392._col0(Inner),Output:["_col1"]
                                                                            <-Map 91 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1392]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1391] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1390] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_333] (rows=73049 width=8)
                                                                                      default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 87 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1400]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1399] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1398] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_340_d3_d_date_sk_min) AND DynamicValue(RS_340_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_340_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_330] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 92 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1397]
                                                                                        Group By Operator [GBY_1396] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 91 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1395]
                                                                                            Group By Operator [GBY_1394] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1393] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1391]
                  <-Reducer 97 [CONTAINS]
                    Reduce Output Operator [RS_1218]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1217] (rows=608640 width=253)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1216] (rows=121728 width=253)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1214] (rows=40576 width=253)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1213] (rows=40576 width=253)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1212] (rows=121728 width=253)
                                Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
<<<<<<< HEAD
                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_499]
                                  Merge Join Operator [MERGEJOIN_1158] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
<<<<<<< HEAD
                                    PARTITION_ONLY_SHUFFLE [RS_1214]
                                       Please refer to the previous Select Operator [SEL_1210]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1220]
                                       Please refer to the previous Select Operator [SEL_1217]
                              <-Reducer 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1294]
                                  Filter Operator [FIL_1293] (rows=121728 width=131)
=======
                              <-Reducer 103 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1440]
                                  Filter Operator [FIL_1439] (rows=121728 width=131)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1438] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
<<<<<<< HEAD
                                    <-Reducer 39 [SIMPLE_EDGE]
=======
                                    PARTITION_ONLY_SHUFFLE [RS_1238]
                                       Please refer to the previous Select Operator [SEL_1234]
                                  <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1244]
                                       Please refer to the previous Select Operator [SEL_1241]
                              <-Reducer 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1356]
                                  Filter Operator [FIL_1355] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1354] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 47 [SIMPLE_EDGE]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                    <-Reducer 102 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                      SHUFFLE [RS_492]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_491] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_489] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1172] (rows=3942084 width=126)
                                              Conds:RS_486._col3=RS_487._col0(Left Semi),Output:["_col0","_col1","_col2","_col4","_col5"]
<<<<<<< HEAD
<<<<<<< HEAD
                                            <-Reducer 36 [SIMPLE_EDGE]
                                              SHUFFLE [RS_487]
                                                PartitionCols:_col0
                                                 Please refer to the previous Group By Operator [GBY_240]
                                            <-Reducer 46 [SIMPLE_EDGE]
=======
                                            <-Reducer 46 [SIMPLE_EDGE]
                                              SHUFFLE [RS_487]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_485] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1167] (rows=724 width=4)
                                                    Conds:RS_1309._col1, _col2, _col3=RS_1343._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1309]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1300] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1291] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 45 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1343]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1342] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1341] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1340] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 44 [SIMPLE_EDGE]
                                                            <-Reducer 43 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1365]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1364] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1363] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 32 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_429]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_183]
                                                            <-Reducer 62 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1374]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1373] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1372] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 59 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_449]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_203]
                                                            <-Reducer 68 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1383]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1382] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1381] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 65 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_470]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_224]
                                            <-Reducer 55 [SIMPLE_EDGE]
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                            <-Reducer 101 [SIMPLE_EDGE]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                              SHUFFLE [RS_486]
                                                PartitionCols:_col3
                                                Select Operator [SEL_408] (rows=3942084 width=130)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Merge Join Operator [MERGEJOIN_1160] (rows=3942084 width=130)
<<<<<<< HEAD
<<<<<<< HEAD
                                                    Conds:RS_405._col1=RS_1259._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 54 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1259]
=======
                                                    Conds:RS_405._col1=RS_1430._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 106 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1430]
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1429] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1428] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                          TableScan [TS_399] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 100 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_405]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1159] (rows=3942084 width=118)
                                                        Conds:RS_1427._col0=RS_1419._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 104 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1419]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1418] (rows=50 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1417] (rows=50 width=12)
                                                              predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                              TableScan [TS_396] (rows=73049 width=12)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                      <-Map 99 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1427]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1426] (rows=143966864 width=123)
                                                            Output:["_col0","_col1","_col2","_col3"]
<<<<<<< HEAD
                                                            Filter Operator [FIL_1287] (rows=143966864 width=123)
=======
                                                    Conds:RS_405._col1=RS_1308._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                  <-Map 70 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1308]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1299] (rows=462000 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1290] (rows=462000 width=15)
                                                          predicate:i_item_sk is not null
                                                           Please refer to the previous TableScan [TS_154]
                                                  <-Reducer 54 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_405]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_1159] (rows=3942084 width=118)
                                                        Conds:RS_1353._col0=RS_1253._col0(Inner),Output:["_col1","_col2","_col3"]
                                                      <-Map 49 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_1253]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1247]
                                                      <-Map 72 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1353]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1351] (rows=143966864 width=123)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Filter Operator [FIL_1349] (rows=143966864 width=123)
>>>>>>> kgyrtkirk/HIVE-swo-dppunion
=======
                                                            Filter Operator [FIL_1425] (rows=143966864 width=123)
>>>>>>> parent of cbd5bd9c10f... Revert "add changes"
                                                              predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_403_date_dim_d_date_sk_min) AND DynamicValue(RS_403_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_403_date_dim_d_date_sk_bloom_filter)))
                                                              TableScan [TS_393] (rows=144002668 width=123)
                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                              <-Reducer 105 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1424]
                                                                  Group By Operator [GBY_1423] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 104 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_1422]
                                                                      Group By Operator [GBY_1421] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1420] (rows=50 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1418]
                                            <-Reducer 108 [SIMPLE_EDGE]
                                              SHUFFLE [RS_487]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_485] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1167] (rows=724 width=4)
                                                    Conds:RS_1433._col1, _col2, _col3=RS_1437._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 107 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1433]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1432] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1431] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                          TableScan [TS_409] (rows=462000 width=15)
                                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                  <-Reducer 114 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1437]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1436] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1435] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1434] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 113 [SIMPLE_EDGE]
                                                            <-Reducer 112 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1457]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1456] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1455] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 111 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_429]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_428] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1162] (rows=14628613 width=11)
                                                                          Conds:RS_424._col1=RS_1454._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 117 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1454]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1453] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1452] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_418] (rows=462000 width=15)
                                                                                  default@item,iss,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 110 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_424]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1161] (rows=14736682 width=4)
                                                                              Conds:RS_1451._col0=RS_1443._col0(Inner),Output:["_col1"]
                                                                            <-Map 115 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1443]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1442] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1441] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_415] (rows=73049 width=8)
                                                                                      default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 109 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1451]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1450] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1449] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_422_d1_d_date_sk_min) AND DynamicValue(RS_422_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_422_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_412] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 116 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1448]
                                                                                        Group By Operator [GBY_1447] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 115 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1446]
                                                                                            Group By Operator [GBY_1445] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1444] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1442]
                                                            <-Reducer 121 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1474]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1473] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1472] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 120 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_449]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_448] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1164] (rows=7620440 width=11)
                                                                          Conds:RS_444._col1=RS_1471._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 124 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1471]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1470] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1469] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_438] (rows=462000 width=15)
                                                                                  default@item,ics,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 119 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_444]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1163] (rows=7676736 width=4)
                                                                              Conds:RS_1468._col0=RS_1460._col0(Inner),Output:["_col1"]
                                                                            <-Map 122 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1460]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1459] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1458] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_435] (rows=73049 width=8)
                                                                                      default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 118 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1468]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1467] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1466] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_442_d2_d_date_sk_min) AND DynamicValue(RS_442_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_442_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_432] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 123 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1465]
                                                                                        Group By Operator [GBY_1464] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 122 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1463]
                                                                                            Group By Operator [GBY_1462] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1461] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1459]
                                                            <-Reducer 128 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1491]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1490] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1489] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 127 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_470]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_469] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1166] (rows=3828623 width=11)
                                                                          Conds:RS_465._col1=RS_1488._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 131 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1488]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1487] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1486] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                TableScan [TS_459] (rows=462000 width=15)
                                                                                  default@item,iws,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                                        <-Reducer 126 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_465]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1165] (rows=3856907 width=4)
                                                                              Conds:RS_1485._col0=RS_1477._col0(Inner),Output:["_col1"]
                                                                            <-Map 129 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1477]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1476] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1475] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_456] (rows=73049 width=8)
                                                                                      default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 125 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1485]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1484] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1483] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_463_d3_d_date_sk_min) AND DynamicValue(RS_463_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_463_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_453] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 130 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1482]
                                                                                        Group By Operator [GBY_1481] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 129 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1480]
                                                                                            Group By Operator [GBY_1479] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1478] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1476]
                              <-Reducer 96 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_499]
                                  Merge Join Operator [MERGEJOIN_1158] (rows=1 width=121)
                                    Conds:(Inner),Output:["_col1"]
                                  <-Map 98 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1416]
                                      Select Operator [SEL_1415] (rows=1 width=112)
                                        Output:["_col0"]
                                        Filter Operator [FIL_1414] (rows=1 width=112)
                                          predicate:average_sales is not null
                                          TableScan [TS_390] (rows=1 width=112)
                                            default@avg_sales,avg_sales,Tbl:COMPLETE,Col:NONE,Output:["average_sales"]
                                  <-Reducer 95 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_1413]
                                      Select Operator [SEL_1412] (rows=1 width=8)
                                        Filter Operator [FIL_1411] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_1410] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Map 94 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1409]
                                              Group By Operator [GBY_1408] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_1407] (rows=1 width=0)
                                                  TableScan [TS_382] (rows=1 width=0)
                                                    default@avg_sales,avg_sales,Tbl:PARTIAL,Col:COMPLETE
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 4 vectorized
              File Output Operator [FS_114]
                table:{"name:":"default.avg_sales"}
                Select Operator [SEL_113] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_112] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Union 3 [CUSTOM_SIMPLE_EDGE]
                    <-Reducer 12 [CONTAINS]
                      Reduce Output Operator [RS_100]
                        Group By Operator [GBY_99] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_98] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_96] (rows=3856907 width=114)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_95] (rows=3856907 width=114)
                                Conds:RS_136._col0=RS_128._col0(Inner),Output:["_col1","_col2"]
                              <-Map 13 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_128]
                                  PartitionCols:_col0
                                  Select Operator [SEL_127] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_126] (rows=1957 width=8)
                                      predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                      TableScan [TS_24] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_136]
                                  PartitionCols:_col0
                                  Select Operator [SEL_135] (rows=143966864 width=119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_134] (rows=143966864 width=119)
                                      predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_21] (rows=144002668 width=119)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_133]
                                          Group By Operator [GBY_132] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_131]
                                              Group By Operator [GBY_130] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_129] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_127]
                    <-Reducer 2 [CONTAINS]
                      Reduce Output Operator [RS_88]
                        Group By Operator [GBY_87] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_86] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_84] (rows=14736682 width=0)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_83] (rows=14736682 width=0)
                                Conds:RS_111._col0=RS_103._col0(Inner),Output:["_col1","_col2"]
                              <-Map 5 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_103]
                                  PartitionCols:_col0
                                  Select Operator [SEL_102] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_101] (rows=1957 width=8)
                                      predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                      TableScan [TS_3] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_111]
                                  PartitionCols:_col0
                                  Select Operator [SEL_110] (rows=550076554 width=114)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_109] (rows=550076554 width=114)
                                      predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_0] (rows=575995635 width=114)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                      <-Reducer 6 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_108]
                                          Group By Operator [GBY_107] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_106]
                                              Group By Operator [GBY_105] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_104] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_102]
                    <-Reducer 8 [CONTAINS]
                      Reduce Output Operator [RS_94]
                        Group By Operator [GBY_93] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                          Select Operator [SEL_92] (rows=26270325 width=44)
                            Output:["_col0"]
                            Select Operator [SEL_90] (rows=7676736 width=94)
                              Output:["_col0","_col1"]
                              Merge Join Operator [MERGEJOIN_89] (rows=7676736 width=94)
                                Conds:RS_125._col0=RS_117._col0(Inner),Output:["_col1","_col2"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_117]
                                  PartitionCols:_col0
                                  Select Operator [SEL_116] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_115] (rows=1957 width=8)
                                      predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                      TableScan [TS_13] (rows=73049 width=8)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_125]
                                  PartitionCols:_col0
                                  Select Operator [SEL_124] (rows=286549727 width=119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_123] (rows=286549727 width=119)
                                      predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter)))
                                      TableScan [TS_10] (rows=287989836 width=119)
                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_122]
                                          Group By Operator [GBY_121] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_120]
                                              Group By Operator [GBY_119] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_118] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_116]
        Stage-0
          Move Operator
             Please refer to the previous Stage-1

