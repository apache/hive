Warning: Shuffle Join MERGEJOIN[1178][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1185][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 16' is a cross product
Warning: Shuffle Join MERGEJOIN[1192][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 46 <- Reducer 49 (BROADCAST_EDGE)
Map 64 <- Reducer 51 (BROADCAST_EDGE)
Map 65 <- Reducer 53 (BROADCAST_EDGE)
Map 66 <- Reducer 57 (BROADCAST_EDGE)
Map 67 <- Reducer 72 (BROADCAST_EDGE)
Map 73 <- Reducer 78 (BROADCAST_EDGE)
Map 79 <- Reducer 17 (BROADCAST_EDGE)
Map 80 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 79 (SIMPLE_EDGE)
Reducer 13 <- Map 24 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 60 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 80 (SIMPLE_EDGE)
Reducer 19 <- Map 24 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 63 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 26 <- Map 24 (SIMPLE_EDGE), Reducer 47 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 29 <- Union 28 (SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 26 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (SIMPLE_EDGE)
Reducer 33 <- Map 24 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 26 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 36 <- Union 35 (SIMPLE_EDGE)
Reducer 37 <- Map 24 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Map 24 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 39 <- Reducer 38 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 4 <- Reducer 25 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 38 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 41 <- Reducer 38 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 42 <- Map 24 (SIMPLE_EDGE), Reducer 52 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 44 <- Reducer 42 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 45 <- Reducer 42 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 47 <- Map 46 (SIMPLE_EDGE), Map 48 (SIMPLE_EDGE)
Reducer 49 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Map 48 (SIMPLE_EDGE), Map 64 (SIMPLE_EDGE)
Reducer 51 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 52 <- Map 48 (SIMPLE_EDGE), Map 65 (SIMPLE_EDGE)
Reducer 53 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 56 <- Union 55 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 56 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Union 59 (CUSTOM_SIMPLE_EDGE)
Reducer 61 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 63 <- Union 62 (CUSTOM_SIMPLE_EDGE)
Reducer 68 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 69 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 70 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 72 <- Map 71 (CUSTOM_SIMPLE_EDGE)
Reducer 74 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 75 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 76 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 78 <- Map 77 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1351]
        Limit [LIM_1350] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1349] (rows=304320 width=223)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1348]
              Select Operator [SEL_1347] (rows=304320 width=223)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1346] (rows=304320 width=231)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_1191]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1190] (rows=304320 width=231)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1189] (rows=121728 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,top n:100
                          Select Operator [SEL_1187] (rows=40576 width=223)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1186] (rows=40576 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1185] (rows=121728 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1363]
                                  Filter Operator [FIL_1362] (rows=121728 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1361] (rows=121728 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_244]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_243] (rows=17407104 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_241] (rows=286549727 width=127)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1173] (rows=286549727 width=127)
                                              Conds:RS_238._col1=RS_239._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_238]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1149] (rows=286549727 width=131)
                                                  Conds:RS_233._col1=RS_1331._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1331]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1322] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1313] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                        TableScan [TS_6] (rows=462000 width=15)
                                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                <-Reducer 12 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_233]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1148] (rows=286549727 width=119)
                                                      Conds:RS_1356._col0=RS_1293._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1293]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1290] (rows=50 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1289] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                            TableScan [TS_3] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 79 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1356]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1355] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1354] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_231_date_dim_d_date_sk_min) AND DynamicValue(RS_231_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_231_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_146] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1353]
                                                                Group By Operator [GBY_1352] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1301]
                                                                    Group By Operator [GBY_1298] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1294] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1290]
                                            <-Reducer 33 [SIMPLE_EDGE]
                                              SHUFFLE [RS_239]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_237] (rows=364 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1156] (rows=729 width=4)
                                                    Conds:RS_1332._col1, _col2, _col3=RS_1360._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1332]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1323] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1314] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1360]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1359] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1358] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1357] (rows=120960 width=20)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 31 [SIMPLE_EDGE]
                                                            <-Reducer 30 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1414]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1413] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1412] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 26 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_175]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_28] (rows=3144960 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1139] (rows=546042657 width=11)
                                                                          Conds:RS_24._col1=RS_1328._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1328]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1319] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1310] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 47 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_24]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1138] (rows=550076554 width=4)
                                                                              Conds:RS_1408._col0=RS_1386._col0(Inner),Output:["_col1"]
                                                                            <-Map 48 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1386]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1385] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1384] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_15] (rows=73049 width=8)
                                                                                      default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 46 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1408]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1407] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1406] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_22_d1_d_date_sk_min) AND DynamicValue(RS_22_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_12] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1405]
                                                                                        Group By Operator [GBY_1404] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1400]
                                                                                            Group By Operator [GBY_1396] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1387] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1385]
                                                            <-Reducer 40 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1428]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1427] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1426] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 38 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_195]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_48] (rows=1693440 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1141] (rows=284448361 width=11)
                                                                          Conds:RS_44._col1=RS_1329._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1329]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1320] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1311] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 50 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_44]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1140] (rows=286549727 width=4)
                                                                              Conds:RS_1422._col0=RS_1388._col0(Inner),Output:["_col1"]
                                                                            <-Map 48 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1388]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1385]
                                                                            <-Map 64 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1422]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1421] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1420] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_42_d2_d_date_sk_min) AND DynamicValue(RS_42_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_42_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_32] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 51 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1419]
                                                                                        Group By Operator [GBY_1418] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1401]
                                                                                            Group By Operator [GBY_1397] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1389] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1385]
                                                            <-Reducer 44 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1442]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1441] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1440] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_216]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_69] (rows=846720 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1143] (rows=142911107 width=11)
                                                                          Conds:RS_65._col1=RS_1330._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1330]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1321] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1312] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 52 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_65]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1142] (rows=143966864 width=4)
                                                                              Conds:RS_1436._col0=RS_1390._col0(Inner),Output:["_col1"]
                                                                            <-Map 48 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1390]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1385]
                                                                            <-Map 65 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1436]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1435] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1434] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_63_d3_d_date_sk_min) AND DynamicValue(RS_63_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_63_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_53] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 53 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1433]
                                                                                        Group By Operator [GBY_1432] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1402]
                                                                                            Group By Operator [GBY_1398] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1391] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1385]
                              <-Reducer 60 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1367]
                                  Select Operator [SEL_1366] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1365] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1364] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 59 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 58 [CONTAINS]
                                          Reduce Output Operator [RS_1246]
                                            Group By Operator [GBY_1245] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1244] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1242] (rows=550076554 width=110)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1241] (rows=550076554 width=110)
                                                    Conds:RS_1451._col0=RS_1394._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 48 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1394]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1385]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1451]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1449] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1448] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_109_date_dim_d_date_sk_min) AND DynamicValue(RS_109_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_109_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_102] (rows=575995635 width=114)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 57 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1447]
                                                              Group By Operator [GBY_1446] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1403]
                                                                  Group By Operator [GBY_1399] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1393] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1385]
                                        <-Reducer 69 [CONTAINS]
                                          Reduce Output Operator [RS_1264]
                                            Group By Operator [GBY_1263] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1262] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1260] (rows=286549727 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1259] (rows=286549727 width=115)
                                                    Conds:RS_1466._col0=RS_1457._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1457]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1454] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1453] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_115] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1466]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1464] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1463] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_119_date_dim_d_date_sk_min) AND DynamicValue(RS_119_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_119_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_112] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1462]
                                                              Group By Operator [GBY_1461] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1460]
                                                                  Group By Operator [GBY_1459] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1456] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1454]
                                        <-Reducer 75 [CONTAINS]
                                          Reduce Output Operator [RS_1282]
                                            Group By Operator [GBY_1281] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1280] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1278] (rows=143966864 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1277] (rows=143966864 width=115)
                                                    Conds:RS_1481._col0=RS_1472._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1472]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1469] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1468] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_126] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1481]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1479] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1478] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_130_date_dim_d_date_sk_min) AND DynamicValue(RS_130_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_130_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_123] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1477]
                                                              Group By Operator [GBY_1476] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 77 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1475]
                                                                  Group By Operator [GBY_1474] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1471] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1469]
                  <-Reducer 22 [CONTAINS]
                    Reduce Output Operator [RS_1198]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1197] (rows=304320 width=231)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1196] (rows=121728 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,top n:100
                          Select Operator [SEL_1194] (rows=40576 width=219)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1193] (rows=40576 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1192] (rows=121728 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1379]
                                  Filter Operator [FIL_1378] (rows=121728 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1377] (rows=121728 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_391]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_390] (rows=8764416 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_388] (rows=143966864 width=127)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1174] (rows=143966864 width=127)
                                              Conds:RS_385._col1=RS_386._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_385]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1161] (rows=143966864 width=131)
                                                  Conds:RS_380._col1=RS_1333._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1333]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1324] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1315] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_380]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1160] (rows=143966864 width=119)
                                                      Conds:RS_1372._col0=RS_1295._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1295]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1290]
                                                    <-Map 80 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1372]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1371] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1370] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_378_date_dim_d_date_sk_min) AND DynamicValue(RS_378_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_378_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_293] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1369]
                                                                Group By Operator [GBY_1368] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1302]
                                                                    Group By Operator [GBY_1299] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1296] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1290]
                                            <-Reducer 37 [SIMPLE_EDGE]
                                              SHUFFLE [RS_386]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_384] (rows=364 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1168] (rows=729 width=4)
                                                    Conds:RS_1334._col1, _col2, _col3=RS_1376._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1334]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1325] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1316] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 36 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1376]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1375] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1374] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1373] (rows=120960 width=20)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 35 [SIMPLE_EDGE]
                                                            <-Reducer 34 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1417]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1416] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1415] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 26 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_322]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 41 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1431]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1430] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1429] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 38 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_342]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 45 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1445]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1444] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1443] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_363]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                              <-Reducer 63 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1383]
                                  Select Operator [SEL_1382] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1381] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1380] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 62 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 61 [CONTAINS]
                                          Reduce Output Operator [RS_1252]
                                            Group By Operator [GBY_1251] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1250] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1248] (rows=550076554 width=110)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1247] (rows=550076554 width=110)
                                                    Conds:RS_1452._col0=RS_1395._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 48 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1395]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1385]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1452]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1449]
                                        <-Reducer 70 [CONTAINS]
                                          Reduce Output Operator [RS_1270]
                                            Group By Operator [GBY_1269] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1268] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1266] (rows=286549727 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1265] (rows=286549727 width=115)
                                                    Conds:RS_1467._col0=RS_1458._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1458]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1454]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1467]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1464]
                                        <-Reducer 76 [CONTAINS]
                                          Reduce Output Operator [RS_1288]
                                            Group By Operator [GBY_1287] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1286] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1284] (rows=143966864 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1283] (rows=143966864 width=115)
                                                    Conds:RS_1482._col0=RS_1473._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1473]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1469]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1482]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1479]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1184]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1183] (rows=304320 width=231)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1182] (rows=121728 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,top n:100
                          Select Operator [SEL_1180] (rows=40576 width=221)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1179] (rows=40576 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1178] (rows=121728 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1341]
                                  Filter Operator [FIL_1340] (rows=121728 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1339] (rows=121728 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_98]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_97] (rows=32136192 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_95] (rows=550076554 width=122)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1172] (rows=550076554 width=122)
                                              Conds:RS_92._col1=RS_93._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 25 [SIMPLE_EDGE]
                                              SHUFFLE [RS_93]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_91] (rows=364 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1144] (rows=729 width=4)
                                                    Conds:RS_1327._col1, _col2, _col3=RS_1338._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1327]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1318] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1309] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 29 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1338]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1337] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1336] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1335] (rows=120960 width=20)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 28 [SIMPLE_EDGE]
                                                            <-Reducer 27 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1411]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1410] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1409] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 26 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_29]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 39 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1425]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1424] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1423] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 38 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_49]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 43 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1439]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1438] (rows=120960 width=20)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1437] (rows=120960 width=20)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_70]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_92]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1137] (rows=550076554 width=126)
                                                  Conds:RS_87._col1=RS_1326._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1326]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1317] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1308] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_87]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1136] (rows=550076554 width=114)
                                                      Conds:RS_1307._col0=RS_1291._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1291]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1290]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1307]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1306] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1305] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_85_date_dim_d_date_sk_min) AND DynamicValue(RS_85_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_85_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1304]
                                                                Group By Operator [GBY_1303] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1300]
                                                                    Group By Operator [GBY_1297] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1292] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1290]
                              <-Reducer 56 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1345]
                                  Select Operator [SEL_1344] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1343] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1342] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 55 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 54 [CONTAINS]
                                          Reduce Output Operator [RS_1240]
                                            Group By Operator [GBY_1239] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1238] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1236] (rows=550076554 width=110)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1235] (rows=550076554 width=110)
                                                    Conds:RS_1450._col0=RS_1392._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 48 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1392]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1385]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1450]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1449]
                                        <-Reducer 68 [CONTAINS]
                                          Reduce Output Operator [RS_1258]
                                            Group By Operator [GBY_1257] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1256] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1254] (rows=286549727 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1253] (rows=286549727 width=115)
                                                    Conds:RS_1465._col0=RS_1455._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1455]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1454]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1465]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1464]
                                        <-Reducer 74 [CONTAINS]
                                          Reduce Output Operator [RS_1276]
                                            Group By Operator [GBY_1275] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1274] (rows=980593145 width=112)
                                                Output:["_col0"]
                                                Select Operator [SEL_1272] (rows=143966864 width=115)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1271] (rows=143966864 width=115)
                                                    Conds:RS_1480._col0=RS_1470._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1470]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1469]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1480]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1479]

