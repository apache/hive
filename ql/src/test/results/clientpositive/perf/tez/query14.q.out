Warning: Shuffle Join MERGEJOIN[1164][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1171][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 16' is a cross product
Warning: Shuffle Join MERGEJOIN[1178][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 46 <- Reducer 49 (BROADCAST_EDGE)
Map 64 <- Reducer 51 (BROADCAST_EDGE)
Map 65 <- Reducer 53 (BROADCAST_EDGE)
Map 66 <- Reducer 57 (BROADCAST_EDGE)
Map 67 <- Reducer 72 (BROADCAST_EDGE)
Map 73 <- Reducer 78 (BROADCAST_EDGE)
Map 79 <- Reducer 17 (BROADCAST_EDGE)
Map 80 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 79 (SIMPLE_EDGE)
Reducer 13 <- Map 24 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (ONE_TO_ONE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 60 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 80 (SIMPLE_EDGE)
Reducer 19 <- Map 24 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (ONE_TO_ONE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 63 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Reducer 29 (ONE_TO_ONE_EDGE)
Reducer 26 <- Map 24 (SIMPLE_EDGE), Reducer 47 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 29 <- Union 28 (SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 26 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (SIMPLE_EDGE)
Reducer 33 <- Map 24 (SIMPLE_EDGE), Reducer 32 (ONE_TO_ONE_EDGE)
Reducer 34 <- Reducer 26 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 36 <- Union 35 (SIMPLE_EDGE)
Reducer 37 <- Map 24 (SIMPLE_EDGE), Reducer 36 (ONE_TO_ONE_EDGE)
Reducer 38 <- Map 24 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 39 <- Reducer 38 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 4 <- Reducer 25 (SIMPLE_EDGE), Reducer 3 (ONE_TO_ONE_EDGE)
Reducer 40 <- Reducer 38 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 41 <- Reducer 38 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 42 <- Map 24 (SIMPLE_EDGE), Reducer 52 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 44 <- Reducer 42 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 45 <- Reducer 42 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 47 <- Map 46 (SIMPLE_EDGE), Map 48 (SIMPLE_EDGE)
Reducer 49 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Map 48 (SIMPLE_EDGE), Map 64 (SIMPLE_EDGE)
Reducer 51 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 52 <- Map 48 (SIMPLE_EDGE), Map 65 (SIMPLE_EDGE)
Reducer 53 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 56 <- Union 55 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 56 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Union 59 (CUSTOM_SIMPLE_EDGE)
Reducer 61 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 63 <- Union 62 (CUSTOM_SIMPLE_EDGE)
Reducer 68 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 69 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 70 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 72 <- Map 71 (CUSTOM_SIMPLE_EDGE)
Reducer 74 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 75 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 76 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 78 <- Map 77 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1335]
        Limit [LIM_1334] (rows=7 width=212)
          Number of rows:100
          Select Operator [SEL_1333] (rows=7 width=212)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1332]
              Select Operator [SEL_1331] (rows=7 width=212)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1330] (rows=7 width=220)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_1177]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1176] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1175] (rows=3 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1173] (rows=1 width=223)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1172] (rows=1 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1171] (rows=1 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1346]
                                  Group By Operator [GBY_1345] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 14 [SIMPLE_EDGE]
                                    SHUFFLE [RS_241]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_240] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_238] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1159] (rows=1 width=128)
                                            Conds:RS_235._col1=RS_236._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                          <-Reducer 13 [ONE_TO_ONE_EDGE]
                                            FORWARD [RS_235]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1135] (rows=7790806 width=110)
                                                Conds:RS_230._col1=RS_1317._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                              <-Map 24 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1317]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1308] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1299] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                      TableScan [TS_6] (rows=462000 width=15)
                                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                              <-Reducer 12 [SIMPLE_EDGE]
                                                SHUFFLE [RS_230]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1134] (rows=7790806 width=98)
                                                    Conds:RS_1340._col0=RS_1279._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1279]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1276] (rows=50 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1275] (rows=50 width=12)
                                                          predicate:((d_moy = 11) and (d_year = 2000) and d_date_sk is not null)
                                                          TableScan [TS_3] (rows=73049 width=12)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                  <-Map 79 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1340]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1339] (rows=286549727 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1338] (rows=286549727 width=123)
                                                          predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_228_date_dim_d_date_sk_min) AND DynamicValue(RS_228_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_228_date_dim_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_143] (rows=287989836 width=123)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1337]
                                                              Group By Operator [GBY_1336] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1287]
                                                                  Group By Operator [GBY_1284] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1280] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1276]
                                          <-Reducer 33 [SIMPLE_EDGE]
                                            SHUFFLE [RS_236]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_234] (rows=362 width=4)
                                                Output:["_col0"],keys:_col0
                                                Merge Join Operator [MERGEJOIN_1142] (rows=724 width=4)
                                                  Conds:RS_1318._col1, _col2, _col3=RS_1344._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1318]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1309] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1300] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 32 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_1344]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1343] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1342] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1341] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 31 [SIMPLE_EDGE]
                                                          <-Reducer 30 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1394]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1393] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1392] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 26 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_172]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_28] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1125] (rows=14628613 width=11)
                                                                        Conds:RS_24._col1=RS_1314._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1314]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1305] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1296] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 47 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_24]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1124] (rows=14736682 width=4)
                                                                            Conds:RS_1388._col0=RS_1366._col0(Inner),Output:["_col1"]
                                                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1366]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1365] (rows=1957 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_1364] (rows=1957 width=8)
                                                                                  predicate:(d_date_sk is not null and d_year BETWEEN 1999 AND 2001)
                                                                                  TableScan [TS_15] (rows=73049 width=8)
                                                                                    default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                          <-Map 46 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1388]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1387] (rows=550076554 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1386] (rows=550076554 width=7)
                                                                                  predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_22_d1_d_date_sk_min) AND DynamicValue(RS_22_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_d1_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                                                  TableScan [TS_12] (rows=575995635 width=7)
                                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                  <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1385]
                                                                                      Group By Operator [GBY_1384] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1380]
                                                                                          Group By Operator [GBY_1376] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1367] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1365]
                                                          <-Reducer 40 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1408]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1407] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1406] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 38 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_192]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_48] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1127] (rows=7620440 width=11)
                                                                        Conds:RS_44._col1=RS_1315._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1315]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1306] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1297] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 50 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_44]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1126] (rows=7676736 width=4)
                                                                            Conds:RS_1402._col0=RS_1368._col0(Inner),Output:["_col1"]
                                                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1368]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1365]
                                                                          <-Map 64 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1402]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1401] (rows=286549727 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1400] (rows=286549727 width=7)
                                                                                  predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_42_d2_d_date_sk_min) AND DynamicValue(RS_42_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_42_d2_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                  TableScan [TS_32] (rows=287989836 width=7)
                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                  <-Reducer 51 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1399]
                                                                                      Group By Operator [GBY_1398] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1381]
                                                                                          Group By Operator [GBY_1377] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1369] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1365]
                                                          <-Reducer 44 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1422]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1421] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1420] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 42 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_213]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_69] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_1129] (rows=3828623 width=11)
                                                                        Conds:RS_65._col1=RS_1316._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1316]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1307] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1298] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                               Please refer to the previous TableScan [TS_6]
                                                                      <-Reducer 52 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_65]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_1128] (rows=3856907 width=4)
                                                                            Conds:RS_1416._col0=RS_1370._col0(Inner),Output:["_col1"]
                                                                          <-Map 48 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1370]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1365]
                                                                          <-Map 65 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1416]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1415] (rows=143966864 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1414] (rows=143966864 width=7)
                                                                                  predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_63_d3_d_date_sk_min) AND DynamicValue(RS_63_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_63_d3_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                  TableScan [TS_53] (rows=144002668 width=7)
                                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                  <-Reducer 53 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1413]
                                                                                      Group By Operator [GBY_1412] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                      <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                        SHUFFLE [RS_1382]
                                                                                          Group By Operator [GBY_1378] (rows=1 width=12)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                            Select Operator [SEL_1371] (rows=1957 width=4)
                                                                                              Output:["_col0"]
                                                                                               Please refer to the previous Select Operator [SEL_1365]
                              <-Reducer 60 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1349]
                                  Select Operator [SEL_1348] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1347] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 59 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 58 [CONTAINS]
                                        Reduce Output Operator [RS_1232]
                                          Group By Operator [GBY_1231] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1230] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1228] (rows=14736682 width=0)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1227] (rows=14736682 width=0)
                                                  Conds:RS_1431._col0=RS_1374._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1374]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1365]
                                                <-Map 66 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1431]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1429] (rows=550076554 width=114)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1428] (rows=550076554 width=114)
                                                        predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_108_date_dim_d_date_sk_min) AND DynamicValue(RS_108_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_108_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                        TableScan [TS_101] (rows=575995635 width=114)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                        <-Reducer 57 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_1427]
                                                            Group By Operator [GBY_1426] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1383]
                                                                Group By Operator [GBY_1379] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_1373] (rows=1957 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_1365]
                                      <-Reducer 69 [CONTAINS]
                                        Reduce Output Operator [RS_1250]
                                          Group By Operator [GBY_1249] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1248] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1246] (rows=7676736 width=94)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1245] (rows=7676736 width=94)
                                                  Conds:RS_1446._col0=RS_1437._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 71 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_1437]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1434] (rows=1957 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_1433] (rows=1957 width=8)
                                                        predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                        TableScan [TS_114] (rows=73049 width=8)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                <-Map 67 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1446]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1444] (rows=286549727 width=119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1443] (rows=286549727 width=119)
                                                        predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_118_date_dim_d_date_sk_min) AND DynamicValue(RS_118_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_118_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                        TableScan [TS_111] (rows=287989836 width=119)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                        <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_1442]
                                                            Group By Operator [GBY_1441] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_1440]
                                                                Group By Operator [GBY_1439] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_1436] (rows=1957 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_1434]
                                      <-Reducer 75 [CONTAINS]
                                        Reduce Output Operator [RS_1268]
                                          Group By Operator [GBY_1267] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1266] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1264] (rows=3856907 width=114)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1263] (rows=3856907 width=114)
                                                  Conds:RS_1461._col0=RS_1452._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 77 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_1452]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1449] (rows=1957 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_1448] (rows=1957 width=8)
                                                        predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                        TableScan [TS_125] (rows=73049 width=8)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                <-Map 73 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1461]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1459] (rows=143966864 width=119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1458] (rows=143966864 width=119)
                                                        predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_129_date_dim_d_date_sk_min) AND DynamicValue(RS_129_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_129_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                                        TableScan [TS_122] (rows=144002668 width=119)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                        <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_1457]
                                                            Group By Operator [GBY_1456] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 77 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_1455]
                                                                Group By Operator [GBY_1454] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_1451] (rows=1957 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_1449]
                  <-Reducer 22 [CONTAINS]
                    Reduce Output Operator [RS_1184]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1183] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1182] (rows=3 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1180] (rows=1 width=219)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1179] (rows=1 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1178] (rows=1 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1360]
                                  Group By Operator [GBY_1359] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_385]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_384] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_382] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1160] (rows=1 width=128)
                                            Conds:RS_379._col1=RS_380._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                          <-Reducer 19 [ONE_TO_ONE_EDGE]
                                            FORWARD [RS_379]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1147] (rows=3942084 width=130)
                                                Conds:RS_374._col1=RS_1319._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                              <-Map 24 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1319]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1310] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1301] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                       Please refer to the previous TableScan [TS_6]
                                              <-Reducer 18 [SIMPLE_EDGE]
                                                SHUFFLE [RS_374]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1146] (rows=3942084 width=118)
                                                    Conds:RS_1354._col0=RS_1281._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1281]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1276]
                                                  <-Map 80 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1354]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1353] (rows=143966864 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1352] (rows=143966864 width=123)
                                                          predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_372_date_dim_d_date_sk_min) AND DynamicValue(RS_372_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_372_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_287] (rows=144002668 width=123)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1351]
                                                              Group By Operator [GBY_1350] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1288]
                                                                  Group By Operator [GBY_1285] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1282] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1276]
                                          <-Reducer 37 [SIMPLE_EDGE]
                                            SHUFFLE [RS_380]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_378] (rows=362 width=4)
                                                Output:["_col0"],keys:_col0
                                                Merge Join Operator [MERGEJOIN_1154] (rows=724 width=4)
                                                  Conds:RS_1320._col1, _col2, _col3=RS_1358._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1320]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1311] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1302] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 36 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_1358]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1357] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1356] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1355] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 35 [SIMPLE_EDGE]
                                                          <-Reducer 34 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1397]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1396] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1395] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 26 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_316]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_28]
                                                          <-Reducer 41 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1411]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1410] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1409] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 38 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_336]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_48]
                                                          <-Reducer 45 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1425]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1424] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1423] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 42 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_357]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_69]
                              <-Reducer 63 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1363]
                                  Select Operator [SEL_1362] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1361] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 62 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 61 [CONTAINS]
                                        Reduce Output Operator [RS_1238]
                                          Group By Operator [GBY_1237] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1236] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1234] (rows=14736682 width=0)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1233] (rows=14736682 width=0)
                                                  Conds:RS_1432._col0=RS_1375._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1375]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1365]
                                                <-Map 66 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1432]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1429]
                                      <-Reducer 70 [CONTAINS]
                                        Reduce Output Operator [RS_1256]
                                          Group By Operator [GBY_1255] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1254] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1252] (rows=7676736 width=94)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1251] (rows=7676736 width=94)
                                                  Conds:RS_1447._col0=RS_1438._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 71 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_1438]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1434]
                                                <-Map 67 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1447]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1444]
                                      <-Reducer 76 [CONTAINS]
                                        Reduce Output Operator [RS_1274]
                                          Group By Operator [GBY_1273] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1272] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1270] (rows=3856907 width=114)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1269] (rows=3856907 width=114)
                                                  Conds:RS_1462._col0=RS_1453._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 77 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_1453]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1449]
                                                <-Map 73 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1462]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1459]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1170]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1169] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1168] (rows=3 width=221)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1166] (rows=1 width=221)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1165] (rows=1 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1164] (rows=1 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1326]
                                  Group By Operator [GBY_1325] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 4 [SIMPLE_EDGE]
                                    SHUFFLE [RS_98]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_97] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_95] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1158] (rows=1 width=128)
                                            Conds:RS_92._col1=RS_93._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                          <-Reducer 25 [SIMPLE_EDGE]
                                            SHUFFLE [RS_93]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_91] (rows=362 width=4)
                                                Output:["_col0"],keys:_col0
                                                Merge Join Operator [MERGEJOIN_1130] (rows=724 width=4)
                                                  Conds:RS_1313._col1, _col2, _col3=RS_1324._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1313]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1304] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1295] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 29 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_1324]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1323] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1322] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1321] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 28 [SIMPLE_EDGE]
                                                          <-Reducer 27 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1391]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1390] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1389] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 26 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_29]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_28]
                                                          <-Reducer 39 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1405]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1404] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1403] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 38 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_49]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_48]
                                                          <-Reducer 43 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1419]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1418] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1417] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 42 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_70]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_69]
                                          <-Reducer 3 [ONE_TO_ONE_EDGE]
                                            FORWARD [RS_92]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1123] (rows=15062131 width=15)
                                                Conds:RS_87._col1=RS_1312._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                              <-Map 24 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1312]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1303] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1294] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                       Please refer to the previous TableScan [TS_6]
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_87]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_1122] (rows=15062131 width=4)
                                                    Conds:RS_1293._col0=RS_1277._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1277]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1276]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1293]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1292] (rows=550076554 width=118)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1291] (rows=550076554 width=118)
                                                          predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_85_date_dim_d_date_sk_min) AND DynamicValue(RS_85_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_85_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_0] (rows=575995635 width=118)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1290]
                                                              Group By Operator [GBY_1289] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1286]
                                                                  Group By Operator [GBY_1283] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1278] (rows=50 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1276]
                              <-Reducer 56 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1329]
                                  Select Operator [SEL_1328] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1327] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 55 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 54 [CONTAINS]
                                        Reduce Output Operator [RS_1226]
                                          Group By Operator [GBY_1225] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1224] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1222] (rows=14736682 width=0)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1221] (rows=14736682 width=0)
                                                  Conds:RS_1430._col0=RS_1372._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1372]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1365]
                                                <-Map 66 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1430]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1429]
                                      <-Reducer 68 [CONTAINS]
                                        Reduce Output Operator [RS_1244]
                                          Group By Operator [GBY_1243] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1242] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1240] (rows=7676736 width=94)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1239] (rows=7676736 width=94)
                                                  Conds:RS_1445._col0=RS_1435._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 71 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_1435]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1434]
                                                <-Map 67 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1445]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1444]
                                      <-Reducer 74 [CONTAINS]
                                        Reduce Output Operator [RS_1262]
                                          Group By Operator [GBY_1261] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1260] (rows=26270325 width=44)
                                              Output:["_col0"]
                                              Select Operator [SEL_1258] (rows=3856907 width=114)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1257] (rows=3856907 width=114)
                                                  Conds:RS_1460._col0=RS_1450._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 77 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_1450]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1449]
                                                <-Map 73 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1460]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1459]

