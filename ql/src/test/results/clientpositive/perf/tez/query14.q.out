Warning: Shuffle Join MERGEJOIN[1238][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[1245][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 16' is a cross product
Warning: Shuffle Join MERGEJOIN[1252][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 61 <- Reducer 43 (BROADCAST_EDGE)
Map 62 <- Reducer 49 (BROADCAST_EDGE)
Map 63 <- Reducer 68 (BROADCAST_EDGE)
Map 69 <- Reducer 74 (BROADCAST_EDGE)
Map 75 <- Reducer 17 (BROADCAST_EDGE)
Map 76 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 75 (SIMPLE_EDGE)
Reducer 13 <- Map 59 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 55 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 76 (SIMPLE_EDGE)
Reducer 19 <- Map 59 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 58 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE)
Reducer 25 <- Map 59 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 28 <- Union 27 (SIMPLE_EDGE)
Reducer 29 <- Map 59 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 59 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 25 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (SIMPLE_EDGE)
Reducer 33 <- Map 59 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 25 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 36 <- Union 35 (SIMPLE_EDGE)
Reducer 37 <- Map 59 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Map 10 (SIMPLE_EDGE), Map 61 (SIMPLE_EDGE)
Reducer 39 <- Map 59 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 4 <- Reducer 29 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 41 <- Reducer 39 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 42 <- Reducer 39 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 43 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 10 (SIMPLE_EDGE), Map 62 (SIMPLE_EDGE)
Reducer 45 <- Map 59 (SIMPLE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (SIMPLE_EDGE), Union 27 (CONTAINS)
Reducer 47 <- Reducer 45 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 48 <- Reducer 45 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 49 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 52 <- Union 51 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 55 <- Union 54 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 10 (SIMPLE_EDGE), Map 60 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 58 <- Union 57 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 64 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 65 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 66 <- Map 63 (SIMPLE_EDGE), Map 67 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 68 <- Map 67 (CUSTOM_SIMPLE_EDGE)
Reducer 70 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 51 (CONTAINS)
Reducer 71 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 54 (CONTAINS)
Reducer 72 <- Map 69 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE), Union 57 (CONTAINS)
Reducer 74 <- Map 73 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1425]
        Limit [LIM_1424] (rows=100 width=223)
          Number of rows:100
          Select Operator [SEL_1423] (rows=304320 width=222)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1422]
              Select Operator [SEL_1421] (rows=304320 width=222)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1420] (rows=304320 width=230)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_1251]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1250] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1249] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1247] (rows=40576 width=222)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1246] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1245] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1437]
                                  Filter Operator [FIL_1436] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1435] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_244]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_243] (rows=486912 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_241] (rows=7790806 width=106)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1233] (rows=7790806 width=106)
                                              Conds:RS_238._col1=RS_239._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_238]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1209] (rows=7790806 width=110)
                                                  Conds:RS_233._col1=RS_1405._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 59 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1405]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1396] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1387] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                        TableScan [TS_6] (rows=462000 width=15)
                                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                                <-Reducer 12 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_233]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1208] (rows=7790806 width=98)
                                                      Conds:RS_1430._col0=RS_1355._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1355]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1351] (rows=50 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_1349] (rows=50 width=12)
                                                            predicate:((d_year = 2000) and (d_moy = 11) and d_date_sk is not null)
                                                            TableScan [TS_3] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                    <-Map 75 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1430]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1429] (rows=286549727 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1428] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_231_date_dim_d_date_sk_min) AND DynamicValue(RS_231_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_231_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_146] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1427]
                                                                Group By Operator [GBY_1426] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1373]
                                                                    Group By Operator [GBY_1368] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1356] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1351]
                                            <-Reducer 33 [SIMPLE_EDGE]
                                              SHUFFLE [RS_239]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_237] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1216] (rows=724 width=4)
                                                    Conds:RS_1406._col1, _col2, _col3=RS_1434._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1406]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1397] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1388] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1434]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1433] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1432] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1431] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 31 [SIMPLE_EDGE]
                                                            <-Reducer 30 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1471]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1470] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1469] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_175]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_28] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1199] (rows=14628613 width=11)
                                                                          Conds:RS_24._col1=RS_1402._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1402]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1393] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1384] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 24 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_24]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1198] (rows=14736682 width=4)
                                                                              Conds:RS_1462._col0=RS_1359._col0(Inner),Output:["_col1"]
                                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1359]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1352] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1350] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                     Please refer to the previous TableScan [TS_3]
                                                                            <-Map 60 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1462]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1460] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1458] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null)
                                                                                    TableScan [TS_12] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 41 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1485]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1484] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1483] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 39 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_195]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_48] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1201] (rows=7620440 width=11)
                                                                          Conds:RS_44._col1=RS_1403._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1403]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1394] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1385] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 38 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_44]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1200] (rows=7676736 width=4)
                                                                              Conds:RS_1479._col0=RS_1360._col0(Inner),Output:["_col1"]
                                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1360]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1352]
                                                                            <-Map 61 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1479]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1478] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1477] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_42_d2_d_date_sk_min) AND DynamicValue(RS_42_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_42_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_32] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1476]
                                                                                        Group By Operator [GBY_1475] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1375]
                                                                                            Group By Operator [GBY_1370] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1361] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1352]
                                                            <-Reducer 47 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1499]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1498] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1497] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 45 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_216]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_69] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1203] (rows=3828623 width=11)
                                                                          Conds:RS_65._col1=RS_1404._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1404]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1395] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1386] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 44 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_65]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1202] (rows=3856907 width=4)
                                                                              Conds:RS_1493._col0=RS_1362._col0(Inner),Output:["_col1"]
                                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1362]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1352]
                                                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1493]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1492] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1491] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_63_d3_d_date_sk_min) AND DynamicValue(RS_63_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_63_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_53] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1490]
                                                                                        Group By Operator [GBY_1489] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1376]
                                                                                            Group By Operator [GBY_1371] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1363] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1352]
                              <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1441]
                                  Select Operator [SEL_1440] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1439] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1438] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 54 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 53 [CONTAINS]
                                          Reduce Output Operator [RS_1306]
                                            Group By Operator [GBY_1305] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1304] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1302] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1301] (rows=14736682 width=0)
                                                    Conds:RS_1464._col0=RS_1365._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1365]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1352]
                                                  <-Map 60 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1464]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1461] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1459] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk is not null)
                                                           Please refer to the previous TableScan [TS_12]
                                        <-Reducer 65 [CONTAINS]
                                          Reduce Output Operator [RS_1324]
                                            Group By Operator [GBY_1323] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1322] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1320] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1319] (rows=7676736 width=94)
                                                    Conds:RS_1516._col0=RS_1507._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1507]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1504] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1503] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_115] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1516]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1514] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1513] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_119_date_dim_d_date_sk_min) AND DynamicValue(RS_119_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_119_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_112] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1512]
                                                              Group By Operator [GBY_1511] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 67 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1510]
                                                                  Group By Operator [GBY_1509] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1506] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1504]
                                        <-Reducer 71 [CONTAINS]
                                          Reduce Output Operator [RS_1342]
                                            Group By Operator [GBY_1341] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1340] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1338] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1337] (rows=3856907 width=114)
                                                    Conds:RS_1531._col0=RS_1522._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1522]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1519] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1518] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_126] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1531]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1529] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1528] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_130_date_dim_d_date_sk_min) AND DynamicValue(RS_130_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_130_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_123] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 74 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1527]
                                                              Group By Operator [GBY_1526] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 73 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1525]
                                                                  Group By Operator [GBY_1524] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1521] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1519]
                  <-Reducer 22 [CONTAINS]
                    Reduce Output Operator [RS_1258]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1257] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1256] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1254] (rows=40576 width=218)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1253] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1252] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1453]
                                  Filter Operator [FIL_1452] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1451] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_391]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_390] (rows=243456 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_388] (rows=3942084 width=126)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1234] (rows=3942084 width=126)
                                              Conds:RS_385._col1=RS_386._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_385]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1221] (rows=3942084 width=130)
                                                  Conds:RS_380._col1=RS_1407._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 59 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1407]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1398] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1389] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_380]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1220] (rows=3942084 width=118)
                                                      Conds:RS_1446._col0=RS_1357._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1357]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1351]
                                                    <-Map 76 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1446]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1445] (rows=143966864 width=123)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1444] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_378_date_dim_d_date_sk_min) AND DynamicValue(RS_378_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_378_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_293] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1443]
                                                                Group By Operator [GBY_1442] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1374]
                                                                    Group By Operator [GBY_1369] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1358] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1351]
                                            <-Reducer 37 [SIMPLE_EDGE]
                                              SHUFFLE [RS_386]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_384] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1228] (rows=724 width=4)
                                                    Conds:RS_1408._col1, _col2, _col3=RS_1450._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1408]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1399] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1390] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 36 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1450]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1449] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1448] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1447] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 35 [SIMPLE_EDGE]
                                                            <-Reducer 34 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1474]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1473] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1472] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_322]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 42 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1488]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1487] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1486] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 39 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_342]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 48 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1502]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1501] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1500] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 45 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_363]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                              <-Reducer 58 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1457]
                                  Select Operator [SEL_1456] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1455] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1454] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 57 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 56 [CONTAINS]
                                          Reduce Output Operator [RS_1312]
                                            Group By Operator [GBY_1311] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1310] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1308] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1307] (rows=14736682 width=0)
                                                    Conds:RS_1465._col0=RS_1366._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1366]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1352]
                                                  <-Map 60 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1465]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1461]
                                        <-Reducer 66 [CONTAINS]
                                          Reduce Output Operator [RS_1330]
                                            Group By Operator [GBY_1329] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1328] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1326] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1325] (rows=7676736 width=94)
                                                    Conds:RS_1517._col0=RS_1508._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1508]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1504]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1517]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1514]
                                        <-Reducer 72 [CONTAINS]
                                          Reduce Output Operator [RS_1348]
                                            Group By Operator [GBY_1347] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1346] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1344] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1343] (rows=3856907 width=114)
                                                    Conds:RS_1532._col0=RS_1523._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1523]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1519]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1532]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1529]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1244]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1243] (rows=304320 width=230)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1242] (rows=121728 width=220)
                          keys:_col0, _col1, _col2, _col3,top n:100
                          Select Operator [SEL_1240] (rows=40576 width=220)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1239] (rows=40576 width=243)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1238] (rows=121728 width=243)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1415]
                                  Filter Operator [FIL_1414] (rows=121728 width=131)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1413] (rows=121728 width=131)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_98]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_97] (rows=121728 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_95] (rows=15062131 width=11)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1232] (rows=15062131 width=11)
                                              Conds:RS_92._col1=RS_93._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 29 [SIMPLE_EDGE]
                                              SHUFFLE [RS_93]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_91] (rows=362 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1204] (rows=724 width=4)
                                                    Conds:RS_1401._col1, _col2, _col3=RS_1412._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 59 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1401]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1392] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1383] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 28 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1412]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1411] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1410] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1409] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 27 [SIMPLE_EDGE]
                                                            <-Reducer 26 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1468]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1467] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1466] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_29]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 40 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1482]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1481] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1480] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 39 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_49]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 46 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1496]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1495] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1494] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 45 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_70]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_92]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1197] (rows=15062131 width=15)
                                                  Conds:RS_87._col1=RS_1400._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 59 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1400]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1391] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1382] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_87]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1196] (rows=15062131 width=4)
                                                      Conds:RS_1381._col0=RS_1353._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1353]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1351]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1381]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1380] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1379] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_85_date_dim_d_date_sk_min) AND DynamicValue(RS_85_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_85_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1378]
                                                                Group By Operator [GBY_1377] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_1372]
                                                                    Group By Operator [GBY_1367] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1354] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1351]
                              <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1419]
                                  Select Operator [SEL_1418] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1417] (rows=1 width=120)
                                      predicate:CAST( (_col0 / _col1) AS decimal(22,6)) is not null
                                      Group By Operator [GBY_1416] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 51 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 50 [CONTAINS]
                                          Reduce Output Operator [RS_1300]
                                            Group By Operator [GBY_1299] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1298] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1296] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1295] (rows=14736682 width=0)
                                                    Conds:RS_1463._col0=RS_1364._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1364]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1352]
                                                  <-Map 60 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1463]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1461]
                                        <-Reducer 64 [CONTAINS]
                                          Reduce Output Operator [RS_1318]
                                            Group By Operator [GBY_1317] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1316] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1314] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1313] (rows=7676736 width=94)
                                                    Conds:RS_1515._col0=RS_1505._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1505]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1504]
                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1515]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1514]
                                        <-Reducer 70 [CONTAINS]
                                          Reduce Output Operator [RS_1336]
                                            Group By Operator [GBY_1335] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1334] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1332] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1331] (rows=3856907 width=114)
                                                    Conds:RS_1530._col0=RS_1520._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1520]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1519]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1530]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1529]

