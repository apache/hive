CBO PLAN:
HiveSortLimit(sort0=[$0], sort1=[$3], sort2=[$4], dir0=[ASC], dir1=[ASC], dir2=[ASC], fetch=[100])
  HiveProject(channel=[$0], item=[$1], return_ratio=[$2], return_rank=[$3], currency_rank=[$4])
    HiveAggregate(group=[{0, 1, 2, 3, 4}])
      HiveProject(channel=[$0], item=[$1], return_ratio=[$2], return_rank=[$3], currency_rank=[$4])
        HiveUnion(all=[true])
          HiveProject(channel=[$0], item=[$1], return_ratio=[$2], return_rank=[$3], currency_rank=[$4])
            HiveAggregate(group=[{0, 1, 2, 3, 4}])
              HiveProject(channel=[$0], item=[$1], return_ratio=[$2], return_rank=[$3], currency_rank=[$4])
                HiveUnion(all=[true])
                  HiveProject(channel=[_UTF-16LE'web':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], item=[$0], return_ratio=[$1], return_rank=[$2], currency_rank=[$3])
                    HiveFilter(condition=[OR(<=($2, 10), <=($3, 10))])
                      HiveProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY /(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4)) NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], rank_window_1=[rank() OVER (PARTITION BY 0 ORDER BY /(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4)) NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
                        HiveProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4])
                          HiveAggregate(group=[{0}], agg#0=[sum($1)], agg#1=[sum($2)], agg#2=[sum($3)], agg#3=[sum($4)])
                            HiveProject($f0=[$4], $f1=[CASE(IS NOT NULL($2), $2, 0)], $f2=[CASE(IS NOT NULL($6), $6, 0)], $f3=[CASE(IS NOT NULL($3), $3, 0:DECIMAL(12, 2))], $f4=[CASE(IS NOT NULL($7), $7, 0:DECIMAL(12, 2))])
                              HiveJoin(condition=[AND(=($5, $1), =($4, $0))], joinType=[inner], algorithm=[none], cost=[not available])
                                HiveProject(wr_item_sk=[$1], wr_order_number=[$12], wr_return_quantity=[$13], wr_return_amt=[$14])
                                  HiveFilter(condition=[>($14, 10000:DECIMAL(5, 0))])
                                    HiveTableScan(table=[[default, web_returns]], table:alias=[wr])
                                HiveJoin(condition=[=($5, $6)], joinType=[inner], algorithm=[none], cost=[not available])
                                  HiveProject(ws_item_sk=[$2], ws_order_number=[$16], ws_quantity=[$17], ws_net_paid=[$28], ws_net_profit=[$32], ws_sold_date_sk=[$33])
                                    HiveFilter(condition=[AND(>($17, 0), >($32, 1:DECIMAL(1, 0)), >($28, 0:DECIMAL(1, 0)), IS NOT NULL($33))])
                                      HiveTableScan(table=[[default, web_sales]], table:alias=[ws])
                                  HiveProject(d_date_sk=[$0])
                                    HiveFilter(condition=[AND(=($6, 2000), =($8, 12))])
                                      HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
                  HiveProject(channel=[_UTF-16LE'catalog':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], item=[$0], return_ratio=[$1], return_rank=[$2], currency_rank=[$3])
                    HiveFilter(condition=[OR(<=($2, 10), <=($3, 10))])
                      HiveProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY /(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4)) NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], rank_window_1=[rank() OVER (PARTITION BY 0 ORDER BY /(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4)) NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
                        HiveProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4])
                          HiveAggregate(group=[{0}], agg#0=[sum($1)], agg#1=[sum($2)], agg#2=[sum($3)], agg#3=[sum($4)])
                            HiveProject($f0=[$4], $f1=[CASE(IS NOT NULL($2), $2, 0)], $f2=[CASE(IS NOT NULL($6), $6, 0)], $f3=[CASE(IS NOT NULL($3), $3, 0:DECIMAL(12, 2))], $f4=[CASE(IS NOT NULL($7), $7, 0:DECIMAL(12, 2))])
                              HiveJoin(condition=[AND(=($5, $1), =($4, $0))], joinType=[inner], algorithm=[none], cost=[not available])
                                HiveProject(cr_item_sk=[$1], cr_order_number=[$15], cr_return_quantity=[$16], cr_return_amount=[$17])
                                  HiveFilter(condition=[>($17, 10000:DECIMAL(5, 0))])
                                    HiveTableScan(table=[[default, catalog_returns]], table:alias=[cr])
                                HiveJoin(condition=[=($5, $6)], joinType=[inner], algorithm=[none], cost=[not available])
                                  HiveProject(cs_item_sk=[$14], cs_order_number=[$16], cs_quantity=[$17], cs_net_paid=[$28], cs_net_profit=[$32], cs_sold_date_sk=[$33])
                                    HiveFilter(condition=[AND(>($17, 0), >($32, 1:DECIMAL(1, 0)), >($28, 0:DECIMAL(1, 0)), IS NOT NULL($33))])
                                      HiveTableScan(table=[[default, catalog_sales]], table:alias=[cs])
                                  HiveProject(d_date_sk=[$0])
                                    HiveFilter(condition=[AND(=($6, 2000), =($8, 12))])
                                      HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])
          HiveProject(channel=[_UTF-16LE'store':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], item=[$0], return_ratio=[$1], return_rank=[$2], currency_rank=[$3])
            HiveFilter(condition=[OR(<=($2, 10), <=($3, 10))])
              HiveProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4))], rank_window_0=[rank() OVER (PARTITION BY 0 ORDER BY /(CAST($1):DECIMAL(15, 4), CAST($2):DECIMAL(15, 4)) NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], rank_window_1=[rank() OVER (PARTITION BY 0 ORDER BY /(CAST($3):DECIMAL(15, 4), CAST($4):DECIMAL(15, 4)) NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
                HiveProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4])
                  HiveAggregate(group=[{0}], agg#0=[sum($1)], agg#1=[sum($2)], agg#2=[sum($3)], agg#3=[sum($4)])
                    HiveProject($f0=[$4], $f1=[CASE(IS NOT NULL($2), $2, 0)], $f2=[CASE(IS NOT NULL($6), $6, 0)], $f3=[CASE(IS NOT NULL($3), $3, 0:DECIMAL(12, 2))], $f4=[CASE(IS NOT NULL($7), $7, 0:DECIMAL(12, 2))])
                      HiveJoin(condition=[AND(=($5, $1), =($4, $0))], joinType=[inner], algorithm=[none], cost=[not available])
                        HiveProject(sr_item_sk=[$1], sr_ticket_number=[$8], sr_return_quantity=[$9], sr_return_amt=[$10])
                          HiveFilter(condition=[>($10, 10000:DECIMAL(5, 0))])
                            HiveTableScan(table=[[default, store_returns]], table:alias=[sr])
                        HiveJoin(condition=[=($5, $6)], joinType=[inner], algorithm=[none], cost=[not available])
                          HiveProject(ss_item_sk=[$1], ss_ticket_number=[$8], ss_quantity=[$9], ss_net_paid=[$19], ss_net_profit=[$21], ss_sold_date_sk=[$22])
                            HiveFilter(condition=[AND(>($9, 0), >($21, 1:DECIMAL(1, 0)), >($19, 0:DECIMAL(1, 0)), IS NOT NULL($22))])
                              HiveTableScan(table=[[default, store_sales]], table:alias=[sts])
                          HiveProject(d_date_sk=[$0])
                            HiveFilter(condition=[AND(=($6, 2000), =($8, 12))])
                              HiveTableScan(table=[[default, date_dim]], table:alias=[date_dim])

