Warning: Shuffle Join MERGEJOIN[131][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[133][tables = [$hdt$_4, $hdt$_5, $hdt$_3]] in Stage 'Reducer 13' is a cross product
PREHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 6 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE)
Reducer 17 <- Map 15 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 20 <- Map 18 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 1 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 16 (CUSTOM_SIMPLE_EDGE), Reducer 19 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4
      File Output Operator [FS_104]
        Limit [LIM_103] (rows=100 width=185)
          Number of rows:100
          Select Operator [SEL_102] (rows=1393898919384048 width=185)
            Output:["_col0","_col1","_col2"]
          <-Reducer 3 [SIMPLE_EDGE]
            SHUFFLE [RS_101]
              Select Operator [SEL_100] (rows=1393898919384048 width=185)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_135] (rows=1393898919384048 width=185)
                  Conds:RS_97._col3=RS_98._col3(Inner),Output:["_col1","_col3","_col5"]
                <-Reducer 2 [SIMPLE_EDGE]
                  SHUFFLE [RS_97]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_132] (rows=1267180808338276 width=185)
                      Conds:RS_94._col0=RS_95._col0(Inner),Output:["_col1","_col3"]
                    <-Map 1 [SIMPLE_EDGE]
                      SHUFFLE [RS_94]
                        PartitionCols:_col0
                        Select Operator [SEL_2] (rows=462000 width=1436)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_121] (rows=462000 width=1436)
                            predicate:i_item_sk is not null
                            TableScan [TS_0] (rows=462000 width=1436)
                              default@item,i1,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_product_name"]
                    <-Reducer 10 [SIMPLE_EDGE]
                      SHUFFLE [RS_95]
                        PartitionCols:_col0
                        Select Operator [SEL_41] (rows=1151982528066248 width=185)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_122] (rows=1151982528066248 width=185)
                            predicate:((rank_window_0 < 11) and _col2 is not null)
                            PTF Operator [PTF_40] (rows=3455947584198744 width=185)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST","partition by:":"0"}]
                              Select Operator [SEL_39] (rows=3455947584198744 width=185)
                                Output:["_col2","_col3"]
                              <-Reducer 9 [SIMPLE_EDGE]
                                SHUFFLE [RS_38]
                                  PartitionCols:0
                                  Filter Operator [FIL_37] (rows=3455947584198744 width=185)
                                    predicate:(_col3 > (0.9 * _col1))
                                    Merge Join Operator [MERGEJOIN_131] (rows=10367842752596232 width=185)
                                      Conds:(Inner),(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 16 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_34]
                                        Select Operator [SEL_25] (rows=71999454 width=88)
                                          Output:["_col0"]
                                          Group By Operator [GBY_24] (rows=71999454 width=88)
                                            Output:["_col0","_col1"],aggregations:["avg(VALUE._col0)"],keys:KEY._col0
                                          <-Map 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_23]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_22] (rows=143998908 width=88)
                                                Output:["_col0","_col1"],aggregations:["avg(_col1)"],keys:410
                                                Select Operator [SEL_20] (rows=143998908 width=88)
                                                  Output:["_col1"]
                                                  Filter Operator [FIL_124] (rows=143998908 width=88)
                                                    predicate:((ss_store_sk = 410) and ss_hdemo_sk is null)
                                                    TableScan [TS_18] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_hdemo_sk","ss_store_sk","ss_net_profit"]
                                    <-Reducer 19 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_35]
                                        Group By Operator [GBY_31] (rows=143998908 width=88)
                                          Output:["_col0","_col1"],aggregations:["avg(VALUE._col0)"],keys:KEY._col0
                                        <-Map 18 [SIMPLE_EDGE]
                                          SHUFFLE [RS_30]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_29] (rows=287997817 width=88)
                                              Output:["_col0","_col1"],aggregations:["avg(ss_net_profit)"],keys:ss_item_sk
                                              Select Operator [SEL_28] (rows=287997817 width=88)
                                                Output:["ss_item_sk","ss_net_profit"]
                                                Filter Operator [FIL_125] (rows=287997817 width=88)
                                                  predicate:(ss_store_sk = 410)
                                                  TableScan [TS_26] (rows=575995635 width=88)
                                                    default@store_sales,ss1,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk","ss_store_sk","ss_net_profit"]
                                    <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_33]
                                        Select Operator [SEL_17] (rows=1 width=8)
                                          Filter Operator [FIL_16] (rows=1 width=8)
                                            predicate:(sq_count_check(_col0) <= 1)
                                            Group By Operator [GBY_14] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                                              PARTITION_ONLY_SHUFFLE [RS_13]
                                                Group By Operator [GBY_12] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count()"]
                                                  Select Operator [SEL_10] (rows=71999454 width=88)
                                                    Group By Operator [GBY_9] (rows=71999454 width=88)
                                                      Output:["_col0"],keys:KEY._col0
                                                    <-Map 6 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_8]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_7] (rows=143998908 width=88)
                                                          Output:["_col0"],keys:410
                                                          Select Operator [SEL_5] (rows=143998908 width=88)
                                                            Filter Operator [FIL_123] (rows=143998908 width=88)
                                                              predicate:((ss_store_sk = 410) and ss_hdemo_sk is null)
                                                              TableScan [TS_3] (rows=575995635 width=88)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_hdemo_sk","ss_store_sk"]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_98]
                    PartitionCols:_col3
                    Merge Join Operator [MERGEJOIN_134] (rows=1267180808338276 width=185)
                      Conds:RS_90._col0=RS_91._col0(Inner),Output:["_col1","_col3"]
                    <-Map 1 [SIMPLE_EDGE]
                      SHUFFLE [RS_90]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_2]
                    <-Reducer 14 [SIMPLE_EDGE]
                      SHUFFLE [RS_91]
                        PartitionCols:_col0
                        Select Operator [SEL_86] (rows=1151982528066248 width=185)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_127] (rows=1151982528066248 width=185)
                            predicate:((rank_window_0 < 11) and _col2 is not null)
                            PTF Operator [PTF_85] (rows=3455947584198744 width=185)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 DESC NULLS LAST","partition by:":"0"}]
                              Select Operator [SEL_84] (rows=3455947584198744 width=185)
                                Output:["_col2","_col3"]
                              <-Reducer 13 [SIMPLE_EDGE]
                                SHUFFLE [RS_83]
                                  PartitionCols:0
                                  Filter Operator [FIL_82] (rows=3455947584198744 width=185)
                                    predicate:(_col3 > (0.9 * _col1))
                                    Merge Join Operator [MERGEJOIN_133] (rows=10367842752596232 width=185)
                                      Conds:(Inner),(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 12 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_78]
                                        Select Operator [SEL_62] (rows=1 width=8)
                                          Filter Operator [FIL_61] (rows=1 width=8)
                                            predicate:(sq_count_check(_col0) <= 1)
                                            Group By Operator [GBY_59] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                                              PARTITION_ONLY_SHUFFLE [RS_58]
                                                Group By Operator [GBY_57] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count()"]
                                                  Select Operator [SEL_55] (rows=71999454 width=88)
                                                    Group By Operator [GBY_54] (rows=71999454 width=88)
                                                      Output:["_col0"],keys:KEY._col0
                                                    <-Map 6 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_53]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Group By Operator [GBY_7]
                                    <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_79]
                                        Select Operator [SEL_70] (rows=71999454 width=88)
                                          Output:["_col0"]
                                          Group By Operator [GBY_69] (rows=71999454 width=88)
                                            Output:["_col0","_col1"],aggregations:["avg(VALUE._col0)"],keys:KEY._col0
                                          <-Map 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_68]
                                              PartitionCols:_col0
                                               Please refer to the previous Group By Operator [GBY_22]
                                    <-Reducer 20 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_80]
                                        Group By Operator [GBY_76] (rows=143998908 width=88)
                                          Output:["_col0","_col1"],aggregations:["avg(VALUE._col0)"],keys:KEY._col0
                                        <-Map 18 [SIMPLE_EDGE]
                                          SHUFFLE [RS_75]
                                            PartitionCols:_col0
                                             Please refer to the previous Group By Operator [GBY_29]

