PREHOOK: query: explain
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Reducer 17 (ONE_TO_ONE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 16 <- Map 14 (SIMPLE_EDGE)
Reducer 17 <- Map 14 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 15 (ONE_TO_ONE_EDGE)
Reducer 20 <- Map 26 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 23 <- Map 26 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 21 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 25 <- Map 26 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Reducer 16 (ONE_TO_ONE_EDGE)
Reducer 9 <- Reducer 23 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7
      File Output Operator [FS_121]
        Limit [LIM_120] (rows=100 width=108)
          Number of rows:100
          Select Operator [SEL_119] (rows=335408073 width=108)
            Output:["_col0","_col1"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_118]
              Group By Operator [GBY_116] (rows=335408073 width=108)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Union 5 [SIMPLE_EDGE]
                <-Reducer 10 [CONTAINS]
                  Reduce Output Operator [RS_115]
                    PartitionCols:_col0
                    Group By Operator [GBY_114] (rows=670816147 width=108)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_72] (rows=191657247 width=135)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_71]
                          PartitionCols:_col0
                          Group By Operator [GBY_70] (rows=383314495 width=135)
                            Output:["_col0","_col1"],aggregations:["sum(_col8)"],keys:_col1
                            Merge Join Operator [MERGEJOIN_183] (rows=383314495 width=135)
                              Conds:RS_66._col0=RS_67._col4(Inner),Output:["_col1","_col8"]
                            <-Reducer 23 [SIMPLE_EDGE]
                              SHUFFLE [RS_67]
                                PartitionCols:_col4
                                Select Operator [SEL_62] (rows=348467716 width=135)
                                  Output:["_col4","_col5"]
                                  Merge Join Operator [MERGEJOIN_178] (rows=348467716 width=135)
                                    Conds:RS_59._col1=RS_60._col0(Inner),Output:["_col2","_col3"]
                                  <-Map 26 [SIMPLE_EDGE]
                                    SHUFFLE [RS_60]
                                      PartitionCols:_col0
                                      Select Operator [SEL_18] (rows=20000000 width=1014)
                                        Output:["_col0"]
                                        Filter Operator [FIL_162] (rows=20000000 width=1014)
                                          predicate:((ca_gmt_offset = -8) and ca_address_sk is not null)
                                          TableScan [TS_16] (rows=40000000 width=1014)
                                            default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_gmt_offset"]
                                  <-Reducer 22 [SIMPLE_EDGE]
                                    SHUFFLE [RS_59]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_177] (rows=316788826 width=135)
                                        Conds:RS_56._col0=RS_57._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_57]
                                          PartitionCols:_col0
                                          Select Operator [SEL_15] (rows=18262 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_161] (rows=18262 width=1119)
                                              predicate:((d_year = 2000) and (d_moy = 1) and d_date_sk is not null)
                                              TableScan [TS_13] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Map 27 [SIMPLE_EDGE]
                                        SHUFFLE [RS_56]
                                          PartitionCols:_col0
                                          Select Operator [SEL_49] (rows=287989836 width=135)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_165] (rows=287989836 width=135)
                                              predicate:(cs_sold_date_sk is not null and cs_bill_addr_sk is not null and cs_item_sk is not null)
                                              TableScan [TS_47] (rows=287989836 width=135)
                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_66]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_176] (rows=508200 width=1436)
                                  Conds:RS_63._col1=RS_64._col0(Inner),Output:["_col0","_col1"]
                                <-Map 1 [SIMPLE_EDGE]
                                  SHUFFLE [RS_63]
                                    PartitionCols:_col1
                                    Select Operator [SEL_2] (rows=462000 width=1436)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_158] (rows=462000 width=1436)
                                        predicate:(i_item_id is not null and i_item_sk is not null)
                                        TableScan [TS_0] (rows=462000 width=1436)
                                          default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id"]
                                <-Reducer 16 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_64]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_45] (rows=115500 width=1436)
                                      Output:["_col0"],keys:KEY._col0
                                    <-Map 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_44]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_6] (rows=231000 width=1436)
                                          Output:["_col0"],keys:i_item_id
                                          Select Operator [SEL_5] (rows=231000 width=1436)
                                            Output:["i_item_id"]
                                            Filter Operator [FIL_159] (rows=231000 width=1436)
                                              predicate:((i_color) IN ('orchid', 'chiffon', 'lace') and i_item_id is not null)
                                              TableScan [TS_3] (rows=462000 width=1436)
                                                default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_id","i_color"]
                <-Reducer 13 [CONTAINS]
                  Reduce Output Operator [RS_115]
                    PartitionCols:_col0
                    Group By Operator [GBY_114] (rows=670816147 width=108)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_110] (rows=95833781 width=135)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 12 [SIMPLE_EDGE]
                        SHUFFLE [RS_109]
                          PartitionCols:_col0
                          Group By Operator [GBY_108] (rows=191667562 width=135)
                            Output:["_col0","_col1"],aggregations:["sum(_col8)"],keys:_col1
                            Merge Join Operator [MERGEJOIN_184] (rows=191667562 width=135)
                              Conds:RS_104._col0=RS_105._col3(Inner),Output:["_col1","_col8"]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_104]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_179] (rows=508200 width=1436)
                                  Conds:RS_101._col1=RS_102._col0(Inner),Output:["_col0","_col1"]
                                <-Map 1 [SIMPLE_EDGE]
                                  SHUFFLE [RS_101]
                                    PartitionCols:_col1
                                     Please refer to the previous Select Operator [SEL_2]
                                <-Reducer 17 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_102]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_83] (rows=115500 width=1436)
                                      Output:["_col0"],keys:KEY._col0
                                    <-Map 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_82]
                                        PartitionCols:_col0
                                         Please refer to the previous Group By Operator [GBY_6]
                            <-Reducer 25 [SIMPLE_EDGE]
                              SHUFFLE [RS_105]
                                PartitionCols:_col3
                                Select Operator [SEL_100] (rows=174243235 width=135)
                                  Output:["_col3","_col5"]
                                  Merge Join Operator [MERGEJOIN_181] (rows=174243235 width=135)
                                    Conds:RS_97._col2=RS_98._col0(Inner),Output:["_col1","_col3"]
                                  <-Map 26 [SIMPLE_EDGE]
                                    SHUFFLE [RS_98]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_18]
                                  <-Reducer 24 [SIMPLE_EDGE]
                                    SHUFFLE [RS_97]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_180] (rows=158402938 width=135)
                                        Conds:RS_94._col0=RS_95._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_95]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_15]
                                      <-Map 28 [SIMPLE_EDGE]
                                        SHUFFLE [RS_94]
                                          PartitionCols:_col0
                                          Select Operator [SEL_87] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_170] (rows=144002668 width=135)
                                              predicate:(ws_sold_date_sk is not null and ws_bill_addr_sk is not null and ws_item_sk is not null)
                                              TableScan [TS_85] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                <-Reducer 4 [CONTAINS]
                  Reduce Output Operator [RS_115]
                    PartitionCols:_col0
                    Group By Operator [GBY_114] (rows=670816147 width=108)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_35] (rows=383325119 width=88)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_34]
                          PartitionCols:_col0
                          Group By Operator [GBY_33] (rows=766650239 width=88)
                            Output:["_col0","_col1"],aggregations:["sum(_col8)"],keys:_col1
                            Merge Join Operator [MERGEJOIN_182] (rows=766650239 width=88)
                              Conds:RS_29._col0=RS_30._col3(Inner),Output:["_col1","_col8"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_29]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_173] (rows=508200 width=1436)
                                  Conds:RS_26._col1=RS_27._col0(Inner),Output:["_col0","_col1"]
                                <-Map 1 [SIMPLE_EDGE]
                                  SHUFFLE [RS_26]
                                    PartitionCols:_col1
                                     Please refer to the previous Select Operator [SEL_2]
                                <-Reducer 15 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_27]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_8] (rows=115500 width=1436)
                                      Output:["_col0"],keys:KEY._col0
                                    <-Map 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_7]
                                        PartitionCols:_col0
                                         Please refer to the previous Group By Operator [GBY_6]
                            <-Reducer 20 [SIMPLE_EDGE]
                              SHUFFLE [RS_30]
                                PartitionCols:_col3
                                Select Operator [SEL_25] (rows=696954748 width=88)
                                  Output:["_col3","_col5"]
                                  Merge Join Operator [MERGEJOIN_175] (rows=696954748 width=88)
                                    Conds:RS_22._col2=RS_23._col0(Inner),Output:["_col1","_col3"]
                                  <-Map 26 [SIMPLE_EDGE]
                                    SHUFFLE [RS_23]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_18]
                                  <-Reducer 19 [SIMPLE_EDGE]
                                    SHUFFLE [RS_22]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_174] (rows=633595212 width=88)
                                        Conds:RS_19._col0=RS_20._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_20]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_15]
                                      <-Map 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_19]
                                          PartitionCols:_col0
                                          Select Operator [SEL_12] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_160] (rows=575995635 width=88)
                                              predicate:(ss_sold_date_sk is not null and ss_addr_sk is not null and ss_item_sk is not null)
                                              TableScan [TS_10] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]

