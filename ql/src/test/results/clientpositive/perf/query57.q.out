PREHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 21 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 22 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 1 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 15 <- Map 21 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 22 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 3 <- Map 21 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 22 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 13 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8
      File Output Operator [FS_112]
        Limit [LIM_110] (rows=100 width=135)
          Number of rows:100
          Select Operator [SEL_109] (rows=421645952 width=135)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_108]
              Select Operator [SEL_107] (rows=421645952 width=135)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Merge Join Operator [MERGEJOIN_189] (rows=421645952 width=135)
                  Conds:RS_103._col0, _col2, _col1, (_col6 + 1)=RS_104._col0, _col2, _col1, _col7(Inner),RS_104._col0, _col2, _col1, _col7=RS_105._col0, _col2, _col1, (_col6 - 1)(Inner),Output:["_col5","_col7","_col8","_col10","_col11","_col12","_col13","_col20"]
                <-Reducer 13 [SIMPLE_EDGE]
                  SHUFFLE [RS_103]
                    PartitionCols:_col0, _col2, _col1, (_col6 + 1)
                    Select Operator [SEL_29] (rows=191657247 width=135)
                      Output:["_col0","_col1","_col2","_col5","_col6"]
                      Filter Operator [FIL_164] (rows=191657247 width=135)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_28] (rows=191657247 width=135)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST, _col4 ASC NULLS FIRST","partition by:":"_col0, _col1, _col2"}]
                          Select Operator [SEL_27] (rows=191657247 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          <-Reducer 12 [SIMPLE_EDGE]
                            SHUFFLE [RS_26]
                              PartitionCols:_col0, _col1, _col2
                              Select Operator [SEL_25] (rows=191657247 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                Group By Operator [GBY_24] (rows=191657247 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_23]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                                    Group By Operator [GBY_22] (rows=383314495 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col3)"],keys:_col5, _col6, _col8, _col10, _col11
                                      Merge Join Operator [MERGEJOIN_182] (rows=383314495 width=135)
                                        Conds:RS_18._col2=RS_19._col0(Inner),Output:["_col3","_col5","_col6","_col8","_col10","_col11"]
                                      <-Map 22 [SIMPLE_EDGE]
                                        SHUFFLE [RS_19]
                                          PartitionCols:_col0
                                          Select Operator [SEL_81] (rows=462000 width=1436)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_179] (rows=462000 width=1436)
                                              predicate:(i_item_sk is not null and i_category is not null and i_brand is not null)
                                              TableScan [TS_79] (rows=462000 width=1436)
                                                default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand","i_category"]
                                      <-Reducer 10 [SIMPLE_EDGE]
                                        SHUFFLE [RS_18]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_181] (rows=348467716 width=135)
                                            Conds:RS_15._col1=RS_16._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col8"]
                                          <-Map 21 [SIMPLE_EDGE]
                                            SHUFFLE [RS_16]
                                              PartitionCols:_col0
                                              Select Operator [SEL_78] (rows=60 width=2045)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_178] (rows=60 width=2045)
                                                  predicate:(cc_call_center_sk is not null and cc_name is not null)
                                                  TableScan [TS_76] (rows=60 width=2045)
                                                    default@call_center,call_center,Tbl:COMPLETE,Col:NONE,Output:["cc_call_center_sk","cc_name"]
                                          <-Reducer 9 [SIMPLE_EDGE]
                                            SHUFFLE [RS_15]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_180] (rows=316788826 width=135)
                                                Conds:RS_12._col0=RS_13._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                              <-Map 1 [SIMPLE_EDGE]
                                                SHUFFLE [RS_12]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_72] (rows=287989836 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_176] (rows=287989836 width=135)
                                                      predicate:(cs_item_sk is not null and cs_sold_date_sk is not null and cs_call_center_sk is not null)
                                                      TableScan [TS_70] (rows=287989836 width=135)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_call_center_sk","cs_item_sk","cs_sales_price"]
                                              <-Map 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_13]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_75] (rows=73048 width=1119)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_177] (rows=73048 width=1119)
                                                      predicate:(((d_year = 2000) or ((d_year = 1999) and (d_moy = 12)) or ((d_year = 2001) and (d_moy = 1))) and d_date_sk is not null)
                                                      TableScan [TS_73] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                <-Reducer 19 [SIMPLE_EDGE]
                  SHUFFLE [RS_104]
                    PartitionCols:_col0, _col2, _col1, _col7
                    Select Operator [SEL_67] (rows=15971437 width=135)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                      Filter Operator [FIL_169] (rows=15971437 width=135)
                        predicate:CASE WHEN ((_col0 > 0)) THEN (((abs((_col6 - _col0)) / _col0) > 0.1)) ELSE (null) END
                        Select Operator [SEL_66] (rows=31942874 width=135)
                          Output:["rank_window_1","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          Filter Operator [FIL_170] (rows=31942874 width=135)
                            predicate:((_col0 > 0) and rank_window_1 is not null and (_col4 = 2000))
                            PTF Operator [PTF_65] (rows=191657247 width=135)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col4 ASC NULLS FIRST, _col5 ASC NULLS FIRST","partition by:":"_col1, _col2, _col3"}]
                              Select Operator [SEL_64] (rows=191657247 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 18 [SIMPLE_EDGE]
                                SHUFFLE [RS_63]
                                  PartitionCols:_col0, _col1, _col2
                                  Select Operator [SEL_62] (rows=191657247 width=135)
                                    Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5"]
                                    PTF Operator [PTF_61] (rows=191657247 width=135)
                                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS FIRST, _col1 ASC NULLS FIRST, _col2 ASC NULLS FIRST, _col3 ASC NULLS FIRST","partition by:":"_col0, _col1, _col2, _col3"}]
                                      Select Operator [SEL_60] (rows=191657247 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      <-Reducer 17 [SIMPLE_EDGE]
                                        SHUFFLE [RS_59]
                                          PartitionCols:_col0, _col1, _col2, _col3
                                          Select Operator [SEL_58] (rows=191657247 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Group By Operator [GBY_57] (rows=191657247 width=135)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                                            <-Reducer 16 [SIMPLE_EDGE]
                                              SHUFFLE [RS_56]
                                                PartitionCols:_col0, _col1, _col2, _col3, _col4
                                                Group By Operator [GBY_55] (rows=383314495 width=135)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col3)"],keys:_col5, _col6, _col8, _col10, _col11
                                                  Merge Join Operator [MERGEJOIN_185] (rows=383314495 width=135)
                                                    Conds:RS_51._col2=RS_52._col0(Inner),Output:["_col3","_col5","_col6","_col8","_col10","_col11"]
                                                  <-Map 22 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_52]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_81]
                                                  <-Reducer 15 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_51]
                                                      PartitionCols:_col2
                                                      Merge Join Operator [MERGEJOIN_184] (rows=348467716 width=135)
                                                        Conds:RS_48._col1=RS_49._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col8"]
                                                      <-Map 21 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_49]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_78]
                                                      <-Reducer 14 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_48]
                                                          PartitionCols:_col1
                                                          Merge Join Operator [MERGEJOIN_183] (rows=316788826 width=135)
                                                            Conds:RS_45._col0=RS_46._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                                          <-Map 1 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_45]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_72]
                                                          <-Map 20 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_46]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_75]
                <-Reducer 6 [SIMPLE_EDGE]
                  SHUFFLE [RS_105]
                    PartitionCols:_col0, _col2, _col1, (_col6 - 1)
                    Select Operator [SEL_99] (rows=191657247 width=135)
                      Output:["_col0","_col1","_col2","_col5","_col6"]
                      Filter Operator [FIL_175] (rows=191657247 width=135)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_98] (rows=191657247 width=135)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST, _col4 ASC NULLS FIRST","partition by:":"_col0, _col1, _col2"}]
                          Select Operator [SEL_97] (rows=191657247 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          <-Reducer 5 [SIMPLE_EDGE]
                            SHUFFLE [RS_96]
                              PartitionCols:_col0, _col1, _col2
                              Select Operator [SEL_95] (rows=191657247 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                Group By Operator [GBY_94] (rows=191657247 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                                <-Reducer 4 [SIMPLE_EDGE]
                                  SHUFFLE [RS_93]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                                    Group By Operator [GBY_92] (rows=383314495 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col3)"],keys:_col5, _col6, _col8, _col10, _col11
                                      Merge Join Operator [MERGEJOIN_188] (rows=383314495 width=135)
                                        Conds:RS_88._col2=RS_89._col0(Inner),Output:["_col3","_col5","_col6","_col8","_col10","_col11"]
                                      <-Map 22 [SIMPLE_EDGE]
                                        SHUFFLE [RS_89]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_81]
                                      <-Reducer 3 [SIMPLE_EDGE]
                                        SHUFFLE [RS_88]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_187] (rows=348467716 width=135)
                                            Conds:RS_85._col1=RS_86._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col8"]
                                          <-Map 21 [SIMPLE_EDGE]
                                            SHUFFLE [RS_86]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_78]
                                          <-Reducer 2 [SIMPLE_EDGE]
                                            SHUFFLE [RS_85]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_186] (rows=316788826 width=135)
                                                Conds:RS_82._col0=RS_83._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                              <-Map 1 [SIMPLE_EDGE]
                                                SHUFFLE [RS_82]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_72]
                                              <-Map 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_83]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_75]

