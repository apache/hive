PREHOOK: query: explain
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Books','Electronics') and
          i_class in ('wallpaper','parenting','musical')
         )
      or (i_category in ('Shoes','Jewelry','Men') and
          i_class in ('womens','birdal','pants') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Books','Electronics') and
          i_class in ('wallpaper','parenting','musical')
         )
      or (i_category in ('Shoes','Jewelry','Men') and
          i_class in ('womens','birdal','pants') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7
      File Output Operator [FS_37]
        Limit [LIM_35] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_34] (rows=191662559 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_33]
              Select Operator [SEL_30] (rows=191662559 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Filter Operator [FIL_47] (rows=191662559 width=88)
                  predicate:CASE WHEN ((avg_window_0 <> 0)) THEN (((abs((_col6 - avg_window_0)) / avg_window_0) > 0.1)) ELSE (null) END
                  Select Operator [SEL_29] (rows=383325119 width=88)
                    Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                    PTF Operator [PTF_28] (rows=383325119 width=88)
                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS FIRST, _col2 ASC NULLS FIRST, _col3 ASC NULLS FIRST, _col4 ASC NULLS FIRST","partition by:":"_col0, _col2, _col3, _col4"}]
                      Select Operator [SEL_27] (rows=383325119 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_26]
                          PartitionCols:_col0, _col2, _col3, _col4
                          Select Operator [SEL_25] (rows=383325119 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                            Group By Operator [GBY_24] (rows=383325119 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_23]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                Group By Operator [GBY_22] (rows=766650239 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col3)"],keys:_col5, _col6, _col7, _col10, _col12, _col13
                                  Merge Join Operator [MERGEJOIN_54] (rows=766650239 width=88)
                                    Conds:RS_18._col2=RS_19._col0(Inner),Output:["_col3","_col5","_col6","_col7","_col10","_col12","_col13"]
                                  <-Map 10 [SIMPLE_EDGE]
                                    SHUFFLE [RS_19]
                                      PartitionCols:_col0
                                      Select Operator [SEL_11] (rows=1704 width=1910)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_51] (rows=1704 width=1910)
                                          predicate:s_store_sk is not null
                                          TableScan [TS_9] (rows=1704 width=1910)
                                            default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_company_name"]
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_18]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_53] (rows=696954748 width=88)
                                        Conds:RS_15._col0=RS_16._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col7","_col10"]
                                      <-Map 9 [SIMPLE_EDGE]
                                        SHUFFLE [RS_16]
                                          PartitionCols:_col0
                                          Select Operator [SEL_8] (rows=36525 width=1119)
                                            Output:["_col0","_col2"]
                                            Filter Operator [FIL_50] (rows=36525 width=1119)
                                              predicate:((d_year) IN (2000) and d_date_sk is not null)
                                              TableScan [TS_6] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_15]
                                          PartitionCols:_col0
                                          Merge Join Operator [MERGEJOIN_52] (rows=633595212 width=88)
                                            Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col0","_col2","_col3","_col5","_col6","_col7"]
                                          <-Map 1 [SIMPLE_EDGE]
                                            SHUFFLE [RS_12]
                                              PartitionCols:_col1
                                              Select Operator [SEL_2] (rows=575995635 width=88)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_48] (rows=575995635 width=88)
                                                  predicate:(ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                  TableScan [TS_0] (rows=575995635 width=88)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                          <-Map 8 [SIMPLE_EDGE]
                                            SHUFFLE [RS_13]
                                              PartitionCols:_col0
                                              Select Operator [SEL_5] (rows=231000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_49] (rows=231000 width=1436)
                                                  predicate:(((i_class) IN ('wallpaper', 'parenting', 'musical') or (i_class) IN ('womens', 'birdal', 'pants')) and ((i_category) IN ('Home', 'Books', 'Electronics') or (i_category) IN ('Shoes', 'Jewelry', 'Men')) and (((i_category) IN ('Home', 'Books', 'Electronics') and (i_class) IN ('wallpaper', 'parenting', 'musical')) or ((i_category) IN ('Shoes', 'Jewelry', 'Men') and (i_class) IN ('womens', 'birdal', 'pants'))) and i_item_sk is not null)
                                                  TableScan [TS_3] (rows=462000 width=1436)
                                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand","i_class","i_category"]

