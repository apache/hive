PREHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 11 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 13 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 15 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 12 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7
      File Output Operator [FS_55]
        Limit [LIM_54] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_53] (rows=421657640 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_52]
              Group By Operator [GBY_50] (rows=421657640 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_49]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_48] (rows=843315281 width=88)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col5)","sum(_col20)","sum(_col12)"],keys:_col25, _col26, _col28, _col29
                    Merge Join Operator [MERGEJOIN_101] (rows=843315281 width=88)
                      Conds:RS_44._col3=RS_45._col0(Inner),Output:["_col5","_col12","_col20","_col25","_col26","_col28","_col29"]
                    <-Map 15 [SIMPLE_EDGE]
                      SHUFFLE [RS_45]
                        PartitionCols:_col0
                        Select Operator [SEL_34] (rows=1704 width=1910)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_94] (rows=1704 width=1910)
                            predicate:s_store_sk is not null
                            TableScan [TS_32] (rows=1704 width=1910)
                              default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id","s_store_name"]
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_44]
                        PartitionCols:_col3
                        Merge Join Operator [MERGEJOIN_100] (rows=766650239 width=88)
                          Conds:RS_41._col1=RS_42._col0(Inner),Output:["_col3","_col5","_col12","_col20","_col25","_col26"]
                        <-Map 14 [SIMPLE_EDGE]
                          SHUFFLE [RS_42]
                            PartitionCols:_col0
                            Select Operator [SEL_31] (rows=462000 width=1436)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_93] (rows=462000 width=1436)
                                predicate:i_item_sk is not null
                                TableScan [TS_29] (rows=462000 width=1436)
                                  default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc"]
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_41]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_99] (rows=696954748 width=88)
                              Conds:RS_38._col1, _col2, _col4=RS_39._col8, _col9, _col10(Inner),Output:["_col1","_col3","_col5","_col12","_col20"]
                            <-Reducer 10 [SIMPLE_EDGE]
                              SHUFFLE [RS_39]
                                PartitionCols:_col8, _col9, _col10
                                Merge Join Operator [MERGEJOIN_98] (rows=348467716 width=135)
                                  Conds:RS_25._col2, _col1=RS_26._col1, _col2(Inner),Output:["_col3","_col8","_col9","_col10","_col11"]
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_26]
                                    PartitionCols:_col1, _col2
                                    Merge Join Operator [MERGEJOIN_97] (rows=63350266 width=77)
                                      Conds:RS_18._col0=RS_19._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                    <-Map 8 [SIMPLE_EDGE]
                                      SHUFFLE [RS_19]
                                        PartitionCols:_col0
                                        Select Operator [SEL_17] (rows=4058 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_92] (rows=4058 width=1119)
                                            predicate:(d_moy BETWEEN 4 AND 10 and (d_year = 2000) and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=1119)
                                              default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Map 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_18]
                                        PartitionCols:_col0
                                        Select Operator [SEL_14] (rows=57591150 width=77)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_91] (rows=57591150 width=77)
                                            predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_ticket_number is not null and sr_returned_date_sk is not null)
                                            TableScan [TS_12] (rows=57591150 width=77)
                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_net_loss"]
                                <-Reducer 9 [SIMPLE_EDGE]
                                  SHUFFLE [RS_25]
                                    PartitionCols:_col2, _col1
                                    Merge Join Operator [MERGEJOIN_96] (rows=316788826 width=135)
                                      Conds:RS_22._col0=RS_23._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 8 [SIMPLE_EDGE]
                                      SHUFFLE [RS_23]
                                        PartitionCols:_col0
                                        Select Operator [SEL_11] (rows=4058 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_90] (rows=4058 width=1119)
                                            predicate:(d_moy BETWEEN 4 AND 10 and (d_year = 2000) and d_date_sk is not null)
                                             Please refer to the previous TableScan [TS_3]
                                    <-Map 12 [SIMPLE_EDGE]
                                      SHUFFLE [RS_22]
                                        PartitionCols:_col0
                                        Select Operator [SEL_8] (rows=287989836 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_89] (rows=287989836 width=135)
                                            predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                            TableScan [TS_6] (rows=287989836 width=135)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_net_profit"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_38]
                                PartitionCols:_col1, _col2, _col4
                                Merge Join Operator [MERGEJOIN_95] (rows=633595212 width=88)
                                  Conds:RS_35._col0=RS_36._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                <-Map 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_36]
                                    PartitionCols:_col0
                                    Select Operator [SEL_5] (rows=18262 width=1119)
                                      Output:["_col0"]
                                      Filter Operator [FIL_88] (rows=18262 width=1119)
                                        predicate:((d_moy = 4) and (d_year = 2000) and d_date_sk is not null)
                                         Please refer to the previous TableScan [TS_3]
                                <-Map 1 [SIMPLE_EDGE]
                                  SHUFFLE [RS_35]
                                    PartitionCols:_col0
                                    Select Operator [SEL_2] (rows=575995635 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Filter Operator [FIL_87] (rows=575995635 width=88)
                                        predicate:(ss_customer_sk is not null and ss_item_sk is not null and ss_ticket_number is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                        TableScan [TS_0] (rows=575995635 width=88)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_net_profit"]

