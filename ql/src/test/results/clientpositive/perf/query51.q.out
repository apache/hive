PREHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 10 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6
      File Output Operator [FS_53]
        Limit [LIM_52] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_51] (rows=116159124 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_50]
              Select Operator [SEL_46] (rows=116159124 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Filter Operator [FIL_58] (rows=116159124 width=88)
                  predicate:(max_window_0 > max_window_1)
                  PTF Operator [PTF_45] (rows=348477374 width=88)
                    Function definitions:[{},{"name:":"windowingtablefunction","order by:":"CASE WHEN (_col4 is not null) THEN (_col4) ELSE (_col1) END ASC NULLS FIRST","partition by:":"CASE WHEN (_col3 is not null) THEN (_col3) ELSE (_col0) END"}]
                    Select Operator [SEL_44] (rows=348477374 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_43]
                        PartitionCols:CASE WHEN (_col3 is not null) THEN (_col3) ELSE (_col0) END
                        Merge Join Operator [MERGEJOIN_67] (rows=348477374 width=88)
                          Conds:RS_40._col0, _col1=RS_41._col0, _col1(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_40]
                            PartitionCols:_col0, _col1
                            Select Operator [SEL_17] (rows=316797606 width=88)
                              Output:["_col0","_col1","_col2"]
                              PTF Operator [PTF_16] (rows=316797606 width=88)
                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST","partition by:":"_col0"}]
                                Group By Operator [GBY_12] (rows=316797606 width=88)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_11]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_10] (rows=633595212 width=88)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col4
                                      Merge Join Operator [MERGEJOIN_65] (rows=633595212 width=88)
                                        Conds:RS_6._col0=RS_7._col0(Inner),Output:["_col1","_col2","_col4"]
                                      <-Map 7 [SIMPLE_EDGE]
                                        SHUFFLE [RS_7]
                                          PartitionCols:_col0
                                          Select Operator [SEL_5] (rows=8116 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_60] (rows=8116 width=1119)
                                              predicate:(d_month_seq BETWEEN 1212 AND 1223 and d_date_sk is not null)
                                              TableScan [TS_3] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_month_seq"]
                                      <-Map 1 [SIMPLE_EDGE]
                                        SHUFFLE [RS_6]
                                          PartitionCols:_col0
                                          Select Operator [SEL_2] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_59] (rows=575995635 width=88)
                                              predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                              TableScan [TS_0] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_sales_price"]
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_41]
                            PartitionCols:_col0, _col1
                            Select Operator [SEL_37] (rows=79201469 width=135)
                              Output:["_col0","_col1","_col2"]
                              PTF Operator [PTF_36] (rows=79201469 width=135)
                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST","partition by:":"_col0"}]
                                Group By Operator [GBY_32] (rows=79201469 width=135)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_31]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_30] (rows=158402938 width=135)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col4
                                      Merge Join Operator [MERGEJOIN_66] (rows=158402938 width=135)
                                        Conds:RS_26._col0=RS_27._col0(Inner),Output:["_col1","_col2","_col4"]
                                      <-Map 7 [SIMPLE_EDGE]
                                        SHUFFLE [RS_27]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_5]
                                      <-Map 10 [SIMPLE_EDGE]
                                        SHUFFLE [RS_26]
                                          PartitionCols:_col0
                                          Select Operator [SEL_22] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_61] (rows=144002668 width=135)
                                              predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                              TableScan [TS_20] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_sales_price"]

