PREHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	146	val_146	146	val_146
NULL	NULL	146	val_146	146	val_146
NULL	NULL	150	val_150	150	val_150
NULL	NULL	213	val_213	213	val_213
NULL	NULL	213	val_213	213	val_213
NULL	NULL	224		224	val_224
NULL	NULL	224		224	val_224
NULL	NULL	238	val_238	238	val_238
NULL	NULL	238	val_238	238	val_238
NULL	NULL	255	val_255	255	val_255
NULL	NULL	255	val_255	255	val_255
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	278	val_278	278	val_278
NULL	NULL	278	val_278	278	val_278
NULL	NULL	66	val_66	66	val_66
NULL	NULL	98	val_98	98	val_98
NULL	NULL	98	val_98	98	val_98
PREHOOK: query: explain
SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: src1
            filterExpr: (UDFToDouble(key) < 10.0D) (type: boolean)
            Statistics: Num rows: 25 Data size: 4375 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (UDFToDouble(key) < 10.0D) (type: boolean)
              Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: string)
          TableScan
            alias: src2
            filterExpr: (UDFToDouble(key) < 300.0D) (type: boolean)
            Statistics: Num rows: 25 Data size: 4375 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (UDFToDouble(key) < 300.0D) (type: boolean)
              Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: string)
          TableScan
            alias: src3
            filterExpr: (UDFToDouble(key) < 300.0D) (type: boolean)
            Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (UDFToDouble(key) < 300.0D) (type: boolean)
              Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: string)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: string)
                  Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col1 (type: string)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Right Outer Join 0 to 1
               Inner Join 1 to 2
          filter predicates:
            0 
            1 {(UDFToDouble(KEY.reducesinkkey0) > 10.0D)}
            2 
          keys:
            0 _col0 (type: string)
            1 _col0 (type: string)
            2 _col0 (type: string)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
          Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
          File Output Operator
            compressed: false
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: string), _col2 (type: string), _col4 (type: string)
              null sort order: zzz
              sort order: +++
              Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
              value expressions: _col1 (type: string), _col3 (type: string), _col5 (type: string)
      Execution mode: vectorized
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col2 (type: string)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
          Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
          File Output Operator
            compressed: false
            Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT /*+ mapjoin(src1, src2) */ * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	146	val_146	146	val_146
NULL	NULL	146	val_146	146	val_146
NULL	NULL	150	val_150	150	val_150
NULL	NULL	213	val_213	213	val_213
NULL	NULL	213	val_213	213	val_213
NULL	NULL	224		224	val_224
NULL	NULL	224		224	val_224
NULL	NULL	238	val_238	238	val_238
NULL	NULL	238	val_238	238	val_238
NULL	NULL	255	val_255	255	val_255
NULL	NULL	255	val_255	255	val_255
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	278	val_278	278	val_278
NULL	NULL	278	val_278	278	val_278
NULL	NULL	66	val_66	66	val_66
NULL	NULL	98	val_98	98	val_98
NULL	NULL	98	val_98	98	val_98
PREHOOK: query: explain
SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-6 is a root stage
  Stage-2 depends on stages: Stage-6
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-6
    Map Reduce Local Work
      Alias -> Map Local Tables:
        $hdt$_0:src1 
          Fetch Operator
            limit: -1
        $hdt$_1:src2 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        $hdt$_0:src1 
          TableScan
            alias: src1
            filterExpr: (UDFToDouble(key) < 10.0D) (type: boolean)
            Statistics: Num rows: 25 Data size: 4375 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (UDFToDouble(key) < 10.0D) (type: boolean)
              Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
                HashTable Sink Operator
                  filter predicates:
                    0 
                    1 {(UDFToDouble(_col0) > 10.0D)}
                    2 
                  keys:
                    0 _col0 (type: string)
                    1 _col0 (type: string)
                    2 _col0 (type: string)
        $hdt$_1:src2 
          TableScan
            alias: src2
            filterExpr: (UDFToDouble(key) < 300.0D) (type: boolean)
            Statistics: Num rows: 25 Data size: 4375 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (UDFToDouble(key) < 300.0D) (type: boolean)
              Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 8 Data size: 1400 Basic stats: COMPLETE Column stats: COMPLETE
                HashTable Sink Operator
                  filter predicates:
                    0 
                    1 {(UDFToDouble(_col0) > 10.0D)}
                    2 
                  keys:
                    0 _col0 (type: string)
                    1 _col0 (type: string)
                    2 _col0 (type: string)

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: src3
            filterExpr: (UDFToDouble(key) < 300.0D) (type: boolean)
            Statistics: Num rows: 500 Data size: 89000 Basic stats: COMPLETE Column stats: COMPLETE
            Filter Operator
              predicate: (UDFToDouble(key) < 300.0D) (type: boolean)
              Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 166 Data size: 29548 Basic stats: COMPLETE Column stats: COMPLETE
                Map Join Operator
                  condition map:
                       Right Outer Join 0 to 1
                       Inner Join 1 to 2
                  filter predicates:
                    0 
                    1 {(UDFToDouble(_col0) > 10.0D)}
                    2 
                  keys:
                    0 _col0 (type: string)
                    1 _col0 (type: string)
                    2 _col0 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col2 (type: string), _col4 (type: string)
                    null sort order: zzz
                    sort order: +++
                    Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
                    value expressions: _col1 (type: string), _col3 (type: string), _col5 (type: string)
      Execution mode: vectorized
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col1 (type: string), KEY.reducesinkkey2 (type: string), VALUE._col2 (type: string)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
          Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
          File Output Operator
            compressed: false
            Statistics: Num rows: 8 Data size: 4224 Basic stats: COMPLETE Column stats: COMPLETE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM src1
  RIGHT OUTER JOIN src1 src2 ON (src1.key = src2.key AND src1.key < 10 AND src2.key > 10)
  JOIN src src3 ON (src2.key = src3.key AND src3.key < 300)
  SORT BY src1.key, src2.key, src3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	128		128	val_128
NULL	NULL	146	val_146	146	val_146
NULL	NULL	146	val_146	146	val_146
NULL	NULL	150	val_150	150	val_150
NULL	NULL	213	val_213	213	val_213
NULL	NULL	213	val_213	213	val_213
NULL	NULL	224		224	val_224
NULL	NULL	224		224	val_224
NULL	NULL	238	val_238	238	val_238
NULL	NULL	238	val_238	238	val_238
NULL	NULL	255	val_255	255	val_255
NULL	NULL	255	val_255	255	val_255
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	273	val_273	273	val_273
NULL	NULL	278	val_278	278	val_278
NULL	NULL	278	val_278	278	val_278
NULL	NULL	66	val_66	66	val_66
NULL	NULL	98	val_98	98	val_98
NULL	NULL	98	val_98	98	val_98
