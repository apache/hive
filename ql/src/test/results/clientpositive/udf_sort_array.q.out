PREHOOK: query: use default
PREHOOK: type: SWITCHDATABASE
POSTHOOK: query: use default
POSTHOOK: type: SWITCHDATABASE
PREHOOK: query: -- Test sort_array() UDF

DESCRIBE FUNCTION sort_array
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: -- Test sort_array() UDF

DESCRIBE FUNCTION sort_array
POSTHOOK: type: DESCFUNCTION
sort_array(array(obj1, obj2,...)) - Sorts the input array in ascending order according to the natural ordering of the array elements.
PREHOOK: query: DESCRIBE FUNCTION EXTENDED sort_array
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION EXTENDED sort_array
POSTHOOK: type: DESCFUNCTION
sort_array(array(obj1, obj2,...)) - Sorts the input array in ascending order according to the natural ordering of the array elements.
Example:
  > SELECT sort_array(array('b', 'd', 'c', 'a')) FROM src LIMIT 1;
  'a', 'b', 'c', 'd'
PREHOOK: query: -- Evaluate function against STRING valued keys
EXPLAIN
SELECT sort_array(array("b", "d", "c", "a")) FROM src LIMIT 1
PREHOOK: type: QUERY
POSTHOOK: query: -- Evaluate function against STRING valued keys
EXPLAIN
SELECT sort_array(array("b", "d", "c", "a")) FROM src LIMIT 1
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION sort_array (TOK_FUNCTION array "b" "d" "c" "a")))) (TOK_LIMIT 1)))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        src 
          TableScan
            alias: src
            Select Operator
              expressions:
                    expr: sort_array(array('b','d','c','a'))
                    type: array<string>
              outputColumnNames: _col0
              Limit
                File Output Operator
                  compressed: false
                  GlobalTableId: 0
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat

  Stage: Stage-0
    Fetch Operator
      limit: 1


PREHOOK: query: SELECT sort_array(array("f", "a", "g", "c", "b", "d", "e")) FROM src LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT sort_array(array("f", "a", "g", "c", "b", "d", "e")) FROM src LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
["a","b","c","d","e","f","g"]
PREHOOK: query: SELECT sort_array(sort_array(array("hadoop distributed file system", "enterprise databases", "hadoop map-reduce"))) FROM src LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT sort_array(sort_array(array("hadoop distributed file system", "enterprise databases", "hadoop map-reduce"))) FROM src LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
["enterprise databases","hadoop distributed file system","hadoop map-reduce"]
PREHOOK: query: -- Evaluate function against INT valued keys
SELECT sort_array(array(2, 9, 7, 3, 5, 4, 1, 6, 8)) FROM src LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: -- Evaluate function against INT valued keys
SELECT sort_array(array(2, 9, 7, 3, 5, 4, 1, 6, 8)) FROM src LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
[1,2,3,4,5,6,7,8,9]
PREHOOK: query: -- Evaluate function against FLOAT valued keys
SELECT sort_array(sort_array(array(2.333, 9, 1.325, 2.003, 0.777, -3.445, 1))) FROM src LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: -- Evaluate function against FLOAT valued keys
SELECT sort_array(sort_array(array(2.333, 9, 1.325, 2.003, 0.777, -3.445, 1))) FROM src LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
[-3.445,0.777,1.0,1.325,2.003,2.333,9.0]
PREHOOK: query: -- Test it against data in a table.
CREATE TABLE dest1 (
	tinyints ARRAY<TINYINT>,
	smallints ARRAY<SMALLINT>,
	ints ARRAY<INT>,
	bigints ARRAY<BIGINT>,
	booleans ARRAY<BOOLEAN>,
	floats ARRAY<FLOAT>,
	doubles ARRAY<DOUBLE>,
	strings ARRAY<STRING>,
	timestamps ARRAY<TIMESTAMP>
) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
POSTHOOK: query: -- Test it against data in a table.
CREATE TABLE dest1 (
	tinyints ARRAY<TINYINT>,
	smallints ARRAY<SMALLINT>,
	ints ARRAY<INT>,
	bigints ARRAY<BIGINT>,
	booleans ARRAY<BOOLEAN>,
	floats ARRAY<FLOAT>,
	doubles ARRAY<DOUBLE>,
	strings ARRAY<STRING>,
	timestamps ARRAY<TIMESTAMP>
) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@dest1
PREHOOK: query: LOAD DATA LOCAL INPATH '../data/files/primitive_type_arrays.txt' OVERWRITE INTO TABLE dest1
PREHOOK: type: LOAD
PREHOOK: Output: default@dest1
POSTHOOK: query: LOAD DATA LOCAL INPATH '../data/files/primitive_type_arrays.txt' OVERWRITE INTO TABLE dest1
POSTHOOK: type: LOAD
POSTHOOK: Output: default@dest1
PREHOOK: query: SELECT	sort_array(tinyints), sort_array(smallints), sort_array(ints),
	sort_array(bigints), sort_array(booleans), sort_array(floats),
	sort_array(doubles), sort_array(strings), sort_array(timestamps)
	FROM dest1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1
#### A masked pattern was here ####
POSTHOOK: query: SELECT	sort_array(tinyints), sort_array(smallints), sort_array(ints),
	sort_array(bigints), sort_array(booleans), sort_array(floats),
	sort_array(doubles), sort_array(strings), sort_array(timestamps)
	FROM dest1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1
#### A masked pattern was here ####
[1,2,3,4,5]	[1,2,7,8,9]	[4,8,16,32,64]	[1,100,246,357,1000]	[false,true]	[1.414,1.618,2.718,3.141]	[1.41421,1.61803,2.71828,3.14159]	["","aramis","athos","portos"]	["1970-01-05 13:51:04.042","1970-01-07 00:54:54.442","1970-01-16 12:50:35.242"]
