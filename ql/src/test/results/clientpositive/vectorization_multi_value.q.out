PREHOOK: query: DROP TABLE IF EXISTS cond_vector
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS cond_vector
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE cond_vector(a STRING) STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@cond_vector
POSTHOOK: query: CREATE TABLE cond_vector(a STRING) STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@cond_vector
PREHOOK: query: INSERT OVERWRITE TABLE cond_vector VALUES("a/b"),("a/b"),("c/d")
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@cond_vector
POSTHOOK: query: INSERT OVERWRITE TABLE cond_vector VALUES("a/b"),("a/b"),("c/d")
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@cond_vector
POSTHOOK: Lineage: cond_vector.a SCRIPT []
PREHOOK: query: SELECT IF(1=1, MAP("a", "b"), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, MAP("a", "b"), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
{"a":"b"}
{"a":"b"}
{"a":"b"}
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", "b"), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", "b"), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, map('a':'b'), null) (type: map<string,string>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [4]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 3:map<string,string>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(map('a':'b')) -> 3:map<string,string>) -> 4:map<string,string>
              Statistics: Num rows: 3 Data size: 326 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 326 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: []
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, map<string,string>, map<string,string>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT IF(1=1, MAP("a", MAP("b","c")), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, MAP("a", MAP("b","c")), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
{"a":{"b":"c"}}
{"a":{"b":"c"}}
{"a":{"b":"c"}}
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", MAP("b","c")), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", MAP("b","c")), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, map('a':map('b':'c')), null) (type: map<string,map<string,string>>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [5]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 4:map<string,map<string,string>>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(map('a':map('b':'c')))(children: VectorUDFAdaptor(map('b':'c')) -> 3:map<string,string>) -> 4:map<string,map<string,string>>) -> 5:map<string,map<string,string>>
              Statistics: Num rows: 3 Data size: 241 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 241 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: []
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, map<string,string>, map<string,map<string,string>>, map<string,map<string,string>>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT IF(1=1, MAP("a", a), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, MAP("a", a), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
{"a":"a/b"}
{"a":"a/b"}
{"a":"c/d"}
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", a), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", a), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, map('a':a), null) (type: map<string,string>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [4]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 3:map<string,string>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(map('a':a)) -> 3:map<string,string>) -> 4:map<string,string>
              Statistics: Num rows: 3 Data size: 920 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 920 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: [0]
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, map<string,string>, map<string,string>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT IF(1=1, MAP("a", MAP("b", a)), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, MAP("a", MAP("b", a)), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
{"a":{"b":"a/b"}}
{"a":{"b":"a/b"}}
{"a":{"b":"c/d"}}
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", MAP("b", a)), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, MAP("a", MAP("b", a)), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, map('a':map('b':a)), null) (type: map<string,map<string,string>>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [5]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 4:map<string,map<string,string>>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(map('a':map('b':a)))(children: VectorUDFAdaptor(map('b':a)) -> 3:map<string,string>) -> 4:map<string,map<string,string>>) -> 5:map<string,map<string,string>>
              Statistics: Num rows: 3 Data size: 1656 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 1656 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: [0]
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, map<string,string>, map<string,map<string,string>>, map<string,map<string,string>>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT IF(1=1, ARRAY("a", "b"), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, ARRAY("a", "b"), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
["a","b"]
["a","b"]
["a","b"]
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY("a", "b"), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY("a", "b"), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, array('a','b'), null) (type: array<string>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [4]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 3:array<string>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(array('a','b')) -> 3:array<string>) -> 4:array<string>
              Statistics: Num rows: 3 Data size: 408 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 408 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: []
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, array<string>, array<string>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT IF(1=1, ARRAY(ARRAY("a", "b"), ARRAY("c", "d")), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, ARRAY(ARRAY("a", "b"), ARRAY("c", "d")), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
[["a","b"],["c","d"]]
[["a","b"],["c","d"]]
[["a","b"],["c","d"]]
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY(ARRAY("a", "b"), ARRAY("c", "d")), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY(ARRAY("a", "b"), ARRAY("c", "d")), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, array(array('a','b'),array('c','d')), null) (type: array<array<string>>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [6]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 5:array<array<string>>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(array(array('a','b'),array('c','d')))(children: VectorUDFAdaptor(array('a','b')) -> 3:array<string>, VectorUDFAdaptor(array('c','d')) -> 4:array<string>) -> 5:array<array<string>>) -> 6:array<array<string>>
              Statistics: Num rows: 3 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: []
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, array<string>, array<string>, array<array<string>>, array<array<string>>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT IF(1=1, ARRAY("a", a), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, ARRAY("a", a), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
["a","a/b"]
["a","a/b"]
["a","c/d"]
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY("a", a), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY("a", a), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, array('a',a), null) (type: array<string>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [4]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 3:array<string>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(array('a',a)) -> 3:array<string>) -> 4:array<string>
              Statistics: Num rows: 3 Data size: 1920 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 1920 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: [0]
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, array<string>, array<string>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT IF(1=1, ARRAY(ARRAY("a", a), ARRAY("b", "c")), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: SELECT IF(1=1, ARRAY(ARRAY("a", a), ARRAY("b", "c")), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
[["a","a/b"],["b","c"]]
[["a","a/b"],["b","c"]]
[["a","c/d"],["b","c"]]
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY(ARRAY("a", a), ARRAY("b", "c")), NULL) FROM cond_vector
PREHOOK: type: QUERY
PREHOOK: Input: default@cond_vector
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL SELECT IF(1=1, ARRAY(ARRAY("a", a), ARRAY("b", "c")), NULL) FROM cond_vector
POSTHOOK: type: QUERY
POSTHOOK: Input: default@cond_vector
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: cond_vector
            Statistics: Num rows: 3 Data size: 261 Basic stats: COMPLETE Column stats: COMPLETE
            TableScan Vectorization:
                native: true
                vectorizationSchemaColumns: [0:a:string, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>]
            Select Operator
              expressions: if(true, array(array('a',a),array('b','c')), null) (type: array<array<string>>)
              outputColumnNames: _col0
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumnNums: [6]
                  selectExpressions: IfExprCondExprNull(col 2:boolean, col 5:array<array<string>>, null)(children: ConstantVectorExpression(val 1) -> 2:boolean, VectorUDFAdaptor(array(array('a',a),array('b','c')))(children: VectorUDFAdaptor(array('a',a)) -> 3:array<string>, VectorUDFAdaptor(array('b','c')) -> 4:array<string>) -> 5:array<array<string>>) -> 6:array<array<string>>
              Statistics: Num rows: 3 Data size: 19280 Basic stats: COMPLETE Column stats: COMPLETE
              File Output Operator
                compressed: false
                File Sink Vectorization:
                    className: VectorFileSinkOperator
                    native: false
                Statistics: Num rows: 3 Data size: 19280 Basic stats: COMPLETE Column stats: COMPLETE
                table:
                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFormatFeatureSupport: [DECIMAL_64]
          featureSupportInUse: [DECIMAL_64]
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 1
              includeColumns: [0]
              dataColumns: a:string
              partitionColumnCount: 0
              scratchColumnTypeNames: [bigint, array<string>, array<string>, array<array<string>>, array<array<string>>]

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

