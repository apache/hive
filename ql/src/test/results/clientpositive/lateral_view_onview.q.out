PREHOOK: query: CREATE TABLE lv_table( c1 STRING,  c2 ARRAY<INT>, c3 INT, c4 CHAR(1))
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@lv_table
POSTHOOK: query: CREATE TABLE lv_table( c1 STRING,  c2 ARRAY<INT>, c3 INT, c4 CHAR(1))
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@lv_table
PREHOOK: query: INSERT OVERWRITE TABLE lv_table SELECT 'abc  ', array(1,2,3), 100, 't' FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@lv_table
POSTHOOK: query: INSERT OVERWRITE TABLE lv_table SELECT 'abc  ', array(1,2,3), 100, 't' FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@lv_table
POSTHOOK: Lineage: lv_table.c1 SIMPLE []
POSTHOOK: Lineage: lv_table.c2 EXPRESSION []
POSTHOOK: Lineage: lv_table.c3 SIMPLE []
POSTHOOK: Lineage: lv_table.c4 EXPRESSION []
PREHOOK: query: CREATE OR REPLACE VIEW lv_view AS SELECT * FROM lv_table
PREHOOK: type: CREATEVIEW
PREHOOK: Input: default@lv_table
PREHOOK: Output: database:default
PREHOOK: Output: default@lv_view
POSTHOOK: query: CREATE OR REPLACE VIEW lv_view AS SELECT * FROM lv_table
POSTHOOK: type: CREATEVIEW
POSTHOOK: Input: default@lv_table
POSTHOOK: Output: database:default
POSTHOOK: Output: default@lv_view
POSTHOOK: Lineage: lv_view.c1 SIMPLE [(lv_table)lv_table.FieldSchema(name:c1, type:string, comment:null), ]
POSTHOOK: Lineage: lv_view.c2 SIMPLE [(lv_table)lv_table.FieldSchema(name:c2, type:array<int>, comment:null), ]
POSTHOOK: Lineage: lv_view.c3 SIMPLE [(lv_table)lv_table.FieldSchema(name:c3, type:int, comment:null), ]
POSTHOOK: Lineage: lv_view.c4 SIMPLE [(lv_table)lv_table.FieldSchema(name:c4, type:char(1), comment:null), ]
PREHOOK: query: EXPLAIN SELECT * FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol SORT BY c1 ASC, myCol ASC LIMIT 1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT * FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol SORT BY c1 ASC, myCol ASC LIMIT 1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lv_table
            Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: c1 (type: string), c2 (type: array<int>), c3 (type: int), c4 (type: char(1))
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
              Lateral View Forward
                Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: array<int>), _col2 (type: int), _col3 (type: char(1))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                  Lateral View Join Operator
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string), _col4 (type: int)
                      sort order: ++
                      Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.1
                      value expressions: _col1 (type: array<int>), _col2 (type: int), _col3 (type: char(1))
                Select Operator
                  expressions: array(1,2,3) (type: array<int>)
                  outputColumnNames: _col0
                  Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                  UDTF Operator
                    Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                    function name: explode
                    Lateral View Join Operator
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col4 (type: int)
                        sort order: ++
                        Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.1
                        value expressions: _col1 (type: array<int>), _col2 (type: int), _col3 (type: char(1))
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: array<int>), VALUE._col1 (type: int), VALUE._col2 (type: char(1)), KEY.reducesinkkey1 (type: int)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4
          Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
          Limit
            Number of rows: 1
            Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: string), _col4 (type: int)
              sort order: ++
              Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
              TopN Hash Memory Usage: 0.1
              value expressions: _col1 (type: array<int>), _col2 (type: int), _col3 (type: char(1))
      Execution mode: vectorized
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: array<int>), VALUE._col1 (type: int), VALUE._col2 (type: char(1)), KEY.reducesinkkey1 (type: int)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4
          Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
          Limit
            Number of rows: 1
            Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 17 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 1
      Processor Tree:
        ListSink

PREHOOK: query: EXPLAIN SELECT myTable.* FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LIMIT 3
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT myTable.* FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LIMIT 3
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lv_table
            Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: COMPLETE
            Select Operator
              Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
              Lateral View Forward
                Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                  Lateral View Join Operator
                    outputColumnNames: _col4
                    Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: _col4 (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                      Limit
                        Number of rows: 3
                        Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                Select Operator
                  expressions: array(1,2,3) (type: array<int>)
                  outputColumnNames: _col0
                  Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                  UDTF Operator
                    Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                    function name: explode
                    Lateral View Join Operator
                      outputColumnNames: _col4
                      Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                      Select Operator
                        expressions: _col4 (type: int)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                        Limit
                          Number of rows: 3
                          Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                          File Output Operator
                            compressed: false
                            Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                            table:
                                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 3
      Processor Tree:
        ListSink

PREHOOK: query: EXPLAIN SELECT myTable.myCol, myTable2.myCol2 FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LATERAL VIEW explode(array('a', 'b', 'c')) myTable2 AS myCol2 LIMIT 9
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT myTable.myCol, myTable2.myCol2 FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LATERAL VIEW explode(array('a', 'b', 'c')) myTable2 AS myCol2 LIMIT 9
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lv_table
            Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: COMPLETE
            Select Operator
              Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
              Lateral View Forward
                Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                  Lateral View Join Operator
                    outputColumnNames: _col4
                    Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                    Lateral View Forward
                      Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                      Select Operator
                        expressions: _col4 (type: int)
                        outputColumnNames: _col4
                        Statistics: Num rows: 1000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                        Lateral View Join Operator
                          outputColumnNames: _col4, _col5
                          Statistics: Num rows: 2000 Data size: 648000 Basic stats: COMPLETE Column stats: COMPLETE
                          Select Operator
                            expressions: _col4 (type: int), _col5 (type: string)
                            outputColumnNames: _col0, _col1
                            Statistics: Num rows: 2000 Data size: 16000 Basic stats: COMPLETE Column stats: COMPLETE
                            Limit
                              Number of rows: 9
                              Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                              File Output Operator
                                compressed: false
                                Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                                table:
                                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      Select Operator
                        expressions: array('a','b','c') (type: array<string>)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1000 Data size: 592000 Basic stats: COMPLETE Column stats: COMPLETE
                        UDTF Operator
                          Statistics: Num rows: 1000 Data size: 592000 Basic stats: COMPLETE Column stats: COMPLETE
                          function name: explode
                          Lateral View Join Operator
                            outputColumnNames: _col4, _col5
                            Statistics: Num rows: 2000 Data size: 648000 Basic stats: COMPLETE Column stats: COMPLETE
                            Select Operator
                              expressions: _col4 (type: int), _col5 (type: string)
                              outputColumnNames: _col0, _col1
                              Statistics: Num rows: 2000 Data size: 16000 Basic stats: COMPLETE Column stats: COMPLETE
                              Limit
                                Number of rows: 9
                                Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                                File Output Operator
                                  compressed: false
                                  Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                                  table:
                                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                Select Operator
                  expressions: array(1,2,3) (type: array<int>)
                  outputColumnNames: _col0
                  Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                  UDTF Operator
                    Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                    function name: explode
                    Lateral View Join Operator
                      outputColumnNames: _col4
                      Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                      Lateral View Forward
                        Statistics: Num rows: 1000 Data size: 32000 Basic stats: COMPLETE Column stats: COMPLETE
                        Select Operator
                          expressions: _col4 (type: int)
                          outputColumnNames: _col4
                          Statistics: Num rows: 1000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                          Lateral View Join Operator
                            outputColumnNames: _col4, _col5
                            Statistics: Num rows: 2000 Data size: 648000 Basic stats: COMPLETE Column stats: COMPLETE
                            Select Operator
                              expressions: _col4 (type: int), _col5 (type: string)
                              outputColumnNames: _col0, _col1
                              Statistics: Num rows: 2000 Data size: 16000 Basic stats: COMPLETE Column stats: COMPLETE
                              Limit
                                Number of rows: 9
                                Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                                File Output Operator
                                  compressed: false
                                  Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                                  table:
                                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        Select Operator
                          expressions: array('a','b','c') (type: array<string>)
                          outputColumnNames: _col0
                          Statistics: Num rows: 1000 Data size: 592000 Basic stats: COMPLETE Column stats: COMPLETE
                          UDTF Operator
                            Statistics: Num rows: 1000 Data size: 592000 Basic stats: COMPLETE Column stats: COMPLETE
                            function name: explode
                            Lateral View Join Operator
                              outputColumnNames: _col4, _col5
                              Statistics: Num rows: 2000 Data size: 648000 Basic stats: COMPLETE Column stats: COMPLETE
                              Select Operator
                                expressions: _col4 (type: int), _col5 (type: string)
                                outputColumnNames: _col0, _col1
                                Statistics: Num rows: 2000 Data size: 16000 Basic stats: COMPLETE Column stats: COMPLETE
                                Limit
                                  Number of rows: 9
                                  Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                                  File Output Operator
                                    compressed: false
                                    Statistics: Num rows: 9 Data size: 72 Basic stats: COMPLETE Column stats: COMPLETE
                                    table:
                                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 9
      Processor Tree:
        ListSink

PREHOOK: query: EXPLAIN SELECT myTable2.* FROM lv_view LATERAL VIEW explode(array(array(1,2,3))) myTable AS myCol LATERAL VIEW explode(myTable.myCol) myTable2 AS myCol2 LIMIT 3
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN SELECT myTable2.* FROM lv_view LATERAL VIEW explode(array(array(1,2,3))) myTable AS myCol LATERAL VIEW explode(myTable.myCol) myTable2 AS myCol2 LIMIT 3
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lv_table
            Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: COMPLETE
            Select Operator
              Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
              Lateral View Forward
                Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  Statistics: Num rows: 500 Data size: 4000 Basic stats: COMPLETE Column stats: COMPLETE
                  Lateral View Join Operator
                    outputColumnNames: _col4
                    Statistics: Num rows: 1000 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                    Lateral View Forward
                      Statistics: Num rows: 1000 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                      Select Operator
                        Statistics: Num rows: 1000 Data size: 48000 Basic stats: COMPLETE Column stats: COMPLETE
                        Lateral View Join Operator
                          outputColumnNames: _col5
                          Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                          Select Operator
                            expressions: _col5 (type: int)
                            outputColumnNames: _col0
                            Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                            Limit
                              Number of rows: 3
                              Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                              File Output Operator
                                compressed: false
                                Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                                table:
                                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      Select Operator
                        expressions: _col4 (type: array<int>)
                        outputColumnNames: _col0
                        Statistics: Num rows: 1000 Data size: 8000 Basic stats: COMPLETE Column stats: COMPLETE
                        UDTF Operator
                          Statistics: Num rows: 1000 Data size: 8000 Basic stats: COMPLETE Column stats: COMPLETE
                          function name: explode
                          Lateral View Join Operator
                            outputColumnNames: _col5
                            Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                            Select Operator
                              expressions: _col5 (type: int)
                              outputColumnNames: _col0
                              Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                              Limit
                                Number of rows: 3
                                Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                                File Output Operator
                                  compressed: false
                                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                                  table:
                                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                Select Operator
                  expressions: array(array(1,2,3)) (type: array<array<int>>)
                  outputColumnNames: _col0
                  Statistics: Num rows: 500 Data size: 24000 Basic stats: COMPLETE Column stats: COMPLETE
                  UDTF Operator
                    Statistics: Num rows: 500 Data size: 24000 Basic stats: COMPLETE Column stats: COMPLETE
                    function name: explode
                    Lateral View Join Operator
                      outputColumnNames: _col4
                      Statistics: Num rows: 1000 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                      Lateral View Forward
                        Statistics: Num rows: 1000 Data size: 28000 Basic stats: COMPLETE Column stats: COMPLETE
                        Select Operator
                          Statistics: Num rows: 1000 Data size: 48000 Basic stats: COMPLETE Column stats: COMPLETE
                          Lateral View Join Operator
                            outputColumnNames: _col5
                            Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                            Select Operator
                              expressions: _col5 (type: int)
                              outputColumnNames: _col0
                              Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                              Limit
                                Number of rows: 3
                                Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                                File Output Operator
                                  compressed: false
                                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                                  table:
                                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        Select Operator
                          expressions: _col4 (type: array<int>)
                          outputColumnNames: _col0
                          Statistics: Num rows: 1000 Data size: 8000 Basic stats: COMPLETE Column stats: COMPLETE
                          UDTF Operator
                            Statistics: Num rows: 1000 Data size: 8000 Basic stats: COMPLETE Column stats: COMPLETE
                            function name: explode
                            Lateral View Join Operator
                              outputColumnNames: _col5
                              Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                              Select Operator
                                expressions: _col5 (type: int)
                                outputColumnNames: _col0
                                Statistics: Num rows: 2000 Data size: 56000 Basic stats: COMPLETE Column stats: COMPLETE
                                Limit
                                  Number of rows: 3
                                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                                  File Output Operator
                                    compressed: false
                                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                                    table:
                                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 3
      Processor Tree:
        ListSink

PREHOOK: query: SELECT * FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol SORT BY c1 ASC, myCol ASC LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@lv_table
PREHOOK: Input: default@lv_view
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol SORT BY c1 ASC, myCol ASC LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lv_table
POSTHOOK: Input: default@lv_view
#### A masked pattern was here ####
abc  	[1,2,3]	100	t	1
PREHOOK: query: SELECT myTable.* FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LIMIT 3
PREHOOK: type: QUERY
PREHOOK: Input: default@lv_table
PREHOOK: Input: default@lv_view
#### A masked pattern was here ####
POSTHOOK: query: SELECT myTable.* FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LIMIT 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lv_table
POSTHOOK: Input: default@lv_view
#### A masked pattern was here ####
1
2
3
PREHOOK: query: SELECT myTable.myCol, myTable2.myCol2 FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LATERAL VIEW explode(array('a', 'b', 'c')) myTable2 AS myCol2 LIMIT 9
PREHOOK: type: QUERY
PREHOOK: Input: default@lv_table
PREHOOK: Input: default@lv_view
#### A masked pattern was here ####
POSTHOOK: query: SELECT myTable.myCol, myTable2.myCol2 FROM lv_view LATERAL VIEW explode(array(1,2,3)) myTable AS myCol LATERAL VIEW explode(array('a', 'b', 'c')) myTable2 AS myCol2 LIMIT 9
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lv_table
POSTHOOK: Input: default@lv_view
#### A masked pattern was here ####
1	a
1	b
1	c
2	a
2	b
2	c
3	a
3	b
3	c
PREHOOK: query: SELECT myTable2.* FROM lv_view LATERAL VIEW explode(array(array(1,2,3))) myTable AS myCol LATERAL VIEW explode(myTable.myCol) myTable2 AS myCol2 LIMIT 3
PREHOOK: type: QUERY
PREHOOK: Input: default@lv_table
PREHOOK: Input: default@lv_view
#### A masked pattern was here ####
POSTHOOK: query: SELECT myTable2.* FROM lv_view LATERAL VIEW explode(array(array(1,2,3))) myTable AS myCol LATERAL VIEW explode(myTable.myCol) myTable2 AS myCol2 LIMIT 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lv_table
POSTHOOK: Input: default@lv_view
#### A masked pattern was here ####
1
2
3
PREHOOK: query: EXPLAIN
SELECT SIZE(c2),c3,TRIM(c1),c4,myCol from lv_view LATERAL VIEW explode(array(1,2,3)) myTab as myCol limit 3
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT SIZE(c2),c3,TRIM(c1),c4,myCol from lv_view LATERAL VIEW explode(array(1,2,3)) myTab as myCol limit 3
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lv_table
            Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: c1 (type: string), c2 (type: array<int>), c3 (type: int), c4 (type: char(1))
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
              Lateral View Forward
                Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: array<int>), _col2 (type: int), _col3 (type: char(1))
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                  Lateral View Join Operator
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: size(_col1) (type: int), _col2 (type: int), trim(_col0) (type: string), _col3 (type: char(1)), _col4 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                      Limit
                        Number of rows: 3
                        Statistics: Num rows: 3 Data size: 51 Basic stats: COMPLETE Column stats: NONE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 3 Data size: 51 Basic stats: COMPLETE Column stats: NONE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                Select Operator
                  expressions: array(1,2,3) (type: array<int>)
                  outputColumnNames: _col0
                  Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                  UDTF Operator
                    Statistics: Num rows: 500 Data size: 8500 Basic stats: COMPLETE Column stats: NONE
                    function name: explode
                    Lateral View Join Operator
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                      Select Operator
                        expressions: size(_col1) (type: int), _col2 (type: int), trim(_col0) (type: string), _col3 (type: char(1)), _col4 (type: int)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4
                        Statistics: Num rows: 1000 Data size: 17000 Basic stats: COMPLETE Column stats: NONE
                        Limit
                          Number of rows: 3
                          Statistics: Num rows: 3 Data size: 51 Basic stats: COMPLETE Column stats: NONE
                          File Output Operator
                            compressed: false
                            Statistics: Num rows: 3 Data size: 51 Basic stats: COMPLETE Column stats: NONE
                            table:
                                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 3
      Processor Tree:
        ListSink

PREHOOK: query: SELECT SIZE(c2),c3,TRIM(c1),c4,myCol from lv_view LATERAL VIEW explode(array(1,2,3)) myTab as myCol limit 3
PREHOOK: type: QUERY
PREHOOK: Input: default@lv_table
PREHOOK: Input: default@lv_view
#### A masked pattern was here ####
POSTHOOK: query: SELECT SIZE(c2),c3,TRIM(c1),c4,myCol from lv_view LATERAL VIEW explode(array(1,2,3)) myTab as myCol limit 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lv_table
POSTHOOK: Input: default@lv_view
#### A masked pattern was here ####
3	100	abc	t	1
3	100	abc	t	2
3	100	abc	t	3
PREHOOK: query: CREATE TABLE lv_table1( c1 STRING,  c3 INT, c4 CHAR(1), c5 STRING, c6 STRING, c7 STRING, c8 STRING, c9 STRING, c10 STRING, c11 STRING, c12 STRING, c13 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@lv_table1
POSTHOOK: query: CREATE TABLE lv_table1( c1 STRING,  c3 INT, c4 CHAR(1), c5 STRING, c6 STRING, c7 STRING, c8 STRING, c9 STRING, c10 STRING, c11 STRING, c12 STRING, c13 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@lv_table1
PREHOOK: query: CREATE TABLE lv_table2( c1 STRING,  c2 ARRAY<INT>)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@lv_table2
POSTHOOK: query: CREATE TABLE lv_table2( c1 STRING,  c2 ARRAY<INT>)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@lv_table2
PREHOOK: query: INSERT OVERWRITE TABLE lv_table1 SELECT 'abc  ', 100, 't', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test' FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@lv_table1
POSTHOOK: query: INSERT OVERWRITE TABLE lv_table1 SELECT 'abc  ', 100, 't', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test' FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@lv_table1
POSTHOOK: Lineage: lv_table1.c1 SIMPLE []
POSTHOOK: Lineage: lv_table1.c10 SIMPLE []
POSTHOOK: Lineage: lv_table1.c11 SIMPLE []
POSTHOOK: Lineage: lv_table1.c12 SIMPLE []
POSTHOOK: Lineage: lv_table1.c13 SIMPLE []
POSTHOOK: Lineage: lv_table1.c3 SIMPLE []
POSTHOOK: Lineage: lv_table1.c4 EXPRESSION []
POSTHOOK: Lineage: lv_table1.c5 SIMPLE []
POSTHOOK: Lineage: lv_table1.c6 SIMPLE []
POSTHOOK: Lineage: lv_table1.c7 SIMPLE []
POSTHOOK: Lineage: lv_table1.c8 SIMPLE []
POSTHOOK: Lineage: lv_table1.c9 SIMPLE []
PREHOOK: query: INSERT OVERWRITE TABLE lv_table2 SELECT 'abc  ', array(1,2,3) FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@lv_table2
POSTHOOK: query: INSERT OVERWRITE TABLE lv_table2 SELECT 'abc  ', array(1,2,3) FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@lv_table2
POSTHOOK: Lineage: lv_table2.c1 SIMPLE []
POSTHOOK: Lineage: lv_table2.c2 EXPRESSION []
PREHOOK: query: EXPLAIN WITH lv_view1 AS (SELECT lv_table1.*, c2 FROM lv_table1 JOIN lv_table2 ON lv_table1.c1 = lv_table2.c1), lv_view2 AS (SELECT * FROM lv_view1 LATERAL VIEW explode(c2) myTable AS myCol) SELECT * FROM lv_view2 SORT BY c1 ASC, myCol ASC LIMIT 1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN WITH lv_view1 AS (SELECT lv_table1.*, c2 FROM lv_table1 JOIN lv_table2 ON lv_table1.c1 = lv_table2.c1), lv_view2 AS (SELECT * FROM lv_view1 LATERAL VIEW explode(c2) myTable AS myCol) SELECT * FROM lv_view2 SORT BY c1 ASC, myCol ASC LIMIT 1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-3 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-3

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lv_table1
            Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c1 is not null (type: boolean)
              Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: c1 (type: string)
                sort order: +
                Map-reduce partition columns: c1 (type: string)
                Statistics: Num rows: 500 Data size: 28000 Basic stats: COMPLETE Column stats: NONE
                value expressions: c3 (type: int), c4 (type: char(1)), c5 (type: string), c6 (type: string), c7 (type: string), c8 (type: string), c9 (type: string), c10 (type: string), c11 (type: string), c12 (type: string), c13 (type: string)
          TableScan
            alias: lv_table2
            Statistics: Num rows: 500 Data size: 5500 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: c1 is not null (type: boolean)
              Statistics: Num rows: 500 Data size: 5500 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: c1 (type: string)
                sort order: +
                Map-reduce partition columns: c1 (type: string)
                Statistics: Num rows: 500 Data size: 5500 Basic stats: COMPLETE Column stats: NONE
                value expressions: c2 (type: array<int>)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 c1 (type: string)
            1 c1 (type: string)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col16
          Statistics: Num rows: 550 Data size: 30800 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: string), _col1 (type: int), _col2 (type: char(1)), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: string), _col9 (type: string), _col10 (type: string), _col11 (type: string), _col16 (type: array<int>)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
            Statistics: Num rows: 550 Data size: 30800 Basic stats: COMPLETE Column stats: NONE
            Lateral View Forward
              Statistics: Num rows: 550 Data size: 30800 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string), _col1 (type: int), _col2 (type: char(1)), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: string), _col9 (type: string), _col10 (type: string), _col11 (type: string), _col12 (type: array<int>)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12
                Statistics: Num rows: 550 Data size: 30800 Basic stats: COMPLETE Column stats: NONE
                Lateral View Join Operator
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                  Statistics: Num rows: 1100 Data size: 61600 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
              Select Operator
                expressions: _col12 (type: array<int>)
                outputColumnNames: _col0
                Statistics: Num rows: 550 Data size: 30800 Basic stats: COMPLETE Column stats: NONE
                UDTF Operator
                  Statistics: Num rows: 550 Data size: 30800 Basic stats: COMPLETE Column stats: NONE
                  function name: explode
                  Lateral View Join Operator
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                    Statistics: Num rows: 1100 Data size: 61600 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: string), _col13 (type: int)
              sort order: ++
              Statistics: Num rows: 1100 Data size: 61600 Basic stats: COMPLETE Column stats: NONE
              TopN Hash Memory Usage: 0.1
              value expressions: _col1 (type: int), _col2 (type: char(1)), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: string), _col9 (type: string), _col10 (type: string), _col11 (type: string), _col12 (type: array<int>)
      Execution mode: vectorized
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: int), VALUE._col1 (type: char(1)), VALUE._col2 (type: string), VALUE._col3 (type: string), VALUE._col4 (type: string), VALUE._col5 (type: string), VALUE._col6 (type: string), VALUE._col7 (type: string), VALUE._col8 (type: string), VALUE._col9 (type: string), VALUE._col10 (type: string), VALUE._col11 (type: array<int>), KEY.reducesinkkey1 (type: int)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
          Statistics: Num rows: 1100 Data size: 61600 Basic stats: COMPLETE Column stats: NONE
          Limit
            Number of rows: 1
            Statistics: Num rows: 1 Data size: 56 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-3
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: string), _col13 (type: int)
              sort order: ++
              Statistics: Num rows: 1 Data size: 56 Basic stats: COMPLETE Column stats: NONE
              TopN Hash Memory Usage: 0.1
              value expressions: _col1 (type: int), _col2 (type: char(1)), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: string), _col9 (type: string), _col10 (type: string), _col11 (type: string), _col12 (type: array<int>)
      Execution mode: vectorized
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: int), VALUE._col1 (type: char(1)), VALUE._col2 (type: string), VALUE._col3 (type: string), VALUE._col4 (type: string), VALUE._col5 (type: string), VALUE._col6 (type: string), VALUE._col7 (type: string), VALUE._col8 (type: string), VALUE._col9 (type: string), VALUE._col10 (type: string), VALUE._col11 (type: array<int>), KEY.reducesinkkey1 (type: int)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
          Statistics: Num rows: 1 Data size: 56 Basic stats: COMPLETE Column stats: NONE
          Limit
            Number of rows: 1
            Statistics: Num rows: 1 Data size: 56 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 56 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 1
      Processor Tree:
        ListSink

PREHOOK: query: WITH lv_view1 AS (SELECT lv_table1.*, c2 FROM lv_table1 JOIN lv_table2 ON lv_table1.c1 = lv_table2.c1), lv_view2 AS (SELECT * FROM lv_view1 LATERAL VIEW explode(c2) myTable AS myCol) SELECT * FROM lv_view2 SORT BY c1 ASC, myCol ASC LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@lv_table1
PREHOOK: Input: default@lv_table2
#### A masked pattern was here ####
POSTHOOK: query: WITH lv_view1 AS (SELECT lv_table1.*, c2 FROM lv_table1 JOIN lv_table2 ON lv_table1.c1 = lv_table2.c1), lv_view2 AS (SELECT * FROM lv_view1 LATERAL VIEW explode(c2) myTable AS myCol) SELECT * FROM lv_view2 SORT BY c1 ASC, myCol ASC LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lv_table1
POSTHOOK: Input: default@lv_table2
#### A masked pattern was here ####
abc  	100	t	test	test	test	test	test	test	test	test	test	[1,2,3]	1
