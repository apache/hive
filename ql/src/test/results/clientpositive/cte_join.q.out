PREHOOK: query: CREATE TABLE t1 (a int, b varchar(100))
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t1
POSTHOOK: query: CREATE TABLE t1 (a int, b varchar(100))
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1
PREHOOK: query: EXPLAIN AST
SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN AST
SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
ABSTRACT SYNTAX TREE:
  
TOK_QUERY
   TOK_FROM
      TOK_JOIN
         TOK_SUBQUERY
            TOK_QUERY
               TOK_CTE
                  TOK_SUBQUERY
                     TOK_QUERY
                        TOK_FROM
                           TOK_TABREF
                              TOK_TABNAME
                                 t1
                        TOK_INSERT
                           TOK_DESTINATION
                              TOK_DIR
                                 TOK_TMP_FILE
                           TOK_SELECT
                              TOK_SELEXPR
                                 TOK_TABLE_OR_COL
                                    a
                              TOK_SELEXPR
                                 TOK_TABLE_OR_COL
                                    b
                           TOK_WHERE
                              =
                                 TOK_TABLE_OR_COL
                                    b
                                 'c'
                     sub1
               TOK_FROM
                  TOK_TABREF
                     TOK_TABNAME
                        sub1
               TOK_INSERT
                  TOK_DESTINATION
                     TOK_DIR
                        TOK_TMP_FILE
                  TOK_SELECT
                     TOK_SELEXPR
                        .
                           TOK_TABLE_OR_COL
                              sub1
                           a
                     TOK_SELEXPR
                        .
                           TOK_TABLE_OR_COL
                              sub1
                           b
            S
         TOK_TABREF
            TOK_TABNAME
               t1
         =
            .
               TOK_TABLE_OR_COL
                  S
               a
            .
               TOK_TABLE_OR_COL
                  t1
               a
   TOK_INSERT
      TOK_DESTINATION
         TOK_DIR
            TOK_TMP_FILE
      TOK_SELECT
         TOK_SELEXPR
            .
               TOK_TABLE_OR_COL
                  S
               a
         TOK_SELEXPR
            .
               TOK_TABLE_OR_COL
                  t1
               a
         TOK_SELEXPR
            .
               TOK_TABLE_OR_COL
                  t1
               b

PREHOOK: query: EXPLAIN CBO
SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN CBO
SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
CBO PLAN:
HiveJoin(condition=[=($0, $1)], joinType=[inner], algorithm=[none], cost=[not available])
  HiveProject(a=[$0])
    HiveFilter(condition=[AND(=($1, _UTF-16LE'c'), IS NOT NULL($0))])
      HiveTableScan(table=[[default, t1]], table:alias=[t1])
  HiveProject(a=[$0], b=[$1])
    HiveFilter(condition=[IS NOT NULL($0)])
      HiveTableScan(table=[[default, t1]], table:alias=[t1])

PREHOOK: query: EXPLAIN
SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: t1
            filterExpr: ((b = 'c') and a is not null) (type: boolean)
            Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: ((b = 'c') and a is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: a (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
          TableScan
            alias: t1
            filterExpr: a is not null (type: boolean)
            Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: a is not null (type: boolean)
              Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: a (type: int), b (type: varchar(100))
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: varchar(100))
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 _col0 (type: int)
            1 _col0 (type: int)
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: SELECT S.a, t1.a, t1.b FROM (
WITH
 sub1 AS (SELECT a, b FROM t1 WHERE b = 'c')
 SELECT sub1.a, sub1.b FROM sub1
) S
JOIN t1 ON S.a = t1.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
