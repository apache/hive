Saving all output to "!!{outputDirectory}!!/auto_join8.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/auto_join8.q
>>>  set hive.auto.convert.join = true;
No rows affected 
>>>  
>>>  CREATE TABLE dest1(c1 INT, c2 STRING, c3 INT, c4 STRING) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  explain 
FROM ( 
FROM 
( 
FROM src src1 SELECT src1.key AS c1, src1.value AS c2 WHERE src1.key > 10 and src1.key < 20 
) a 
LEFT OUTER JOIN 
( 
FROM src src2 SELECT src2.key AS c3, src2.value AS c4 WHERE src2.key > 15 and src2.key < 25 
) b 
ON (a.c1 = b.c3) 
SELECT a.c1 AS c1, a.c2 AS c2, b.c3 AS c3, b.c4 AS c4 
) c 
INSERT OVERWRITE TABLE dest1 SELECT c.c1, c.c2, c.c3, c.c4 where c.c3 IS NULL AND c.c1 IS NOT NULL;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_LEFTOUTERJOIN (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src) src1)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) key) c1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) value) c2)) (TOK_WHERE (and (> (. (TOK_TABLE_OR_COL src1) key) 10) (< (. (TOK_TABLE_OR_COL src1) key) 20))))) a) (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src) src2)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src2) key) c3) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src2) value) c4)) (TOK_WHERE (and (> (. (TOK_TABLE_OR_COL src2) key) 15) (< (. (TOK_TABLE_OR_COL src2) key) 25))))) b) (= (. (TOK_TABLE_OR_COL a) c1) (. (TOK_TABLE_OR_COL b) c3)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL a) c1) c1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL a) c2) c2) (TOK_SELEXPR (. (TOK_TABLE_OR_COL b) c3) c3) (TOK_SELEXPR (. (TOK_TABLE_OR_COL b) c4) c4)))) c)) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest1))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL c) c1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL c) c2)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL c) c3)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL c) c4))) (TOK_WHERE (AND (TOK_FUNCTION TOK_ISNULL (. (TOK_TABLE_OR_COL c) c3)) (TOK_FUNCTION TOK_ISNOTNULL (. (TOK_TABLE_OR_COL c) c1))))))'
''
'STAGE DEPENDENCIES:'
'  Stage-5 is a root stage , consists of Stage-6, Stage-1'
'  Stage-6 has a backup stage: Stage-1'
'  Stage-4 depends on stages: Stage-6'
'  Stage-0 depends on stages: Stage-1, Stage-4'
'  Stage-2 depends on stages: Stage-0'
'  Stage-1'
''
'STAGE PLANS:'
'  Stage: Stage-5'
'    Conditional Operator'
''
'  Stage: Stage-6'
'    Map Reduce Local Work'
'      Alias -> Map Local Tables:'
'        c:b:src2 '
'          Fetch Operator'
'            limit: -1'
'      Alias -> Map Local Operator Tree:'
'        c:b:src2 '
'          TableScan'
'            alias: src2'
'            Filter Operator'
'              predicate:'
'                  expr: (((key > 15.0) and (key < 25.0)) and key is not null)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                HashTable Sink Operator'
'                  condition expressions:'
'                    0 {_col0} {_col1}'
'                    1 {_col0} {_col1}'
'                  handleSkewJoin: false'
'                  keys:'
'                    0 [Column[_col0]]'
'                    1 [Column[_col0]]'
'                  Position of Big Table: 0'
''
'  Stage: Stage-4'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        c:a:src1 '
'          TableScan'
'            alias: src1'
'            Filter Operator'
'              predicate:'
'                  expr: (((key > 10.0) and (key < 20.0)) and key is not null)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                Map Join Operator'
'                  condition map:'
'                       Left Outer Join0 to 1'
'                  condition expressions:'
'                    0 {_col0} {_col1}'
'                    1 {_col0} {_col1}'
'                  handleSkewJoin: false'
'                  keys:'
'                    0 [Column[_col0]]'
'                    1 [Column[_col0]]'
'                  outputColumnNames: _col0, _col1, _col2, _col3'
'                  Position of Big Table: 0'
'                  Filter Operator'
'                    predicate:'
'                        expr: _col2 is null'
'                        type: boolean'
'                    Select Operator'
'                      expressions:'
'                            expr: _col0'
'                            type: string'
'                            expr: _col1'
'                            type: string'
'                            expr: _col2'
'                            type: string'
'                            expr: _col3'
'                            type: string'
'                      outputColumnNames: _col0, _col1, _col2, _col3'
'                      Select Operator'
'                        expressions:'
'                              expr: _col0'
'                              type: string'
'                              expr: _col1'
'                              type: string'
'                              expr: _col2'
'                              type: string'
'                              expr: _col3'
'                              type: string'
'                        outputColumnNames: _col0, _col1, _col2, _col3'
'                        Select Operator'
'                          expressions:'
'                                expr: UDFToInteger(_col0)'
'                                type: int'
'                                expr: _col1'
'                                type: string'
'                                expr: UDFToInteger(_col2)'
'                                type: int'
'                                expr: _col3'
'                                type: string'
'                          outputColumnNames: _col0, _col1, _col2, _col3'
'                          File Output Operator'
'                            compressed: false'
'                            GlobalTableId: 1'
'                            table:'
'                                input format: org.apache.hadoop.mapred.TextInputFormat'
'                                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                                name: auto_join8.dest1'
'      Local Work:'
'        Map Reduce Local Work'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: auto_join8.dest1'
''
'  Stage: Stage-2'
'    Stats-Aggr Operator'
''
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        c:a:src1 '
'          TableScan'
'            alias: src1'
'            Filter Operator'
'              predicate:'
'                  expr: (((key > 10.0) and (key < 20.0)) and key is not null)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                Reduce Output Operator'
'                  key expressions:'
'                        expr: _col0'
'                        type: string'
'                  sort order: +'
'                  Map-reduce partition columns:'
'                        expr: _col0'
'                        type: string'
'                  tag: 0'
'                  value expressions:'
'                        expr: _col0'
'                        type: string'
'                        expr: _col1'
'                        type: string'
'        c:b:src2 '
'          TableScan'
'            alias: src2'
'            Filter Operator'
'              predicate:'
'                  expr: (((key > 15.0) and (key < 25.0)) and key is not null)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                Reduce Output Operator'
'                  key expressions:'
'                        expr: _col0'
'                        type: string'
'                  sort order: +'
'                  Map-reduce partition columns:'
'                        expr: _col0'
'                        type: string'
'                  tag: 1'
'                  value expressions:'
'                        expr: _col0'
'                        type: string'
'                        expr: _col1'
'                        type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Left Outer Join0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col2, _col3'
'          Filter Operator'
'            predicate:'
'                expr: _col2 is null'
'                type: boolean'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: _col1'
'                    type: string'
'                    expr: _col2'
'                    type: string'
'                    expr: _col3'
'                    type: string'
'              outputColumnNames: _col0, _col1, _col2, _col3'
'              Select Operator'
'                expressions:'
'                      expr: _col0'
'                      type: string'
'                      expr: _col1'
'                      type: string'
'                      expr: _col2'
'                      type: string'
'                      expr: _col3'
'                      type: string'
'                outputColumnNames: _col0, _col1, _col2, _col3'
'                Select Operator'
'                  expressions:'
'                        expr: UDFToInteger(_col0)'
'                        type: int'
'                        expr: _col1'
'                        type: string'
'                        expr: UDFToInteger(_col2)'
'                        type: int'
'                        expr: _col3'
'                        type: string'
'                  outputColumnNames: _col0, _col1, _col2, _col3'
'                  File Output Operator'
'                    compressed: false'
'                    GlobalTableId: 1'
'                    table:'
'                        input format: org.apache.hadoop.mapred.TextInputFormat'
'                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                        name: auto_join8.dest1'
''
250 rows selected 
>>>  
>>>  FROM ( 
FROM 
( 
FROM src src1 SELECT src1.key AS c1, src1.value AS c2 WHERE src1.key > 10 and src1.key < 20 
) a 
LEFT OUTER JOIN 
( 
FROM src src2 SELECT src2.key AS c3, src2.value AS c4 WHERE src2.key > 15 and src2.key < 25 
) b 
ON (a.c1 = b.c3) 
SELECT a.c1 AS c1, a.c2 AS c2, b.c3 AS c3, b.c4 AS c4 
) c 
INSERT OVERWRITE TABLE dest1 SELECT c.c1, c.c2, c.c3, c.c4 where c.c3 IS NULL AND c.c1 IS NOT NULL;
'_col0','_col1','_col2','_col3'
No rows selected 
>>>  
>>>  SELECT sum(hash(dest1.c1,dest1.c2,dest1.c3,dest1.c4)) FROM dest1;
'_c0'
'-7158439905'
1 row selected 
>>>  !record
