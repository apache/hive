Saving all output to "!!{outputDirectory}!!/udf8.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/udf8.q
>>>  CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  FROM src INSERT OVERWRITE TABLE dest1 SELECT '' WHERE src.key = 86;
'_c0'
No rows selected 
>>>  
>>>  FROM src INSERT OVERWRITE TABLE dest1 SELECT '1' WHERE src.key = 86;
'_c0'
No rows selected 
>>>  
>>>  EXPLAIN 
SELECT avg(c1), sum(c1), count(c1) FROM dest1;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME dest1))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION avg (TOK_TABLE_OR_COL c1))) (TOK_SELEXPR (TOK_FUNCTION sum (TOK_TABLE_OR_COL c1))) (TOK_SELEXPR (TOK_FUNCTION count (TOK_TABLE_OR_COL c1))))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        dest1 '
'          TableScan'
'            alias: dest1'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: string'
'              outputColumnNames: c1'
'              Group By Operator'
'                aggregations:'
'                      expr: avg(c1)'
'                      expr: sum(c1)'
'                      expr: count(c1)'
'                bucketGroup: false'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2'
'                Reduce Output Operator'
'                  sort order: '
'                  tag: -1'
'                  value expressions:'
'                        expr: _col0'
'                        type: struct<count:bigint,sum:double>'
'                        expr: _col1'
'                        type: double'
'                        expr: _col2'
'                        type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: avg(VALUE._col0)'
'                expr: sum(VALUE._col1)'
'                expr: count(VALUE._col2)'
'          bucketGroup: false'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: double'
'                  expr: _col1'
'                  type: double'
'                  expr: _col2'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.TextInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
67 rows selected 
>>>  
>>>  SELECT avg(c1), sum(c1), count(c1) FROM dest1;
'_c0','_c1','_c2'
'1.0','1.0','1'
1 row selected 
>>>  !record
