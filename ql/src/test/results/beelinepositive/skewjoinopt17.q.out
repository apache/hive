Saving all output to "!!{outputDirectory}!!/skewjoinopt17.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/skewjoinopt17.q
>>>  set hive.internal.ddl.list.bucketing.enable=true;
No rows affected 
>>>  set hive.optimize.skewjoin.compiletime = true;
No rows affected 
>>>  
>>>  CREATE TABLE T1(key STRING, val STRING) 
SKEWED BY (key, val) ON ((2, 12)) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  LOAD DATA LOCAL INPATH '../data/files/T1.txt' INTO TABLE T1;
No rows affected 
>>>  
>>>  CREATE TABLE T2(key STRING, val STRING) 
SKEWED BY (key) ON ((2)) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  LOAD DATA LOCAL INPATH '../data/files/T2.txt' INTO TABLE T2;
No rows affected 
>>>  
>>>  -- One of the tables is skewed by 2 columns, and the other table is
>>>  -- skewed by one column. Ths join is performed on the first skewed column
>>>  -- The skewed value for the jon key is common to both the tables.
>>>  -- In this case, the skewed join value is not repeated in the filter.
>>>  -- adding a order by at the end to make the results deterministic
>>>  
>>>  EXPLAIN 
SELECT a.*, b.* FROM T1 a JOIN T2 b ON a.key = b.key;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME T1) a) (TOK_TABREF (TOK_TABNAME T2) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_ALLCOLREF (TOK_TABNAME a))) (TOK_SELEXPR (TOK_ALLCOLREF (TOK_TABNAME b))))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-2 depends on stages: Stage-1, Stage-4'
'  Stage-4 is a root stage'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        subquery1:a '
'          TableScan'
'            alias: a'
'            Filter Operator'
'              predicate:'
'                  expr: (not (key = '2'))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 0'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'        subquery1:b '
'          TableScan'
'            alias: b'
'            Filter Operator'
'              predicate:'
'                  expr: (not (key = '2'))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 1'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Inner Join 0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col4, _col5'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: string'
'                  expr: _col4'
'                  type: string'
'                  expr: _col5'
'                  type: string'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'          TableScan'
'            Union'
'              Select Operator'
'                SELECT * : (no compute)'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.TextInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'        file:!!{hive.exec.scratchdir}!! '
'          TableScan'
'            Union'
'              Select Operator'
'                SELECT * : (no compute)'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.TextInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-4'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        a '
'          TableScan'
'            alias: a'
'            Filter Operator'
'              predicate:'
'                  expr: (key = '2')'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 0'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'        b '
'          TableScan'
'            alias: b'
'            Filter Operator'
'              predicate:'
'                  expr: (key = '2')'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 1'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Inner Join 0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col4, _col5'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: string'
'                  expr: _col4'
'                  type: string'
'                  expr: _col5'
'                  type: string'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
185 rows selected 
>>>  
>>>  SELECT a.*, b.* FROM T1 a JOIN T2 b ON a.key = b.key 
ORDER BY a.key, b.key, a.val, b.val;
'key','val','key','val'
'2','12','2','22'
'3','13','3','13'
'8','18','8','18'
'8','18','8','18'
'8','28','8','18'
'8','28','8','18'
6 rows selected 
>>>  
>>>  DROP TABLE T1;
No rows affected 
>>>  DROP TABLE T2;
No rows affected 
>>>  
>>>  
>>>  CREATE TABLE T1(key STRING, val STRING) 
SKEWED BY (key, val) ON ((2, 12)) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  LOAD DATA LOCAL INPATH '../data/files/T1.txt' INTO TABLE T1;
No rows affected 
>>>  
>>>  CREATE TABLE T2(key STRING, val STRING) 
SKEWED BY (key) ON ((2)) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  LOAD DATA LOCAL INPATH '../data/files/T2.txt' INTO TABLE T2;
No rows affected 
>>>  
>>>  -- One of the tables is skewed by 2 columns, and the other table is
>>>  -- skewed by one column. Ths join is performed on the both the columns
>>>  -- In this case, the skewed join value is repeated in the filter.
>>>  
>>>  EXPLAIN 
SELECT a.*, b.* FROM T1 a JOIN T2 b ON a.key = b.key and a.val = b.val;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME T1) a) (TOK_TABREF (TOK_TABNAME T2) b) (and (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)) (= (. (TOK_TABLE_OR_COL a) val) (. (TOK_TABLE_OR_COL b) val))))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_ALLCOLREF (TOK_TABNAME a))) (TOK_SELEXPR (TOK_ALLCOLREF (TOK_TABNAME b))))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-2 depends on stages: Stage-1, Stage-4'
'  Stage-4 is a root stage'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        subquery1:a '
'          TableScan'
'            alias: a'
'            Filter Operator'
'              predicate:'
'                  expr: (not (((key = '2') and (val = '12')) or (key = '2')))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                sort order: ++'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                tag: 0'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'        subquery1:b '
'          TableScan'
'            alias: b'
'            Filter Operator'
'              predicate:'
'                  expr: (not (((key = '2') and (val = '12')) or (key = '2')))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                sort order: ++'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                tag: 1'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Inner Join 0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col4, _col5'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: string'
'                  expr: _col4'
'                  type: string'
'                  expr: _col5'
'                  type: string'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'          TableScan'
'            Union'
'              Select Operator'
'                SELECT * : (no compute)'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.TextInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'        file:!!{hive.exec.scratchdir}!! '
'          TableScan'
'            Union'
'              Select Operator'
'                SELECT * : (no compute)'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.TextInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-4'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        a '
'          TableScan'
'            alias: a'
'            Filter Operator'
'              predicate:'
'                  expr: (((key = '2') and (val = '12')) or (key = '2'))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                sort order: ++'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                tag: 0'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'        b '
'          TableScan'
'            alias: b'
'            Filter Operator'
'              predicate:'
'                  expr: (((key = '2') and (val = '12')) or (key = '2'))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                sort order: ++'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'                tag: 1'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: val'
'                      type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Inner Join 0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col4, _col5'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: string'
'                  expr: _col4'
'                  type: string'
'                  expr: _col5'
'                  type: string'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
200 rows selected 
>>>  
>>>  SELECT a.*, b.* FROM T1 a JOIN T2 b ON a.key = b.key and a.val = b.val 
ORDER BY a.key, b.key, a.val, b.val;
'key','val','key','val'
'3','13','3','13'
'8','18','8','18'
'8','18','8','18'
3 rows selected 
>>>  !record
