Saving all output to "!!{outputDirectory}!!/union2.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/union2.q
>>>  -- union case: both subqueries are map-reduce jobs on same input, followed by reduce sink
>>>  
>>>  explain 
select count(1) FROM (select s1.key as key, s1.value as value from src s1 UNION  ALL 
select s2.key as key, s2.value as value from src s2) unionsrc;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_SUBQUERY (TOK_UNION (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src) s1)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL s1) key) key) (TOK_SELEXPR (. (TOK_TABLE_OR_COL s1) value) value)))) (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src) s2)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL s2) key) key) (TOK_SELEXPR (. (TOK_TABLE_OR_COL s2) value) value))))) unionsrc)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION count 1)))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        null-subquery1:unionsrc-subquery1:s1 '
'          TableScan'
'            alias: s1'
'            Select Operator'
'              expressions:'
'                    expr: key'
'                    type: string'
'                    expr: value'
'                    type: string'
'              outputColumnNames: _col0, _col1'
'              Union'
'                Select Operator'
'                  Group By Operator'
'                    aggregations:'
'                          expr: count(1)'
'                    bucketGroup: false'
'                    mode: hash'
'                    outputColumnNames: _col0'
'                    Reduce Output Operator'
'                      sort order: '
'                      tag: -1'
'                      value expressions:'
'                            expr: _col0'
'                            type: bigint'
'        null-subquery2:unionsrc-subquery2:s2 '
'          TableScan'
'            alias: s2'
'            Select Operator'
'              expressions:'
'                    expr: key'
'                    type: string'
'                    expr: value'
'                    type: string'
'              outputColumnNames: _col0, _col1'
'              Union'
'                Select Operator'
'                  Group By Operator'
'                    aggregations:'
'                          expr: count(1)'
'                    bucketGroup: false'
'                    mode: hash'
'                    outputColumnNames: _col0'
'                    Reduce Output Operator'
'                      sort order: '
'                      tag: -1'
'                      value expressions:'
'                            expr: _col0'
'                            type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          mode: mergepartial'
'          outputColumnNames: _col0'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: bigint'
'            outputColumnNames: _col0'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.TextInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
83 rows selected 
>>>  
>>>  select count(1) FROM (select s1.key as key, s1.value as value from src s1 UNION  ALL 
select s2.key as key, s2.value as value from src s2) unionsrc;
'_c0'
'1000'
1 row selected 
>>>  !record
