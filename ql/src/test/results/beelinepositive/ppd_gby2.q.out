Saving all output to "!!{outputDirectory}!!/ppd_gby2.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/ppd_gby2.q
>>>  set hive.optimize.ppd=true;
No rows affected 
>>>  set hive.ppd.remove.duplicatefilters=false;
No rows affected 
>>>  
>>>  EXPLAIN 
SELECT max(src1.c1), src1.c2 
FROM 
(SELECT src.value AS c1, count(src.key) AS c2 FROM src WHERE src.value > 'val_10' GROUP BY src.value) src1 
WHERE src1.c1 > 'val_200' AND (src1.c2 > 30 OR src1.c1 < 'val_400') 
GROUP BY src1.c2;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src) value) c1) (TOK_SELEXPR (TOK_FUNCTION count (. (TOK_TABLE_OR_COL src) key)) c2)) (TOK_WHERE (> (. (TOK_TABLE_OR_COL src) value) 'val_10')) (TOK_GROUPBY (. (TOK_TABLE_OR_COL src) value)))) src1)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION max (. (TOK_TABLE_OR_COL src1) c1))) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) c2))) (TOK_WHERE (AND (> (. (TOK_TABLE_OR_COL src1) c1) 'val_200') (OR (> (. (TOK_TABLE_OR_COL src1) c2) 30) (< (. (TOK_TABLE_OR_COL src1) c1) 'val_400')))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL src1) c2))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-2 depends on stages: Stage-1'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src1:src '
'          TableScan'
'            alias: src'
'            Filter Operator'
'              predicate:'
'                  expr: ((value > 'val_10') and (value > 'val_200'))'
'                  type: boolean'
'              Filter Operator'
'                predicate:'
'                    expr: (value > 'val_10')'
'                    type: boolean'
'                Select Operator'
'                  expressions:'
'                        expr: value'
'                        type: string'
'                        expr: key'
'                        type: string'
'                  outputColumnNames: value, key'
'                  Group By Operator'
'                    aggregations:'
'                          expr: count(key)'
'                    bucketGroup: false'
'                    keys:'
'                          expr: value'
'                          type: string'
'                    mode: hash'
'                    outputColumnNames: _col0, _col1'
'                    Reduce Output Operator'
'                      key expressions:'
'                            expr: _col0'
'                            type: string'
'                      sort order: +'
'                      Map-reduce partition columns:'
'                            expr: _col0'
'                            type: string'
'                      tag: -1'
'                      value expressions:'
'                            expr: _col1'
'                            type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: string'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: bigint'
'            outputColumnNames: _col0, _col1'
'            Filter Operator'
'              predicate:'
'                  expr: ((_col0 > 'val_200') and ((_col1 > 30) or (_col0 < 'val_400')))'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: _col0'
'                      type: string'
'                      expr: _col1'
'                      type: bigint'
'                outputColumnNames: _col0, _col1'
'                Group By Operator'
'                  aggregations:'
'                        expr: max(_col0)'
'                  bucketGroup: false'
'                  keys:'
'                        expr: _col1'
'                        type: bigint'
'                  mode: hash'
'                  outputColumnNames: _col0, _col1'
'                  File Output Operator'
'                    compressed: false'
'                    GlobalTableId: 0'
'                    table:'
'                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: bigint'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: bigint'
'              tag: -1'
'              value expressions:'
'                    expr: _col1'
'                    type: string'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: max(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: bigint'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1'
'          Select Operator'
'            expressions:'
'                  expr: _col1'
'                  type: string'
'                  expr: _col0'
'                  type: bigint'
'            outputColumnNames: _col0, _col1'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.TextInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
140 rows selected 
>>>  
>>>  SELECT max(src1.c1), src1.c2 
FROM 
(SELECT src.value AS c1, count(src.key) AS c2 FROM src WHERE src.value > 'val_10' GROUP BY src.value) src1 
WHERE src1.c1 > 'val_200' AND (src1.c2 > 30 OR src1.c1 < 'val_400') 
GROUP BY src1.c2;
'_c0','c2'
'val_4','1'
'val_399','2'
'val_396','3'
'val_277','4'
'val_348','5'
5 rows selected 
>>>  
>>>  set hive.ppd.remove.duplicatefilters=true;
No rows affected 
>>>  
>>>  EXPLAIN 
SELECT max(src1.c1), src1.c2 
FROM 
(SELECT src.value AS c1, count(src.key) AS c2 FROM src WHERE src.value > 'val_10' GROUP BY src.value) src1 
WHERE src1.c1 > 'val_200' AND (src1.c2 > 30 OR src1.c1 < 'val_400') 
GROUP BY src1.c2;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src) value) c1) (TOK_SELEXPR (TOK_FUNCTION count (. (TOK_TABLE_OR_COL src) key)) c2)) (TOK_WHERE (> (. (TOK_TABLE_OR_COL src) value) 'val_10')) (TOK_GROUPBY (. (TOK_TABLE_OR_COL src) value)))) src1)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION max (. (TOK_TABLE_OR_COL src1) c1))) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) c2))) (TOK_WHERE (AND (> (. (TOK_TABLE_OR_COL src1) c1) 'val_200') (OR (> (. (TOK_TABLE_OR_COL src1) c2) 30) (< (. (TOK_TABLE_OR_COL src1) c1) 'val_400')))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL src1) c2))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-2 depends on stages: Stage-1'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src1:src '
'          TableScan'
'            alias: src'
'            Filter Operator'
'              predicate:'
'                  expr: ((value > 'val_10') and (value > 'val_200'))'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: value'
'                      type: string'
'                      expr: key'
'                      type: string'
'                outputColumnNames: value, key'
'                Group By Operator'
'                  aggregations:'
'                        expr: count(key)'
'                  bucketGroup: false'
'                  keys:'
'                        expr: value'
'                        type: string'
'                  mode: hash'
'                  outputColumnNames: _col0, _col1'
'                  Reduce Output Operator'
'                    key expressions:'
'                          expr: _col0'
'                          type: string'
'                    sort order: +'
'                    Map-reduce partition columns:'
'                          expr: _col0'
'                          type: string'
'                    tag: -1'
'                    value expressions:'
'                          expr: _col1'
'                          type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: string'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1'
'          Filter Operator'
'            predicate:'
'                expr: ((_col0 > 'val_200') and ((_col1 > 30) or (_col0 < 'val_400')))'
'                type: boolean'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: _col1'
'                    type: bigint'
'              outputColumnNames: _col0, _col1'
'              Select Operator'
'                expressions:'
'                      expr: _col0'
'                      type: string'
'                      expr: _col1'
'                      type: bigint'
'                outputColumnNames: _col0, _col1'
'                Group By Operator'
'                  aggregations:'
'                        expr: max(_col0)'
'                  bucketGroup: false'
'                  keys:'
'                        expr: _col1'
'                        type: bigint'
'                  mode: hash'
'                  outputColumnNames: _col0, _col1'
'                  File Output Operator'
'                    compressed: false'
'                    GlobalTableId: 0'
'                    table:'
'                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: bigint'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: bigint'
'              tag: -1'
'              value expressions:'
'                    expr: _col1'
'                    type: string'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: max(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: bigint'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1'
'          Select Operator'
'            expressions:'
'                  expr: _col1'
'                  type: string'
'                  expr: _col0'
'                  type: bigint'
'            outputColumnNames: _col0, _col1'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.TextInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
136 rows selected 
>>>  
>>>  SELECT max(src1.c1), src1.c2 
FROM 
(SELECT src.value AS c1, count(src.key) AS c2 FROM src WHERE src.value > 'val_10' GROUP BY src.value) src1 
WHERE src1.c1 > 'val_200' AND (src1.c2 > 30 OR src1.c1 < 'val_400') 
GROUP BY src1.c2;
'_c0','c2'
'val_4','1'
'val_399','2'
'val_396','3'
'val_277','4'
'val_348','5'
5 rows selected 
>>>  !record
