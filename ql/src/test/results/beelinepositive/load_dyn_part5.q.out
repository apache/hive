Saving all output to "!!{outputDirectory}!!/load_dyn_part5.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/load_dyn_part5.q
>>>  
>>>  
>>>  create table if not exists nzhang_part5 (key string) partitioned by (value string);
No rows affected 
>>>  describe extended nzhang_part5;
'col_name','data_type','comment'
'key','string',''
'value','string',''
'','',''
'Detailed Table Information','Table(tableName:nzhang_part5, dbName:load_dyn_part5, owner:!!{user.name}!!, createTime:!!UNIXTIME!!, lastAccessTime:0, retention:0, sd:StorageDescriptor(cols:[FieldSchema(name:key, type:string, comment:null), FieldSchema(name:value, type:string, comment:null)], location:!!{hive.metastore.warehouse.dir}!!/load_dyn_part5.db/nzhang_part5, inputFormat:org.apache.hadoop.mapred.TextInputFormat, outputFormat:org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat, compressed:false, numBuckets:-1, serdeInfo:SerDeInfo(name:null, serializationLib:org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, parameters:{serialization.format=1}), bucketCols:[], sortCols:[], parameters:{}, skewedInfo:SkewedInfo(skewedColNames:[], skewedColValues:[], skewedColValueLocationMaps:{})), partitionKeys:[FieldSchema(name:value, type:string, comment:null)], parameters:{transient_lastDdlTime=!!UNIXTIME!!}, viewOriginalText:null, viewExpandedText:null, tableType:MANAGED_TABLE)',''
4 rows selected 
>>>  
>>>  set hive.merge.mapfiles=false;
No rows affected 
>>>  set hive.exec.dynamic.partition=true;
No rows affected 
>>>  set hive.exec.dynamic.partition.mode=nonstrict;
No rows affected 
>>>  set hive.exec.max.dynamic.partitions=2000;
No rows affected 
>>>  set hive.exec.max.dynamic.partitions.pernode=2000;
No rows affected 
>>>  
>>>  explain 
insert overwrite table nzhang_part5 partition (value) select key, value from src;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME nzhang_part5) (TOK_PARTSPEC (TOK_PARTVAL value)))) (TOK_SELECT (TOK_SELEXPR (TOK_TABLE_OR_COL key)) (TOK_SELEXPR (TOK_TABLE_OR_COL value)))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-0 depends on stages: Stage-1'
'  Stage-2 depends on stages: Stage-0'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src '
'          TableScan'
'            alias: src'
'            Select Operator'
'              expressions:'
'                    expr: key'
'                    type: string'
'                    expr: value'
'                    type: string'
'              outputColumnNames: _col0, _col1'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: load_dyn_part5.nzhang_part5'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          partition:'
'            value '
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: load_dyn_part5.nzhang_part5'
''
'  Stage: Stage-2'
'    Stats-Aggr Operator'
''
''
47 rows selected 
>>>  
>>>  insert overwrite table nzhang_part5 partition (value) select key, value from src;
'key','value'
No rows selected 
>>>  
>>>  show partitions nzhang_part5;
'partition'
'value=val_0'
'value=val_10'
'value=val_100'
'value=val_103'
'value=val_104'
'value=val_105'
'value=val_11'
'value=val_111'
'value=val_113'
'value=val_114'
'value=val_116'
'value=val_118'
'value=val_119'
'value=val_12'
'value=val_120'
'value=val_125'
'value=val_126'
'value=val_128'
'value=val_129'
'value=val_131'
'value=val_133'
'value=val_134'
'value=val_136'
'value=val_137'
'value=val_138'
'value=val_143'
'value=val_145'
'value=val_146'
'value=val_149'
'value=val_15'
'value=val_150'
'value=val_152'
'value=val_153'
'value=val_155'
'value=val_156'
'value=val_157'
'value=val_158'
'value=val_160'
'value=val_162'
'value=val_163'
'value=val_164'
'value=val_165'
'value=val_166'
'value=val_167'
'value=val_168'
'value=val_169'
'value=val_17'
'value=val_170'
'value=val_172'
'value=val_174'
'value=val_175'
'value=val_176'
'value=val_177'
'value=val_178'
'value=val_179'
'value=val_18'
'value=val_180'
'value=val_181'
'value=val_183'
'value=val_186'
'value=val_187'
'value=val_189'
'value=val_19'
'value=val_190'
'value=val_191'
'value=val_192'
'value=val_193'
'value=val_194'
'value=val_195'
'value=val_196'
'value=val_197'
'value=val_199'
'value=val_2'
'value=val_20'
'value=val_200'
'value=val_201'
'value=val_202'
'value=val_203'
'value=val_205'
'value=val_207'
'value=val_208'
'value=val_209'
'value=val_213'
'value=val_214'
'value=val_216'
'value=val_217'
'value=val_218'
'value=val_219'
'value=val_221'
'value=val_222'
'value=val_223'
'value=val_224'
'value=val_226'
'value=val_228'
'value=val_229'
'value=val_230'
'value=val_233'
'value=val_235'
'value=val_237'
'value=val_238'
'value=val_239'
'value=val_24'
'value=val_241'
'value=val_242'
'value=val_244'
'value=val_247'
'value=val_248'
'value=val_249'
'value=val_252'
'value=val_255'
'value=val_256'
'value=val_257'
'value=val_258'
'value=val_26'
'value=val_260'
'value=val_262'
'value=val_263'
'value=val_265'
'value=val_266'
'value=val_27'
'value=val_272'
'value=val_273'
'value=val_274'
'value=val_275'
'value=val_277'
'value=val_278'
'value=val_28'
'value=val_280'
'value=val_281'
'value=val_282'
'value=val_283'
'value=val_284'
'value=val_285'
'value=val_286'
'value=val_287'
'value=val_288'
'value=val_289'
'value=val_291'
'value=val_292'
'value=val_296'
'value=val_298'
'value=val_30'
'value=val_302'
'value=val_305'
'value=val_306'
'value=val_307'
'value=val_308'
'value=val_309'
'value=val_310'
'value=val_311'
'value=val_315'
'value=val_316'
'value=val_317'
'value=val_318'
'value=val_321'
'value=val_322'
'value=val_323'
'value=val_325'
'value=val_327'
'value=val_33'
'value=val_331'
'value=val_332'
'value=val_333'
'value=val_335'
'value=val_336'
'value=val_338'
'value=val_339'
'value=val_34'
'value=val_341'
'value=val_342'
'value=val_344'
'value=val_345'
'value=val_348'
'value=val_35'
'value=val_351'
'value=val_353'
'value=val_356'
'value=val_360'
'value=val_362'
'value=val_364'
'value=val_365'
'value=val_366'
'value=val_367'
'value=val_368'
'value=val_369'
'value=val_37'
'value=val_373'
'value=val_374'
'value=val_375'
'value=val_377'
'value=val_378'
'value=val_379'
'value=val_382'
'value=val_384'
'value=val_386'
'value=val_389'
'value=val_392'
'value=val_393'
'value=val_394'
'value=val_395'
'value=val_396'
'value=val_397'
'value=val_399'
'value=val_4'
'value=val_400'
'value=val_401'
'value=val_402'
'value=val_403'
'value=val_404'
'value=val_406'
'value=val_407'
'value=val_409'
'value=val_41'
'value=val_411'
'value=val_413'
'value=val_414'
'value=val_417'
'value=val_418'
'value=val_419'
'value=val_42'
'value=val_421'
'value=val_424'
'value=val_427'
'value=val_429'
'value=val_43'
'value=val_430'
'value=val_431'
'value=val_432'
'value=val_435'
'value=val_436'
'value=val_437'
'value=val_438'
'value=val_439'
'value=val_44'
'value=val_443'
'value=val_444'
'value=val_446'
'value=val_448'
'value=val_449'
'value=val_452'
'value=val_453'
'value=val_454'
'value=val_455'
'value=val_457'
'value=val_458'
'value=val_459'
'value=val_460'
'value=val_462'
'value=val_463'
'value=val_466'
'value=val_467'
'value=val_468'
'value=val_469'
'value=val_47'
'value=val_470'
'value=val_472'
'value=val_475'
'value=val_477'
'value=val_478'
'value=val_479'
'value=val_480'
'value=val_481'
'value=val_482'
'value=val_483'
'value=val_484'
'value=val_485'
'value=val_487'
'value=val_489'
'value=val_490'
'value=val_491'
'value=val_492'
'value=val_493'
'value=val_494'
'value=val_495'
'value=val_496'
'value=val_497'
'value=val_498'
'value=val_5'
'value=val_51'
'value=val_53'
'value=val_54'
'value=val_57'
'value=val_58'
'value=val_64'
'value=val_65'
'value=val_66'
'value=val_67'
'value=val_69'
'value=val_70'
'value=val_72'
'value=val_74'
'value=val_76'
'value=val_77'
'value=val_78'
'value=val_8'
'value=val_80'
'value=val_82'
'value=val_83'
'value=val_84'
'value=val_85'
'value=val_86'
'value=val_87'
'value=val_9'
'value=val_90'
'value=val_92'
'value=val_95'
'value=val_96'
'value=val_97'
'value=val_98'
309 rows selected 
>>>  
>>>  select * from nzhang_part5 where value='val_0';
'key','value'
'0','val_0'
'0','val_0'
'0','val_0'
3 rows selected 
>>>  select * from nzhang_part5 where value='val_2';
'key','value'
'2','val_2'
1 row selected 
>>>  
>>>  
>>>  !record
