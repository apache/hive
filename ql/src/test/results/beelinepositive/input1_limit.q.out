Saving all output to "!!{outputDirectory}!!/input1_limit.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/input1_limit.q
>>>  CREATE TABLE dest1(key INT, value STRING) STORED AS TEXTFILE;
No rows affected 
>>>  CREATE TABLE dest2(key INT, value STRING) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  EXPLAIN 
FROM src 
INSERT OVERWRITE TABLE dest1 SELECT src.key, src.value WHERE src.key < 100 LIMIT 10 
INSERT OVERWRITE TABLE dest2 SELECT src.key, src.value WHERE src.key < 100 LIMIT 5;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest1))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src) value))) (TOK_WHERE (< (. (TOK_TABLE_OR_COL src) key) 100)) (TOK_LIMIT 10)) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest2))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src) value))) (TOK_WHERE (< (. (TOK_TABLE_OR_COL src) key) 100)) (TOK_LIMIT 5)))'
''
'STAGE DEPENDENCIES:'
'  Stage-2 is a root stage'
'  Stage-0 depends on stages: Stage-2'
'  Stage-3 depends on stages: Stage-0'
'  Stage-4 depends on stages: Stage-2'
'  Stage-1 depends on stages: Stage-4'
'  Stage-5 depends on stages: Stage-1'
''
'STAGE PLANS:'
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src '
'          TableScan'
'            alias: src'
'            Filter Operator'
'              predicate:'
'                  expr: (key < 100.0)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                Limit'
'                  Reduce Output Operator'
'                    sort order: '
'                    tag: -1'
'                    value expressions:'
'                          expr: _col0'
'                          type: string'
'                          expr: _col1'
'                          type: string'
'            Filter Operator'
'              predicate:'
'                  expr: (key < 100.0)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                Limit'
'                  File Output Operator'
'                    compressed: false'
'                    GlobalTableId: 0'
'                    table:'
'                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
'      Reduce Operator Tree:'
'        Extract'
'          Limit'
'            Select Operator'
'              expressions:'
'                    expr: UDFToInteger(_col0)'
'                    type: int'
'                    expr: _col1'
'                    type: string'
'              outputColumnNames: _col0, _col1'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: input1_limit.dest1'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: input1_limit.dest1'
''
'  Stage: Stage-3'
'    Stats-Aggr Operator'
''
'  Stage: Stage-4'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              sort order: '
'              tag: -1'
'              value expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: _col1'
'                    type: string'
'      Reduce Operator Tree:'
'        Extract'
'          Limit'
'            Select Operator'
'              expressions:'
'                    expr: UDFToInteger(_col0)'
'                    type: int'
'                    expr: _col1'
'                    type: string'
'              outputColumnNames: _col0, _col1'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 2'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: input1_limit.dest2'
''
'  Stage: Stage-1'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: input1_limit.dest2'
''
'  Stage: Stage-5'
'    Stats-Aggr Operator'
''
''
133 rows selected 
>>>  
>>>  FROM src 
INSERT OVERWRITE TABLE dest1 SELECT src.key, src.value WHERE src.key < 100 LIMIT 10 
INSERT OVERWRITE TABLE dest2 SELECT src.key, src.value WHERE src.key < 100 LIMIT 5;
'_col0','_col1'
No rows selected 
>>>  
>>>  SELECT dest1.* FROM dest1 ORDER BY dest1.key ASC, dest1.value ASC;
'key','value'
'0','val_0'
'15','val_15'
'17','val_17'
'27','val_27'
'37','val_37'
'57','val_57'
'66','val_66'
'82','val_82'
'86','val_86'
'98','val_98'
10 rows selected 
>>>  SELECT dest2.* FROM dest2 ORDER BY dest2.key ASC, dest2.value ASC;
'key','value'
'27','val_27'
'37','val_37'
'66','val_66'
'86','val_86'
'98','val_98'
5 rows selected 
>>>  
>>>  
>>>  
>>>  
>>>  !record
