Saving all output to "!!{outputDirectory}!!/join2.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/join2.q
>>>  CREATE TABLE dest_j2(key INT, value STRING) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  EXPLAIN 
FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key + src2.key = src3.key) 
INSERT OVERWRITE TABLE dest_j2 SELECT src1.key, src3.value;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_JOIN (TOK_TABREF (TOK_TABNAME src) src1) (TOK_TABREF (TOK_TABNAME src) src2) (= (. (TOK_TABLE_OR_COL src1) key) (. (TOK_TABLE_OR_COL src2) key))) (TOK_TABREF (TOK_TABNAME src) src3) (= (+ (. (TOK_TABLE_OR_COL src1) key) (. (TOK_TABLE_OR_COL src2) key)) (. (TOK_TABLE_OR_COL src3) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest_j2))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src3) value)))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-2 depends on stages: Stage-1'
'  Stage-0 depends on stages: Stage-2'
'  Stage-3 depends on stages: Stage-0'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src1 '
'          TableScan'
'            alias: src1'
'            Reduce Output Operator'
'              key expressions:'
'                    expr: key'
'                    type: string'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: key'
'                    type: string'
'              tag: 0'
'              value expressions:'
'                    expr: key'
'                    type: string'
'        src2 '
'          TableScan'
'            alias: src2'
'            Reduce Output Operator'
'              key expressions:'
'                    expr: key'
'                    type: string'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: key'
'                    type: string'
'              tag: 1'
'              value expressions:'
'                    expr: key'
'                    type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Inner Join 0 to 1'
'          condition expressions:'
'            0 {VALUE._col0}'
'            1 {VALUE._col0}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col4'
'          File Output Operator'
'            compressed: false'
'            GlobalTableId: 0'
'            table:'
'                input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        $INTNAME '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: (_col0 + _col4)'
'                    type: double'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: (_col0 + _col4)'
'                    type: double'
'              tag: 0'
'              value expressions:'
'                    expr: _col0'
'                    type: string'
'        src3 '
'          TableScan'
'            alias: src3'
'            Reduce Output Operator'
'              key expressions:'
'                    expr: UDFToDouble(key)'
'                    type: double'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: UDFToDouble(key)'
'                    type: double'
'              tag: 1'
'              value expressions:'
'                    expr: value'
'                    type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Inner Join 0 to 1'
'          condition expressions:'
'            0 {VALUE._col4}'
'            1 {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col4, _col9'
'          Select Operator'
'            expressions:'
'                  expr: _col4'
'                  type: string'
'                  expr: _col9'
'                  type: string'
'            outputColumnNames: _col0, _col1'
'            Select Operator'
'              expressions:'
'                    expr: UDFToInteger(_col0)'
'                    type: int'
'                    expr: _col1'
'                    type: string'
'              outputColumnNames: _col0, _col1'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: join2.dest_j2'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: join2.dest_j2'
''
'  Stage: Stage-3'
'    Stats-Aggr Operator'
''
''
136 rows selected 
>>>  
>>>  FROM src src1 JOIN src src2 ON (src1.key = src2.key) JOIN src src3 ON (src1.key + src2.key = src3.key) 
INSERT OVERWRITE TABLE dest_j2 SELECT src1.key, src3.value;
'_col0','_col1'
No rows selected 
>>>  
>>>  SELECT dest_j2.* FROM dest_j2;
'key','value'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'0','val_0'
'2','val_4'
'4','val_8'
'5','val_10'
'5','val_10'
'5','val_10'
'5','val_10'
'5','val_10'
'5','val_10'
'5','val_10'
'5','val_10'
'5','val_10'
'9','val_18'
'9','val_18'
'10','val_20'
'12','val_24'
'12','val_24'
'12','val_24'
'12','val_24'
'12','val_24'
'12','val_24'
'12','val_24'
'12','val_24'
'15','val_30'
'15','val_30'
'15','val_30'
'15','val_30'
'17','val_34'
'27','val_54'
'33','val_66'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'35','val_70'
'37','val_74'
'37','val_74'
'37','val_74'
'37','val_74'
'41','val_82'
'42','val_84'
'42','val_84'
'42','val_84'
'42','val_84'
'42','val_84'
'42','val_84'
'42','val_84'
'42','val_84'
'43','val_86'
'57','val_114'
'58','val_116'
'58','val_116'
'58','val_116'
'58','val_116'
'64','val_128'
'64','val_128'
'64','val_128'
'67','val_134'
'67','val_134'
'67','val_134'
'67','val_134'
'67','val_134'
'67','val_134'
'67','val_134'
'67','val_134'
'69','val_138'
'69','val_138'
'69','val_138'
'69','val_138'
'76','val_152'
'76','val_152'
'76','val_152'
'76','val_152'
'76','val_152'
'76','val_152'
'76','val_152'
'76','val_152'
'78','val_156'
'80','val_160'
'82','val_164'
'82','val_164'
'83','val_166'
'83','val_166'
'83','val_166'
'83','val_166'
'84','val_168'
'84','val_168'
'84','val_168'
'84','val_168'
'85','val_170'
'86','val_172'
'86','val_172'
'87','val_174'
'87','val_174'
'90','val_180'
'90','val_180'
'90','val_180'
'90','val_180'
'90','val_180'
'90','val_180'
'90','val_180'
'90','val_180'
'90','val_180'
'95','val_190'
'95','val_190'
'95','val_190'
'95','val_190'
'96','val_192'
'97','val_194'
'97','val_194'
'97','val_194'
'97','val_194'
'98','val_196'
'98','val_196'
'98','val_196'
'98','val_196'
'100','val_200'
'100','val_200'
'100','val_200'
'100','val_200'
'100','val_200'
'100','val_200'
'100','val_200'
'100','val_200'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'104','val_208'
'111','val_222'
'113','val_226'
'113','val_226'
'113','val_226'
'113','val_226'
'114','val_228'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'119','val_238'
'126','val_252'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'128','val_256'
'129','val_258'
'129','val_258'
'129','val_258'
'129','val_258'
'131','val_262'
'133','val_266'
'136','val_272'
'136','val_272'
'137','val_274'
'137','val_274'
'137','val_274'
'137','val_274'
'143','val_286'
'146','val_292'
'146','val_292'
'146','val_292'
'146','val_292'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'149','val_298'
'153','val_306'
'155','val_310'
'158','val_316'
'158','val_316'
'158','val_316'
'166','val_332'
'168','val_336'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'169','val_338'
'172','val_344'
'172','val_344'
'172','val_344'
'172','val_344'
'172','val_344'
'172','val_344'
'172','val_344'
'172','val_344'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'174','val_348'
'178','val_356'
'180','val_360'
'181','val_362'
'183','val_366'
'187','val_374'
'187','val_374'
'187','val_374'
'187','val_374'
'187','val_374'
'187','val_374'
'187','val_374'
'187','val_374'
'187','val_374'
'189','val_378'
'191','val_382'
'191','val_382'
'191','val_382'
'191','val_382'
'191','val_382'
'191','val_382'
'191','val_382'
'191','val_382'
'192','val_384'
'192','val_384'
'192','val_384'
'193','val_386'
'193','val_386'
'193','val_386'
'193','val_386'
'193','val_386'
'193','val_386'
'193','val_386'
'193','val_386'
'193','val_386'
'196','val_392'
'197','val_394'
'197','val_394'
'197','val_394'
'197','val_394'
'200','val_400'
'200','val_400'
'200','val_400'
'200','val_400'
'201','val_402'
'202','val_404'
'202','val_404'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'203','val_406'
'207','val_414'
'207','val_414'
'207','val_414'
'207','val_414'
'207','val_414'
'207','val_414'
'207','val_414'
'207','val_414'
'209','val_418'
'209','val_418'
'209','val_418'
'209','val_418'
'216','val_432'
'216','val_432'
'216','val_432'
'216','val_432'
'218','val_436'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'219','val_438'
'222','val_444'
'223','val_446'
'223','val_446'
'223','val_446'
'223','val_446'
'224','val_448'
'224','val_448'
'224','val_448'
'224','val_448'
'226','val_452'
'229','val_458'
'229','val_458'
'229','val_458'
'229','val_458'
'229','val_458'
'229','val_458'
'229','val_458'
'229','val_458'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'230','val_460'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'233','val_466'
'235','val_470'
'239','val_478'
'239','val_478'
'239','val_478'
'239','val_478'
'239','val_478'
'239','val_478'
'239','val_478'
'239','val_478'
'241','val_482'
'242','val_484'
'242','val_484'
'242','val_484'
'242','val_484'
'247','val_494'
'248','val_496'
'249','val_498'
'249','val_498'
'249','val_498'
472 rows selected 
>>>  !record
