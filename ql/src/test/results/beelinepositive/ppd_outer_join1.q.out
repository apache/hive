Saving all output to "!!{outputDirectory}!!/ppd_outer_join1.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/ppd_outer_join1.q
>>>  set hive.optimize.ppd=true;
No rows affected 
>>>  set hive.ppd.remove.duplicatefilters=false;
No rows affected 
>>>  
>>>  EXPLAIN 
FROM 
src a 
LEFT OUTER JOIN 
src b 
ON (a.key = b.key) 
SELECT a.key, a.value, b.key, b.value 
WHERE a.key > 10 AND a.key < 20 AND b.key > 15 AND b.key < 25;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_LEFTOUTERJOIN (TOK_TABREF (TOK_TABNAME src) a) (TOK_TABREF (TOK_TABNAME src) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL a) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL a) value)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL b) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL b) value))) (TOK_WHERE (AND (AND (AND (> (. (TOK_TABLE_OR_COL a) key) 10) (< (. (TOK_TABLE_OR_COL a) key) 20)) (> (. (TOK_TABLE_OR_COL b) key) 15)) (< (. (TOK_TABLE_OR_COL b) key) 25)))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        a '
'          TableScan'
'            alias: a'
'            Filter Operator'
'              predicate:'
'                  expr: ((key > 10.0) and (key < 20.0))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 0'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'        b '
'          TableScan'
'            alias: b'
'            Filter Operator'
'              predicate:'
'                  expr: ((key > 10.0) and (key < 20.0))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 1'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Left Outer Join0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col4, _col5'
'          Filter Operator'
'            predicate:'
'                expr: ((((_col0 > 10.0) and (_col0 < 20.0)) and (_col4 > 15.0)) and (_col4 < 25.0))'
'                type: boolean'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: _col1'
'                    type: string'
'                    expr: _col4'
'                    type: string'
'                    expr: _col5'
'                    type: string'
'              outputColumnNames: _col0, _col1, _col2, _col3'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 0'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
89 rows selected 
>>>  
>>>  FROM 
src a 
LEFT OUTER JOIN 
src b 
ON (a.key = b.key) 
SELECT a.key, a.value, b.key, b.value 
WHERE a.key > 10 AND a.key < 20 AND b.key > 15 AND b.key < 25;
'key','value','key','value'
'17','val_17','17','val_17'
'18','val_18','18','val_18'
'18','val_18','18','val_18'
'18','val_18','18','val_18'
'18','val_18','18','val_18'
'19','val_19','19','val_19'
6 rows selected 
>>>  
>>>  set hive.ppd.remove.duplicatefilters=true;
No rows affected 
>>>  
>>>  EXPLAIN 
FROM 
src a 
LEFT OUTER JOIN 
src b 
ON (a.key = b.key) 
SELECT a.key, a.value, b.key, b.value 
WHERE a.key > 10 AND a.key < 20 AND b.key > 15 AND b.key < 25;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_LEFTOUTERJOIN (TOK_TABREF (TOK_TABNAME src) a) (TOK_TABREF (TOK_TABNAME src) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) key)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL a) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL a) value)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL b) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL b) value))) (TOK_WHERE (AND (AND (AND (> (. (TOK_TABLE_OR_COL a) key) 10) (< (. (TOK_TABLE_OR_COL a) key) 20)) (> (. (TOK_TABLE_OR_COL b) key) 15)) (< (. (TOK_TABLE_OR_COL b) key) 25)))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        a '
'          TableScan'
'            alias: a'
'            Filter Operator'
'              predicate:'
'                  expr: ((key > 10.0) and (key < 20.0))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 0'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'        b '
'          TableScan'
'            alias: b'
'            Filter Operator'
'              predicate:'
'                  expr: ((key > 10.0) and (key < 20.0))'
'                  type: boolean'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: key'
'                      type: string'
'                sort order: +'
'                Map-reduce partition columns:'
'                      expr: key'
'                      type: string'
'                tag: 1'
'                value expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Left Outer Join0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col4, _col5'
'          Filter Operator'
'            predicate:'
'                expr: ((_col4 > 15.0) and (_col4 < 25.0))'
'                type: boolean'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: _col1'
'                    type: string'
'                    expr: _col4'
'                    type: string'
'                    expr: _col5'
'                    type: string'
'              outputColumnNames: _col0, _col1, _col2, _col3'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 0'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
89 rows selected 
>>>  
>>>  FROM 
src a 
LEFT OUTER JOIN 
src b 
ON (a.key = b.key) 
SELECT a.key, a.value, b.key, b.value 
WHERE a.key > 10 AND a.key < 20 AND b.key > 15 AND b.key < 25;
'key','value','key','value'
'17','val_17','17','val_17'
'18','val_18','18','val_18'
'18','val_18','18','val_18'
'18','val_18','18','val_18'
'18','val_18','18','val_18'
'19','val_19','19','val_19'
6 rows selected 
>>>  !record
