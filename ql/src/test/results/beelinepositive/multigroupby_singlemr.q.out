Saving all output to "!!{outputDirectory}!!/multigroupby_singlemr.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/multigroupby_singlemr.q
>>>  CREATE TABLE TBL(C1 INT, C2 INT, C3 INT, C4 INT);
No rows affected 
>>>  
>>>  CREATE TABLE DEST1(d1 INT, d2 INT) STORED AS TEXTFILE;
No rows affected 
>>>  CREATE TABLE DEST2(d1 INT, d2 INT, d3 INT) STORED AS TEXTFILE;
No rows affected 
>>>  CREATE TABLE DEST3(d1 INT, d2 INT, d3 INT, d4 INT) STORED AS TEXTFILE;
No rows affected 
>>>  CREATE TABLE DEST4(d1 INT, d2 INT, d3 INT, d4 INT) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  EXPLAIN 
FROM TBL 
INSERT OVERWRITE TABLE DEST1 SELECT TBL.C1, COUNT(TBL.C2) GROUP BY TBL.C1 
INSERT OVERWRITE TABLE DEST2 SELECT TBL.C1, TBL.C2, COUNT(TBL.C3) GROUP BY TBL.C1, TBL.C2;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME TBL))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST1))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C2)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST2))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C3)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1) (. (TOK_TABLE_OR_COL TBL) C2))))'
''
'STAGE DEPENDENCIES:'
'  Stage-2 is a root stage'
'  Stage-0 depends on stages: Stage-2'
'  Stage-3 depends on stages: Stage-0'
'  Stage-4 depends on stages: Stage-2'
'  Stage-1 depends on stages: Stage-4'
'  Stage-5 depends on stages: Stage-1'
''
'STAGE PLANS:'
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        tbl '
'          TableScan'
'            alias: tbl'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'              outputColumnNames: c1, c2'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c2)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1'
'                Reduce Output Operator'
'                  key expressions:'
'                        expr: _col0'
'                        type: int'
'                  sort order: +'
'                  Map-reduce partition columns:'
'                        expr: _col0'
'                        type: int'
'                  tag: -1'
'                  value expressions:'
'                        expr: _col1'
'                        type: bigint'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'                    expr: c3'
'                    type: int'
'              outputColumnNames: c1, c2, c3'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c3)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                      expr: c2'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: bigint'
'            outputColumnNames: _col0, _col1'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: UDFToInteger(_col1)'
'                    type: int'
'              outputColumnNames: _col0, _col1'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest1'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest1'
''
'  Stage: Stage-3'
'    Stats-Aggr Operator'
''
'  Stage: Stage-4'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              sort order: ++'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              tag: -1'
'              value expressions:'
'                    expr: _col2'
'                    type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'                expr: KEY._col1'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: int'
'                  expr: _col2'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: UDFToInteger(_col2)'
'                    type: int'
'              outputColumnNames: _col0, _col1, _col2'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 2'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-1'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-5'
'    Stats-Aggr Operator'
''
''
191 rows selected 
>>>  
>>>  EXPLAIN 
FROM TBL 
INSERT OVERWRITE TABLE DEST1 SELECT TBL.C1, COUNT(TBL.C2) GROUP BY TBL.C1 
INSERT OVERWRITE TABLE DEST2 SELECT TBL.C1, TBL.C2, COUNT(TBL.C3) GROUP BY TBL.C2, TBL.C1;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME TBL))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST1))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C2)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST2))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C3)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C2) (. (TOK_TABLE_OR_COL TBL) C1))))'
''
'STAGE DEPENDENCIES:'
'  Stage-2 is a root stage'
'  Stage-0 depends on stages: Stage-2'
'  Stage-3 depends on stages: Stage-0'
'  Stage-4 depends on stages: Stage-2'
'  Stage-1 depends on stages: Stage-4'
'  Stage-5 depends on stages: Stage-1'
''
'STAGE PLANS:'
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        tbl '
'          TableScan'
'            alias: tbl'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'              outputColumnNames: c1, c2'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c2)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1'
'                Reduce Output Operator'
'                  key expressions:'
'                        expr: _col0'
'                        type: int'
'                  sort order: +'
'                  Map-reduce partition columns:'
'                        expr: _col0'
'                        type: int'
'                  tag: -1'
'                  value expressions:'
'                        expr: _col1'
'                        type: bigint'
'            Select Operator'
'              expressions:'
'                    expr: c2'
'                    type: int'
'                    expr: c1'
'                    type: int'
'                    expr: c3'
'                    type: int'
'              outputColumnNames: c2, c1, c3'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c3)'
'                bucketGroup: false'
'                keys:'
'                      expr: c2'
'                      type: int'
'                      expr: c1'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: bigint'
'            outputColumnNames: _col0, _col1'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: UDFToInteger(_col1)'
'                    type: int'
'              outputColumnNames: _col0, _col1'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest1'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest1'
''
'  Stage: Stage-3'
'    Stats-Aggr Operator'
''
'  Stage: Stage-4'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              sort order: ++'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              tag: -1'
'              value expressions:'
'                    expr: _col2'
'                    type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'                expr: KEY._col1'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2'
'          Select Operator'
'            expressions:'
'                  expr: _col1'
'                  type: int'
'                  expr: _col0'
'                  type: int'
'                  expr: _col2'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: UDFToInteger(_col2)'
'                    type: int'
'              outputColumnNames: _col0, _col1, _col2'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 2'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-1'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-5'
'    Stats-Aggr Operator'
''
''
191 rows selected 
>>>  
>>>  EXPLAIN 
FROM TBL 
INSERT OVERWRITE TABLE DEST3 SELECT TBL.C1, TBL.C2, TBL.C3, COUNT(TBL.C4) GROUP BY TBL.C1, TBL.C2, TBL.C3 
INSERT OVERWRITE TABLE DEST2 SELECT TBL.C1, TBL.C2, COUNT(TBL.C3) GROUP BY TBL.C1, TBL.C2;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME TBL))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST3))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C3)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C4)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1) (. (TOK_TABLE_OR_COL TBL) C2) (. (TOK_TABLE_OR_COL TBL) C3))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST2))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C3)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1) (. (TOK_TABLE_OR_COL TBL) C2))))'
''
'STAGE DEPENDENCIES:'
'  Stage-2 is a root stage'
'  Stage-0 depends on stages: Stage-2'
'  Stage-3 depends on stages: Stage-0'
'  Stage-4 depends on stages: Stage-2'
'  Stage-1 depends on stages: Stage-4'
'  Stage-5 depends on stages: Stage-1'
''
'STAGE PLANS:'
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        tbl '
'          TableScan'
'            alias: tbl'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'                    expr: c3'
'                    type: int'
'                    expr: c4'
'                    type: int'
'              outputColumnNames: c1, c2, c3, c4'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c4)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                      expr: c2'
'                      type: int'
'                      expr: c3'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2, _col3'
'                Reduce Output Operator'
'                  key expressions:'
'                        expr: _col0'
'                        type: int'
'                        expr: _col1'
'                        type: int'
'                        expr: _col2'
'                        type: int'
'                  sort order: +++'
'                  Map-reduce partition columns:'
'                        expr: _col0'
'                        type: int'
'                        expr: _col1'
'                        type: int'
'                        expr: _col2'
'                        type: int'
'                  tag: -1'
'                  value expressions:'
'                        expr: _col3'
'                        type: bigint'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'                    expr: c3'
'                    type: int'
'              outputColumnNames: c1, c2, c3'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c3)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                      expr: c2'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'                expr: KEY._col1'
'                type: int'
'                expr: KEY._col2'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2, _col3'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: int'
'                  expr: _col2'
'                  type: int'
'                  expr: _col3'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: _col2'
'                    type: int'
'                    expr: UDFToInteger(_col3)'
'                    type: int'
'              outputColumnNames: _col0, _col1, _col2, _col3'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest3'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest3'
''
'  Stage: Stage-3'
'    Stats-Aggr Operator'
''
'  Stage: Stage-4'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              sort order: ++'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              tag: -1'
'              value expressions:'
'                    expr: _col2'
'                    type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'                expr: KEY._col1'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: int'
'                  expr: _col2'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: UDFToInteger(_col2)'
'                    type: int'
'              outputColumnNames: _col0, _col1, _col2'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 2'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-1'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-5'
'    Stats-Aggr Operator'
''
''
219 rows selected 
>>>  
>>>  EXPLAIN 
FROM TBL 
INSERT OVERWRITE TABLE DEST3 SELECT TBL.C1, TBL.C2, TBL.C3, COUNT(TBL.C4) GROUP BY TBL.C1, TBL.C2, TBL.C3 
INSERT OVERWRITE TABLE DEST4 SELECT TBL.C1, TBL.C2, TBL.C3, COUNT(TBL.C4) GROUP BY TBL.C1, TBL.C3, TBL.C2;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME TBL))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST3))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C3)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C4)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1) (. (TOK_TABLE_OR_COL TBL) C2) (. (TOK_TABLE_OR_COL TBL) C3))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST4))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C3)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C4)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1) (. (TOK_TABLE_OR_COL TBL) C3) (. (TOK_TABLE_OR_COL TBL) C2))))'
''
'STAGE DEPENDENCIES:'
'  Stage-2 is a root stage'
'  Stage-0 depends on stages: Stage-2'
'  Stage-3 depends on stages: Stage-0'
'  Stage-1 depends on stages: Stage-2'
'  Stage-4 depends on stages: Stage-1'
''
'STAGE PLANS:'
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        tbl '
'          TableScan'
'            alias: tbl'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'                    expr: c3'
'                    type: int'
'                    expr: c4'
'                    type: int'
'              outputColumnNames: c1, c2, c3, c4'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: c1'
'                      type: int'
'                      expr: c2'
'                      type: int'
'                      expr: c3'
'                      type: int'
'                sort order: +++'
'                Map-reduce partition columns:'
'                      expr: c1'
'                      type: int'
'                      expr: c2'
'                      type: int'
'                      expr: c3'
'                      type: int'
'                tag: -1'
'                value expressions:'
'                      expr: c4'
'                      type: int'
'      Reduce Operator Tree:'
'        Forward'
'          Group By Operator'
'            aggregations:'
'                  expr: count(VALUE._col0)'
'            bucketGroup: false'
'            keys:'
'                  expr: KEY._col0'
'                  type: int'
'                  expr: KEY._col1'
'                  type: int'
'                  expr: KEY._col2'
'                  type: int'
'            mode: complete'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: _col2'
'                    type: int'
'                    expr: _col3'
'                    type: bigint'
'              outputColumnNames: _col0, _col1, _col2, _col3'
'              Select Operator'
'                expressions:'
'                      expr: _col0'
'                      type: int'
'                      expr: _col1'
'                      type: int'
'                      expr: _col2'
'                      type: int'
'                      expr: UDFToInteger(_col3)'
'                      type: int'
'                outputColumnNames: _col0, _col1, _col2, _col3'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 1'
'                  table:'
'                      input format: org.apache.hadoop.mapred.TextInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                      name: multigroupby_singlemr.dest3'
'          Group By Operator'
'            aggregations:'
'                  expr: count(VALUE._col0)'
'            bucketGroup: false'
'            keys:'
'                  expr: KEY._col0'
'                  type: int'
'                  expr: KEY._col2'
'                  type: int'
'                  expr: KEY._col1'
'                  type: int'
'            mode: complete'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col2'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: _col3'
'                    type: bigint'
'              outputColumnNames: _col0, _col1, _col2, _col3'
'              Select Operator'
'                expressions:'
'                      expr: _col0'
'                      type: int'
'                      expr: _col1'
'                      type: int'
'                      expr: _col2'
'                      type: int'
'                      expr: UDFToInteger(_col3)'
'                      type: int'
'                outputColumnNames: _col0, _col1, _col2, _col3'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 2'
'                  table:'
'                      input format: org.apache.hadoop.mapred.TextInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                      name: multigroupby_singlemr.dest4'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest3'
''
'  Stage: Stage-3'
'    Stats-Aggr Operator'
''
'  Stage: Stage-1'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest4'
''
'  Stage: Stage-4'
'    Stats-Aggr Operator'
''
''
164 rows selected 
>>>  
>>>  
>>>  EXPLAIN 
FROM TBL 
INSERT OVERWRITE TABLE DEST3 SELECT TBL.C1, TBL.C2, TBL.C3, COUNT(TBL.C4) GROUP BY TBL.C1, TBL.C2, TBL.C3 
INSERT OVERWRITE TABLE DEST2 SELECT TBL.C1, TBL.C2, COUNT(TBL.C3) GROUP BY TBL.C1, TBL.C2 
INSERT OVERWRITE TABLE DEST1 SELECT TBL.C1, COUNT(TBL.C2) GROUP BY TBL.C1;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME TBL))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST3))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C3)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C4)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1) (. (TOK_TABLE_OR_COL TBL) C2) (. (TOK_TABLE_OR_COL TBL) C3))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST2))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C2)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C3)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1) (. (TOK_TABLE_OR_COL TBL) C2))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME DEST1))) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL TBL) C1)) (TOK_SELEXPR (TOK_FUNCTION COUNT (. (TOK_TABLE_OR_COL TBL) C2)))) (TOK_GROUPBY (. (TOK_TABLE_OR_COL TBL) C1))))'
''
'STAGE DEPENDENCIES:'
'  Stage-3 is a root stage'
'  Stage-0 depends on stages: Stage-3'
'  Stage-4 depends on stages: Stage-0'
'  Stage-5 depends on stages: Stage-3'
'  Stage-1 depends on stages: Stage-5'
'  Stage-6 depends on stages: Stage-1'
'  Stage-7 depends on stages: Stage-3'
'  Stage-2 depends on stages: Stage-7'
'  Stage-8 depends on stages: Stage-2'
''
'STAGE PLANS:'
'  Stage: Stage-3'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        tbl '
'          TableScan'
'            alias: tbl'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'                    expr: c3'
'                    type: int'
'                    expr: c4'
'                    type: int'
'              outputColumnNames: c1, c2, c3, c4'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c4)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                      expr: c2'
'                      type: int'
'                      expr: c3'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2, _col3'
'                Reduce Output Operator'
'                  key expressions:'
'                        expr: _col0'
'                        type: int'
'                        expr: _col1'
'                        type: int'
'                        expr: _col2'
'                        type: int'
'                  sort order: +++'
'                  Map-reduce partition columns:'
'                        expr: _col0'
'                        type: int'
'                        expr: _col1'
'                        type: int'
'                        expr: _col2'
'                        type: int'
'                  tag: -1'
'                  value expressions:'
'                        expr: _col3'
'                        type: bigint'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'                    expr: c3'
'                    type: int'
'              outputColumnNames: c1, c2, c3'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c3)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                      expr: c2'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
'            Select Operator'
'              expressions:'
'                    expr: c1'
'                    type: int'
'                    expr: c2'
'                    type: int'
'              outputColumnNames: c1, c2'
'              Group By Operator'
'                aggregations:'
'                      expr: count(c2)'
'                bucketGroup: false'
'                keys:'
'                      expr: c1'
'                      type: int'
'                mode: hash'
'                outputColumnNames: _col0, _col1'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'                expr: KEY._col1'
'                type: int'
'                expr: KEY._col2'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2, _col3'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: int'
'                  expr: _col2'
'                  type: int'
'                  expr: _col3'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: _col2'
'                    type: int'
'                    expr: UDFToInteger(_col3)'
'                    type: int'
'              outputColumnNames: _col0, _col1, _col2, _col3'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest3'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest3'
''
'  Stage: Stage-4'
'    Stats-Aggr Operator'
''
'  Stage: Stage-5'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              sort order: ++'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'              tag: -1'
'              value expressions:'
'                    expr: _col2'
'                    type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'                expr: KEY._col1'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: int'
'                  expr: _col2'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: _col1'
'                    type: int'
'                    expr: UDFToInteger(_col2)'
'                    type: int'
'              outputColumnNames: _col0, _col1, _col2'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 2'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-1'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest2'
''
'  Stage: Stage-6'
'    Stats-Aggr Operator'
''
'  Stage: Stage-7'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: int'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: int'
'              tag: -1'
'              value expressions:'
'                    expr: _col1'
'                    type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: int'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: int'
'                  expr: _col1'
'                  type: bigint'
'            outputColumnNames: _col0, _col1'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: int'
'                    expr: UDFToInteger(_col1)'
'                    type: int'
'              outputColumnNames: _col0, _col1'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 3'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: multigroupby_singlemr.dest1'
''
'  Stage: Stage-2'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: multigroupby_singlemr.dest1'
''
'  Stage: Stage-8'
'    Stats-Aggr Operator'
''
''
306 rows selected 
>>>  !record
