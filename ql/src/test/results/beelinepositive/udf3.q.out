Saving all output to "!!{outputDirectory}!!/udf3.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/udf3.q
>>>  CREATE TABLE dest1(c1 STRING, c2 STRING, c3 STRING, c4 STRING, c5 STRING) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  EXPLAIN 
FROM src INSERT OVERWRITE TABLE dest1 SELECT count(CAST('' AS INT)), sum(CAST('' AS INT)), avg(CAST('' AS INT)), 
min(CAST('' AS INT)), max(CAST('' AS INT));
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest1))) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION count (TOK_FUNCTION TOK_INT ''))) (TOK_SELEXPR (TOK_FUNCTION sum (TOK_FUNCTION TOK_INT ''))) (TOK_SELEXPR (TOK_FUNCTION avg (TOK_FUNCTION TOK_INT ''))) (TOK_SELEXPR (TOK_FUNCTION min (TOK_FUNCTION TOK_INT ''))) (TOK_SELEXPR (TOK_FUNCTION max (TOK_FUNCTION TOK_INT ''))))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-0 depends on stages: Stage-1'
'  Stage-2 depends on stages: Stage-0'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src '
'          TableScan'
'            alias: src'
'            Select Operator'
'              Group By Operator'
'                aggregations:'
'                      expr: count(UDFToInteger(''))'
'                      expr: sum(UDFToInteger(''))'
'                      expr: avg(UDFToInteger(''))'
'                      expr: min(UDFToInteger(''))'
'                      expr: max(UDFToInteger(''))'
'                bucketGroup: false'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2, _col3, _col4'
'                Reduce Output Operator'
'                  sort order: '
'                  tag: -1'
'                  value expressions:'
'                        expr: _col0'
'                        type: bigint'
'                        expr: _col1'
'                        type: bigint'
'                        expr: _col2'
'                        type: struct<count:bigint,sum:double>'
'                        expr: _col3'
'                        type: int'
'                        expr: _col4'
'                        type: int'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'                expr: sum(VALUE._col1)'
'                expr: avg(VALUE._col2)'
'                expr: min(VALUE._col3)'
'                expr: max(VALUE._col4)'
'          bucketGroup: false'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2, _col3, _col4'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: bigint'
'                  expr: _col1'
'                  type: bigint'
'                  expr: _col2'
'                  type: double'
'                  expr: _col3'
'                  type: int'
'                  expr: _col4'
'                  type: int'
'            outputColumnNames: _col0, _col1, _col2, _col3, _col4'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 1'
'              table:'
'                  input format: org.apache.hadoop.mapred.TextInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                  name: udf3.dest1'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: udf3.dest1'
''
'  Stage: Stage-2'
'    Stats-Aggr Operator'
''
''
87 rows selected 
>>>  
>>>  FROM src INSERT OVERWRITE TABLE dest1 SELECT count(CAST('' AS INT)), sum(CAST('' AS INT)), avg(CAST('' AS INT)), 
min(CAST('' AS INT)), max(CAST('' AS INT));
'_c0','_c1','_c2','_c3','_c4'
No rows selected 
>>>  
>>>  SELECT dest1.* FROM dest1;
'c1','c2','c3','c4','c5'
'0','','','',''
1 row selected 
>>>  !record
