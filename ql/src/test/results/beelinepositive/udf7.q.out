Saving all output to "!!{outputDirectory}!!/udf7.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/udf7.q
>>>  CREATE TABLE dest1(c1 STRING) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  FROM src INSERT OVERWRITE TABLE dest1 SELECT '  abc  ' WHERE src.key = 86;
'_c0'
No rows selected 
>>>  
>>>  EXPLAIN 
SELECT ROUND(LN(3.0),12), LN(0.0), LN(-1), ROUND(LOG(3.0),12), LOG(0.0), 
LOG(-1), ROUND(LOG2(3.0),12), LOG2(0.0), LOG2(-1), 
ROUND(LOG10(3.0),12), LOG10(0.0), LOG10(-1), ROUND(LOG(2, 3.0),12), 
LOG(2, 0.0), LOG(2, -1), LOG(0.5, 2), LOG(2, 0.5), ROUND(EXP(2.0),12), 
POW(2,3), POWER(2,3), POWER(2,-3), POWER(0.5, -3), POWER(4, 0.5), 
POWER(-1, 0.5), POWER(-1, 2) FROM dest1;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME dest1))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION ROUND (TOK_FUNCTION LN 3.0) 12)) (TOK_SELEXPR (TOK_FUNCTION LN 0.0)) (TOK_SELEXPR (TOK_FUNCTION LN (- 1))) (TOK_SELEXPR (TOK_FUNCTION ROUND (TOK_FUNCTION LOG 3.0) 12)) (TOK_SELEXPR (TOK_FUNCTION LOG 0.0)) (TOK_SELEXPR (TOK_FUNCTION LOG (- 1))) (TOK_SELEXPR (TOK_FUNCTION ROUND (TOK_FUNCTION LOG2 3.0) 12)) (TOK_SELEXPR (TOK_FUNCTION LOG2 0.0)) (TOK_SELEXPR (TOK_FUNCTION LOG2 (- 1))) (TOK_SELEXPR (TOK_FUNCTION ROUND (TOK_FUNCTION LOG10 3.0) 12)) (TOK_SELEXPR (TOK_FUNCTION LOG10 0.0)) (TOK_SELEXPR (TOK_FUNCTION LOG10 (- 1))) (TOK_SELEXPR (TOK_FUNCTION ROUND (TOK_FUNCTION LOG 2 3.0) 12)) (TOK_SELEXPR (TOK_FUNCTION LOG 2 0.0)) (TOK_SELEXPR (TOK_FUNCTION LOG 2 (- 1))) (TOK_SELEXPR (TOK_FUNCTION LOG 0.5 2)) (TOK_SELEXPR (TOK_FUNCTION LOG 2 0.5)) (TOK_SELEXPR (TOK_FUNCTION ROUND (TOK_FUNCTION EXP 2.0) 12)) (TOK_SELEXPR (TOK_FUNCTION POW 2 3)) (TOK_SELEXPR (TOK_FUNCTION POWER 2 3)) (TOK_SELEXPR (TOK_FUNCTION POWER 2 (- 3))) (TOK_SELEXPR (TOK_FUNCTION POWER 0.5 (- 3))) (TOK_SELEXPR (TOK_FUNCTION POWER 4 0.5)) (TOK_SELEXPR (TOK_FUNCTION POWER (- 1) 0.5)) (TOK_SELEXPR (TOK_FUNCTION POWER (- 1) 2)))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        dest1 '
'          TableScan'
'            alias: dest1'
'            Select Operator'
'              expressions:'
'                    expr: round(ln(3.0), 12)'
'                    type: double'
'                    expr: ln(0.0)'
'                    type: double'
'                    expr: ln((- 1))'
'                    type: double'
'                    expr: round(log(3.0), 12)'
'                    type: double'
'                    expr: log(0.0)'
'                    type: double'
'                    expr: log((- 1))'
'                    type: double'
'                    expr: round(log2(3.0), 12)'
'                    type: double'
'                    expr: log2(0.0)'
'                    type: double'
'                    expr: log2((- 1))'
'                    type: double'
'                    expr: round(log10(3.0), 12)'
'                    type: double'
'                    expr: log10(0.0)'
'                    type: double'
'                    expr: log10((- 1))'
'                    type: double'
'                    expr: round(log(2, 3.0), 12)'
'                    type: double'
'                    expr: log(2, 0.0)'
'                    type: double'
'                    expr: log(2, (- 1))'
'                    type: double'
'                    expr: log(0.5, 2)'
'                    type: double'
'                    expr: log(2, 0.5)'
'                    type: double'
'                    expr: round(exp(2.0), 12)'
'                    type: double'
'                    expr: pow(2, 3)'
'                    type: double'
'                    expr: power(2, 3)'
'                    type: double'
'                    expr: power(2, (- 3))'
'                    type: double'
'                    expr: power(0.5, (- 3))'
'                    type: double'
'                    expr: power(4, 0.5)'
'                    type: double'
'                    expr: power((- 1), 0.5)'
'                    type: double'
'                    expr: power((- 1), 2)'
'                    type: double'
'              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 0'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
79 rows selected 
>>>  
>>>  SELECT ROUND(LN(3.0),12), LN(0.0), LN(-1), ROUND(LOG(3.0),12), LOG(0.0), 
LOG(-1), ROUND(LOG2(3.0),12), LOG2(0.0), LOG2(-1), 
ROUND(LOG10(3.0),12), LOG10(0.0), LOG10(-1), ROUND(LOG(2, 3.0),12), 
LOG(2, 0.0), LOG(2, -1), LOG(0.5, 2), LOG(2, 0.5), ROUND(EXP(2.0),12), 
POW(2,3), POWER(2,3), POWER(2,-3), POWER(0.5, -3), POWER(4, 0.5), 
POWER(-1, 0.5), POWER(-1, 2) FROM dest1;
'_c0','_c1','_c2','_c3','_c4','_c5','_c6','_c7','_c8','_c9','_c10','_c11','_c12','_c13','_c14','_c15','_c16','_c17','_c18','_c19','_c20','_c21','_c22','_c23','_c24'
'1.098612288668','','','1.098612288668','','','1.584962500721','','','0.47712125472','','','1.584962500721','','','','-1.0','7.389056098931','8.0','8.0','0.125','8.0','2.0','NaN','1.0'
1 row selected 
>>>  !record
