Saving all output to "!!{outputDirectory}!!/join0.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/join0.q
>>>  EXPLAIN 
SELECT src1.key as k1, src1.value as v1, 
src2.key as k2, src2.value as v2 FROM 
(SELECT * FROM src WHERE src.key < 10) src1 
JOIN 
(SELECT * FROM src WHERE src.key < 10) src2 
SORT BY k1, v1, k2, v2;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_WHERE (< (. (TOK_TABLE_OR_COL src) key) 10)))) src1) (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_WHERE (< (. (TOK_TABLE_OR_COL src) key) 10)))) src2))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) key) k1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) value) v1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src2) key) k2) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src2) value) v2)) (TOK_SORTBY (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL k1)) (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL v1)) (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL k2)) (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL v2)))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-2 depends on stages: Stage-1'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src1:src '
'          TableScan'
'            alias: src'
'            Filter Operator'
'              predicate:'
'                  expr: (key < 10.0)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                Reduce Output Operator'
'                  sort order: '
'                  tag: 0'
'                  value expressions:'
'                        expr: _col0'
'                        type: string'
'                        expr: _col1'
'                        type: string'
'        src2:src '
'          TableScan'
'            alias: src'
'            Filter Operator'
'              predicate:'
'                  expr: (key < 10.0)'
'                  type: boolean'
'              Select Operator'
'                expressions:'
'                      expr: key'
'                      type: string'
'                      expr: value'
'                      type: string'
'                outputColumnNames: _col0, _col1'
'                Reduce Output Operator'
'                  sort order: '
'                  tag: 1'
'                  value expressions:'
'                        expr: _col0'
'                        type: string'
'                        expr: _col1'
'                        type: string'
'      Reduce Operator Tree:'
'        Join Operator'
'          condition map:'
'               Inner Join 0 to 1'
'          condition expressions:'
'            0 {VALUE._col0} {VALUE._col1}'
'            1 {VALUE._col0} {VALUE._col1}'
'          handleSkewJoin: false'
'          outputColumnNames: _col0, _col1, _col2, _col3'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: string'
'                  expr: _col2'
'                  type: string'
'                  expr: _col3'
'                  type: string'
'            outputColumnNames: _col0, _col1, _col2, _col3'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: _col1'
'                    type: string'
'                    expr: _col2'
'                    type: string'
'                    expr: _col3'
'                    type: string'
'              sort order: ++++'
'              tag: -1'
'              value expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: _col1'
'                    type: string'
'                    expr: _col2'
'                    type: string'
'                    expr: _col3'
'                    type: string'
'      Reduce Operator Tree:'
'        Extract'
'          File Output Operator'
'            compressed: false'
'            GlobalTableId: 0'
'            table:'
'                input format: org.apache.hadoop.mapred.TextInputFormat'
'                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
122 rows selected 
>>>  
>>>  EXPLAIN FORMATTED 
SELECT src1.key as k1, src1.value as v1, 
src2.key as k2, src2.value as v2 FROM 
(SELECT * FROM src WHERE src.key < 10) src1 
JOIN 
(SELECT * FROM src WHERE src.key < 10) src2 
SORT BY k1, v1, k2, v2;
'Explain'
'{"STAGE PLANS":{"Stage-2":{"Map Reduce":{"Reduce Operator Tree:":{"OP_!!ELIDED!!":{"FS_!!ELIDED!!":{"File Output Operator":{"GlobalTableId:":"0","compressed:":"false","table:":{"input format:":"org.apache.hadoop.mapred.TextInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"}}}}},"Alias -> Map Operator Tree:":{"file:!!{hive.exec.scratchdir}!!":{"TS_!!ELIDED!!":{"RS_!!ELIDED!!":{"Reduce Output Operator":{"Map-reduce partition columns:":"","sort order:":"++++","tag:":"-1","value expressions:":"{\"type:\":\"string\",\"expr:\":\"_col0\"}, {\"type:\":\"string\",\"expr:\":\"_col1\"}, {\"type:\":\"string\",\"expr:\":\"_col2\"}, {\"type:\":\"string\",\"expr:\":\"_col3\"}","key expressions:":"{\"type:\":\"string\",\"expr:\":\"_col0\"}, {\"type:\":\"string\",\"expr:\":\"_col1\"}, {\"type:\":\"string\",\"expr:\":\"_col2\"}, {\"type:\":\"string\",\"expr:\":\"_col3\"}"}}}}},"Percentage Sample:":{}}},"Stage-1":{"Map Reduce":{"Reduce Operator Tree:":{"JOIN_!!ELIDED!!":{"SEL_!!ELIDED!!":{"FS_!!ELIDED!!":{"File Output Operator":{"GlobalTableId:":"0","compressed:":"false","table:":{"input format:":"org.apache.hadoop.mapred.SequenceFileInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat"}}}}}},"Alias -> Map Operator Tree:":{"src2:src":{"TS_!!ELIDED!!":{"FIL_!!ELIDED!!":{"SEL_!!ELIDED!!":{"RS_!!ELIDED!!":{"Reduce Output Operator":{"Map-reduce partition columns:":"","sort order:":"","tag:":"1","value expressions:":"{\"type:\":\"string\",\"expr:\":\"_col0\"}, {\"type:\":\"string\",\"expr:\":\"_col1\"}","key expressions:":""}}}}}},"src1:src":{"TS_!!ELIDED!!":{"FIL_!!ELIDED!!":{"SEL_!!ELIDED!!":{"RS_!!ELIDED!!":{"Reduce Output Operator":{"Map-reduce partition columns:":"","sort order:":"","tag:":"0","value expressions:":"{\"type:\":\"string\",\"expr:\":\"_col0\"}, {\"type:\":\"string\",\"expr:\":\"_col1\"}","key expressions:":""}}}}}}},"Percentage Sample:":{}}},"Stage-0":{"Fetch Operator":{"limit:":"-1"}}},"STAGE DEPENDENCIES":{"Stage-2":{"DEPENDENT STAGES":"Stage-1"},"Stage-1":{"ROOT STAGE":"TRUE"},"Stage-0":{"ROOT STAGE":"TRUE"}},"ABSTRACT SYNTAX TREE":"(TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_WHERE (< (. (TOK_TABLE_OR_COL src) key) 10)))) src1) (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF)) (TOK_WHERE (< (. (TOK_TABLE_OR_COL src) key) 10)))) src2))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) key) k1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) value) v1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src2) key) k2) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src2) value) v2)) (TOK_SORTBY (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL k1)) (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL v1)) (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL k2)) (TOK_TABSORTCOLNAMEASC (TOK_TABLE_OR_COL v2)))))"}'
1 row selected 
>>>  
>>>  SELECT src1.key as k1, src1.value as v1, 
src2.key as k2, src2.value as v2 FROM 
(SELECT * FROM src WHERE src.key < 10) src1 
JOIN 
(SELECT * FROM src WHERE src.key < 10) src2 
SORT BY k1, v1, k2, v2;
'k1','v1','k2','v2'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','0','val_0'
'0','val_0','2','val_2'
'0','val_0','2','val_2'
'0','val_0','2','val_2'
'0','val_0','4','val_4'
'0','val_0','4','val_4'
'0','val_0','4','val_4'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','5','val_5'
'0','val_0','8','val_8'
'0','val_0','8','val_8'
'0','val_0','8','val_8'
'0','val_0','9','val_9'
'0','val_0','9','val_9'
'0','val_0','9','val_9'
'2','val_2','0','val_0'
'2','val_2','0','val_0'
'2','val_2','0','val_0'
'2','val_2','2','val_2'
'2','val_2','4','val_4'
'2','val_2','5','val_5'
'2','val_2','5','val_5'
'2','val_2','5','val_5'
'2','val_2','8','val_8'
'2','val_2','9','val_9'
'4','val_4','0','val_0'
'4','val_4','0','val_0'
'4','val_4','0','val_0'
'4','val_4','2','val_2'
'4','val_4','4','val_4'
'4','val_4','5','val_5'
'4','val_4','5','val_5'
'4','val_4','5','val_5'
'4','val_4','8','val_8'
'4','val_4','9','val_9'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','0','val_0'
'5','val_5','2','val_2'
'5','val_5','2','val_2'
'5','val_5','2','val_2'
'5','val_5','4','val_4'
'5','val_5','4','val_4'
'5','val_5','4','val_4'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','5','val_5'
'5','val_5','8','val_8'
'5','val_5','8','val_8'
'5','val_5','8','val_8'
'5','val_5','9','val_9'
'5','val_5','9','val_9'
'5','val_5','9','val_9'
'8','val_8','0','val_0'
'8','val_8','0','val_0'
'8','val_8','0','val_0'
'8','val_8','2','val_2'
'8','val_8','4','val_4'
'8','val_8','5','val_5'
'8','val_8','5','val_5'
'8','val_8','5','val_5'
'8','val_8','8','val_8'
'8','val_8','9','val_9'
'9','val_9','0','val_0'
'9','val_9','0','val_0'
'9','val_9','0','val_0'
'9','val_9','2','val_2'
'9','val_9','4','val_4'
'9','val_9','5','val_5'
'9','val_9','5','val_5'
'9','val_9','5','val_5'
'9','val_9','8','val_8'
'9','val_9','9','val_9'
100 rows selected 
>>>  
>>>  !record
