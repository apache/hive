Saving all output to "!!{outputDirectory}!!/groupby2.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/groupby2.q
>>>  set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
No rows affected 
>>>  set hive.map.aggr=false;
No rows affected 
>>>  set hive.groupby.skewindata=true;
No rows affected 
>>>  
>>>  CREATE TABLE dest_g2(key STRING, c1 INT, c2 STRING) STORED AS TEXTFILE;
No rows affected 
>>>  
>>>  EXPLAIN 
FROM src 
INSERT OVERWRITE TABLE dest_g2 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))) GROUP BY substr(src.key,1,1);
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest_g2))) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) key) 1 1)) (TOK_SELEXPR (TOK_FUNCTIONDI count (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) value) 5))) (TOK_SELEXPR (TOK_FUNCTION concat (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) key) 1 1) (TOK_FUNCTION sum (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) value) 5))))) (TOK_GROUPBY (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) key) 1 1))))'
''
'STAGE DEPENDENCIES:'
'  Stage-1 is a root stage'
'  Stage-2 depends on stages: Stage-1'
'  Stage-0 depends on stages: Stage-2'
'  Stage-3 depends on stages: Stage-0'
''
'STAGE PLANS:'
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        src '
'          TableScan'
'            alias: src'
'            Select Operator'
'              expressions:'
'                    expr: key'
'                    type: string'
'                    expr: value'
'                    type: string'
'              outputColumnNames: key, value'
'              Reduce Output Operator'
'                key expressions:'
'                      expr: substr(key, 1, 1)'
'                      type: string'
'                      expr: substr(value, 5)'
'                      type: string'
'                sort order: ++'
'                Map-reduce partition columns:'
'                      expr: substr(key, 1, 1)'
'                      type: string'
'                      expr: substr(value, 5)'
'                      type: string'
'                tag: -1'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(DISTINCT KEY._col1:0._col0)'
'                expr: sum(KEY._col1:0._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: string'
'          mode: partial1'
'          outputColumnNames: _col0, _col1, _col2'
'          File Output Operator'
'            compressed: false'
'            GlobalTableId: 0'
'            table:'
'                input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'            Reduce Output Operator'
'              key expressions:'
'                    expr: _col0'
'                    type: string'
'              sort order: +'
'              Map-reduce partition columns:'
'                    expr: _col0'
'                    type: string'
'              tag: -1'
'              value expressions:'
'                    expr: _col1'
'                    type: bigint'
'                    expr: _col2'
'                    type: double'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'                expr: sum(VALUE._col1)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: string'
'          mode: final'
'          outputColumnNames: _col0, _col1, _col2'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: bigint'
'                  expr: concat(_col0, _col2)'
'                  type: string'
'            outputColumnNames: _col0, _col1, _col2'
'            Select Operator'
'              expressions:'
'                    expr: _col0'
'                    type: string'
'                    expr: UDFToInteger(_col1)'
'                    type: int'
'                    expr: _col2'
'                    type: string'
'              outputColumnNames: _col0, _col1, _col2'
'              File Output Operator'
'                compressed: false'
'                GlobalTableId: 1'
'                table:'
'                    input format: org.apache.hadoop.mapred.TextInputFormat'
'                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'                    name: groupby2.dest_g2'
''
'  Stage: Stage-0'
'    Move Operator'
'      tables:'
'          replace: true'
'          table:'
'              input format: org.apache.hadoop.mapred.TextInputFormat'
'              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
'              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
'              name: groupby2.dest_g2'
''
'  Stage: Stage-3'
'    Stats-Aggr Operator'
''
''
124 rows selected 
>>>  
>>>  FROM src 
INSERT OVERWRITE TABLE dest_g2 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))) GROUP BY substr(src.key,1,1);
'_col0','_col1','_col2'
No rows selected 
>>>  
>>>  SELECT dest_g2.* FROM dest_g2;
'key','c1','c2'
'0','1','00.0'
'1','71','116414.0'
'2','69','225571.0'
'3','62','332004.0'
'4','74','452763.0'
'5','6','5397.0'
'6','5','6398.0'
'7','6','7735.0'
'8','8','8762.0'
'9','7','91047.0'
10 rows selected 
>>>  !record
