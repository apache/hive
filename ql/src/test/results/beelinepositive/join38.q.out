Saving all output to "!!{outputDirectory}!!/join38.q.raw". Enter "record" with no arguments to stop it.
>>>  !run !!{qFileDirectory}!!/join38.q
>>>  
>>>  
>>>  create table tmp(col0 string, col1 string,col2 string,col3 string,col4 string,col5 string,col6 string,col7 string,col8 string,col9 string,col10 string,col11 string);
No rows affected 
>>>  
>>>  insert overwrite table tmp select key, cast(key + 1 as int), key +2, key+3, key+4, cast(key+5 as int), key+6, key+7, key+8, key+9, key+10, cast(key+11 as int) from src where key = 100;
'key','_c1','_c2','_c3','_c4','_c5','_c6','_c7','_c8','_c9','_c10','_c11'
No rows selected 
>>>  
>>>  select * from tmp;
'col0','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11'
'100','101','102.0','103.0','104.0','105','106.0','107.0','108.0','109.0','110.0','111'
'100','101','102.0','103.0','104.0','105','106.0','107.0','108.0','109.0','110.0','111'
2 rows selected 
>>>  
>>>  explain 
FROM src a JOIN tmp b ON (a.key = b.col11) 
SELECT /*+ MAPJOIN(a) */ a.value, b.col5, count(1) as count 
where b.col11 = 111 
group by a.value, b.col5;
'Explain'
'ABSTRACT SYNTAX TREE:'
'  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME src) a) (TOK_TABREF (TOK_TABNAME tmp) b) (= (. (TOK_TABLE_OR_COL a) key) (. (TOK_TABLE_OR_COL b) col11)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_HINTLIST (TOK_HINT TOK_MAPJOIN (TOK_HINTARGLIST a))) (TOK_SELEXPR (. (TOK_TABLE_OR_COL a) value)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL b) col5)) (TOK_SELEXPR (TOK_FUNCTION count 1) count)) (TOK_WHERE (= (. (TOK_TABLE_OR_COL b) col11) 111)) (TOK_GROUPBY (. (TOK_TABLE_OR_COL a) value) (. (TOK_TABLE_OR_COL b) col5))))'
''
'STAGE DEPENDENCIES:'
'  Stage-4 is a root stage'
'  Stage-1 depends on stages: Stage-4'
'  Stage-2 depends on stages: Stage-1'
'  Stage-0 is a root stage'
''
'STAGE PLANS:'
'  Stage: Stage-4'
'    Map Reduce Local Work'
'      Alias -> Map Local Tables:'
'        a '
'          Fetch Operator'
'            limit: -1'
'      Alias -> Map Local Operator Tree:'
'        a '
'          TableScan'
'            alias: a'
'            Filter Operator'
'              predicate:'
'                  expr: (key = 111.0)'
'                  type: boolean'
'              HashTable Sink Operator'
'                condition expressions:'
'                  0 {value}'
'                  1 {col5} {col11}'
'                handleSkewJoin: false'
'                keys:'
'                  0 [Column[key]]'
'                  1 [Column[col11]]'
'                Position of Big Table: 1'
''
'  Stage: Stage-1'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        b '
'          TableScan'
'            alias: b'
'            Filter Operator'
'              predicate:'
'                  expr: (col11 = 111.0)'
'                  type: boolean'
'              Map Join Operator'
'                condition map:'
'                     Inner Join 0 to 1'
'                condition expressions:'
'                  0 {value}'
'                  1 {col5} {col11}'
'                handleSkewJoin: false'
'                keys:'
'                  0 [Column[key]]'
'                  1 [Column[col11]]'
'                outputColumnNames: _col1, _col9, _col15'
'                Position of Big Table: 1'
'                File Output Operator'
'                  compressed: false'
'                  GlobalTableId: 0'
'                  table:'
'                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat'
'                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat'
'      Local Work:'
'        Map Reduce Local Work'
''
'  Stage: Stage-2'
'    Map Reduce'
'      Alias -> Map Operator Tree:'
'        file:!!{hive.exec.scratchdir}!! '
'          Select Operator'
'            expressions:'
'                  expr: _col1'
'                  type: string'
'                  expr: _col9'
'                  type: string'
'                  expr: _col15'
'                  type: string'
'            outputColumnNames: _col1, _col9, _col15'
'            Select Operator'
'              expressions:'
'                    expr: _col1'
'                    type: string'
'                    expr: _col9'
'                    type: string'
'              outputColumnNames: _col1, _col9'
'              Group By Operator'
'                aggregations:'
'                      expr: count(1)'
'                bucketGroup: false'
'                keys:'
'                      expr: _col1'
'                      type: string'
'                      expr: _col9'
'                      type: string'
'                mode: hash'
'                outputColumnNames: _col0, _col1, _col2'
'                Reduce Output Operator'
'                  key expressions:'
'                        expr: _col0'
'                        type: string'
'                        expr: _col1'
'                        type: string'
'                  sort order: ++'
'                  Map-reduce partition columns:'
'                        expr: _col0'
'                        type: string'
'                        expr: _col1'
'                        type: string'
'                  tag: -1'
'                  value expressions:'
'                        expr: _col2'
'                        type: bigint'
'      Reduce Operator Tree:'
'        Group By Operator'
'          aggregations:'
'                expr: count(VALUE._col0)'
'          bucketGroup: false'
'          keys:'
'                expr: KEY._col0'
'                type: string'
'                expr: KEY._col1'
'                type: string'
'          mode: mergepartial'
'          outputColumnNames: _col0, _col1, _col2'
'          Select Operator'
'            expressions:'
'                  expr: _col0'
'                  type: string'
'                  expr: _col1'
'                  type: string'
'                  expr: _col2'
'                  type: bigint'
'            outputColumnNames: _col0, _col1, _col2'
'            File Output Operator'
'              compressed: false'
'              GlobalTableId: 0'
'              table:'
'                  input format: org.apache.hadoop.mapred.TextInputFormat'
'                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
''
'  Stage: Stage-0'
'    Fetch Operator'
'      limit: -1'
''
''
145 rows selected 
>>>  
>>>  FROM src a JOIN tmp b ON (a.key = b.col11) 
SELECT /*+ MAPJOIN(a) */ a.value, b.col5, count(1) as count 
where b.col11 = 111 
group by a.value, b.col5;
'value','col5','count'
'val_111','105','2'
1 row selected 
>>>  
>>>  
>>>  !record
