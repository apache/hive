START BATCH DDL;
CREATE TABLE BUCKETING_COLS (
  SD_ID INT64 NOT NULL,
  BUCKET_COL_NAME STRING(255),
  INTEGER_IDX INT64 NOT NULL,
) PRIMARY KEY(SD_ID, INTEGER_IDX);

CREATE INDEX BUCKETING_COLS_N49 ON BUCKETING_COLS(SD_ID);

CREATE TABLE CDS (
  CD_ID INT64 NOT NULL,
) PRIMARY KEY(CD_ID);

CREATE TABLE COLUMNS_V2 (
  CD_ID INT64 NOT NULL,
  COMMENT STRING(256),
  COLUMN_NAME STRING(767) NOT NULL,
  TYPE_NAME STRING(32672) NOT NULL,
  INTEGER_IDX INT64 NOT NULL,
  CONSTRAINT COLUMNS_V2_FK1 FOREIGN KEY(CD_ID) REFERENCES CDS(CD_ID),
) PRIMARY KEY(CD_ID, COLUMN_NAME);

CREATE INDEX COLUMNS_V2_N49 ON COLUMNS_V2(CD_ID);

CREATE TABLE DATABASE_PARAMS (
  DB_ID INT64 NOT NULL,
  PARAM_KEY STRING(180) NOT NULL,
  PARAM_VALUE STRING(4000),
) PRIMARY KEY(DB_ID, PARAM_KEY);

CREATE INDEX DATABASE_PARAMS_N49 ON DATABASE_PARAMS(DB_ID);

CREATE TABLE DBS (
  DB_ID INT64 NOT NULL,
  `DESC` STRING(4000),
  DB_LOCATION_URI STRING(4000) NOT NULL,
  NAME STRING(128),
  OWNER_NAME STRING(128),
  OWNER_TYPE STRING(10),
) PRIMARY KEY(DB_ID);

ALTER TABLE DATABASE_PARAMS ADD CONSTRAINT DATABASE_PARAMS_FK1 FOREIGN KEY(DB_ID) REFERENCES DBS(DB_ID);

CREATE UNIQUE INDEX UNIQUE_DATABASE ON DBS(NAME);

CREATE TABLE DB_PRIVS (
  DB_GRANT_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  DB_ID INT64,
  GRANT_OPTION INT64 NOT NULL,
  GRANTOR STRING(128),
  GRANTOR_TYPE STRING(128),
  PRINCIPAL_NAME STRING(128),
  PRINCIPAL_TYPE STRING(128),
  DB_PRIV STRING(128),
  CONSTRAINT DB_PRIVS_FK1 FOREIGN KEY(DB_ID) REFERENCES DBS(DB_ID),
) PRIMARY KEY(DB_GRANT_ID);

CREATE UNIQUE INDEX DBPRIVILEGEINDEX ON DB_PRIVS(DB_ID, PRINCIPAL_NAME, PRINCIPAL_TYPE, DB_PRIV, GRANTOR, GRANTOR_TYPE);

CREATE INDEX DB_PRIVS_N49 ON DB_PRIVS(DB_ID);

CREATE TABLE DELEGATION_TOKENS (
  TOKEN_IDENT STRING(767) NOT NULL,
  TOKEN STRING(767),
) PRIMARY KEY(TOKEN_IDENT);

CREATE TABLE FUNCS (
  FUNC_ID INT64 NOT NULL,
  CLASS_NAME STRING(4000),
  CREATE_TIME INT64 NOT NULL,
  DB_ID INT64,
  FUNC_NAME STRING(128),
  FUNC_TYPE INT64 NOT NULL,
  OWNER_NAME STRING(128),
  OWNER_TYPE STRING(10),
  CONSTRAINT FUNCS_FK1 FOREIGN KEY(DB_ID) REFERENCES DBS(DB_ID),
) PRIMARY KEY(FUNC_ID);

CREATE INDEX FUNCS_N49 ON FUNCS(DB_ID);

CREATE UNIQUE INDEX UNIQUEFUNCTION ON FUNCS(FUNC_NAME, DB_ID);

CREATE TABLE FUNC_RU (
  FUNC_ID INT64 NOT NULL,
  RESOURCE_TYPE INT64 NOT NULL,
  RESOURCE_URI STRING(4000),
  INTEGER_IDX INT64 NOT NULL,
  CONSTRAINT FUNC_RU_FK1 FOREIGN KEY(FUNC_ID) REFERENCES FUNCS(FUNC_ID),
) PRIMARY KEY(FUNC_ID, INTEGER_IDX);

CREATE INDEX FUNC_RU_N49 ON FUNC_RU(FUNC_ID);

CREATE TABLE GLOBAL_PRIVS (
  USER_GRANT_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  GRANT_OPTION INT64 NOT NULL,
  GRANTOR STRING(128),
  GRANTOR_TYPE STRING(128),
  PRINCIPAL_NAME STRING(128),
  PRINCIPAL_TYPE STRING(128),
  USER_PRIV STRING(128),
) PRIMARY KEY(USER_GRANT_ID);

CREATE UNIQUE INDEX GLOBALPRIVILEGEINDEX ON GLOBAL_PRIVS(PRINCIPAL_NAME, PRINCIPAL_TYPE, USER_PRIV, GRANTOR, GRANTOR_TYPE);


CREATE TABLE IDXS (
  INDEX_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  DEFERRED_REBUILD BOOL NOT NULL,
  INDEX_HANDLER_CLASS STRING(4000),
  INDEX_NAME STRING(128),
  INDEX_TBL_ID INT64,
  LAST_ACCESS_TIME INT64 NOT NULL,
  ORIG_TBL_ID INT64,
  SD_ID INT64,
) PRIMARY KEY(INDEX_ID);

CREATE UNIQUE INDEX IDXSUNIQUEINDEX ON IDXS(INDEX_NAME, ORIG_TBL_ID);

CREATE INDEX IDXS_N49 ON IDXS(ORIG_TBL_ID);

CREATE INDEX IDXS_N50 ON IDXS(INDEX_TBL_ID);

CREATE INDEX IDXS_N51 ON IDXS(SD_ID);

CREATE TABLE INDEX_PARAMS (
  INDEX_ID INT64 NOT NULL,
  PARAM_KEY STRING(256) NOT NULL,
  PARAM_VALUE STRING(4000),
  CONSTRAINT INDEX_PARAMS_FK1 FOREIGN KEY(INDEX_ID) REFERENCES IDXS(INDEX_ID),
) PRIMARY KEY(INDEX_ID, PARAM_KEY);

CREATE INDEX INDEX_PARAMS_N49 ON INDEX_PARAMS(INDEX_ID);

CREATE TABLE KEY_CONSTRAINTS (
  CONSTRAINT_NAME STRING(255) NOT NULL,
  POSITION INT64 NOT NULL,
  CHILD_CD_ID INT64,
  CHILD_INTEGER_IDX INT64,
  CHILD_TBL_ID INT64,
  CONSTRAINT_TYPE INT64 NOT NULL,
  DELETE_RULE INT64,
  ENABLE_VALIDATE_RELY INT64 NOT NULL,
  PARENT_CD_ID INT64,
  PARENT_INTEGER_IDX INT64,
  PARENT_TBL_ID INT64,
  UPDATE_RULE INT64,
  CONSTRAINT KEY_CONSTRAINTS_FK1 FOREIGN KEY(CHILD_CD_ID) REFERENCES CDS(CD_ID),
  CONSTRAINT KEY_CONSTRAINTS_FK3 FOREIGN KEY(PARENT_CD_ID) REFERENCES CDS(CD_ID),
) PRIMARY KEY(CONSTRAINT_NAME, POSITION);

CREATE INDEX KEY_CONSTRAINTS_N49 ON KEY_CONSTRAINTS(PARENT_CD_ID);

CREATE INDEX KEY_CONSTRAINTS_N50 ON KEY_CONSTRAINTS(PARENT_TBL_ID);

CREATE INDEX KEY_CONSTRAINTS_N51 ON KEY_CONSTRAINTS(CHILD_CD_ID);

CREATE INDEX KEY_CONSTRAINTS_N52 ON KEY_CONSTRAINTS(CHILD_TBL_ID);

CREATE TABLE MASTER_KEYS (
  KEY_ID INT64 NOT NULL,
  MASTER_KEY STRING(767),
) PRIMARY KEY(KEY_ID);

CREATE TABLE NOTIFICATION_LOG (
  NL_ID INT64 NOT NULL,
  EVENT_ID INT64 NOT NULL,
  EVENT_TIME INT64 NOT NULL,
  EVENT_TYPE STRING(32) NOT NULL,
  DB_NAME STRING(128),
  TBL_NAME STRING(256),
  MESSAGE STRING(MAX),
  MESSAGE_FORMAT STRING(16),
) PRIMARY KEY(NL_ID);

CREATE TABLE NOTIFICATION_SEQUENCE (
  NNI_ID INT64 NOT NULL,
  NEXT_EVENT_ID INT64 NOT NULL,
) PRIMARY KEY(NNI_ID);

CREATE TABLE NUCLEUS_TABLES (
  CLASS_NAME STRING(128) NOT NULL,
  TABLE_NAME STRING(128) NOT NULL,
  TYPE STRING(4) NOT NULL,
  OWNER STRING(2) NOT NULL,
  VERSION STRING(20) NOT NULL,
  INTERFACE_NAME STRING(255),
) PRIMARY KEY(CLASS_NAME);

CREATE TABLE PARTITIONS (
  PART_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  LAST_ACCESS_TIME INT64 NOT NULL,
  PART_NAME STRING(767),
  SD_ID INT64,
  TBL_ID INT64,
) PRIMARY KEY(PART_ID);

CREATE UNIQUE INDEX UNIQUEPARTITION ON PARTITIONS(PART_NAME, TBL_ID);

CREATE TABLE PARTITION_EVENTS (
  PART_NAME_ID INT64 NOT NULL,
  DB_NAME STRING(128),
  EVENT_TIME INT64 NOT NULL,
  EVENT_TYPE INT64 NOT NULL,
  PARTITION_NAME STRING(767),
  TBL_NAME STRING(256),
) PRIMARY KEY(PART_NAME_ID);

CREATE INDEX PARTITIONEVENTINDEX ON PARTITION_EVENTS(PARTITION_NAME);

CREATE TABLE PARTITION_KEYS (
  TBL_ID INT64 NOT NULL,
  PKEY_COMMENT STRING(4000),
  PKEY_NAME STRING(128) NOT NULL,
  PKEY_TYPE STRING(767) NOT NULL,
  INTEGER_IDX INT64 NOT NULL,
) PRIMARY KEY(TBL_ID, PKEY_NAME);

CREATE INDEX PARTITION_KEYS_N49 ON PARTITION_KEYS(TBL_ID);

CREATE TABLE PARTITION_KEY_VALS (
  PART_ID INT64 NOT NULL,
  PART_KEY_VAL STRING(255),
  INTEGER_IDX INT64 NOT NULL,
) PRIMARY KEY(PART_ID, INTEGER_IDX),
INTERLEAVE IN PARENT PARTITIONS ON DELETE CASCADE;


CREATE TABLE PARTITION_PARAMS (
  PART_ID INT64 NOT NULL,
  PARAM_KEY STRING(256) NOT NULL,
  PARAM_VALUE STRING(4000),
) PRIMARY KEY(PART_ID, PARAM_KEY),
INTERLEAVE IN PARENT PARTITIONS ON DELETE CASCADE;


CREATE TABLE PART_COL_PRIVS (
  PART_COLUMN_GRANT_ID INT64 NOT NULL,
  COLUMN_NAME STRING(767),
  CREATE_TIME INT64 NOT NULL,
  GRANT_OPTION INT64 NOT NULL,
  GRANTOR STRING(128),
  GRANTOR_TYPE STRING(128),
  PART_ID INT64,
  PRINCIPAL_NAME STRING(128),
  PRINCIPAL_TYPE STRING(128),
  PART_COL_PRIV STRING(128),
  CONSTRAINT PART_COL_PRIVS_FK1 FOREIGN KEY(PART_ID) REFERENCES PARTITIONS(PART_ID),
) PRIMARY KEY(PART_COLUMN_GRANT_ID);

CREATE INDEX PARTITIONCOLUMNPRIVILEGEINDEX ON PART_COL_PRIVS(PART_ID, COLUMN_NAME, PRINCIPAL_NAME, PRINCIPAL_TYPE, PART_COL_PRIV, GRANTOR, GRANTOR_TYPE);

CREATE INDEX PART_COL_PRIVS_N49 ON PART_COL_PRIVS(PART_ID);

CREATE TABLE PART_COL_STATS (
  CS_ID INT64 NOT NULL,
  AVG_COL_LEN FLOAT64,
  COLUMN_NAME STRING(767) NOT NULL,
  COLUMN_TYPE STRING(128) NOT NULL,
  DB_NAME STRING(128) NOT NULL,
  BIG_DECIMAL_HIGH_VALUE STRING(255),
  BIG_DECIMAL_LOW_VALUE STRING(255),
  DOUBLE_HIGH_VALUE FLOAT64,
  DOUBLE_LOW_VALUE FLOAT64,
  LAST_ANALYZED INT64 NOT NULL,
  LONG_HIGH_VALUE INT64,
  LONG_LOW_VALUE INT64,
  MAX_COL_LEN INT64,
  NUM_DISTINCTS INT64,
  NUM_FALSES INT64,
  NUM_NULLS INT64 NOT NULL,
  NUM_TRUES INT64,
  PART_ID INT64,
  PARTITION_NAME STRING(767) NOT NULL,
  TABLE_NAME STRING(256) NOT NULL,
  CONSTRAINT PART_COL_STATS_FK1 FOREIGN KEY(PART_ID) REFERENCES PARTITIONS(PART_ID),
) PRIMARY KEY(CS_ID);

CREATE TABLE PART_PRIVS (
  PART_GRANT_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  GRANT_OPTION INT64 NOT NULL,
  GRANTOR STRING(128),
  GRANTOR_TYPE STRING(128),
  PART_ID INT64,
  PRINCIPAL_NAME STRING(128),
  PRINCIPAL_TYPE STRING(128),
  PART_PRIV STRING(128),
  CONSTRAINT PART_PRIVS_FK1 FOREIGN KEY(PART_ID) REFERENCES PARTITIONS(PART_ID),
) PRIMARY KEY(PART_GRANT_ID);

CREATE INDEX PARTPRIVILEGEINDEX ON PART_PRIVS(PART_ID, PRINCIPAL_NAME, PRINCIPAL_TYPE, PART_PRIV, GRANTOR, GRANTOR_TYPE);

CREATE INDEX PART_PRIVS_N49 ON PART_PRIVS(PART_ID);

CREATE TABLE ROLES (
  ROLE_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  OWNER_NAME STRING(128),
  ROLE_NAME STRING(128),
) PRIMARY KEY(ROLE_ID);

CREATE UNIQUE INDEX ROLEENTITYINDEX ON ROLES(ROLE_NAME);

CREATE TABLE ROLE_MAP (
  ROLE_GRANT_ID INT64 NOT NULL,
  ADD_TIME INT64 NOT NULL,
  GRANT_OPTION INT64 NOT NULL,
  GRANTOR STRING(128),
  GRANTOR_TYPE STRING(128),
  PRINCIPAL_NAME STRING(128),
  PRINCIPAL_TYPE STRING(128),
  ROLE_ID INT64,
  CONSTRAINT ROLE_MAP_FK1 FOREIGN KEY(ROLE_ID) REFERENCES ROLES(ROLE_ID),
) PRIMARY KEY(ROLE_GRANT_ID);

CREATE INDEX ROLE_MAP_N49 ON ROLE_MAP(ROLE_ID);

CREATE UNIQUE INDEX USERROLEMAPINDEX ON ROLE_MAP(PRINCIPAL_NAME, ROLE_ID, GRANTOR, GRANTOR_TYPE);

CREATE TABLE SDS (
  SD_ID INT64 NOT NULL,
  CD_ID INT64,
  INPUT_FORMAT STRING(4000),
  IS_COMPRESSED BOOL NOT NULL,
  IS_STOREDASSUBDIRECTORIES BOOL NOT NULL,
  LOCATION STRING(4000),
  NUM_BUCKETS INT64 NOT NULL,
  OUTPUT_FORMAT STRING(4000),
  SERDE_ID INT64,
  CONSTRAINT SDS_FK1 FOREIGN KEY(CD_ID) REFERENCES CDS(CD_ID),
) PRIMARY KEY(SD_ID);

ALTER TABLE BUCKETING_COLS ADD CONSTRAINT BUCKETING_COLS_FK1 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID);

ALTER TABLE IDXS ADD CONSTRAINT IDXS_FK2 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID);

ALTER TABLE PARTITIONS ADD CONSTRAINT PARTITIONS_FK1 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID);

CREATE TABLE SD_PARAMS (
  SD_ID INT64 NOT NULL,
  PARAM_KEY STRING(256) NOT NULL,
  PARAM_VALUE STRING(32672),
  CONSTRAINT SD_PARAMS_FK1 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID),
) PRIMARY KEY(SD_ID, PARAM_KEY);

CREATE INDEX SD_PARAMS_N49 ON SD_PARAMS(SD_ID);

CREATE TABLE SEQUENCE_TABLE (
  SEQUENCE_NAME STRING(255) NOT NULL,
  NEXT_VAL INT64 NOT NULL,
) PRIMARY KEY(SEQUENCE_NAME);

CREATE TABLE SERDES (
  SERDE_ID INT64 NOT NULL,
  NAME STRING(128),
  SLIB STRING(4000),
) PRIMARY KEY(SERDE_ID);

ALTER TABLE SDS ADD CONSTRAINT SDS_FK2 FOREIGN KEY(SERDE_ID) REFERENCES SERDES(SERDE_ID);

CREATE TABLE SERDE_PARAMS (
  SERDE_ID INT64 NOT NULL,
  PARAM_KEY STRING(256) NOT NULL,
  PARAM_VALUE STRING(32672),
  CONSTRAINT SERDE_PARAMS_FK1 FOREIGN KEY(SERDE_ID) REFERENCES SERDES(SERDE_ID),
) PRIMARY KEY(SERDE_ID, PARAM_KEY);

CREATE INDEX SERDE_PARAMS_N49 ON SERDE_PARAMS(SERDE_ID);

CREATE TABLE SKEWED_COL_NAMES (
  SD_ID INT64 NOT NULL,
  SKEWED_COL_NAME STRING(255),
  INTEGER_IDX INT64 NOT NULL,
  CONSTRAINT SKEWED_COL_NAMES_FK1 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID),
) PRIMARY KEY(SD_ID, INTEGER_IDX);

CREATE INDEX SKEWED_COL_NAMES_N49 ON SKEWED_COL_NAMES(SD_ID);

CREATE TABLE SKEWED_COL_VALUE_LOC_MAP (
  SD_ID INT64 NOT NULL,
  STRING_LIST_ID_KID INT64 NOT NULL,
  LOCATION STRING(4000),
  CONSTRAINT SKEWED_COL_VALUE_LOC_MAP_FK1 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID),
) PRIMARY KEY(SD_ID, STRING_LIST_ID_KID);

CREATE INDEX SKEWED_COL_VALUE_LOC_MAP_N49 ON SKEWED_COL_VALUE_LOC_MAP(SD_ID);

CREATE INDEX SKEWED_COL_VALUE_LOC_MAP_N50 ON SKEWED_COL_VALUE_LOC_MAP(STRING_LIST_ID_KID);

CREATE TABLE SKEWED_STRING_LIST (
  STRING_LIST_ID INT64 NOT NULL,
) PRIMARY KEY(STRING_LIST_ID);

ALTER TABLE SKEWED_COL_VALUE_LOC_MAP ADD CONSTRAINT SKEWED_COL_VALUE_LOC_MAP_FK2 FOREIGN KEY(STRING_LIST_ID_KID) REFERENCES SKEWED_STRING_LIST(STRING_LIST_ID);

CREATE TABLE SKEWED_STRING_LIST_VALUES (
  STRING_LIST_ID INT64 NOT NULL,
  STRING_LIST_VALUE STRING(255),
  INTEGER_IDX INT64 NOT NULL,
  CONSTRAINT SKEWED_STRING_LIST_VALUES_FK1 FOREIGN KEY(STRING_LIST_ID) REFERENCES SKEWED_STRING_LIST(STRING_LIST_ID),
) PRIMARY KEY(STRING_LIST_ID, INTEGER_IDX);

CREATE INDEX SKEWED_STRING_LIST_VALUES_N49 ON SKEWED_STRING_LIST_VALUES(STRING_LIST_ID);

CREATE TABLE SKEWED_VALUES (
  SD_ID_OID INT64 NOT NULL,
  STRING_LIST_ID_EID INT64,
  INTEGER_IDX INT64 NOT NULL,
  CONSTRAINT SKEWED_VALUES_FK1 FOREIGN KEY(SD_ID_OID) REFERENCES SDS(SD_ID),
  CONSTRAINT SKEWED_VALUES_FK2 FOREIGN KEY(STRING_LIST_ID_EID) REFERENCES SKEWED_STRING_LIST(STRING_LIST_ID),
) PRIMARY KEY(SD_ID_OID, INTEGER_IDX);

CREATE INDEX SKEWED_VALUES_N49 ON SKEWED_VALUES(STRING_LIST_ID_EID);

CREATE INDEX SKEWED_VALUES_N50 ON SKEWED_VALUES(SD_ID_OID);

CREATE TABLE SORT_COLS (
  SD_ID INT64 NOT NULL,
  COLUMN_NAME STRING(767),
  `ORDER` INT64 NOT NULL,
  INTEGER_IDX INT64 NOT NULL,
  CONSTRAINT SORT_COLS_FK1 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID),
) PRIMARY KEY(SD_ID, INTEGER_IDX);

CREATE INDEX SORT_COLS_N49 ON SORT_COLS(SD_ID);

CREATE TABLE TABLE_PARAMS (
  TBL_ID INT64 NOT NULL,
  PARAM_KEY STRING(256) NOT NULL,
  PARAM_VALUE STRING(32672),
) PRIMARY KEY(TBL_ID, PARAM_KEY);

CREATE INDEX TABLE_PARAMS_N49 ON TABLE_PARAMS(TBL_ID);

CREATE TABLE TAB_COL_STATS (
  CS_ID INT64 NOT NULL,
  AVG_COL_LEN FLOAT64,
  COLUMN_NAME STRING(767) NOT NULL,
  COLUMN_TYPE STRING(128) NOT NULL,
  DB_NAME STRING(128) NOT NULL,
  BIG_DECIMAL_HIGH_VALUE STRING(255),
  BIG_DECIMAL_LOW_VALUE STRING(255),
  DOUBLE_HIGH_VALUE FLOAT64,
  DOUBLE_LOW_VALUE FLOAT64,
  LAST_ANALYZED INT64 NOT NULL,
  LONG_HIGH_VALUE INT64,
  LONG_LOW_VALUE INT64,
  MAX_COL_LEN INT64,
  NUM_DISTINCTS INT64,
  NUM_FALSES INT64,
  NUM_NULLS INT64 NOT NULL,
  NUM_TRUES INT64,
  TBL_ID INT64,
  TABLE_NAME STRING(256) NOT NULL,
) PRIMARY KEY(CS_ID);

CREATE INDEX TAB_COL_STATS_N49 ON TAB_COL_STATS(TBL_ID);

CREATE TABLE TBLS (
  TBL_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  DB_ID INT64,
  LAST_ACCESS_TIME INT64 NOT NULL,
  OWNER STRING(767),
  RETENTION INT64 NOT NULL,
  IS_REWRITE_ENABLED BOOL NOT NULL,
  SD_ID INT64,
  TBL_NAME STRING(256),
  TBL_TYPE STRING(128),
  VIEW_EXPANDED_TEXT STRING(MAX),
  VIEW_ORIGINAL_TEXT STRING(MAX),
  CONSTRAINT TBLS_FK1 FOREIGN KEY(DB_ID) REFERENCES DBS(DB_ID),
  CONSTRAINT TBLS_FK2 FOREIGN KEY(SD_ID) REFERENCES SDS(SD_ID),
) PRIMARY KEY(TBL_ID);

ALTER TABLE IDXS ADD CONSTRAINT IDXS_FK1 FOREIGN KEY(ORIG_TBL_ID) REFERENCES TBLS(TBL_ID);

ALTER TABLE IDXS ADD CONSTRAINT IDXS_FK3 FOREIGN KEY(INDEX_TBL_ID) REFERENCES TBLS(TBL_ID);

ALTER TABLE KEY_CONSTRAINTS ADD CONSTRAINT KEY_CONSTRAINTS_FK2 FOREIGN KEY(CHILD_TBL_ID) REFERENCES TBLS(TBL_ID);

ALTER TABLE KEY_CONSTRAINTS ADD CONSTRAINT KEY_CONSTRAINTS_FK4 FOREIGN KEY(PARENT_TBL_ID) REFERENCES TBLS(TBL_ID);

ALTER TABLE PARTITIONS ADD CONSTRAINT PARTITIONS_FK2 FOREIGN KEY(TBL_ID) REFERENCES TBLS(TBL_ID);

ALTER TABLE PARTITION_KEYS ADD CONSTRAINT PARTITION_KEYS_FK1 FOREIGN KEY(TBL_ID) REFERENCES TBLS(TBL_ID);

ALTER TABLE TABLE_PARAMS ADD CONSTRAINT TABLE_PARAMS_FK1 FOREIGN KEY(TBL_ID) REFERENCES TBLS(TBL_ID);

ALTER TABLE TAB_COL_STATS ADD CONSTRAINT TAB_COL_STATS_FK1 FOREIGN KEY(TBL_ID) REFERENCES TBLS(TBL_ID);

CREATE INDEX TBLS_N49 ON TBLS(DB_ID);

CREATE INDEX TBLS_N50 ON TBLS(SD_ID);

CREATE UNIQUE INDEX UNIQUETABLE ON TBLS(TBL_NAME, DB_ID);

CREATE TABLE TBL_COL_PRIVS (
  TBL_COLUMN_GRANT_ID INT64 NOT NULL,
  COLUMN_NAME STRING(767),
  CREATE_TIME INT64 NOT NULL,
  GRANT_OPTION INT64 NOT NULL,
  GRANTOR STRING(128),
  GRANTOR_TYPE STRING(128),
  PRINCIPAL_NAME STRING(128),
  PRINCIPAL_TYPE STRING(128),
  TBL_COL_PRIV STRING(128),
  TBL_ID INT64,
  CONSTRAINT TBL_COL_PRIVS_FK1 FOREIGN KEY(TBL_ID) REFERENCES TBLS(TBL_ID),
) PRIMARY KEY(TBL_COLUMN_GRANT_ID);

CREATE INDEX TABLECOLUMNPRIVILEGEINDEX ON TBL_COL_PRIVS(TBL_ID, COLUMN_NAME, PRINCIPAL_NAME, PRINCIPAL_TYPE, TBL_COL_PRIV, GRANTOR, GRANTOR_TYPE);

CREATE INDEX TBL_COL_PRIVS_N49 ON TBL_COL_PRIVS(TBL_ID);

CREATE TABLE TBL_PRIVS (
  TBL_GRANT_ID INT64 NOT NULL,
  CREATE_TIME INT64 NOT NULL,
  GRANT_OPTION INT64 NOT NULL,
  GRANTOR STRING(128),
  GRANTOR_TYPE STRING(128),
  PRINCIPAL_NAME STRING(128),
  PRINCIPAL_TYPE STRING(128),
  TBL_PRIV STRING(128),
  TBL_ID INT64,
  CONSTRAINT TBL_PRIVS_FK1 FOREIGN KEY(TBL_ID) REFERENCES TBLS(TBL_ID),
) PRIMARY KEY(TBL_GRANT_ID);

CREATE INDEX TABLEPRIVILEGEINDEX ON TBL_PRIVS(TBL_ID, PRINCIPAL_NAME, PRINCIPAL_TYPE, TBL_PRIV, GRANTOR, GRANTOR_TYPE);

CREATE INDEX TBL_PRIVS_N49 ON TBL_PRIVS(TBL_ID);


CREATE TABLE TYPES (
  TYPES_ID INT64 NOT NULL,
  TYPE_NAME STRING(128),
  TYPE1 STRING(767),
  TYPE2 STRING(767),
) PRIMARY KEY(TYPES_ID);

CREATE UNIQUE INDEX UNIQUE_TYPE ON TYPES(TYPE_NAME);

CREATE TABLE TYPE_FIELDS (
  TYPE_NAME INT64 NOT NULL,
  COMMENT STRING(256),
  FIELD_NAME STRING(128) NOT NULL,
  FIELD_TYPE STRING(767) NOT NULL,
  INTEGER_IDX INT64 NOT NULL,
  CONSTRAINT TYPE_FIELDS_FK1 FOREIGN KEY(TYPE_NAME) REFERENCES TYPES(TYPES_ID),
) PRIMARY KEY(TYPE_NAME, FIELD_NAME);

CREATE TABLE VERSION (
  VER_ID INT64 NOT NULL,
  SCHEMA_VERSION STRING(127) NOT NULL,
  VERSION_COMMENT STRING(255) NOT NULL,
) PRIMARY KEY(VER_ID);


-- ----------------------------
-- Transaction and Lock Tables
-- ----------------------------
EXECUTE'hive-txn-schema-2.3.0.cloudspanner.sql';

RUN BATCH;
-- ----------------------------------
-- DML statements for initialization
-- ----------------------------------
EXECUTE'hive-init-schema-2.3.0.cloudspanner.sql';