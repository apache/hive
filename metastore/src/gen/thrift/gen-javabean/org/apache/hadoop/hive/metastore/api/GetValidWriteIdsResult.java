/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class GetValidWriteIdsResult implements org.apache.thrift.TBase<GetValidWriteIdsResult, GetValidWriteIdsResult._Fields>, java.io.Serializable, Cloneable, Comparable<GetValidWriteIdsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValidWriteIdsResult");

  private static final org.apache.thrift.protocol.TField LOW_WATERMARK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lowWatermarkId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HIGH_WATERMARK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("highWatermarkId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ARE_IDS_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("areIdsValid", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetValidWriteIdsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetValidWriteIdsResultTupleSchemeFactory());
  }

  private long lowWatermarkId; // required
  private long highWatermarkId; // required
  private boolean areIdsValid; // optional
  private List<Long> ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOW_WATERMARK_ID((short)1, "lowWatermarkId"),
    HIGH_WATERMARK_ID((short)2, "highWatermarkId"),
    ARE_IDS_VALID((short)3, "areIdsValid"),
    IDS((short)4, "ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOW_WATERMARK_ID
          return LOW_WATERMARK_ID;
        case 2: // HIGH_WATERMARK_ID
          return HIGH_WATERMARK_ID;
        case 3: // ARE_IDS_VALID
          return ARE_IDS_VALID;
        case 4: // IDS
          return IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOWWATERMARKID_ISSET_ID = 0;
  private static final int __HIGHWATERMARKID_ISSET_ID = 1;
  private static final int __AREIDSVALID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ARE_IDS_VALID,_Fields.IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOW_WATERMARK_ID, new org.apache.thrift.meta_data.FieldMetaData("lowWatermarkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HIGH_WATERMARK_ID, new org.apache.thrift.meta_data.FieldMetaData("highWatermarkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARE_IDS_VALID, new org.apache.thrift.meta_data.FieldMetaData("areIdsValid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValidWriteIdsResult.class, metaDataMap);
  }

  public GetValidWriteIdsResult() {
  }

  public GetValidWriteIdsResult(
    long lowWatermarkId,
    long highWatermarkId)
  {
    this();
    this.lowWatermarkId = lowWatermarkId;
    setLowWatermarkIdIsSet(true);
    this.highWatermarkId = highWatermarkId;
    setHighWatermarkIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetValidWriteIdsResult(GetValidWriteIdsResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lowWatermarkId = other.lowWatermarkId;
    this.highWatermarkId = other.highWatermarkId;
    this.areIdsValid = other.areIdsValid;
    if (other.isSetIds()) {
      List<Long> __this__ids = new ArrayList<Long>(other.ids);
      this.ids = __this__ids;
    }
  }

  public GetValidWriteIdsResult deepCopy() {
    return new GetValidWriteIdsResult(this);
  }

  @Override
  public void clear() {
    setLowWatermarkIdIsSet(false);
    this.lowWatermarkId = 0;
    setHighWatermarkIdIsSet(false);
    this.highWatermarkId = 0;
    setAreIdsValidIsSet(false);
    this.areIdsValid = false;
    this.ids = null;
  }

  public long getLowWatermarkId() {
    return this.lowWatermarkId;
  }

  public void setLowWatermarkId(long lowWatermarkId) {
    this.lowWatermarkId = lowWatermarkId;
    setLowWatermarkIdIsSet(true);
  }

  public void unsetLowWatermarkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWWATERMARKID_ISSET_ID);
  }

  /** Returns true if field lowWatermarkId is set (has been assigned a value) and false otherwise */
  public boolean isSetLowWatermarkId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWWATERMARKID_ISSET_ID);
  }

  public void setLowWatermarkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWWATERMARKID_ISSET_ID, value);
  }

  public long getHighWatermarkId() {
    return this.highWatermarkId;
  }

  public void setHighWatermarkId(long highWatermarkId) {
    this.highWatermarkId = highWatermarkId;
    setHighWatermarkIdIsSet(true);
  }

  public void unsetHighWatermarkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGHWATERMARKID_ISSET_ID);
  }

  /** Returns true if field highWatermarkId is set (has been assigned a value) and false otherwise */
  public boolean isSetHighWatermarkId() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGHWATERMARKID_ISSET_ID);
  }

  public void setHighWatermarkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGHWATERMARKID_ISSET_ID, value);
  }

  public boolean isAreIdsValid() {
    return this.areIdsValid;
  }

  public void setAreIdsValid(boolean areIdsValid) {
    this.areIdsValid = areIdsValid;
    setAreIdsValidIsSet(true);
  }

  public void unsetAreIdsValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREIDSVALID_ISSET_ID);
  }

  /** Returns true if field areIdsValid is set (has been assigned a value) and false otherwise */
  public boolean isSetAreIdsValid() {
    return EncodingUtils.testBit(__isset_bitfield, __AREIDSVALID_ISSET_ID);
  }

  public void setAreIdsValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREIDSVALID_ISSET_ID, value);
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  public java.util.Iterator<Long> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(long elem) {
    if (this.ids == null) {
      this.ids = new ArrayList<Long>();
    }
    this.ids.add(elem);
  }

  public List<Long> getIds() {
    return this.ids;
  }

  public void setIds(List<Long> ids) {
    this.ids = ids;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOW_WATERMARK_ID:
      if (value == null) {
        unsetLowWatermarkId();
      } else {
        setLowWatermarkId((Long)value);
      }
      break;

    case HIGH_WATERMARK_ID:
      if (value == null) {
        unsetHighWatermarkId();
      } else {
        setHighWatermarkId((Long)value);
      }
      break;

    case ARE_IDS_VALID:
      if (value == null) {
        unsetAreIdsValid();
      } else {
        setAreIdsValid((Boolean)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOW_WATERMARK_ID:
      return getLowWatermarkId();

    case HIGH_WATERMARK_ID:
      return getHighWatermarkId();

    case ARE_IDS_VALID:
      return isAreIdsValid();

    case IDS:
      return getIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOW_WATERMARK_ID:
      return isSetLowWatermarkId();
    case HIGH_WATERMARK_ID:
      return isSetHighWatermarkId();
    case ARE_IDS_VALID:
      return isSetAreIdsValid();
    case IDS:
      return isSetIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetValidWriteIdsResult)
      return this.equals((GetValidWriteIdsResult)that);
    return false;
  }

  public boolean equals(GetValidWriteIdsResult that) {
    if (that == null)
      return false;

    boolean this_present_lowWatermarkId = true;
    boolean that_present_lowWatermarkId = true;
    if (this_present_lowWatermarkId || that_present_lowWatermarkId) {
      if (!(this_present_lowWatermarkId && that_present_lowWatermarkId))
        return false;
      if (this.lowWatermarkId != that.lowWatermarkId)
        return false;
    }

    boolean this_present_highWatermarkId = true;
    boolean that_present_highWatermarkId = true;
    if (this_present_highWatermarkId || that_present_highWatermarkId) {
      if (!(this_present_highWatermarkId && that_present_highWatermarkId))
        return false;
      if (this.highWatermarkId != that.highWatermarkId)
        return false;
    }

    boolean this_present_areIdsValid = true && this.isSetAreIdsValid();
    boolean that_present_areIdsValid = true && that.isSetAreIdsValid();
    if (this_present_areIdsValid || that_present_areIdsValid) {
      if (!(this_present_areIdsValid && that_present_areIdsValid))
        return false;
      if (this.areIdsValid != that.areIdsValid)
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lowWatermarkId = true;
    list.add(present_lowWatermarkId);
    if (present_lowWatermarkId)
      list.add(lowWatermarkId);

    boolean present_highWatermarkId = true;
    list.add(present_highWatermarkId);
    if (present_highWatermarkId)
      list.add(highWatermarkId);

    boolean present_areIdsValid = true && (isSetAreIdsValid());
    list.add(present_areIdsValid);
    if (present_areIdsValid)
      list.add(areIdsValid);

    boolean present_ids = true && (isSetIds());
    list.add(present_ids);
    if (present_ids)
      list.add(ids);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetValidWriteIdsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLowWatermarkId()).compareTo(other.isSetLowWatermarkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowWatermarkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowWatermarkId, other.lowWatermarkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighWatermarkId()).compareTo(other.isSetHighWatermarkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighWatermarkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highWatermarkId, other.highWatermarkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreIdsValid()).compareTo(other.isSetAreIdsValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreIdsValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areIdsValid, other.areIdsValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetValidWriteIdsResult(");
    boolean first = true;

    sb.append("lowWatermarkId:");
    sb.append(this.lowWatermarkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("highWatermarkId:");
    sb.append(this.highWatermarkId);
    first = false;
    if (isSetAreIdsValid()) {
      if (!first) sb.append(", ");
      sb.append("areIdsValid:");
      sb.append(this.areIdsValid);
      first = false;
    }
    if (isSetIds()) {
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetLowWatermarkId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lowWatermarkId' is unset! Struct:" + toString());
    }

    if (!isSetHighWatermarkId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'highWatermarkId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetValidWriteIdsResultStandardSchemeFactory implements SchemeFactory {
    public GetValidWriteIdsResultStandardScheme getScheme() {
      return new GetValidWriteIdsResultStandardScheme();
    }
  }

  private static class GetValidWriteIdsResultStandardScheme extends StandardScheme<GetValidWriteIdsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetValidWriteIdsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOW_WATERMARK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lowWatermarkId = iprot.readI64();
              struct.setLowWatermarkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIGH_WATERMARK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.highWatermarkId = iprot.readI64();
              struct.setHighWatermarkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARE_IDS_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.areIdsValid = iprot.readBool();
              struct.setAreIdsValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list634 = iprot.readListBegin();
                struct.ids = new ArrayList<Long>(_list634.size);
                long _elem635;
                for (int _i636 = 0; _i636 < _list634.size; ++_i636)
                {
                  _elem635 = iprot.readI64();
                  struct.ids.add(_elem635);
                }
                iprot.readListEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetValidWriteIdsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOW_WATERMARK_ID_FIELD_DESC);
      oprot.writeI64(struct.lowWatermarkId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIGH_WATERMARK_ID_FIELD_DESC);
      oprot.writeI64(struct.highWatermarkId);
      oprot.writeFieldEnd();
      if (struct.isSetAreIdsValid()) {
        oprot.writeFieldBegin(ARE_IDS_VALID_FIELD_DESC);
        oprot.writeBool(struct.areIdsValid);
        oprot.writeFieldEnd();
      }
      if (struct.ids != null) {
        if (struct.isSetIds()) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter637 : struct.ids)
            {
              oprot.writeI64(_iter637);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetValidWriteIdsResultTupleSchemeFactory implements SchemeFactory {
    public GetValidWriteIdsResultTupleScheme getScheme() {
      return new GetValidWriteIdsResultTupleScheme();
    }
  }

  private static class GetValidWriteIdsResultTupleScheme extends TupleScheme<GetValidWriteIdsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetValidWriteIdsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.lowWatermarkId);
      oprot.writeI64(struct.highWatermarkId);
      BitSet optionals = new BitSet();
      if (struct.isSetAreIdsValid()) {
        optionals.set(0);
      }
      if (struct.isSetIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAreIdsValid()) {
        oprot.writeBool(struct.areIdsValid);
      }
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (long _iter638 : struct.ids)
          {
            oprot.writeI64(_iter638);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetValidWriteIdsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.lowWatermarkId = iprot.readI64();
      struct.setLowWatermarkIdIsSet(true);
      struct.highWatermarkId = iprot.readI64();
      struct.setHighWatermarkIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.areIdsValid = iprot.readBool();
        struct.setAreIdsValidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list639 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.ids = new ArrayList<Long>(_list639.size);
          long _elem640;
          for (int _i641 = 0; _i641 < _list639.size; ++_i641)
          {
            _elem640 = iprot.readI64();
            struct.ids.add(_elem640);
          }
        }
        struct.setIdsIsSet(true);
      }
    }
  }

}

