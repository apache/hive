/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)")
public class GetTablesRequest implements org.apache.thrift.TBase<GetTablesRequest, GetTablesRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetTablesRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTablesRequest");

  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TBL_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tblNames", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CAPABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("capabilities", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetTablesRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetTablesRequestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String dbName; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tblNames; // optional
  private @org.apache.thrift.annotation.Nullable ClientCapabilities capabilities; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_NAME((short)1, "dbName"),
    TBL_NAMES((short)2, "tblNames"),
    CAPABILITIES((short)3, "capabilities");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_NAME
          return DB_NAME;
        case 2: // TBL_NAMES
          return TBL_NAMES;
        case 3: // CAPABILITIES
          return CAPABILITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TBL_NAMES,_Fields.CAPABILITIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tblNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CAPABILITIES, new org.apache.thrift.meta_data.FieldMetaData("capabilities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientCapabilities.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTablesRequest.class, metaDataMap);
  }

  public GetTablesRequest() {
  }

  public GetTablesRequest(
    java.lang.String dbName)
  {
    this();
    this.dbName = dbName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTablesRequest(GetTablesRequest other) {
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
    if (other.isSetTblNames()) {
      java.util.List<java.lang.String> __this__tblNames = new java.util.ArrayList<java.lang.String>(other.tblNames);
      this.tblNames = __this__tblNames;
    }
    if (other.isSetCapabilities()) {
      this.capabilities = new ClientCapabilities(other.capabilities);
    }
  }

  public GetTablesRequest deepCopy() {
    return new GetTablesRequest(this);
  }

  @Override
  public void clear() {
    this.dbName = null;
    this.tblNames = null;
    this.capabilities = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.dbName;
  }

  public void setDbName(@org.apache.thrift.annotation.Nullable java.lang.String dbName) {
    this.dbName = dbName;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  public int getTblNamesSize() {
    return (this.tblNames == null) ? 0 : this.tblNames.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getTblNamesIterator() {
    return (this.tblNames == null) ? null : this.tblNames.iterator();
  }

  public void addToTblNames(java.lang.String elem) {
    if (this.tblNames == null) {
      this.tblNames = new java.util.ArrayList<java.lang.String>();
    }
    this.tblNames.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getTblNames() {
    return this.tblNames;
  }

  public void setTblNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tblNames) {
    this.tblNames = tblNames;
  }

  public void unsetTblNames() {
    this.tblNames = null;
  }

  /** Returns true if field tblNames is set (has been assigned a value) and false otherwise */
  public boolean isSetTblNames() {
    return this.tblNames != null;
  }

  public void setTblNamesIsSet(boolean value) {
    if (!value) {
      this.tblNames = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ClientCapabilities getCapabilities() {
    return this.capabilities;
  }

  public void setCapabilities(@org.apache.thrift.annotation.Nullable ClientCapabilities capabilities) {
    this.capabilities = capabilities;
  }

  public void unsetCapabilities() {
    this.capabilities = null;
  }

  /** Returns true if field capabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetCapabilities() {
    return this.capabilities != null;
  }

  public void setCapabilitiesIsSet(boolean value) {
    if (!value) {
      this.capabilities = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case TBL_NAMES:
      if (value == null) {
        unsetTblNames();
      } else {
        setTblNames((java.util.List<java.lang.String>)value);
      }
      break;

    case CAPABILITIES:
      if (value == null) {
        unsetCapabilities();
      } else {
        setCapabilities((ClientCapabilities)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_NAME:
      return getDbName();

    case TBL_NAMES:
      return getTblNames();

    case CAPABILITIES:
      return getCapabilities();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DB_NAME:
      return isSetDbName();
    case TBL_NAMES:
      return isSetTblNames();
    case CAPABILITIES:
      return isSetCapabilities();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof GetTablesRequest)
      return this.equals((GetTablesRequest)that);
    return false;
  }

  public boolean equals(GetTablesRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    boolean this_present_tblNames = true && this.isSetTblNames();
    boolean that_present_tblNames = true && that.isSetTblNames();
    if (this_present_tblNames || that_present_tblNames) {
      if (!(this_present_tblNames && that_present_tblNames))
        return false;
      if (!this.tblNames.equals(that.tblNames))
        return false;
    }

    boolean this_present_capabilities = true && this.isSetCapabilities();
    boolean that_present_capabilities = true && that.isSetCapabilities();
    if (this_present_capabilities || that_present_capabilities) {
      if (!(this_present_capabilities && that_present_capabilities))
        return false;
      if (!this.capabilities.equals(that.capabilities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + dbName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTblNames()) ? 131071 : 524287);
    if (isSetTblNames())
      hashCode = hashCode * 8191 + tblNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetCapabilities()) ? 131071 : 524287);
    if (isSetCapabilities())
      hashCode = hashCode * 8191 + capabilities.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetTablesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTblNames(), other.isSetTblNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTblNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tblNames, other.tblNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCapabilities(), other.isSetCapabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capabilities, other.capabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetTablesRequest(");
    boolean first = true;

    sb.append("dbName:");
    if (this.dbName == null) {
      sb.append("null");
    } else {
      sb.append(this.dbName);
    }
    first = false;
    if (isSetTblNames()) {
      if (!first) sb.append(", ");
      sb.append("tblNames:");
      if (this.tblNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tblNames);
      }
      first = false;
    }
    if (isSetCapabilities()) {
      if (!first) sb.append(", ");
      sb.append("capabilities:");
      if (this.capabilities == null) {
        sb.append("null");
      } else {
        sb.append(this.capabilities);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetDbName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbName' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (capabilities != null) {
      capabilities.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetTablesRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetTablesRequestStandardScheme getScheme() {
      return new GetTablesRequestStandardScheme();
    }
  }

  private static class GetTablesRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetTablesRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetTablesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TBL_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list690 = iprot.readListBegin();
                struct.tblNames = new java.util.ArrayList<java.lang.String>(_list690.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem691;
                for (int _i692 = 0; _i692 < _list690.size; ++_i692)
                {
                  _elem691 = iprot.readString();
                  struct.tblNames.add(_elem691);
                }
                iprot.readListEnd();
              }
              struct.setTblNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAPABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.capabilities = new ClientCapabilities();
              struct.capabilities.read(iprot);
              struct.setCapabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetTablesRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dbName != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.dbName);
        oprot.writeFieldEnd();
      }
      if (struct.tblNames != null) {
        if (struct.isSetTblNames()) {
          oprot.writeFieldBegin(TBL_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tblNames.size()));
            for (java.lang.String _iter693 : struct.tblNames)
            {
              oprot.writeString(_iter693);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.capabilities != null) {
        if (struct.isSetCapabilities()) {
          oprot.writeFieldBegin(CAPABILITIES_FIELD_DESC);
          struct.capabilities.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetTablesRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetTablesRequestTupleScheme getScheme() {
      return new GetTablesRequestTupleScheme();
    }
  }

  private static class GetTablesRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetTablesRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetTablesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.dbName);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTblNames()) {
        optionals.set(0);
      }
      if (struct.isSetCapabilities()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTblNames()) {
        {
          oprot.writeI32(struct.tblNames.size());
          for (java.lang.String _iter694 : struct.tblNames)
          {
            oprot.writeString(_iter694);
          }
        }
      }
      if (struct.isSetCapabilities()) {
        struct.capabilities.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetTablesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.dbName = iprot.readString();
      struct.setDbNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list695 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.tblNames = new java.util.ArrayList<java.lang.String>(_list695.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem696;
          for (int _i697 = 0; _i697 < _list695.size; ++_i697)
          {
            _elem696 = iprot.readString();
            struct.tblNames.add(_elem696);
          }
        }
        struct.setTblNamesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.capabilities = new ClientCapabilities();
        struct.capabilities.read(iprot);
        struct.setCapabilitiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

