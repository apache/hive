<?php
/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TFetchResultsReq
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'operationHandle',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\TOperationHandle',
        ),
        2 => array(
            'var' => 'orientation',
            'isRequired' => true,
            'type' => TType::I32,
            'class' => '\TFetchOrientation',
        ),
        3 => array(
            'var' => 'maxRows',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'fetchType',
            'isRequired' => false,
            'type' => TType::I16,
        ),
    );

    /**
     * @var \TOperationHandle
     */
    public $operationHandle = null;
    /**
     * @var int
     */
    public $orientation =     0;
    /**
     * @var int
     */
    public $maxRows = null;
    /**
     * @var int
     */
    public $fetchType = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['operationHandle'])) {
                $this->operationHandle = $vals['operationHandle'];
            }
            if (isset($vals['orientation'])) {
                $this->orientation = $vals['orientation'];
            }
            if (isset($vals['maxRows'])) {
                $this->maxRows = $vals['maxRows'];
            }
            if (isset($vals['fetchType'])) {
                $this->fetchType = $vals['fetchType'];
            }
        }
    }

    public function getName()
    {
        return 'TFetchResultsReq';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->operationHandle = new \TOperationHandle();
                        $xfer += $this->operationHandle->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->orientation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->maxRows);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->fetchType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TFetchResultsReq');
        if ($this->operationHandle !== null) {
            if (!is_object($this->operationHandle)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('operationHandle', TType::STRUCT, 1);
            $xfer += $this->operationHandle->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->orientation !== null) {
            $xfer += $output->writeFieldBegin('orientation', TType::I32, 2);
            $xfer += $output->writeI32($this->orientation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxRows !== null) {
            $xfer += $output->writeFieldBegin('maxRows', TType::I64, 3);
            $xfer += $output->writeI64($this->maxRows);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fetchType !== null) {
            $xfer += $output->writeFieldBegin('fetchType', TType::I16, 4);
            $xfer += $output->writeI16($this->fetchType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
