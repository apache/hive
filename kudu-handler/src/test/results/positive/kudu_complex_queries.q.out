PREHOOK: query: DROP TABLE IF EXISTS kv_table
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS kv_table
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE EXTERNAL TABLE kv_table(key int, value string)
STORED BY 'org.apache.hadoop.hive.kudu.KuduStorageHandler'
TBLPROPERTIES ("kudu.table_name" = "default.kudu_kv")
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@kv_table
POSTHOOK: query: CREATE EXTERNAL TABLE kv_table(key int, value string)
STORED BY 'org.apache.hadoop.hive.kudu.KuduStorageHandler'
TBLPROPERTIES ("kudu.table_name" = "default.kudu_kv")
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@kv_table
PREHOOK: query: INSERT INTO TABLE kv_table
SELECT key, value FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@kv_table
POSTHOOK: query: INSERT INTO TABLE kv_table
SELECT key, value FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@kv_table
PREHOOK: query: ANALYZE TABLE kv_table COMPUTE STATISTICS
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@kv_table
PREHOOK: Output: default@kv_table
POSTHOOK: query: ANALYZE TABLE kv_table COMPUTE STATISTICS
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@kv_table
POSTHOOK: Output: default@kv_table
PREHOOK: query: ANALYZE TABLE kv_table COMPUTE STATISTICS FOR COLUMNS key, value
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@kv_table
PREHOOK: Output: default@kv_table
#### A masked pattern was here ####
POSTHOOK: query: ANALYZE TABLE kv_table COMPUTE STATISTICS FOR COLUMNS key, value
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@kv_table
POSTHOOK: Output: default@kv_table
#### A masked pattern was here ####
PREHOOK: query: EXPLAIN
SELECT y.*
FROM
(SELECT kv_table.* FROM kv_table) x
JOIN
(SELECT src.* FROM src) y
ON (x.key = y.key)
ORDER BY key, value LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@kv_table
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT y.*
FROM
(SELECT kv_table.* FROM kv_table) x
JOIN
(SELECT src.* FROM src) y
ON (x.key = y.key)
ORDER BY key, value LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@kv_table
POSTHOOK: Input: default@src
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: kv_table
            filterExpr: UDFToDouble(key) is not null (type: boolean)
            Statistics: Num rows: 309 Data size: 0 Basic stats: PARTIAL Column stats: NONE
            Filter Operator
              predicate: UDFToDouble(key) is not null (type: boolean)
              Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
              Select Operator
                expressions: key (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                Reduce Output Operator
                  key expressions: UDFToDouble(_col0) (type: double)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: UDFToDouble(_col0) (type: double)
                  Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
          TableScan
            alias: src
            filterExpr: UDFToDouble(key) is not null (type: boolean)
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: UDFToDouble(key) is not null (type: boolean)
              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: key (type: string), value (type: string)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: UDFToDouble(_col0) (type: double)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: UDFToDouble(_col0) (type: double)
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string), _col1 (type: string)
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 UDFToDouble(_col0) (type: double)
            1 UDFToDouble(_col0) (type: double)
          outputColumnNames: _col1, _col2
          Statistics: Num rows: 550 Data size: 5843 Basic stats: PARTIAL Column stats: NONE
          Select Operator
            expressions: _col1 (type: string), _col2 (type: string)
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 550 Data size: 5843 Basic stats: PARTIAL Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: string), _col1 (type: string)
              null sort order: zz
              sort order: ++
              Statistics: Num rows: 550 Data size: 5843 Basic stats: PARTIAL Column stats: NONE
              TopN Hash Memory Usage: 0.1
      Execution mode: vectorized
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string)
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 550 Data size: 5843 Basic stats: PARTIAL Column stats: NONE
          Limit
            Number of rows: 10
            Statistics: Num rows: 10 Data size: 100 Basic stats: PARTIAL Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 10 Data size: 100 Basic stats: PARTIAL Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT y.*
FROM
(SELECT kv_table.* FROM kv_table) x
JOIN
(SELECT src.* FROM src) y
ON (x.key = y.key)
ORDER BY key, value LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@kv_table
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT y.*
FROM
(SELECT kv_table.* FROM kv_table) x
JOIN
(SELECT src.* FROM src) y
ON (x.key = y.key)
ORDER BY key, value LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@kv_table
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
PREHOOK: query: EXPLAIN
SELECT max(k.key) as max, min(k.value) as min
FROM kv_table k JOIN src s ON (k.key = s.key)
WHERE k.key > 100 and k.key % 2 = 0
GROUP BY k.key
ORDER BY min
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@kv_table
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT max(k.key) as max, min(k.value) as min
FROM kv_table k JOIN src s ON (k.key = s.key)
WHERE k.key > 100 and k.key % 2 = 0
GROUP BY k.key
ORDER BY min
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@kv_table
POSTHOOK: Input: default@src
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-3 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-3

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: k
            filterExpr: (key > 100) (type: boolean)
            Statistics: Num rows: 309 Data size: 0 Basic stats: PARTIAL Column stats: NONE
            Filter Operator
              predicate: (((key % 2) = 0) and UDFToDouble(key) is not null) (type: boolean)
              Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
              Select Operator
                expressions: key (type: int), value (type: string), UDFToDouble(key) (type: double)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                Reduce Output Operator
                  key expressions: _col2 (type: double)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col2 (type: double)
                  Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE
                  value expressions: _col0 (type: int), _col1 (type: string)
          TableScan
            alias: s
            filterExpr: UDFToDouble(key) is not null (type: boolean)
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            Filter Operator
              predicate: UDFToDouble(key) is not null (type: boolean)
              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: UDFToDouble(key) (type: double)
                outputColumnNames: _col0
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: double)
                  null sort order: a
                  sort order: +
                  Map-reduce partition columns: _col0 (type: double)
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          keys:
            0 _col2 (type: double)
            1 _col0 (type: double)
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 550 Data size: 5843 Basic stats: PARTIAL Column stats: NONE
          Group By Operator
            aggregations: max(_col0), min(_col1)
            keys: _col0 (type: int)
            minReductionHashAggr: 0.99
            mode: hash
            outputColumnNames: _col0, _col1, _col2
            Statistics: Num rows: 550 Data size: 5843 Basic stats: PARTIAL Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: int)
              null sort order: a
              sort order: +
              Map-reduce partition columns: _col0 (type: int)
              Statistics: Num rows: 550 Data size: 5843 Basic stats: PARTIAL Column stats: NONE
              value expressions: _col1 (type: int), _col2 (type: string)
      Execution mode: vectorized
      Reduce Operator Tree:
        Group By Operator
          aggregations: max(VALUE._col0), min(VALUE._col1)
          keys: KEY._col0 (type: int)
          mode: mergepartial
          outputColumnNames: _col0, _col1, _col2
          Statistics: Num rows: 275 Data size: 2921 Basic stats: PARTIAL Column stats: NONE
          Select Operator
            expressions: _col1 (type: int), _col2 (type: string)
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 275 Data size: 2921 Basic stats: PARTIAL Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-3
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col1 (type: string)
              null sort order: z
              sort order: +
              Statistics: Num rows: 275 Data size: 2921 Basic stats: PARTIAL Column stats: NONE
              TopN Hash Memory Usage: 0.1
              value expressions: _col0 (type: int)
      Execution mode: vectorized
      Reduce Operator Tree:
        Select Operator
          expressions: VALUE._col0 (type: int), KEY.reducesinkkey0 (type: string)
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 275 Data size: 2921 Basic stats: PARTIAL Column stats: NONE
          Limit
            Number of rows: 10
            Statistics: Num rows: 10 Data size: 100 Basic stats: PARTIAL Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 10 Data size: 100 Basic stats: PARTIAL Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT max(k.key) as max, min(k.value) as min
FROM kv_table k JOIN src s ON (k.key = s.key)
WHERE k.key > 100 and k.key % 2 = 0
GROUP BY k.key
ORDER BY min
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@kv_table
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT max(k.key) as max, min(k.value) as min
FROM kv_table k JOIN src s ON (k.key = s.key)
WHERE k.key > 100 and k.key % 2 = 0
GROUP BY k.key
ORDER BY min
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@kv_table
POSTHOOK: Input: default@src
#### A masked pattern was here ####
104	val_104
114	val_114
116	val_116
118	val_118
120	val_120
126	val_126
128	val_128
134	val_134
136	val_136
138	val_138
