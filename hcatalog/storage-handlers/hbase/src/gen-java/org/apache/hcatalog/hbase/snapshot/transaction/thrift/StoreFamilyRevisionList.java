/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This class is used to store a list of StoreFamilyRevision for a column
 * family in zookeeper.
 *
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hcatalog.hbase.snapshot.transaction.thrift;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoreFamilyRevisionList implements org.apache.thrift.TBase<StoreFamilyRevisionList, StoreFamilyRevisionList._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StoreFamilyRevisionList");

    private static final org.apache.thrift.protocol.TField REVISION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("revisionList", org.apache.thrift.protocol.TType.LIST, (short) 1);

    public List<StoreFamilyRevision> revisionList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        REVISION_LIST((short) 1, "revisionList");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // REVISION_LIST
                return REVISION_LIST;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.REVISION_LIST, new org.apache.thrift.meta_data.FieldMetaData("revisionList", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StoreFamilyRevision.class))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StoreFamilyRevisionList.class, metaDataMap);
    }

    public StoreFamilyRevisionList() {
    }

    public StoreFamilyRevisionList(
        List<StoreFamilyRevision> revisionList) {
        this();
        this.revisionList = revisionList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StoreFamilyRevisionList(StoreFamilyRevisionList other) {
        if (other.isSetRevisionList()) {
            List<StoreFamilyRevision> __this__revisionList = new ArrayList<StoreFamilyRevision>();
            for (StoreFamilyRevision other_element : other.revisionList) {
                __this__revisionList.add(new StoreFamilyRevision(other_element));
            }
            this.revisionList = __this__revisionList;
        }
    }

    public StoreFamilyRevisionList deepCopy() {
        return new StoreFamilyRevisionList(this);
    }

    @Override
    public void clear() {
        this.revisionList = null;
    }

    public int getRevisionListSize() {
        return (this.revisionList == null) ? 0 : this.revisionList.size();
    }

    public java.util.Iterator<StoreFamilyRevision> getRevisionListIterator() {
        return (this.revisionList == null) ? null : this.revisionList.iterator();
    }

    public void addToRevisionList(StoreFamilyRevision elem) {
        if (this.revisionList == null) {
            this.revisionList = new ArrayList<StoreFamilyRevision>();
        }
        this.revisionList.add(elem);
    }

    public List<StoreFamilyRevision> getRevisionList() {
        return this.revisionList;
    }

    public StoreFamilyRevisionList setRevisionList(List<StoreFamilyRevision> revisionList) {
        this.revisionList = revisionList;
        return this;
    }

    public void unsetRevisionList() {
        this.revisionList = null;
    }

    /** Returns true if field revisionList is set (has been assigned a value) and false otherwise */
    public boolean isSetRevisionList() {
        return this.revisionList != null;
    }

    public void setRevisionListIsSet(boolean value) {
        if (!value) {
            this.revisionList = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case REVISION_LIST:
            if (value == null) {
                unsetRevisionList();
            } else {
                setRevisionList((List<StoreFamilyRevision>) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case REVISION_LIST:
            return getRevisionList();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case REVISION_LIST:
            return isSetRevisionList();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof StoreFamilyRevisionList)
            return this.equals((StoreFamilyRevisionList) that);
        return false;
    }

    public boolean equals(StoreFamilyRevisionList that) {
        if (that == null)
            return false;

        boolean this_present_revisionList = true && this.isSetRevisionList();
        boolean that_present_revisionList = true && that.isSetRevisionList();
        if (this_present_revisionList || that_present_revisionList) {
            if (!(this_present_revisionList && that_present_revisionList))
                return false;
            if (!this.revisionList.equals(that.revisionList))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(StoreFamilyRevisionList other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        StoreFamilyRevisionList typedOther = (StoreFamilyRevisionList) other;

        lastComparison = Boolean.valueOf(isSetRevisionList()).compareTo(typedOther.isSetRevisionList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRevisionList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revisionList, typedOther.revisionList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP) {
                break;
            }
            switch (field.id) {
            case 1: // REVISION_LIST
                if (field.type == org.apache.thrift.protocol.TType.LIST) {
                    {
                        org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                        this.revisionList = new ArrayList<StoreFamilyRevision>(_list0.size);
                        for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                            StoreFamilyRevision _elem2; // required
                            _elem2 = new StoreFamilyRevision();
                            _elem2.read(iprot);
                            this.revisionList.add(_elem2);
                        }
                        iprot.readListEnd();
                    }
                } else {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.revisionList != null) {
            oprot.writeFieldBegin(REVISION_LIST_FIELD_DESC);
            {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.revisionList.size()));
                for (StoreFamilyRevision _iter3 : this.revisionList) {
                    _iter3.write(oprot);
                }
                oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StoreFamilyRevisionList(");
        boolean first = true;

        sb.append("revisionList:");
        if (this.revisionList == null) {
            sb.append("null");
        } else {
            sb.append(this.revisionList);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

}

