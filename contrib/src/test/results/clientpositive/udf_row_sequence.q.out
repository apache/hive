PREHOOK: query: drop temporary function row_sequence
PREHOOK: type: DROPFUNCTION
POSTHOOK: query: drop temporary function row_sequence
POSTHOOK: type: DROPFUNCTION
PREHOOK: query: create temporary function row_sequence as 
'org.apache.hadoop.hive.contrib.udf.UDFRowSequence'
PREHOOK: type: CREATEFUNCTION
PREHOOK: Output: row_sequence
POSTHOOK: query: create temporary function row_sequence as 
'org.apache.hadoop.hive.contrib.udf.UDFRowSequence'
POSTHOOK: type: CREATEFUNCTION
POSTHOOK: Output: row_sequence
PREHOOK: query: DESCRIBE FUNCTION EXTENDED row_sequence
PREHOOK: type: DESCFUNCTION
POSTHOOK: query: DESCRIBE FUNCTION EXTENDED row_sequence
POSTHOOK: type: DESCFUNCTION
row_sequence() - Returns a generated row sequence number starting from 1
Function class:org.apache.hadoop.hive.contrib.udf.UDFRowSequence
Function type:TEMPORARY
PREHOOK: query: explain
select key, row_sequence() as r
from (select key from src order by key) x
order by r
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key, row_sequence() as r
from (select key from src order by key) x
order by r
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: src
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: key (type: string), row_sequence() (type: bigint)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: _col1 (type: bigint)
                sort order: +
                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col0 (type: string)
      Reduce Operator Tree:
        Select Operator
          expressions: VALUE._col0 (type: string), KEY.reducesinkkey0 (type: bigint)
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select key, row_sequence() as r
from (select key from src order by key) x
order by r
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key, row_sequence() as r
from (select key from src order by key) x
order by r
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
238	1
86	2
311	3
27	4
165	5
409	6
255	7
278	8
98	9
484	10
265	11
193	12
401	13
150	14
273	15
224	16
369	17
66	18
128	19
213	20
146	21
406	22
429	23
374	24
152	25
469	26
145	27
495	28
37	29
327	30
281	31
277	32
209	33
15	34
82	35
403	36
166	37
417	38
430	39
252	40
292	41
219	42
287	43
153	44
193	45
338	46
446	47
459	48
394	49
237	50
482	51
174	52
413	53
494	54
207	55
199	56
466	57
208	58
174	59
399	60
396	61
247	62
417	63
489	64
162	65
377	66
397	67
309	68
365	69
266	70
439	71
342	72
367	73
325	74
167	75
195	76
475	77
17	78
113	79
155	80
203	81
339	82
0	83
455	84
128	85
311	86
316	87
57	88
302	89
205	90
149	91
438	92
345	93
129	94
170	95
20	96
489	97
157	98
378	99
221	100
92	101
111	102
47	103
72	104
4	105
280	106
35	107
427	108
277	109
208	110
356	111
399	112
169	113
382	114
498	115
125	116
386	117
437	118
469	119
192	120
286	121
187	122
176	123
54	124
459	125
51	126
138	127
103	128
239	129
213	130
216	131
430	132
278	133
176	134
289	135
221	136
65	137
318	138
332	139
311	140
275	141
137	142
241	143
83	144
333	145
180	146
284	147
12	148
230	149
181	150
67	151
260	152
404	153
384	154
489	155
353	156
373	157
272	158
138	159
217	160
84	161
348	162
466	163
58	164
8	165
411	166
230	167
208	168
348	169
24	170
463	171
431	172
179	173
172	174
42	175
129	176
158	177
119	178
496	179
0	180
322	181
197	182
468	183
393	184
454	185
100	186
298	187
199	188
191	189
418	190
96	191
26	192
165	193
327	194
230	195
205	196
120	197
131	198
51	199
404	200
43	201
436	202
156	203
469	204
468	205
308	206
95	207
196	208
288	209
481	210
457	211
98	212
282	213
197	214
187	215
318	216
318	217
409	218
470	219
137	220
369	221
316	222
169	223
413	224
85	225
77	226
0	227
490	228
87	229
364	230
179	231
118	232
134	233
395	234
282	235
138	236
238	237
419	238
15	239
118	240
72	241
90	242
307	243
19	244
435	245
10	246
277	247
273	248
306	249
224	250
309	251
389	252
327	253
242	254
369	255
392	256
272	257
331	258
401	259
242	260
452	261
177	262
226	263
5	264
497	265
402	266
396	267
317	268
395	269
58	270
35	271
336	272
95	273
11	274
168	275
34	276
229	277
233	278
143	279
472	280
322	281
498	282
160	283
195	284
42	285
321	286
430	287
119	288
489	289
458	290
78	291
76	292
41	293
223	294
492	295
149	296
449	297
218	298
228	299
138	300
453	301
30	302
209	303
64	304
468	305
76	306
74	307
342	308
69	309
230	310
33	311
368	312
103	313
296	314
113	315
216	316
367	317
344	318
167	319
274	320
219	321
239	322
485	323
116	324
223	325
256	326
263	327
70	328
487	329
480	330
401	331
288	332
191	333
5	334
244	335
438	336
128	337
467	338
432	339
202	340
316	341
229	342
469	343
463	344
280	345
2	346
35	347
283	348
331	349
235	350
80	351
44	352
193	353
321	354
335	355
104	356
466	357
366	358
175	359
403	360
483	361
53	362
105	363
257	364
406	365
409	366
190	367
406	368
401	369
114	370
258	371
90	372
203	373
262	374
348	375
424	376
12	377
396	378
201	379
217	380
164	381
431	382
454	383
478	384
298	385
125	386
431	387
164	388
424	389
187	390
382	391
5	392
70	393
397	394
480	395
291	396
24	397
351	398
255	399
104	400
70	401
163	402
438	403
119	404
414	405
200	406
491	407
237	408
439	409
360	410
248	411
479	412
305	413
417	414
199	415
444	416
120	417
429	418
169	419
443	420
323	421
325	422
277	423
230	424
478	425
178	426
468	427
310	428
317	429
333	430
493	431
460	432
207	433
249	434
265	435
480	436
83	437
136	438
353	439
172	440
214	441
462	442
233	443
406	444
133	445
175	446
189	447
454	448
375	449
401	450
421	451
407	452
384	453
256	454
26	455
134	456
67	457
384	458
379	459
18	460
462	461
492	462
100	463
298	464
9	465
341	466
498	467
146	468
458	469
362	470
186	471
285	472
348	473
167	474
18	475
273	476
183	477
281	478
344	479
97	480
469	481
315	482
84	483
28	484
37	485
448	486
152	487
348	488
307	489
194	490
414	491
477	492
222	493
126	494
90	495
169	496
403	497
400	498
200	499
97	500
PREHOOK: query: select key, (key = 105) and (row_sequence() = 1)
from (select key from src order by key) x
order by key limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key, (key = 105) and (row_sequence() = 1)
from (select key from src order by key) x
order by key limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	false
0	false
0	false
10	false
100	false
100	false
103	false
103	false
104	false
104	false
105	false
11	false
111	false
113	false
113	false
114	false
116	false
118	false
118	false
119	false
PREHOOK: query: drop temporary function row_sequence
PREHOOK: type: DROPFUNCTION
PREHOOK: Output: row_sequence
POSTHOOK: query: drop temporary function row_sequence
POSTHOOK: type: DROPFUNCTION
POSTHOOK: Output: row_sequence
