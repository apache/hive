PREHOOK: query: DROP TABLE base64_test
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE base64_test
POSTHOOK: type: DROPTABLE
PREHOOK: query: EXPLAIN
CREATE TABLE base64_test(key INT, value STRING) STORED AS
  INPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat'
  OUTPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextOutputFormat'
PREHOOK: type: CREATETABLE
POSTHOOK: query: EXPLAIN
CREATE TABLE base64_test(key INT, value STRING) STORED AS
  INPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat'
  OUTPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextOutputFormat'
POSTHOOK: type: CREATETABLE
ABSTRACT SYNTAX TREE:
  (TOK_CREATETABLE (TOK_TABNAME base64_test) TOK_LIKETABLE (TOK_TABCOLLIST (TOK_TABCOL key TOK_INT) (TOK_TABCOL value TOK_STRING)) (TOK_TABLEFILEFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat' 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextOutputFormat'))

STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
      Create Table Operator:
        Create Table
          columns: key int, value string
          if not exists: false
          input format: org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat
          # buckets: -1
          output format: org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextOutputFormat
          name: base64_test
          isExternal: false


PREHOOK: query: CREATE TABLE base64_test(key INT, value STRING) STORED AS
  INPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat'
  OUTPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextOutputFormat'
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE base64_test(key INT, value STRING) STORED AS
  INPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat'
  OUTPUTFORMAT 'org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextOutputFormat'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@base64_test
PREHOOK: query: DESCRIBE EXTENDED base64_test
PREHOOK: type: DESCTABLE
POSTHOOK: query: DESCRIBE EXTENDED base64_test
POSTHOOK: type: DESCTABLE
# col_name            	data_type           	comment             
	 	 
key                 	int                 	None                
value               	string              	None                
	 	 
#### A masked pattern was here ####
PREHOOK: query: FROM src
INSERT OVERWRITE TABLE base64_test
SELECT key, value WHERE key < 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@base64_test
POSTHOOK: query: FROM src
INSERT OVERWRITE TABLE base64_test
SELECT key, value WHERE key < 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@base64_test
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM base64_test
PREHOOK: type: QUERY
PREHOOK: Input: default@base64_test
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM base64_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@base64_test
#### A masked pattern was here ####
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
0	val_0
4	val_4
8	val_8
0	val_0
0	val_0
5	val_5
5	val_5
2	val_2
5	val_5
9	val_9
PREHOOK: query: -- Base64TextInput/OutputFormat supports signature (a prefix to check the validity of
-- the data). These queries test that prefix capabilities.

FROM src
INSERT OVERWRITE TABLE base64_test
SELECT key, value WHERE key < 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@base64_test
POSTHOOK: query: -- Base64TextInput/OutputFormat supports signature (a prefix to check the validity of
-- the data). These queries test that prefix capabilities.

FROM src
INSERT OVERWRITE TABLE base64_test
SELECT key, value WHERE key < 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@base64_test
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM base64_test
PREHOOK: type: QUERY
PREHOOK: Input: default@base64_test
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM base64_test
POSTHOOK: type: QUERY
POSTHOOK: Input: default@base64_test
#### A masked pattern was here ####
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
0	val_0
4	val_4
8	val_8
0	val_0
0	val_0
5	val_5
5	val_5
2	val_2
5	val_5
9	val_9
PREHOOK: query: DROP TABLE base64_test
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@base64_test
PREHOOK: Output: default@base64_test
POSTHOOK: query: DROP TABLE base64_test
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@base64_test
POSTHOOK: Output: default@base64_test
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: base64_test.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
