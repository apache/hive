PREHOOK: query: create table target(a int, b int, c int) stored by iceberg tblproperties('format-version'='2', 'write.merge.mode'='copy-on-write')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@target
POSTHOOK: query: create table target(a int, b int, c int) stored by iceberg tblproperties('format-version'='2', 'write.merge.mode'='copy-on-write')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@target
PREHOOK: query: create table source(a int, b int, c int) stored by iceberg tblproperties('format-version'='2', 'write.merge.mode'='copy-on-write')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@source
POSTHOOK: query: create table source(a int, b int, c int) stored by iceberg tblproperties('format-version'='2', 'write.merge.mode'='copy-on-write')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@source
PREHOOK: query: explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when matched and t.a is null then delete
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Input: default@source
PREHOOK: Input: default@target
PREHOOK: Output: default@target
POSTHOOK: query: explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when matched and t.a is null then delete
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Input: default@source
POSTHOOK: Input: default@target
POSTHOOK: Output: default@target
CBO PLAN:
HiveValues(tuples=[[]])

PREHOOK: query: explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when matched and t.a is null then update set b = t.b + 10
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Input: default@source
PREHOOK: Input: default@target
PREHOOK: Output: default@target
POSTHOOK: query: explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when matched and t.a is null then update set b = t.b + 10
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Input: default@source
POSTHOOK: Input: default@target
POSTHOOK: Output: default@target
CBO PLAN:
HiveValues(tuples=[[]])

PREHOOK: query: -- non empty plans for these queries
explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when not matched and t.a is null then insert values (1, 2, 3)
PREHOOK: type: QUERY
PREHOOK: Input: default@source
PREHOOK: Input: default@target
PREHOOK: Output: default@target
POSTHOOK: query: -- non empty plans for these queries
explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when not matched and t.a is null then insert values (1, 2, 3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@source
POSTHOOK: Input: default@target
POSTHOOK: Output: default@target
CBO PLAN:
HiveProject(t__partition__spec__id=[$0], t__partition__hash=[$1], t__file__path=[$2], t__row__position=[$3], t__partition__projection=[$4], _o__c5=[1], _o__c6=[2], _o__c7=[3])
  HiveFilter(condition=[AND(IS NULL($5), IS NULL($6))])
    HiveJoin(condition=[AND(=($5, $7), =($6, $8))], joinType=[full], algorithm=[none], cost=[not available])
      HiveProject(t__partition__spec__id=[$7], t__partition__hash=[$8], t__file__path=[$9], t__row__position=[$10], t__partition__projection=[$11], t__a=[$0], t__b=[$1])
        HiveTableScan(table=[[default, target]], table:alias=[target])
      HiveProject(a=[$0], b=[$1])
        HiveTableScan(table=[[default, source]], table:alias=[s])

PREHOOK: query: explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when matched and t.a is null then delete
when matched then update set b = t.b + 10
when not matched then insert values (1, 2, 3)
PREHOOK: type: QUERY
PREHOOK: Input: default@source
PREHOOK: Input: default@target
PREHOOK: Output: default@target
POSTHOOK: query: explain cbo
merge into target as t using source as s on t.a = s.a and t.b = s.b
when matched and t.a is null then delete
when matched then update set b = t.b + 10
when not matched then insert values (1, 2, 3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@source
POSTHOOK: Input: default@target
POSTHOOK: Output: default@target
CBO PLAN:
HiveUnion(all=[true])
  HiveProject(t__partition__spec__id=[$0], t__partition__hash=[$1], t__file__path=[$2], t__row__position=[$3], t__partition__projection=[$4], t__a=[$5], t__b=[+($6, 10)], t__c=[$7])
    HiveJoin(condition=[AND(=($5, $8), =($6, $9))], joinType=[inner], algorithm=[none], cost=[not available])
      HiveProject(t__partition__spec__id=[$7], t__partition__hash=[$8], t__file__path=[$9], t__row__position=[$10], t__partition__projection=[$11], t__a=[$0], t__b=[$1], t__c=[$2])
        HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
          HiveTableScan(table=[[default, target]], table:alias=[target])
      HiveProject(a=[$0], b=[$1])
        HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
          HiveTableScan(table=[[default, source]], table:alias=[s])
  HiveProject(t__partition__spec__id=[$0], t__partition__hash=[$1], t__file__path=[$2], t__row__position=[$3], t__partition__projection=[$4], _o__c5=[1], _o__c6=[2], _o__c7=[3])
    HiveFilter(condition=[AND(IS NULL($5), IS NULL($6))])
      HiveJoin(condition=[AND(=($5, $7), =($6, $8))], joinType=[full], algorithm=[none], cost=[not available])
        HiveProject(t__partition__spec__id=[$7], t__partition__hash=[$8], t__file__path=[$9], t__row__position=[$10], t__partition__projection=[$11], t__a=[$0], t__b=[$1])
          HiveTableScan(table=[[default, target]], table:alias=[target])
        HiveProject(a=[$0], b=[$1])
          HiveTableScan(table=[[default, source]], table:alias=[s])
  HiveProject(t__partition__spec__id=[$0], t__partition__hash=[$1], t__file__path=[$2], t__row__position=[$3], t__partition__projection=[$4], t__a=[$5], t__b=[$6], t__c=[$7])
    HiveSemiJoin(condition=[=($2, $10)], joinType=[semi])
      HiveProject(t__partition__spec__id=[$0], t__partition__hash=[$1], t__file__path=[$2], t__row__position=[$3], t__partition__projection=[$4], t__a=[$5], t__b=[$6], t__c=[$7], a=[$8], b=[$9])
        HiveFilter(condition=[OR(IS NULL(OR(AND(=($5, $8), =($6, $9)), AND(IS NULL($5), IS NULL($6)))), AND(OR(<>($5, $8), <>($6, $9)), OR(IS NOT NULL($5), IS NOT NULL($6))))])
          HiveJoin(condition=[AND(=($5, $8), =($6, $9))], joinType=[left], algorithm=[none], cost=[not available])
            HiveProject(t__partition__spec__id=[$7], t__partition__hash=[$8], t__file__path=[$9], t__row__position=[$10], t__partition__projection=[$11], t__a=[$0], t__b=[$1], t__c=[$2])
              HiveFilter(condition=[IS NOT NULL($9)])
                HiveTableScan(table=[[default, target]], table:alias=[target])
            HiveProject(a=[$0], b=[$1])
              HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
                HiveTableScan(table=[[default, source]], table:alias=[s])
      HiveProject(t__file__path=[$0])
        HiveFilter(condition=[=($1, 1)])
          HiveProject(t__file__path=[$0], row_number_window_0=[row_number() OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
            HiveJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[inner], algorithm=[none], cost=[not available])
              HiveProject(t__file__path=[$9], t__a=[$0], t__b=[$1])
                HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1), IS NOT NULL($9))])
                  HiveTableScan(table=[[default, target]], table:alias=[target])
              HiveProject(a=[$0], b=[$1])
                HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
                  HiveTableScan(table=[[default, source]], table:alias=[s])
  HiveProject(t__partition__spec__id=[$0], t__partition__hash=[$1], t__file__path=[$2], _o__c3=[-1:BIGINT], t__partition__projection=[$3], t__a=[$4], t__b=[$5], t__c=[$6])
    HiveFilter(condition=[=($7, 1)])
      HiveProject(t__partition__spec__id=[$0], t__partition__hash=[$1], t__file__path=[$2], t__partition__projection=[$3], t__a=[$4], t__b=[$5], t__c=[$6], row_number_window_0=[row_number() OVER (PARTITION BY $2 ORDER BY $2 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
        HiveJoin(condition=[AND(=($4, $7), =($5, $8))], joinType=[inner], algorithm=[none], cost=[not available])
          HiveProject(t__partition__spec__id=[$7], t__partition__hash=[$8], t__file__path=[$9], t__partition__projection=[$11], t__a=[$0], t__b=[$1], t__c=[$2])
            HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
              HiveTableScan(table=[[default, target]], table:alias=[target])
          HiveProject(a=[$0], b=[$1])
            HiveFilter(condition=[AND(IS NOT NULL($0), IS NOT NULL($1))])
              HiveTableScan(table=[[default, source]], table:alias=[s])

