PREHOOK: query: drop table if exists x_date_dim
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x_date_dim
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x_item
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x_item
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x_store_sales
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x_store_sales
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table x_date_dim (d_date_sk bigint, d_year int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x_date_dim
POSTHOOK: query: create table x_date_dim (d_date_sk bigint, d_year int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x_date_dim
PREHOOK: query: create table x_item (i_item_sk bigint, i_product_name string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x_item
POSTHOOK: query: create table x_item (i_item_sk bigint, i_product_name string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x_item
PREHOOK: query: create table x_store_sales (ss_item_sk bigint, dummy string) partitioned by (ss_sold_date_sk bigint)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x_store_sales
POSTHOOK: query: create table x_store_sales (ss_item_sk bigint, dummy string) partitioned by (ss_sold_date_sk bigint)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x_store_sales
PREHOOK: query: insert into table x_date_dim
values (1, 1999), (2, 2000), (3, 2001)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x_date_dim
POSTHOOK: query: insert into table x_date_dim
values (1, 1999), (2, 2000), (3, 2001)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x_date_dim
POSTHOOK: Lineage: x_date_dim.d_date_sk SCRIPT []
POSTHOOK: Lineage: x_date_dim.d_year SCRIPT []
PREHOOK: query: insert into table x_item values
(1, 'white snow'),
(2, 'solid steel'),
(3, 'dim cloud')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x_item
POSTHOOK: query: insert into table x_item values
(1, 'white snow'),
(2, 'solid steel'),
(3, 'dim cloud')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x_item
POSTHOOK: Lineage: x_item.i_item_sk SCRIPT []
POSTHOOK: Lineage: x_item.i_product_name SCRIPT []
PREHOOK: query: insert into table x_store_sales (ss_item_sk, dummy, ss_sold_date_sk)
values
(1, 'Dummy content just to make this table size the bigger among others', 1),
(2, 'Dummy content just to make this table size the bigger among others', 2),
(2, 'Dummy content just to make this table size the bigger among others', 3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x_store_sales
POSTHOOK: query: insert into table x_store_sales (ss_item_sk, dummy, ss_sold_date_sk)
values
(1, 'Dummy content just to make this table size the bigger among others', 1),
(2, 'Dummy content just to make this table size the bigger among others', 2),
(2, 'Dummy content just to make this table size the bigger among others', 3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x_store_sales
POSTHOOK: Output: default@x_store_sales@ss_sold_date_sk=1
POSTHOOK: Output: default@x_store_sales@ss_sold_date_sk=2
POSTHOOK: Output: default@x_store_sales@ss_sold_date_sk=3
POSTHOOK: Lineage: x_store_sales PARTITION(ss_sold_date_sk=1).dummy SCRIPT []
POSTHOOK: Lineage: x_store_sales PARTITION(ss_sold_date_sk=1).ss_item_sk SCRIPT []
POSTHOOK: Lineage: x_store_sales PARTITION(ss_sold_date_sk=2).dummy SCRIPT []
POSTHOOK: Lineage: x_store_sales PARTITION(ss_sold_date_sk=2).ss_item_sk SCRIPT []
POSTHOOK: Lineage: x_store_sales PARTITION(ss_sold_date_sk=3).dummy SCRIPT []
POSTHOOK: Lineage: x_store_sales PARTITION(ss_sold_date_sk=3).ss_item_sk SCRIPT []
PREHOOK: query: explain
with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs2.year
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
PREHOOK: type: QUERY
PREHOOK: Input: default@x_date_dim
PREHOOK: Input: default@x_item
PREHOOK: Input: default@x_store_sales
PREHOOK: Input: default@x_store_sales@ss_sold_date_sk=1
PREHOOK: Input: default@x_store_sales@ss_sold_date_sk=2
PREHOOK: Input: default@x_store_sales@ss_sold_date_sk=3
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs2.year
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_date_dim
POSTHOOK: Input: default@x_item
POSTHOOK: Input: default@x_store_sales
POSTHOOK: Input: default@x_store_sales@ss_sold_date_sk=1
POSTHOOK: Input: default@x_store_sales@ss_sold_date_sk=2
POSTHOOK: Input: default@x_store_sales@ss_sold_date_sk=3
POSTHOOK: Output: hdfs://### HDFS PATH ###
Vertex dependency in root stage
Map 3 <- Map 1 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Reducer 2 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 4 <- Map 3 (SIMPLE_EDGE)
Reducer 5 <- Map 3 (SIMPLE_EDGE), Reducer 4 (BROADCAST_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_179]
        Select Operator [SEL_178] (rows=1 width=102)
          Output:["_col0","_col1","_col2"]
          Filter Operator [FIL_177] (rows=1 width=110)
            predicate:(_col1 = _col4)
            Map Join Operator [MAPJOIN_176] (rows=1 width=110)
              Conds:SEL_175._col1=RS_173._col1(Inner),Output:["_col0","_col1","_col4"]
            <-Reducer 4 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_173]
                PartitionCols:_col1
                Select Operator [SEL_172] (rows=1 width=8)
                  Output:["_col1"]
                  Group By Operator [GBY_171] (rows=1 width=106)
                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, 2001
                  <-Map 3 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_169]
                      PartitionCols:_col0, _col1, 2001
                      Group By Operator [GBY_167] (rows=1 width=106)
                        Output:["_col0","_col1","_col2"],keys:_col8, _col7, 2001
                        Select Operator [SEL_165] (rows=1 width=126)
                          Output:["_col7","_col8"]
                          Filter Operator [FIL_163] (rows=1 width=126)
                            predicate:((_col0 = _col7) and (_col2 = _col13))
                            Map Join Operator [MAPJOIN_161] (rows=1 width=126)
                              Conds:MAPJOIN_159._col2=RS_148.d_date_sk(Inner),Output:["_col0","_col2","_col7","_col8","_col13"]
                            <-Map 6 [BROADCAST_EDGE] vectorized
                              SHUFFLE [RS_148]
                                PartitionCols:d_date_sk
                                Filter Operator [FIL_146] (rows=1 width=12)
                                  predicate:(d_date_sk is not null and (d_year = 2001))
                                  TableScan [TS_20] (rows=3 width=12)
                                    default@x_date_dim,x_date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                            <-Map Join Operator [MAPJOIN_159] (rows=3 width=118)
                                Conds:RS_145.ss_item_sk=FIL_158.i_item_sk(Inner),Output:["_col0","_col2","_col7","_col8"]
                              <-Reducer 2 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_145]
                                  PartitionCols:ss_item_sk
                                  Select Operator [SEL_144]
                                    Output:["ss_item_sk","ss_sold_date_sk"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_142]
                                      PartitionCols:ss_item_sk
                                      Filter Operator [FIL_141] (rows=3 width=16)
                                        predicate:ss_item_sk is not null
                                        TableScan [TS_18] (rows=3 width=16)
                                          default@x_store_sales,x_store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk"]
                              <-Filter Operator [FIL_158] (rows=3 width=102)
                                  predicate:i_item_sk is not null
                                  TableScan [TS_19] (rows=3 width=102)
                                    default@x_item,x_item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_product_name"]
                                  <-Map 1 [BROADCAST_EDGE] vectorized
                                    SHUFFLE [RS_143]
                                      PartitionCols:ss_item_sk
                                       Please refer to the previous Filter Operator [FIL_141]
                                  <-Reducer 7 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_157]
                                      PartitionCols:d_date_sk
                                      Select Operator [SEL_156]
                                        Output:["d_date_sk"]
            <-Select Operator [SEL_175] (rows=1 width=102)
                Output:["_col0","_col1"]
                Group By Operator [GBY_174] (rows=1 width=106)
                  Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, 2000
                <-Map 3 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_170]
                    PartitionCols:_col0, _col1, 2000
                    Group By Operator [GBY_168] (rows=1 width=106)
                      Output:["_col0","_col1","_col2"],keys:_col8, _col7, 2000
                      Select Operator [SEL_166] (rows=1 width=126)
                        Output:["_col7","_col8"]
                        Filter Operator [FIL_164] (rows=1 width=126)
                          predicate:((_col0 = _col7) and (_col2 = _col13))
                          Map Join Operator [MAPJOIN_162] (rows=1 width=126)
                            Conds:MAPJOIN_160._col2=RS_157.d_date_sk(Inner),Output:["_col0","_col2","_col7","_col8","_col13"]
                          <- Please refer to the previous Reducer 7 [BROADCAST_EDGE]
                          <-Map Join Operator [MAPJOIN_160] (rows=3 width=118)
                              Conds:RS_143.ss_item_sk=FIL_158.i_item_sk(Inner),Output:["_col0","_col2","_col7","_col8"]
                            <-Map 1 [BROADCAST_EDGE] vectorized
                               Please refer to the previous SHUFFLE [RS_143]
                               Please refer to the previous Filter Operator [FIL_158]

PREHOOK: query: with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs2.year
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
PREHOOK: type: QUERY
PREHOOK: Input: default@x_date_dim
PREHOOK: Input: default@x_item
PREHOOK: Input: default@x_store_sales
PREHOOK: Input: default@x_store_sales@ss_sold_date_sk=1
PREHOOK: Input: default@x_store_sales@ss_sold_date_sk=2
PREHOOK: Input: default@x_store_sales@ss_sold_date_sk=3
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs2.year
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_date_dim
POSTHOOK: Input: default@x_item
POSTHOOK: Input: default@x_store_sales
POSTHOOK: Input: default@x_store_sales@ss_sold_date_sk=1
POSTHOOK: Input: default@x_store_sales@ss_sold_date_sk=2
POSTHOOK: Input: default@x_store_sales@ss_sold_date_sk=3
POSTHOOK: Output: hdfs://### HDFS PATH ###
solid steel	2000	2001
