PREHOOK: query: drop table if exists x_date_dim
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x_date_dim
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x_item
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x_item
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x_store_sales
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x_store_sales
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table x_date_dim (d_date_sk bigint, d_year int)
stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x_date_dim
POSTHOOK: query: create table x_date_dim (d_date_sk bigint, d_year int)
stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x_date_dim
PREHOOK: query: create table x_item (i_item_sk bigint, i_color string, i_product_name string, i_current_price double)
stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x_item
POSTHOOK: query: create table x_item (i_item_sk bigint, i_color string, i_product_name string, i_current_price double)
stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x_item
PREHOOK: query: create table x_store_sales (ss_item_sk bigint, dummy1 string, dummy2 string, dummy3 string, dummy4 string, dummy5 string)
partitioned by (ss_sold_date_sk bigint) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x_store_sales
POSTHOOK: query: create table x_store_sales (ss_item_sk bigint, dummy1 string, dummy2 string, dummy3 string, dummy4 string, dummy5 string)
partitioned by (ss_sold_date_sk bigint) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x_store_sales
PREHOOK: query: insert into table x_date_dim (d_date_sk, d_year)
values (1, 1999), (2, 2000), (3, 2001)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x_date_dim
POSTHOOK: query: insert into table x_date_dim (d_date_sk, d_year)
values (1, 1999), (2, 2000), (3, 2001)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x_date_dim
PREHOOK: query: insert into table x_item (i_item_sk, i_color, i_product_name, i_current_price)
values
(1, 'white', 'snow', '8.9'),
(2, 'steel', 'steel', '8.9'),
(3, 'dim', 'cloud', '8.9')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x_item
POSTHOOK: query: insert into table x_item (i_item_sk, i_color, i_product_name, i_current_price)
values
(1, 'white', 'snow', '8.9'),
(2, 'steel', 'steel', '8.9'),
(3, 'dim', 'cloud', '8.9')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x_item
PREHOOK: query: insert into table x_store_sales (ss_item_sk, dummy1, dummy2, dummy3, dummy4, dummy5, ss_sold_date_sk)
values
(1, 1234567890, 1234567890, 1234567890, 1234567890, 1234567890, 1),
(2, 1234567890, 1234567890, 1234567890, 1234567890, 1234567890, 2),
(2, 1234567890, 1234567890, 1234567890, 1234567890, 1234567890, 3)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@x_store_sales
POSTHOOK: query: insert into table x_store_sales (ss_item_sk, dummy1, dummy2, dummy3, dummy4, dummy5, ss_sold_date_sk)
values
(1, 1234567890, 1234567890, 1234567890, 1234567890, 1234567890, 1),
(2, 1234567890, 1234567890, 1234567890, 1234567890, 1234567890, 2),
(2, 1234567890, 1234567890, 1234567890, 1234567890, 1234567890, 3)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@x_store_sales
PREHOOK: query: explain
with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
PREHOOK: type: QUERY
PREHOOK: Input: default@x_date_dim
PREHOOK: Input: default@x_item
PREHOOK: Input: default@x_store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_date_dim
POSTHOOK: Input: default@x_item
POSTHOOK: Input: default@x_store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE), Map 5 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 4 <- Map 2 (SIMPLE_EDGE), Reducer 3 (BROADCAST_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_168]
        Select Operator [SEL_167] (rows=1 width=121)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_166] (rows=1 width=161)
            predicate:(_col1 = _col10)
            Map Join Operator [MAPJOIN_165] (rows=1 width=161)
              Conds:RS_162._col1=SEL_164._col1(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col10","_col12","_col15","_col16","_col17"]
            <-Reducer 3 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_162]
                PartitionCols:_col1
                Select Operator [SEL_161] (rows=1 width=121)
                  Output:["_col0","_col1","_col3","_col4","_col5"]
                  Group By Operator [GBY_160] (rows=1 width=149)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)"],keys:KEY._col0, KEY._col1, 2000
                  <-Map 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_16]
                      PartitionCols:_col0, _col1, 2000
                      Group By Operator [GBY_15] (rows=1 width=149)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count()","sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col9, _col7, 2000
                        Select Operator [SEL_14] (rows=1 width=591)
                          Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9"]
                          Filter Operator [FIL_63] (rows=1 width=591)
                            predicate:((_col0 = _col7) and (_col6 = _col11))
                            Map Join Operator [MAPJOIN_128] (rows=1 width=591)
                              Conds:MAPJOIN_127._col6=RS_151.d_date_sk(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col11"]
                            <-Reducer 6 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_151]
                                PartitionCols:d_date_sk
                                Select Operator [SEL_150]
                                  Output:["d_date_sk"]
                                <-Map 5 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_144]
                                    PartitionCols:d_date_sk
                                    Filter Operator [FIL_141] (rows=1 width=12)
                                      predicate:(d_date_sk is not null and (d_year = 2000))
                                      TableScan [TS_21] (rows=3 width=12)
                                        default@x_date_dim,x_date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                            <-Map Join Operator [MAPJOIN_127] (rows=3 width=583)
                                Conds:RS_139.ss_item_sk=FIL_65.i_item_sk(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9"]
                              <-Map 1 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_139]
                                  PartitionCols:ss_item_sk
                                  Filter Operator [FIL_138] (rows=3 width=486)
                                    predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=3 width=486)
                                      default@x_store_sales,x_store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","dummy1","dummy2","dummy3","dummy4","dummy5","ss_sold_date_sk"]
                              <-Filter Operator [FIL_65] (rows=3 width=193)
                                  predicate:(i_item_sk is not null and (i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 5 AND 10)
                                  TableScan [TS_1] (rows=3 width=193)
                                    default@x_item,x_item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_color","i_product_name","i_current_price"]
                                  <-Map 5 [BROADCAST_EDGE] vectorized
                                    SHUFFLE [RS_142]
                                      PartitionCols:d_date_sk
                                      Filter Operator [FIL_140] (rows=1 width=12)
                                        predicate:(d_date_sk is not null and (d_year = 2001))
                                         Please refer to the previous TableScan [TS_21]
            <-Select Operator [SEL_164] (rows=1 width=40)
                Output:["_col1","_col3","_col6","_col7","_col8"]
                Group By Operator [GBY_163] (rows=1 width=149)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)"],keys:KEY._col0, KEY._col1, 2001
                <-Map 2 [SIMPLE_EDGE]
                  SHUFFLE [RS_35]
                    PartitionCols:_col0, _col1, 2001
                    Group By Operator [GBY_34] (rows=1 width=149)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count()","sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col9, _col7, 2001
                      Select Operator [SEL_33] (rows=1 width=591)
                        Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9"]
                        Filter Operator [FIL_67] (rows=1 width=591)
                          predicate:((_col0 = _col7) and (_col6 = _col11))
                          Map Join Operator [MAPJOIN_130] (rows=1 width=591)
                            Conds:MAPJOIN_127._col6=RS_142.d_date_sk(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col11"]
                          <-Map 5 [BROADCAST_EDGE] vectorized
                             Please refer to the previous SHUFFLE [RS_142]
                             Please refer to the previous Map Join Operator [MAPJOIN_127]

PREHOOK: query: with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
PREHOOK: type: QUERY
PREHOOK: Input: default@x_date_dim
PREHOOK: Input: default@x_item
PREHOOK: Input: default@x_store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_date_dim
POSTHOOK: Input: default@x_item
POSTHOOK: Input: default@x_store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
steel	2000	1	2001	1	6.17283945E9
PREHOOK: query: explain
with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
PREHOOK: type: QUERY
PREHOOK: Input: default@x_date_dim
PREHOOK: Input: default@x_item
PREHOOK: Input: default@x_store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_date_dim
POSTHOOK: Input: default@x_item
POSTHOOK: Input: default@x_store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE), Map 5 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 4 <- Map 2 (SIMPLE_EDGE), Reducer 3 (BROADCAST_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_172]
        Select Operator [SEL_171] (rows=1 width=121)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_170] (rows=1 width=161)
            predicate:(_col1 = _col10)
            Map Join Operator [MAPJOIN_169] (rows=1 width=161)
              Conds:RS_166._col1=SEL_168._col1(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col10","_col12","_col15","_col16","_col17"]
            <-Reducer 3 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_166]
                PartitionCols:_col1
                Select Operator [SEL_165] (rows=1 width=121)
                  Output:["_col0","_col1","_col3","_col4","_col5"]
                  Group By Operator [GBY_164] (rows=1 width=149)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)"],keys:KEY._col0, KEY._col1, 2000
                  <-Map 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_16]
                      PartitionCols:_col0, _col1, 2000
                      Group By Operator [GBY_15] (rows=1 width=149)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count()","sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col9, _col7, 2000
                        Select Operator [SEL_14] (rows=1 width=591)
                          Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9"]
                          Filter Operator [FIL_63] (rows=1 width=591)
                            predicate:((_col0 = _col7) and (_col6 = _col11))
                            Map Join Operator [MAPJOIN_128] (rows=1 width=591)
                              Conds:MAPJOIN_127._col6=RS_154.d_date_sk(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col11"]
                            <-Reducer 7 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_154]
                                PartitionCols:d_date_sk
                                Select Operator [SEL_153]
                                  Output:["d_date_sk"]
                                <-Map 6 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_147]
                                    PartitionCols:d_date_sk
                                    Filter Operator [FIL_144] (rows=1 width=12)
                                      predicate:(d_date_sk is not null and (d_year = 2000))
                                      TableScan [TS_21] (rows=3 width=12)
                                        default@x_date_dim,x_date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                            <-Map Join Operator [MAPJOIN_127] (rows=3 width=583)
                                Conds:RS_140.ss_item_sk=FIL_65.i_item_sk(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9"]
                              <-Map 1 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_140]
                                  PartitionCols:ss_item_sk
                                  Filter Operator [FIL_139] (rows=3 width=486)
                                    predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=3 width=486)
                                      default@x_store_sales,x_store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","dummy1","dummy2","dummy3","dummy4","dummy5","ss_sold_date_sk"]
                              <-Filter Operator [FIL_65] (rows=3 width=193)
                                  predicate:(i_item_sk is not null and (i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 5 AND 10)
                                  TableScan [TS_1] (rows=3 width=193)
                                    default@x_item,x_item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_color","i_product_name","i_current_price"]
                                  <-Map 6 [BROADCAST_EDGE] vectorized
                                    SHUFFLE [RS_145]
                                      PartitionCols:d_date_sk
                                      Filter Operator [FIL_143] (rows=1 width=12)
                                        predicate:(d_date_sk is not null and (d_year = 2001))
                                         Please refer to the previous TableScan [TS_21]
                                  <-Map 5 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_142]
                                      PartitionCols:ss_item_sk
                                      Filter Operator [FIL_141] (rows=3 width=486)
                                        predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                        TableScan [TS_19] (rows=3 width=486)
                                          default@x_store_sales,x_store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","dummy1","dummy2","dummy3","dummy4","dummy5","ss_sold_date_sk"]
            <-Select Operator [SEL_168] (rows=1 width=40)
                Output:["_col1","_col3","_col6","_col7","_col8"]
                Group By Operator [GBY_167] (rows=1 width=149)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)"],keys:KEY._col0, KEY._col1, 2001
                <-Map 2 [SIMPLE_EDGE]
                  SHUFFLE [RS_35]
                    PartitionCols:_col0, _col1, 2001
                    Group By Operator [GBY_34] (rows=1 width=149)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["count()","sum(_col1)","sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col9, _col7, 2001
                      Select Operator [SEL_33] (rows=1 width=591)
                        Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col9"]
                        Filter Operator [FIL_67] (rows=1 width=591)
                          predicate:((_col0 = _col7) and (_col6 = _col11))
                          Map Join Operator [MAPJOIN_130] (rows=1 width=591)
                            Conds:MAPJOIN_129._col6=RS_145.d_date_sk(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col11"]
                          <-Map 6 [BROADCAST_EDGE] vectorized
                             Please refer to the previous SHUFFLE [RS_145]
                          <-Map Join Operator [MAPJOIN_129] (rows=3 width=583)
                              Conds:RS_142.ss_item_sk=FIL_65.i_item_sk(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9"]
                            <- Please refer to the previous Map 5 [BROADCAST_EDGE]
                               Please refer to the previous Filter Operator [FIL_65]

PREHOOK: query: with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
PREHOOK: type: QUERY
PREHOOK: Input: default@x_date_dim
PREHOOK: Input: default@x_item
PREHOOK: Input: default@x_store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: with base as (
  select
    i_product_name product_name, i_item_sk item_sk, d_year year, count(*) cnt,
    sum(dummy1) s1, sum(dummy2) s2, sum(dummy3) s3, sum(dummy4) s4, sum(dummy5) s5
  from x_store_sales, x_item, x_date_dim
  where
    ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and
    i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
    i_current_price between 5 and 10
  group by i_product_name, i_item_sk, d_year
)
select cs1.product_name, cs1.year, cs1.cnt, cs2.year, cs2.cnt, cs1.s1 + cs1.s2 + cs2.s3 + cs2.s4 + cs2.s5
from base cs1, base cs2
where
  cs1.item_sk = cs2.item_sk and
  cs1.year = 2000 and
  cs2.year = 2001
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x_date_dim
POSTHOOK: Input: default@x_item
POSTHOOK: Input: default@x_store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
steel	2000	1	2001	1	6.17283945E9
