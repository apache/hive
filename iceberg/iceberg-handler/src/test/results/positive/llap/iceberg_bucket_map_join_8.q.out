PREHOOK: query: CREATE TABLE srcbucket_big(key int, value string, id int)
PARTITIONED BY SPEC(bucket(4, key)) STORED BY ICEBERG
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_big
POSTHOOK: query: CREATE TABLE srcbucket_big(key int, value string, id int)
PARTITIONED BY SPEC(bucket(4, key)) STORED BY ICEBERG
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_big
PREHOOK: query: INSERT INTO srcbucket_big VALUES
(101, 'val_101', 1),
(null, 'val_102', 2),
(103, 'val_103', 3),
(104, null, 4),
(105, 'val_105', 5),
(null, null, 6)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@srcbucket_big
POSTHOOK: query: INSERT INTO srcbucket_big VALUES
(101, 'val_101', 1),
(null, 'val_102', 2),
(103, 'val_103', 3),
(104, null, 4),
(105, 'val_105', 5),
(null, null, 6)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@srcbucket_big
PREHOOK: query: CREATE TABLE src_small(key int, value string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@src_small
POSTHOOK: query: CREATE TABLE src_small(key int, value string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src_small
PREHOOK: query: INSERT INTO src_small VALUES
(101, 'val_101'),
(null, 'val_102'),
(103, 'val_103'),
(104, null),
(105, 'val_105'),
(null, null)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@src_small
POSTHOOK: query: INSERT INTO src_small VALUES
(101, 'val_101'),
(null, 'val_102'),
(103, 'val_103'),
(104, null),
(105, 'val_105'),
(null, null)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@src_small
POSTHOOK: Lineage: src_small.key SCRIPT []
POSTHOOK: Lineage: src_small.value SCRIPT []
PREHOOK: query: SELECT * FROM srcbucket_big ORDER BY id
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM srcbucket_big ORDER BY id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
101	val_101	1
NULL	val_102	2
103	val_103	3
104	NULL	4
105	val_105	5
NULL	NULL	6
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.key = b.key
ORDER BY a.id
PREHOOK: type: QUERY
PREHOOK: Input: default@src_small
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.key = b.key
ORDER BY a.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_small
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (CUSTOM_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_37]
        Select Operator [SEL_36] (rows=4 width=190)
          Output:["_col0","_col1","_col2","_col3","_col4"]
        <-Map 1 [SIMPLE_EDGE] vectorized, llap
          SHUFFLE [RS_35]
            Map Join Operator [MAPJOIN_34] (rows=4 width=190)
              BucketMapJoin:true,Conds:SEL_33._col0=RS_31._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Map 3 [CUSTOM_EDGE] vectorized, llap
              MULTICAST [RS_31]
                PartitionCols:_col0
                Select Operator [SEL_30] (rows=4 width=93)
                  Output:["_col0","_col1"]
                  Filter Operator [FIL_29] (rows=4 width=93)
                    predicate:key is not null
                    TableScan [TS_3] (rows=6 width=77)
                      default@src_small,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
            <-Select Operator [SEL_33] (rows=4 width=97)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_32] (rows=4 width=97)
                  predicate:key is not null
                  TableScan [TS_0] (rows=6 width=81)
                    default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Grouping Num Buckets:4,Grouping Partition Columns:["key"],Output:["key","value","id"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.key = b.key
ORDER BY a.id
PREHOOK: type: QUERY
PREHOOK: Input: default@src_small
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.key = b.key
ORDER BY a.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_small
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
101	val_101	1	101	val_101
103	val_103	3	103	val_103
104	NULL	4	104	NULL
105	val_105	5	105	val_105
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.value = b.value
ORDER BY a.id
PREHOOK: type: QUERY
PREHOOK: Input: default@src_small
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.value = b.value
ORDER BY a.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_small
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_37]
        Select Operator [SEL_36] (rows=4 width=190)
          Output:["_col0","_col1","_col2","_col3","_col4"]
        <-Map 1 [SIMPLE_EDGE] vectorized, llap
          SHUFFLE [RS_35]
            Map Join Operator [MAPJOIN_34] (rows=4 width=190)
              Conds:SEL_33._col1=RS_31._col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Map 3 [BROADCAST_EDGE] vectorized, llap
              BROADCAST [RS_31]
                PartitionCols:_col1
                Select Operator [SEL_30] (rows=4 width=93)
                  Output:["_col0","_col1"]
                  Filter Operator [FIL_29] (rows=4 width=93)
                    predicate:value is not null
                    TableScan [TS_3] (rows=6 width=77)
                      default@src_small,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
            <-Select Operator [SEL_33] (rows=4 width=97)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_32] (rows=4 width=97)
                  predicate:value is not null
                  TableScan [TS_0] (rows=6 width=81)
                    default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value","id"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.value = b.value
ORDER BY a.id
PREHOOK: type: QUERY
PREHOOK: Input: default@src_small
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src_small b ON a.value = b.value
ORDER BY a.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_small
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
101	val_101	1	101	val_101
NULL	val_102	2	NULL	val_102
103	val_103	3	103	val_103
105	val_105	5	105	val_105
