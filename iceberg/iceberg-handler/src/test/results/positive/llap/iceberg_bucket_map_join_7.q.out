PREHOOK: query: CREATE TABLE srcbucket_big(key1 string, key2 string, value string)
PARTITIONED BY SPEC(bucket(4, key1), bucket(2, key2)) STORED BY ICEBERG
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_big
POSTHOOK: query: CREATE TABLE srcbucket_big(key1 string, key2 string, value string)
PARTITIONED BY SPEC(bucket(4, key1), bucket(2, key2)) STORED BY ICEBERG
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_big
PREHOOK: query: INSERT INTO srcbucket_big
SELECT key AS key1, value AS key2, value FROM src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@srcbucket_big
POSTHOOK: query: INSERT INTO srcbucket_big
SELECT key AS key1, value AS key2, value FROM src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@srcbucket_big
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (CUSTOM_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_61]
        Limit [LIM_60] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_59] (rows=791 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_58]
              Top N Key Operator [TNK_57] (rows=791 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_56] (rows=791 width=447)
                  BucketMapJoin:true,Conds:SEL_55._col0, _col1=RS_53._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [CUSTOM_EDGE] vectorized, llap
                  MULTICAST [RS_53]
                    PartitionCols:_col0, _col1
                    Select Operator [SEL_52] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_51] (rows=500 width=178)
                        predicate:(key is not null and value is not null)
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_55] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_54] (rows=500 width=269)
                      predicate:(key1 is not null and key2 is not null)
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Grouping Num Buckets:8,Grouping Partition Columns:["key1","key2"],Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
10	val_10	val_10	10	val_10
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (CUSTOM_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_61]
        Limit [LIM_60] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_59] (rows=791 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_58]
              Top N Key Operator [TNK_57] (rows=791 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_56] (rows=791 width=447)
                  BucketMapJoin:true,Conds:SEL_55._col0, _col1=RS_53._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [CUSTOM_EDGE] vectorized, llap
                  MULTICAST [RS_53]
                    PartitionCols:_col0, _col1
                    Select Operator [SEL_52] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_51] (rows=500 width=178)
                        predicate:((key <> '0') and (key <> '100') and value is not null)
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_55] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_54] (rows=500 width=269)
                      predicate:((key1 <> '0') and (key1 <> '100') and key2 is not null)
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Grouping Num Buckets:8,Grouping Partition Columns:["key1","key2"],Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
10	val_10	val_10	10	val_10
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
105	val_105	val_105	105	val_105
11	val_11	val_11	11	val_11
111	val_111	val_111	111	val_111
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
114	val_114	val_114	114	val_114
116	val_116	val_116	116	val_116
118	val_118	val_118	118	val_118
118	val_118	val_118	118	val_118
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (CUSTOM_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_41]
        Limit [LIM_40] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_39] (rows=791 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_38]
              Top N Key Operator [TNK_37] (rows=791 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_36] (rows=791 width=447)
                  BucketMapJoin:true,Conds:SEL_35._col0=RS_33._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [CUSTOM_EDGE] vectorized, llap
                  MULTICAST [RS_33]
                    PartitionCols:_col0
                    Select Operator [SEL_32] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_31] (rows=500 width=178)
                        predicate:key is not null
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_35] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_34] (rows=500 width=269)
                      predicate:key1 is not null
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Grouping Num Buckets:4,Grouping Partition Columns:["key1"],Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
10	val_10	val_10	10	val_10
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (CUSTOM_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_41]
        Limit [LIM_40] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_39] (rows=791 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_38]
              Top N Key Operator [TNK_37] (rows=791 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_36] (rows=791 width=447)
                  BucketMapJoin:true,Conds:SEL_35._col0=RS_33._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [CUSTOM_EDGE] vectorized, llap
                  MULTICAST [RS_33]
                    PartitionCols:_col0
                    Select Operator [SEL_32] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_31] (rows=500 width=178)
                        predicate:((key <> '0') and (key <> '100'))
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_35] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_34] (rows=500 width=269)
                      predicate:((key1 <> '0') and (key1 <> '100'))
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Grouping Num Buckets:4,Grouping Partition Columns:["key1"],Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key1 NOT IN ('0', '100')
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
10	val_10	val_10	10	val_10
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
105	val_105	val_105	105	val_105
11	val_11	val_11	11	val_11
111	val_111	val_111	111	val_111
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
114	val_114	val_114	114	val_114
116	val_116	val_116	116	val_116
118	val_118	val_118	118	val_118
118	val_118	val_118	118	val_118
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key2 NOT IN ('val_0', 'val_100')
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key2 NOT IN ('val_0', 'val_100')
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (CUSTOM_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_41]
        Limit [LIM_40] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_39] (rows=791 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_38]
              Top N Key Operator [TNK_37] (rows=791 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_36] (rows=791 width=447)
                  BucketMapJoin:true,Conds:SEL_35._col0=RS_33._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [CUSTOM_EDGE] vectorized, llap
                  MULTICAST [RS_33]
                    PartitionCols:_col0
                    Select Operator [SEL_32] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_31] (rows=500 width=178)
                        predicate:key is not null
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_35] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_34] (rows=500 width=269)
                      predicate:((key2 <> 'val_0') and (key2 <> 'val_100') and key1 is not null)
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Grouping Num Buckets:4,Grouping Partition Columns:["key1"],Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key2 NOT IN ('val_0', 'val_100')
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key
WHERE a.key2 NOT IN ('val_0', 'val_100')
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
10	val_10	val_10	10	val_10
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
105	val_105	val_105	105	val_105
11	val_11	val_11	11	val_11
111	val_111	val_111	111	val_111
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
113	val_113	val_113	113	val_113
114	val_114	val_114	114	val_114
116	val_116	val_116	116	val_116
118	val_118	val_118	118	val_118
118	val_118	val_118	118	val_118
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key2 = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key2 = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_41]
        Limit [LIM_40] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_39] (rows=814 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_38]
              Top N Key Operator [TNK_37] (rows=814 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_36] (rows=814 width=447)
                  Conds:SEL_35._col1=RS_33._col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [BROADCAST_EDGE] vectorized, llap
                  BROADCAST [RS_33]
                    PartitionCols:_col1
                    Select Operator [SEL_32] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_31] (rows=500 width=178)
                        predicate:value is not null
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_35] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_34] (rows=500 width=269)
                      predicate:key2 is not null
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key2 = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key2 = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
10	val_10	val_10	10	val_10
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value AND a.value = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value AND a.value = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (CUSTOM_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_66]
        Limit [LIM_65] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_64] (rows=791 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_63]
              Top N Key Operator [TNK_62] (rows=791 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_61] (rows=791 width=447)
                  BucketMapJoin:true,Conds:SEL_60._col0, _col1, _col2=RS_58._col0, _col1, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [CUSTOM_EDGE] vectorized, llap
                  MULTICAST [RS_58]
                    PartitionCols:_col0, _col1
                    Select Operator [SEL_57] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_56] (rows=500 width=178)
                        predicate:(key is not null and value is not null)
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_60] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_59] (rows=500 width=269)
                      predicate:(key1 is not null and key2 is not null and value is not null)
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Grouping Num Buckets:8,Grouping Partition Columns:["key1","key2"],Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value AND a.value = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.key1 = b.key AND a.key2 = b.value AND a.value = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
10	val_10	val_10	10	val_10
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
PREHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.value = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM srcbucket_big a
JOIN src b ON a.value = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 3 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:20
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_41]
        Limit [LIM_40] (rows=20 width=447)
          Number of rows:20
          Select Operator [SEL_39] (rows=814 width=447)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Map 1 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_38]
              Top N Key Operator [TNK_37] (rows=814 width=447)
                keys:_col0,top n:20
                Map Join Operator [MAPJOIN_36] (rows=814 width=447)
                  Conds:SEL_35._col2=RS_33._col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                <-Map 3 [BROADCAST_EDGE] vectorized, llap
                  BROADCAST [RS_33]
                    PartitionCols:_col1
                    Select Operator [SEL_32] (rows=500 width=178)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_31] (rows=500 width=178)
                        predicate:value is not null
                        TableScan [TS_3] (rows=500 width=178)
                          default@src,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                <-Select Operator [SEL_35] (rows=500 width=269)
                    Output:["_col0","_col1","_col2"]
                    Filter Operator [FIL_34] (rows=500 width=269)
                      predicate:value is not null
                      TableScan [TS_0] (rows=500 width=269)
                        default@srcbucket_big,a,Tbl:COMPLETE,Col:COMPLETE,Output:["key1","key2","value"]

PREHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.value = b.value
ORDER BY a.key1
LIMIT 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM srcbucket_big a
JOIN src b ON a.value = b.value
ORDER BY a.key1
LIMIT 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@srcbucket_big
#### A masked pattern was here ####
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
0	val_0	val_0	0	val_0
10	val_10	val_10	10	val_10
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
100	val_100	val_100	100	val_100
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
103	val_103	val_103	103	val_103
104	val_104	val_104	104	val_104
104	val_104	val_104	104	val_104
