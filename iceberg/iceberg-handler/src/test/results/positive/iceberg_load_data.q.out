PREHOOK: query: create external table ice_parquet(
  strcol string,
  intcol integer
) partitioned by (pcol int)
stored by iceberg
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@ice_parquet
POSTHOOK: query: create external table ice_parquet(
  strcol string,
  intcol integer
) partitioned by (pcol int)
stored by iceberg
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@ice_parquet
PREHOOK: query: explain LOAD DATA LOCAL INPATH '../../data/files/parquet_partition' OVERWRITE INTO TABLE ice_parquet
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_parquet__temp_table_for_load_data__
PREHOOK: Output: default@ice_parquet
POSTHOOK: query: explain LOAD DATA LOCAL INPATH '../../data/files/parquet_partition' OVERWRITE INTO TABLE ice_parquet
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_parquet__temp_table_for_load_data__
POSTHOOK: Output: default@ice_parquet
Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.ice_parquet"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_18]
                table:{"name:":"default.ice_parquet"}
                Select Operator [SEL_17]
                  Output:["_col0","_col1","_col2","_col2"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2
                    Select Operator [SEL_12] (rows=77 width=187)
                      Output:["_col0","_col1","_col2"]
                      TableScan [TS_0] (rows=77 width=187)
                        default@ice_parquet__temp_table_for_load_data__,ice_parquet__temp_table_for_load_data__,Tbl:COMPLETE,Col:NONE,Output:["strcol","intcol","pcol"]
              Reducer 3 vectorized
              File Output Operator [FS_21]
                Select Operator [SEL_20] (rows=1 width=752)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_19] (rows=1 width=752)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_16]
                      Group By Operator [GBY_15] (rows=1 width=752)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(strcol))","avg(COALESCE(length(strcol),0))","count(1)","count(strcol)","compute_bit_vector_hll(strcol)","min(intcol)","max(intcol)","count(intcol)","compute_bit_vector_hll(intcol)","min(pcol)","max(pcol)","count(pcol)","compute_bit_vector_hll(pcol)"]
                        Select Operator [SEL_14] (rows=77 width=187)
                          Output:["strcol","intcol","pcol"]
                           Please refer to the previous Select Operator [SEL_12]

PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/parquet_partition' OVERWRITE INTO TABLE ice_parquet
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_parquet__temp_table_for_load_data__
PREHOOK: Output: default@ice_parquet
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/parquet_partition' OVERWRITE INTO TABLE ice_parquet
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_parquet__temp_table_for_load_data__
POSTHOOK: Output: default@ice_parquet
PREHOOK: query: select * from ice_parquet order by intcol
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_parquet
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from ice_parquet order by intcol
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_parquet
POSTHOOK: Output: hdfs://### HDFS PATH ###
a	1	100
b	2	100
c	3	200
d	4	200
e	5	300
f	6	300
PREHOOK: query: CREATE TABLE ice_avro (
  number int,
  first_name string)
stored by iceberg
STORED AS AVRO
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@ice_avro
POSTHOOK: query: CREATE TABLE ice_avro (
  number int,
  first_name string)
stored by iceberg
STORED AS AVRO
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@ice_avro
PREHOOK: query: explain LOAD DATA LOCAL INPATH '../../data/files/doctors.avro' OVERWRITE INTO TABLE ice_avro
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_avro__temp_table_for_load_data__
PREHOOK: Output: default@ice_avro
POSTHOOK: query: explain LOAD DATA LOCAL INPATH '../../data/files/doctors.avro' OVERWRITE INTO TABLE ice_avro
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_avro__temp_table_for_load_data__
POSTHOOK: Output: default@ice_avro
Vertex dependency in root stage
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.ice_avro"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2
              File Output Operator [FS_9]
                Select Operator [SEL_8] (rows=1 width=588)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_7] (rows=1 width=588)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    File Output Operator [FS_2]
                      table:{"name:":"default.ice_avro"}
                      Select Operator [SEL_1] (rows=17 width=188)
                        Output:["_col0","_col1"]
                        TableScan [TS_0] (rows=17 width=188)
                          default@ice_avro__temp_table_for_load_data__,ice_avro__temp_table_for_load_data__,Tbl:COMPLETE,Col:NONE,Output:["number","first_name"]
                    PARTITION_ONLY_SHUFFLE [RS_6]
                      Group By Operator [GBY_5] (rows=1 width=588)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(number)","max(number)","count(1)","count(number)","compute_bit_vector_hll(number)","max(length(first_name))","avg(COALESCE(length(first_name),0))","count(first_name)","compute_bit_vector_hll(first_name)"]
                        Select Operator [SEL_4] (rows=17 width=188)
                          Output:["number","first_name"]
                           Please refer to the previous Select Operator [SEL_1]

PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/doctors.avro' OVERWRITE INTO TABLE ice_avro
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_avro__temp_table_for_load_data__
PREHOOK: Output: default@ice_avro
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/doctors.avro' OVERWRITE INTO TABLE ice_avro
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_avro__temp_table_for_load_data__
POSTHOOK: Output: default@ice_avro
PREHOOK: query: select * from ice_avro order by number
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_avro
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from ice_avro order by number
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_avro
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	William
2	Patrick
3	Jon
4	Tom
5	Peter
6	Colin
7	Sylvester
8	Paul
9	Christopher
10	David
11	Matt
PREHOOK: query: CREATE TABLE ice_orc (
  p_partkey int,
  p_name string,
  p_mfgr string,
  p_brand string,
  p_type string,
  p_size int,
  p_container string,
  p_retailprice double,
  p_comment string
)
stored by iceberg
STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@ice_orc
POSTHOOK: query: CREATE TABLE ice_orc (
  p_partkey int,
  p_name string,
  p_mfgr string,
  p_brand string,
  p_type string,
  p_size int,
  p_container string,
  p_retailprice double,
  p_comment string
)
stored by iceberg
STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@ice_orc
PREHOOK: query: explain LOAD DATA LOCAL INPATH '../../data/files/part.orc' OVERWRITE INTO TABLE ice_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_orc__temp_table_for_load_data__
PREHOOK: Output: default@ice_orc
POSTHOOK: query: explain LOAD DATA LOCAL INPATH '../../data/files/part.orc' OVERWRITE INTO TABLE ice_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_orc__temp_table_for_load_data__
POSTHOOK: Output: default@ice_orc
Vertex dependency in root stage
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.ice_orc"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_17]
                Select Operator [SEL_16] (rows=1 width=3008)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36","_col37","_col38","_col39","_col40","_col41","_col42","_col43","_col44","_col45","_col46","_col47","_col48","_col49","_col50","_col51","_col52","_col53"]
                  Group By Operator [GBY_15] (rows=1 width=3008)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","max(VALUE._col9)","avg(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)","max(VALUE._col13)","avg(VALUE._col14)","count(VALUE._col15)","compute_bit_vector_hll(VALUE._col16)","max(VALUE._col17)","avg(VALUE._col18)","count(VALUE._col19)","compute_bit_vector_hll(VALUE._col20)","min(VALUE._col21)","max(VALUE._col22)","count(VALUE._col23)","compute_bit_vector_hll(VALUE._col24)","max(VALUE._col25)","avg(VALUE._col26)","count(VALUE._col27)","compute_bit_vector_hll(VALUE._col28)","min(VALUE._col29)","max(VALUE._col30)","count(VALUE._col31)","compute_bit_vector_hll(VALUE._col32)","max(VALUE._col33)","avg(VALUE._col34)","count(VALUE._col35)","compute_bit_vector_hll(VALUE._col36)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    File Output Operator [FS_11]
                      table:{"name:":"default.ice_orc"}
                      Select Operator [SEL_10] (rows=33 width=1120)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                        TableScan [TS_0] (rows=33 width=1120)
                          default@ice_orc__temp_table_for_load_data__,ice_orc__temp_table_for_load_data__,Tbl:COMPLETE,Col:NONE,Output:["p_partkey","p_name","p_mfgr","p_brand","p_type","p_size","p_container","p_retailprice","p_comment"]
                    PARTITION_ONLY_SHUFFLE [RS_14]
                      Group By Operator [GBY_13] (rows=1 width=3008)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20","_col21","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col31","_col32","_col33","_col34","_col35","_col36"],aggregations:["min(p_partkey)","max(p_partkey)","count(1)","count(p_partkey)","compute_bit_vector_hll(p_partkey)","max(length(p_name))","avg(COALESCE(length(p_name),0))","count(p_name)","compute_bit_vector_hll(p_name)","max(length(p_mfgr))","avg(COALESCE(length(p_mfgr),0))","count(p_mfgr)","compute_bit_vector_hll(p_mfgr)","max(length(p_brand))","avg(COALESCE(length(p_brand),0))","count(p_brand)","compute_bit_vector_hll(p_brand)","max(length(p_type))","avg(COALESCE(length(p_type),0))","count(p_type)","compute_bit_vector_hll(p_type)","min(p_size)","max(p_size)","count(p_size)","compute_bit_vector_hll(p_size)","max(length(p_container))","avg(COALESCE(length(p_container),0))","count(p_container)","compute_bit_vector_hll(p_container)","min(p_retailprice)","max(p_retailprice)","count(p_retailprice)","compute_bit_vector_hll(p_retailprice)","max(length(p_comment))","avg(COALESCE(length(p_comment),0))","count(p_comment)","compute_bit_vector_hll(p_comment)"]
                        Select Operator [SEL_12] (rows=33 width=1120)
                          Output:["p_partkey","p_name","p_mfgr","p_brand","p_type","p_size","p_container","p_retailprice","p_comment"]
                           Please refer to the previous Select Operator [SEL_10]

PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/part.orc' INTO TABLE ice_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_orc__temp_table_for_load_data__
PREHOOK: Output: default@ice_orc
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/part.orc' INTO TABLE ice_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_orc__temp_table_for_load_data__
POSTHOOK: Output: default@ice_orc
PREHOOK: query: select * from ice_orc order by p_partkey
PREHOOK: type: QUERY
PREHOOK: Input: default@ice_orc
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from ice_orc order by p_partkey
POSTHOOK: type: QUERY
POSTHOOK: Input: default@ice_orc
POSTHOOK: Output: hdfs://### HDFS PATH ###
15103	almond aquamarine dodger light gainsboro	Manufacturer#5	Brand#53	ECONOMY BURNISHED STEEL	46	LG PACK	1018.1	packages hinder carefu
17273	almond antique forest lavender goldenrod	Manufacturer#3	Brand#35	PROMO ANODIZED TIN	14	JUMBO CASE	1190.27	along the
17927	almond aquamarine yellow dodger mint	Manufacturer#4	Brand#41	ECONOMY BRUSHED COPPER	7	SM PKG	1844.92	ites. eve
33357	almond azure aquamarine papaya violet	Manufacturer#4	Brand#41	STANDARD ANODIZED TIN	12	WRAP CASE	1290.35	reful
40982	almond antique misty red olive	Manufacturer#3	Brand#32	ECONOMY PLATED COPPER	1	LG PKG	1922.98	c foxes can s
42669	almond antique medium spring khaki	Manufacturer#5	Brand#51	STANDARD BURNISHED TIN	6	MED CAN	1611.66	sits haggl
45261	almond aquamarine floral ivory bisque	Manufacturer#4	Brand#42	SMALL PLATED STEEL	27	WRAP CASE	1206.26	careful
48427	almond antique violet mint lemon	Manufacturer#4	Brand#42	PROMO POLISHED STEEL	39	SM CASE	1375.42	hely ironic i
49671	almond antique gainsboro frosted violet	Manufacturer#4	Brand#41	SMALL BRUSHED BRASS	10	SM BOX	1620.67	ccounts run quick
65667	almond aquamarine pink moccasin thistle	Manufacturer#1	Brand#12	LARGE BURNISHED STEEL	42	JUMBO CASE	1632.66	e across the expr
78486	almond azure blanched chiffon midnight	Manufacturer#5	Brand#52	LARGE BRUSHED BRASS	23	MED BAG	1464.48	hely blith
85768	almond antique chartreuse lavender yellow	Manufacturer#1	Brand#12	LARGE BRUSHED STEEL	34	SM BAG	1753.76	refull
86428	almond aquamarine burnished black steel	Manufacturer#1	Brand#12	STANDARD ANODIZED STEEL	28	WRAP BAG	1414.42	arefully 
90681	almond antique chartreuse khaki white	Manufacturer#3	Brand#31	MEDIUM BURNISHED TIN	17	SM CASE	1671.68	are slyly after the sl
105685	almond antique violet chocolate turquoise	Manufacturer#2	Brand#22	MEDIUM ANODIZED COPPER	14	MED CAN	1690.68	ly pending requ
110592	almond antique salmon chartreuse burlywood	Manufacturer#1	Brand#15	PROMO BURNISHED NICKEL	6	JUMBO PKG	1602.59	 to the furiously
112398	almond antique metallic orange dim	Manufacturer#3	Brand#32	MEDIUM BURNISHED BRASS	19	JUMBO JAR	1410.39	ole car
121152	almond antique burnished rose metallic	Manufacturer#1	Brand#14	PROMO PLATED TIN	2	JUMBO BOX	1173.15	e pinto beans h
121152	almond antique burnished rose metallic	Manufacturer#1	Brand#14	PROMO PLATED TIN	2	JUMBO BOX	1173.15	e pinto beans h
132666	almond aquamarine rose maroon antique	Manufacturer#2	Brand#24	SMALL POLISHED NICKEL	25	MED BOX	1698.66	even 
144293	almond antique olive coral navajo	Manufacturer#3	Brand#34	STANDARD POLISHED STEEL	45	JUMBO CAN	1337.29	ag furiously about 
146985	almond aquamarine midnight light salmon	Manufacturer#2	Brand#23	MEDIUM BURNISHED COPPER	2	SM CASE	2031.98	s cajole caref
155733	almond antique sky peru orange	Manufacturer#5	Brand#53	SMALL PLATED BRASS	2	WRAP DRUM	1788.73	furiously. bra
191709	almond antique violet turquoise frosted	Manufacturer#2	Brand#22	ECONOMY POLISHED STEEL	40	MED BOX	1800.7	 haggle
192697	almond antique blue firebrick mint	Manufacturer#5	Brand#52	MEDIUM BURNISHED TIN	31	LG DRUM	1789.69	ickly ir
195606	almond aquamarine sandy cyan gainsboro	Manufacturer#2	Brand#25	STANDARD PLATED TIN	18	SM PKG	1701.6	ic de
