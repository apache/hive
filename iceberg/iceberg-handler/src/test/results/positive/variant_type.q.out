PREHOOK: query: CREATE EXTERNAL TABLE variant_test_basic (
    id INT,
    data VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@variant_test_basic
POSTHOOK: query: CREATE EXTERNAL TABLE variant_test_basic (
    id INT,
    data VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@variant_test_basic
PREHOOK: query: INSERT INTO variant_test_basic VALUES
(1, parse_json('null')),
(2, parse_json('true')),
(3, parse_json('false')),
(4, parse_json('42')),
(5, parse_json('3.14')),
(6, parse_json('"hello world"'))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@variant_test_basic
POSTHOOK: query: INSERT INTO variant_test_basic VALUES
(1, parse_json('null')),
(2, parse_json('true')),
(3, parse_json('false')),
(4, parse_json('42')),
(5, parse_json('3.14')),
(6, parse_json('"hello world"'))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@variant_test_basic
PREHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_basic ORDER BY id
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_basic ORDER BY id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	null
2	true
3	false
4	42
5	3.14
6	"hello world"
PREHOOK: query: CREATE EXTERNAL TABLE variant_test_complex (
    id INT,
    data VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@variant_test_complex
POSTHOOK: query: CREATE EXTERNAL TABLE variant_test_complex (
    id INT,
    data VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@variant_test_complex
PREHOOK: query: INSERT INTO variant_test_complex VALUES
(1, parse_json('{"name": "John", "age": 30, "active": true}')),
(2, parse_json('{"nested": {"level1": {"level2": "deep"}}, "array": [1, 2, 3]}')),
(3, parse_json('["apple", "banana", "cherry"]')),
(4, parse_json('{"mixed": [1, "text", true, null, {"key": "value"}]}')),
(5, parse_json('{"empty_obj": {}, "empty_array": [], "null_val": null}'))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@variant_test_complex
POSTHOOK: query: INSERT INTO variant_test_complex VALUES
(1, parse_json('{"name": "John", "age": 30, "active": true}')),
(2, parse_json('{"nested": {"level1": {"level2": "deep"}}, "array": [1, 2, 3]}')),
(3, parse_json('["apple", "banana", "cherry"]')),
(4, parse_json('{"mixed": [1, "text", true, null, {"key": "value"}]}')),
(5, parse_json('{"empty_obj": {}, "empty_array": [], "null_val": null}'))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@variant_test_complex
PREHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_complex ORDER BY id
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_complex ORDER BY id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	{"active":true,"age":30,"name":"John"}
2	{"array":[1,2,3],"nested":{"level1":{"level2":"deep"}}}
3	["apple","banana","cherry"]
4	{"mixed":[1,"text",true,null,{"key":"value"}]}
5	{"empty_array":[],"empty_obj":{},"null_val":null}
PREHOOK: query: CREATE EXTERNAL TABLE variant_test_edge_cases (
    id INT,
    data VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@variant_test_edge_cases
POSTHOOK: query: CREATE EXTERNAL TABLE variant_test_edge_cases (
    id INT,
    data VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@variant_test_edge_cases
PREHOOK: query: INSERT INTO variant_test_edge_cases VALUES
(1, parse_json('{"very_long_string": "This is a very long string that should test the string encoding limits and ensure proper handling of large text content in variant types"}')),
(2, parse_json('{"large_number": 123456789012345}')),
(3, parse_json('{"decimal_value": 123.456789}')),
(4, parse_json('{"special_chars": "Hello\\tWorld\\nNew Line! \\"Quoted\\""}')),
(5, parse_json('{"unicode": "Hello ‰∏ñÁïå üåç"}')),
(6, parse_json('{"deep_nesting": {"level1": {"level2": {"level3": {"level4": "deep"}}}}}'))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@variant_test_edge_cases
POSTHOOK: query: INSERT INTO variant_test_edge_cases VALUES
(1, parse_json('{"very_long_string": "This is a very long string that should test the string encoding limits and ensure proper handling of large text content in variant types"}')),
(2, parse_json('{"large_number": 123456789012345}')),
(3, parse_json('{"decimal_value": 123.456789}')),
(4, parse_json('{"special_chars": "Hello\\tWorld\\nNew Line! \\"Quoted\\""}')),
(5, parse_json('{"unicode": "Hello ‰∏ñÁïå üåç"}')),
(6, parse_json('{"deep_nesting": {"level1": {"level2": {"level3": {"level4": "deep"}}}}}'))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@variant_test_edge_cases
PREHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_edge_cases ORDER BY id
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_edge_cases
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_edge_cases ORDER BY id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_edge_cases
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	{"very_long_string":"This is a very long string that should test the string encoding limits and ensure proper handling of large text content in variant types"}
2	{"large_number":123456789012345}
3	{"decimal_value":123.456789}
4	{"special_chars":"Hello\tWorld\nNew Line! \"Quoted\""}
5	{"unicode":"Hello ‰∏ñÁïå üåç"}
6	{"deep_nesting":{"level1":{"level2":{"level3":{"level4":"deep"}}}}}
PREHOOK: query: CREATE TABLE variant_test_operations (
    id INT,
    metadata VARIANT,
    payload VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@variant_test_operations
POSTHOOK: query: CREATE TABLE variant_test_operations (
    id INT,
    metadata VARIANT,
    payload VARIANT
) STORED BY ICEBERG tblproperties('format-version'='3')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@variant_test_operations
PREHOOK: query: INSERT INTO variant_test_operations VALUES
(1,
 parse_json('{"timestamp": "2023-01-01", "version": "1.0"}'),
 parse_json('{"user": "john_doe", "actions": ["login", "view", "logout"]}')
),
(2,
 parse_json('{"timestamp": "2023-01-02", "version": "1.1"}'),
 parse_json('{"user": "jane_smith", "actions": ["login", "edit", "save", "logout"]}')
)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@variant_test_operations
POSTHOOK: query: INSERT INTO variant_test_operations VALUES
(1,
 parse_json('{"timestamp": "2023-01-01", "version": "1.0"}'),
 parse_json('{"user": "john_doe", "actions": ["login", "view", "logout"]}')
),
(2,
 parse_json('{"timestamp": "2023-01-02", "version": "1.1"}'),
 parse_json('{"user": "jane_smith", "actions": ["login", "edit", "save", "logout"]}')
)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@variant_test_operations
PREHOOK: query: SELECT
    id,
    to_json(metadata) as metadata_json,
    to_json(payload) as payload_json
FROM variant_test_operations
ORDER BY id
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_operations
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT
    id,
    to_json(metadata) as metadata_json,
    to_json(payload) as payload_json
FROM variant_test_operations
ORDER BY id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_operations
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	{"timestamp":"2023-01-01","version":"1.0"}	{"actions":["login","view","logout"],"user":"john_doe"}
2	{"timestamp":"2023-01-02","version":"1.1"}	{"actions":["login","edit","save","logout"],"user":"jane_smith"}
PREHOOK: query: SELECT variant_get(data, '$') as result FROM variant_test_basic WHERE id = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$') as result FROM variant_test_basic WHERE id = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: hdfs://### HDFS PATH ###
NULL
PREHOOK: query: SELECT variant_get(data, '$') as result FROM variant_test_basic WHERE id = 2
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$') as result FROM variant_test_basic WHERE id = 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: hdfs://### HDFS PATH ###
true
PREHOOK: query: SELECT variant_get(data, '$') as result FROM variant_test_basic WHERE id = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$') as result FROM variant_test_basic WHERE id = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: hdfs://### HDFS PATH ###
false
PREHOOK: query: SELECT variant_get(data, '$.name') as name FROM variant_test_complex WHERE id = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.name') as name FROM variant_test_complex WHERE id = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
John
PREHOOK: query: SELECT variant_get(data, '$.age') as age FROM variant_test_complex WHERE id = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.age') as age FROM variant_test_complex WHERE id = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
30
PREHOOK: query: SELECT variant_get(data, '$.active') as active FROM variant_test_complex WHERE id = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.active') as active FROM variant_test_complex WHERE id = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
true
PREHOOK: query: SELECT variant_get(data, '$.nested.level1.level2') as deep_value FROM variant_test_complex WHERE id = 2
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.nested.level1.level2') as deep_value FROM variant_test_complex WHERE id = 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
deep
PREHOOK: query: SELECT variant_get(data, '$[0]') as first_element FROM variant_test_complex WHERE id = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$[0]') as first_element FROM variant_test_complex WHERE id = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
apple
PREHOOK: query: SELECT variant_get(data, '$[1]') as second_element FROM variant_test_complex WHERE id = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$[1]') as second_element FROM variant_test_complex WHERE id = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
banana
PREHOOK: query: SELECT variant_get(data, '$[2]') as third_element FROM variant_test_complex WHERE id = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$[2]') as third_element FROM variant_test_complex WHERE id = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
cherry
PREHOOK: query: SELECT variant_get(data, '$.mixed[0]') as first_mixed FROM variant_test_complex WHERE id = 4
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.mixed[0]') as first_mixed FROM variant_test_complex WHERE id = 4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
1
PREHOOK: query: SELECT variant_get(data, '$.mixed[1]') as second_mixed FROM variant_test_complex WHERE id = 4
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.mixed[1]') as second_mixed FROM variant_test_complex WHERE id = 4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
text
PREHOOK: query: SELECT variant_get(data, '$.mixed[2]') as third_mixed FROM variant_test_complex WHERE id = 4
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.mixed[2]') as third_mixed FROM variant_test_complex WHERE id = 4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
true
PREHOOK: query: SELECT variant_get(data, '$.mixed[3]') as fourth_mixed FROM variant_test_complex WHERE id = 4
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.mixed[3]') as fourth_mixed FROM variant_test_complex WHERE id = 4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
NULL
PREHOOK: query: SELECT variant_get(data, '$.mixed[4].key') as nested_key FROM variant_test_complex WHERE id = 4
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.mixed[4].key') as nested_key FROM variant_test_complex WHERE id = 4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
value
PREHOOK: query: SELECT variant_get(data, '$.empty_obj') as empty_obj FROM variant_test_complex WHERE id = 5
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.empty_obj') as empty_obj FROM variant_test_complex WHERE id = 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
{}
PREHOOK: query: SELECT variant_get(data, '$.empty_array') as empty_array FROM variant_test_complex WHERE id = 5
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.empty_array') as empty_array FROM variant_test_complex WHERE id = 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
[]
PREHOOK: query: SELECT variant_get(data, '$.null_val') as null_val FROM variant_test_complex WHERE id = 5
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.null_val') as null_val FROM variant_test_complex WHERE id = 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
NULL
PREHOOK: query: SELECT variant_get(data, '$.very_long_string') as long_string FROM variant_test_edge_cases WHERE id = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_edge_cases
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.very_long_string') as long_string FROM variant_test_edge_cases WHERE id = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_edge_cases
POSTHOOK: Output: hdfs://### HDFS PATH ###
This is a very long string that should test the string encoding limits and ensure proper handling of large text content in variant types
PREHOOK: query: SELECT variant_get(data, '$.large_number') as large_num FROM variant_test_edge_cases WHERE id = 2
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_edge_cases
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.large_number') as large_num FROM variant_test_edge_cases WHERE id = 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_edge_cases
POSTHOOK: Output: hdfs://### HDFS PATH ###
123456789012345
PREHOOK: query: SELECT variant_get(data, '$.decimal_value') as decimal_val FROM variant_test_edge_cases WHERE id = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_edge_cases
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.decimal_value') as decimal_val FROM variant_test_edge_cases WHERE id = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_edge_cases
POSTHOOK: Output: hdfs://### HDFS PATH ###
123.456789
PREHOOK: query: SELECT variant_get(data, '$.special_chars') as special_chars FROM variant_test_edge_cases WHERE id = 4
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_edge_cases
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.special_chars') as special_chars FROM variant_test_edge_cases WHERE id = 4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_edge_cases
POSTHOOK: Output: hdfs://### HDFS PATH ###
Hello	World
New Line! "Quoted"
PREHOOK: query: SELECT variant_get(data, '$.unicode') as unicode_str FROM variant_test_edge_cases WHERE id = 5
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_edge_cases
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.unicode') as unicode_str FROM variant_test_edge_cases WHERE id = 5
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_edge_cases
POSTHOOK: Output: hdfs://### HDFS PATH ###
Hello ‰∏ñÁïå üåç
PREHOOK: query: SELECT variant_get(data, '$.deep_nesting.level1.level2.level3.level4') as deep_value FROM variant_test_edge_cases WHERE id = 6
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_edge_cases
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT variant_get(data, '$.deep_nesting.level1.level2.level3.level4') as deep_value FROM variant_test_edge_cases WHERE id = 6
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_edge_cases
POSTHOOK: Output: hdfs://### HDFS PATH ###
deep
PREHOOK: query: SELECT
    variant_get(data, '$', 'string') as as_string,
    variant_get(data, '$', 'int') as as_int,
    variant_get(data, '$', 'double') as as_double,
    variant_get(data, '$', 'boolean') as as_boolean
FROM variant_test_basic WHERE id = 4
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT
    variant_get(data, '$', 'string') as as_string,
    variant_get(data, '$', 'int') as as_int,
    variant_get(data, '$', 'double') as as_double,
    variant_get(data, '$', 'boolean') as as_boolean
FROM variant_test_basic WHERE id = 4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: hdfs://### HDFS PATH ###
42	42	42.0	true
PREHOOK: query: SELECT
    variant_get(data, '$', 'string') as as_string,
    variant_get(data, '$', 'int') as as_int, -- Should be null
    variant_get(data, '$', 'double') as as_double -- Should be null
FROM variant_test_basic WHERE id = 6
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT
    variant_get(data, '$', 'string') as as_string,
    variant_get(data, '$', 'int') as as_int, -- Should be null
    variant_get(data, '$', 'double') as as_double -- Should be null
FROM variant_test_basic WHERE id = 6
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: hdfs://### HDFS PATH ###
hello world	NULL	NULL
PREHOOK: query: SELECT
    variant_get(data, '$.age', 'string') as age_string,
    variant_get(data, '$.age', 'int') as age_int,
    variant_get(data, '$.age', 'double') as age_double
FROM variant_test_complex WHERE id = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT
    variant_get(data, '$.age', 'string') as age_string,
    variant_get(data, '$.age', 'int') as age_int,
    variant_get(data, '$.age', 'double') as age_double
FROM variant_test_complex WHERE id = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
30	30	30.0
PREHOOK: query: SELECT
    id,
    variant_get(data, '$.name') as name,
    variant_get(data, '$.age') as age,
    variant_get(data, '$.active') as active
FROM variant_test_complex
WHERE id = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT
    id,
    variant_get(data, '$.name') as name,
    variant_get(data, '$.age') as age,
    variant_get(data, '$.active') as active
FROM variant_test_complex
WHERE id = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	John	30	true
PREHOOK: query: SELECT
    id,
    variant_get(data, '$[0]') as elem0,
    variant_get(data, '$[1]') as elem1,
    variant_get(data, '$[2]') as elem2
FROM variant_test_complex
WHERE id = 3
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_complex
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT
    id,
    variant_get(data, '$[0]') as elem0,
    variant_get(data, '$[1]') as elem1,
    variant_get(data, '$[2]') as elem2
FROM variant_test_complex
WHERE id = 3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_complex
POSTHOOK: Output: hdfs://### HDFS PATH ###
3	apple	banana	cherry
PREHOOK: query: CREATE EXTERNAL TABLE variant_test_basic_avro (
    id INT,
    data VARIANT
) STORED BY ICEBERG stored as avro tblproperties('format-version'='3')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@variant_test_basic_avro
POSTHOOK: query: CREATE EXTERNAL TABLE variant_test_basic_avro (
    id INT,
    data VARIANT
) STORED BY ICEBERG stored as avro tblproperties('format-version'='3')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@variant_test_basic_avro
PREHOOK: query: INSERT INTO variant_test_basic_avro VALUES
(7, parse_json('"2023-01-01T12:00:00.123456Z"')),
(8, parse_json('"2023-01-01T12:00:00.123456"')),
(9, parse_json('"2023-01-01T12:00:00.123456789Z"')),
(10, parse_json('"2023-01-01T12:00:00.123456789"')),
(11, parse_json('"12:30:45.123456"')),
(12, parse_json('"2023-12-25"'))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@variant_test_basic_avro
POSTHOOK: query: INSERT INTO variant_test_basic_avro VALUES
(7, parse_json('"2023-01-01T12:00:00.123456Z"')),
(8, parse_json('"2023-01-01T12:00:00.123456"')),
(9, parse_json('"2023-01-01T12:00:00.123456789Z"')),
(10, parse_json('"2023-01-01T12:00:00.123456789"')),
(11, parse_json('"12:30:45.123456"')),
(12, parse_json('"2023-12-25"'))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@variant_test_basic_avro
PREHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_basic_avro
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic_avro
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT id, to_json(data) as json_data FROM variant_test_basic_avro
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic_avro
POSTHOOK: Output: hdfs://### HDFS PATH ###
7	"2023-01-01T12:00:00.123456Z"
8	"2023-01-01T12:00:00.123456"
9	"2023-01-01T12:00:00.123456789Z"
10	"2023-01-01T12:00:00.123456789"
11	"12:30:45.123456"
12	"2023-12-25"
PREHOOK: query: ALTER TABLE variant_test_basic ADD COLUMNS (extra_info VARIANT)
PREHOOK: type: ALTERTABLE_ADDCOLS
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: default@variant_test_basic
POSTHOOK: query: ALTER TABLE variant_test_basic ADD COLUMNS (extra_info VARIANT)
POSTHOOK: type: ALTERTABLE_ADDCOLS
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: default@variant_test_basic
PREHOOK: query: INSERT INTO variant_test_basic VALUES
(7, parse_json('{"key": "value"}'), parse_json('{"additional": "info"}'))
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@variant_test_basic
POSTHOOK: query: INSERT INTO variant_test_basic VALUES
(7, parse_json('{"key": "value"}'), parse_json('{"additional": "info"}'))
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@variant_test_basic
PREHOOK: query: select id, to_json(data), to_json(extra_info) from variant_test_basic where id = 7
PREHOOK: type: QUERY
PREHOOK: Input: default@variant_test_basic
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select id, to_json(data), to_json(extra_info) from variant_test_basic where id = 7
POSTHOOK: type: QUERY
POSTHOOK: Input: default@variant_test_basic
POSTHOOK: Output: hdfs://### HDFS PATH ###
7	{"key":"value"}	{"additional":"info"}
