PREHOOK: query: drop table if exists tbl_src
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_src
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_target_identity
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_target_identity
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_target_bucket
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_target_bucket
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_target_mixed
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_target_mixed
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_bucket_date
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_bucket_date
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_target_truncate_str
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_target_truncate_str
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_target_truncate_int
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_target_truncate_int
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_target_truncate_bigint
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_target_truncate_bigint
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_year_date
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_year_date
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_year_timestamp
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_year_timestamp
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_month_date
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_month_date
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_month_timestamp
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_month_timestamp
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_day_date
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_day_date
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_day_timestamp
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_day_timestamp
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: drop table if exists tbl_hour_timestamp
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: drop table if exists tbl_hour_timestamp
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: create external table tbl_src (a int, b string, c bigint) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_src
POSTHOOK: query: create external table tbl_src (a int, b string, c bigint) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_src
PREHOOK: query: insert into tbl_src values (1, 'EUR', 10), (2, 'EUR', 10), (3, 'USD', 11), (4, 'EUR', 12), (5, 'HUF', 30), (6, 'USD', 10), (7, 'USD', 100), (8, 'PLN', 20), (9, 'PLN', 11), (10, 'CZK', 5), (12, NULL, NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_src
POSTHOOK: query: insert into tbl_src values (1, 'EUR', 10), (2, 'EUR', 10), (3, 'USD', 11), (4, 'EUR', 12), (5, 'HUF', 30), (6, 'USD', 10), (7, 'USD', 100), (8, 'PLN', 20), (9, 'PLN', 11), (10, 'CZK', 5), (12, NULL, NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_src
PREHOOK: query: insert into tbl_src values (10, 'EUR', 12), (20, 'EUR', 11), (30, 'USD', 100), (40, 'EUR', 10), (50, 'HUF', 30), (60, 'USD', 12), (70, 'USD', 20), (80, 'PLN', 100), (90, 'PLN', 18), (100, 'CZK', 12), (110, NULL, NULL)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_src
POSTHOOK: query: insert into tbl_src values (10, 'EUR', 12), (20, 'EUR', 11), (30, 'USD', 100), (40, 'EUR', 10), (50, 'HUF', 30), (60, 'USD', 12), (70, 'USD', 20), (80, 'PLN', 100), (90, 'PLN', 18), (100, 'CZK', 12), (110, NULL, NULL)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_src
PREHOOK: query: create external table tbl_target_identity (a int) partitioned by (ccy string) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_target_identity
POSTHOOK: query: create external table tbl_target_identity (a int) partitioned by (ccy string) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_target_identity
PREHOOK: query: explain insert overwrite table tbl_target_identity select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_identity
POSTHOOK: query: explain insert overwrite table tbl_target_identity select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_identity
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_identity"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_18]
                table:{"name:":"default.tbl_target_identity"}
                Select Operator [SEL_17]
                  Output:["_col0","_col1","_col1"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col1
                    Select Operator [SEL_12] (rows=22 width=87)
                      Output:["_col0","_col1"]
                      TableScan [TS_0] (rows=22 width=87)
                        default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b"]
              Reducer 3 vectorized
              File Output Operator [FS_21]
                Select Operator [SEL_20] (rows=1 width=530)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_19] (rows=1 width=332)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_16]
                      Group By Operator [GBY_15] (rows=1 width=400)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","max(length(ccy))","avg(COALESCE(length(ccy),0))","count(ccy)","compute_bit_vector_hll(ccy)"]
                        Select Operator [SEL_14] (rows=22 width=87)
                          Output:["a","ccy"]
                           Please refer to the previous Select Operator [SEL_12]

PREHOOK: query: insert overwrite table tbl_target_identity select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_identity
POSTHOOK: query: insert overwrite table tbl_target_identity select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_identity
PREHOOK: query: select * from tbl_target_identity order by a, ccy
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_identity
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_identity order by a, ccy
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_identity
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	EUR
2	EUR
3	USD
4	EUR
5	HUF
6	USD
7	USD
8	PLN
9	PLN
10	CZK
10	EUR
12	NULL
20	EUR
30	USD
40	EUR
50	HUF
60	USD
70	USD
80	PLN
90	PLN
100	CZK
110	NULL
PREHOOK: query: create external table tbl_target_bucket (a int, ccy string) partitioned by spec (bucket (2, ccy)) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_target_bucket
POSTHOOK: query: create external table tbl_target_bucket (a int, ccy string) partitioned by spec (bucket (2, ccy)) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_target_bucket
PREHOOK: query: explain insert into table tbl_target_bucket select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_bucket
POSTHOOK: query: explain insert into table tbl_target_bucket select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_bucket
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_bucket"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_18]
                table:{"name:":"default.tbl_target_bucket"}
                Select Operator [SEL_17]
                  Output:["_col0","_col1","iceberg_bucket(_col1, 2)"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:iceberg_bucket(_col1, 2)
                    Select Operator [SEL_12] (rows=22 width=87)
                      Output:["_col0","_col1"]
                      TableScan [TS_0] (rows=22 width=87)
                        default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b"]
              Reducer 3 vectorized
              File Output Operator [FS_21]
                Select Operator [SEL_20] (rows=1 width=530)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_19] (rows=1 width=332)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_16]
                      Group By Operator [GBY_15] (rows=1 width=400)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","max(length(ccy))","avg(COALESCE(length(ccy),0))","count(ccy)","compute_bit_vector_hll(ccy)"]
                        Select Operator [SEL_14] (rows=22 width=87)
                          Output:["a","ccy"]
                           Please refer to the previous Select Operator [SEL_12]

PREHOOK: query: insert into table tbl_target_bucket select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_bucket
POSTHOOK: query: insert into table tbl_target_bucket select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_bucket
PREHOOK: query: select * from tbl_target_bucket order by a, ccy
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_bucket
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_bucket order by a, ccy
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_bucket
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	EUR
2	EUR
3	USD
4	EUR
5	HUF
6	USD
7	USD
8	PLN
9	PLN
10	CZK
10	EUR
12	NULL
20	EUR
30	USD
40	EUR
50	HUF
60	USD
70	USD
80	PLN
90	PLN
100	CZK
110	NULL
PREHOOK: query: create external table tbl_target_mixed (a int, ccy string, c bigint) partitioned by spec (ccy, bucket (3, c)) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_target_mixed
POSTHOOK: query: create external table tbl_target_mixed (a int, ccy string, c bigint) partitioned by spec (ccy, bucket (3, c)) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_target_mixed
PREHOOK: query: explain insert into table tbl_target_mixed select * from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_mixed
POSTHOOK: query: explain insert into table tbl_target_mixed select * from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_mixed
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_mixed"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_18]
                table:{"name:":"default.tbl_target_mixed"}
                Select Operator [SEL_17]
                  Output:["_col0","_col1","_col2","_col1","iceberg_bucket(_col2, 3)"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col1, iceberg_bucket(_col2, 3)
                    Select Operator [SEL_12] (rows=22 width=94)
                      Output:["_col0","_col1","_col2"]
                      TableScan [TS_0] (rows=22 width=94)
                        default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b","c"]
              Reducer 3 vectorized
              File Output Operator [FS_21]
                Select Operator [SEL_20] (rows=1 width=794)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_19] (rows=1 width=500)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_16]
                      Group By Operator [GBY_15] (rows=1 width=568)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","max(length(ccy))","avg(COALESCE(length(ccy),0))","count(ccy)","compute_bit_vector_hll(ccy)","min(c)","max(c)","count(c)","compute_bit_vector_hll(c)"]
                        Select Operator [SEL_14] (rows=22 width=94)
                          Output:["a","ccy","c"]
                           Please refer to the previous Select Operator [SEL_12]

PREHOOK: query: insert into table tbl_target_mixed select * from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_mixed
POSTHOOK: query: insert into table tbl_target_mixed select * from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_mixed
PREHOOK: query: select * from tbl_target_mixed order by a, ccy
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_mixed
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_mixed order by a, ccy
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_mixed
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	EUR	10
2	EUR	10
3	USD	11
4	EUR	12
5	HUF	30
6	USD	10
7	USD	100
8	PLN	20
9	PLN	11
10	CZK	5
10	EUR	12
12	NULL	NULL
20	EUR	11
30	USD	100
40	EUR	10
50	HUF	30
60	USD	12
70	USD	20
80	PLN	100
90	PLN	18
100	CZK	12
110	NULL	NULL
PREHOOK: query: select `partition` from default.tbl_target_mixed.partitions order by `partition`
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_mixed
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select `partition` from default.tbl_target_mixed.partitions order by `partition`
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_mixed
POSTHOOK: Output: hdfs://### HDFS PATH ###
{"ccy":"CZK","c_bucket":1}
{"ccy":"CZK","c_bucket":2}
{"ccy":"EUR","c_bucket":0}
{"ccy":"EUR","c_bucket":1}
{"ccy":"EUR","c_bucket":2}
{"ccy":"HUF","c_bucket":1}
{"ccy":"PLN","c_bucket":0}
{"ccy":"PLN","c_bucket":1}
{"ccy":"PLN","c_bucket":2}
{"ccy":"USD","c_bucket":0}
{"ccy":"USD","c_bucket":1}
{"ccy":"USD","c_bucket":2}
{"ccy":null,"c_bucket":null}
PREHOOK: query: select * from default.tbl_target_mixed.files
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_mixed
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from default.tbl_target_mixed.files
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_mixed
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":null,"c_bucket":null}	2	417	{1:7,2:5,3:5}	{1:2,2:2,3:2}	{1:0,2:2,3:2}	{}	{1:   }	{1:n   }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":110},"c":{"column_size":5,"value_count":2,"null_value_count":2,"nan_value_count":null,"lower_bound":null,"upper_bound":null},"ccy":{"column_size":5,"value_count":2,"null_value_count":2,"nan_value_count":null,"lower_bound":null,"upper_bound":null}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"CZK","c_bucket":1}	1	449	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:d   ,2:CZK,3:       }	{1:d   ,2:CZK,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":100,"upper_bound":100},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":12},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"CZK","upper_bound":"CZK"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"CZK","c_bucket":2}	1	432	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:
   ,2:CZK,3:       }	{1:
   ,2:CZK,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":10,"upper_bound":10},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":5,"upper_bound":5},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"CZK","upper_bound":"CZK"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":0}	1	432	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:       }	{1:   ,2:EUR,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":20,"upper_bound":20},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":11,"upper_bound":11},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":1}	2	448	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:       }	{1:
   ,2:EUR,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":4,"upper_bound":10},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":12},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":2}	3	448	{1:8,2:17,3:5}	{1:3,2:3,3:3}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:
       }	{1:(   ,2:EUR,3:
       }	NULL	[3]	NULL	0	{"a":{"column_size":8,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":1,"upper_bound":40},"c":{"column_size":5,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":10,"upper_bound":10},"ccy":{"column_size":17,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"HUF","c_bucket":1}	2	448	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:HUF,3:       }	{1:2   ,2:HUF,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":5,"upper_bound":50},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":30,"upper_bound":30},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"HUF","upper_bound":"HUF"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"PLN","c_bucket":0}	2	448	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:PLN,3:       }	{1:	   ,2:PLN,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":8,"upper_bound":9},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":11,"upper_bound":20},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"PLN","upper_bound":"PLN"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"PLN","c_bucket":1}	1	448	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:P   ,2:PLN,3:d       }	{1:P   ,2:PLN,3:d       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":80,"upper_bound":80},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":100,"upper_bound":100},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"PLN","upper_bound":"PLN"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"PLN","c_bucket":2}	1	449	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:Z   ,2:PLN,3:       }	{1:Z   ,2:PLN,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":90,"upper_bound":90},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":18,"upper_bound":18},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"PLN","upper_bound":"PLN"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"USD","c_bucket":0}	2	462	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:USD,3:       }	{1:F   ,2:USD,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":3,"upper_bound":70},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":11,"upper_bound":20},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"USD","upper_bound":"USD"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"USD","c_bucket":1}	3	470	{1:8,2:17,3:8}	{1:3,2:3,3:3}	{1:0,2:0,3:0}	{}	{1:   ,2:USD,3:       }	{1:<   ,2:USD,3:d       }	NULL	[3]	NULL	0	{"a":{"column_size":8,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":7,"upper_bound":60},"c":{"column_size":8,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":100},"ccy":{"column_size":17,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":"USD","upper_bound":"USD"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"USD","c_bucket":2}	1	432	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:   ,2:USD,3:
       }	{1:   ,2:USD,3:
       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":6,"upper_bound":6},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":10,"upper_bound":10},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"USD","upper_bound":"USD"}}
PREHOOK: query: explain insert into table tbl_target_mixed select * from tbl_src where b = 'EUR'
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_mixed
POSTHOOK: query: explain insert into table tbl_target_mixed select * from tbl_src where b = 'EUR'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_mixed
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_mixed"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_21]
                table:{"name:":"default.tbl_target_mixed"}
                Select Operator [SEL_20]
                  Output:["_col0","_col1","_col2","_col1","iceberg_bucket(_col2, 3)"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_16]
                    PartitionCols:_col1, iceberg_bucket(_col2, 3)
                    Select Operator [SEL_15] (rows=4 width=99)
                      Output:["_col0","_col1","_col2"]
                      Filter Operator [FIL_14] (rows=4 width=99)
                        predicate:(b = 'EUR')
                        TableScan [TS_0] (rows=22 width=94)
                          default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b","c"]
              Reducer 3 vectorized
              File Output Operator [FS_24]
                Select Operator [SEL_23] (rows=1 width=794)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_22] (rows=1 width=500)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_19]
                      Group By Operator [GBY_18] (rows=1 width=568)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","max(length(ccy))","avg(COALESCE(length(ccy),0))","count(ccy)","compute_bit_vector_hll(ccy)","min(c)","max(c)","count(c)","compute_bit_vector_hll(c)"]
                        Select Operator [SEL_17] (rows=4 width=99)
                          Output:["a","ccy","c"]
                           Please refer to the previous Select Operator [SEL_15]

PREHOOK: query: insert into table tbl_target_mixed select * from tbl_src where b = 'EUR'
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_mixed
POSTHOOK: query: insert into table tbl_target_mixed select * from tbl_src where b = 'EUR'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_mixed
PREHOOK: query: explain insert into table tbl_target_mixed select * from tbl_src where b = 'USD' and c = 100
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_mixed
POSTHOOK: query: explain insert into table tbl_target_mixed select * from tbl_src where b = 'USD' and c = 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_mixed
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_mixed"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_20]
                Select Operator [SEL_19] (rows=1 width=794)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_18] (rows=1 width=500)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    File Output Operator [FS_14]
                      table:{"name:":"default.tbl_target_mixed"}
                      Select Operator [SEL_13] (rows=1 width=99)
                        Output:["_col0","_col1","_col2"]
                        Filter Operator [FIL_12] (rows=1 width=99)
                          predicate:((c = 100L) and (b = 'USD'))
                          TableScan [TS_0] (rows=22 width=94)
                            default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b","c"]
                    PARTITION_ONLY_SHUFFLE [RS_17]
                      Group By Operator [GBY_16] (rows=1 width=568)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","max(length(ccy))","avg(COALESCE(length(ccy),0))","count(ccy)","compute_bit_vector_hll(ccy)","min(c)","max(c)","count(c)","compute_bit_vector_hll(c)"]
                        Select Operator [SEL_15] (rows=1 width=99)
                          Output:["a","ccy","c"]
                           Please refer to the previous Select Operator [SEL_13]

PREHOOK: query: insert into table tbl_target_mixed select * from tbl_src where b = 'USD' and c = 100
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_mixed
POSTHOOK: query: insert into table tbl_target_mixed select * from tbl_src where b = 'USD' and c = 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_mixed
PREHOOK: query: select * from tbl_target_mixed order by a, ccy
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_mixed
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_mixed order by a, ccy
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_mixed
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	EUR	10
1	EUR	10
2	EUR	10
2	EUR	10
3	USD	11
4	EUR	12
4	EUR	12
5	HUF	30
6	USD	10
7	USD	100
7	USD	100
8	PLN	20
9	PLN	11
10	CZK	5
10	EUR	12
10	EUR	12
12	NULL	NULL
20	EUR	11
20	EUR	11
30	USD	100
30	USD	100
40	EUR	10
40	EUR	10
50	HUF	30
60	USD	12
70	USD	20
80	PLN	100
90	PLN	18
100	CZK	12
110	NULL	NULL
PREHOOK: query: select * from default.tbl_target_mixed.files
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_mixed
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from default.tbl_target_mixed.files
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_mixed
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"USD","c_bucket":1}	2	466	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:USD,3:d       }	{1:   ,2:USD,3:d       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":7,"upper_bound":30},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":100,"upper_bound":100},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"USD","upper_bound":"USD"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":0}	1	432	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:       }	{1:   ,2:EUR,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":20,"upper_bound":20},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":11,"upper_bound":11},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":1}	2	448	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:       }	{1:
   ,2:EUR,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":4,"upper_bound":10},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":12},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":2}	3	448	{1:8,2:17,3:5}	{1:3,2:3,3:3}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:
       }	{1:(   ,2:EUR,3:
       }	NULL	[3]	NULL	0	{"a":{"column_size":8,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":1,"upper_bound":40},"c":{"column_size":5,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":10,"upper_bound":10},"ccy":{"column_size":17,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":null,"c_bucket":null}	2	417	{1:7,2:5,3:5}	{1:2,2:2,3:2}	{1:0,2:2,3:2}	{}	{1:   }	{1:n   }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":110},"c":{"column_size":5,"value_count":2,"null_value_count":2,"nan_value_count":null,"lower_bound":null,"upper_bound":null},"ccy":{"column_size":5,"value_count":2,"null_value_count":2,"nan_value_count":null,"lower_bound":null,"upper_bound":null}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"CZK","c_bucket":1}	1	449	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:d   ,2:CZK,3:       }	{1:d   ,2:CZK,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":100,"upper_bound":100},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":12},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"CZK","upper_bound":"CZK"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"CZK","c_bucket":2}	1	432	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:
   ,2:CZK,3:       }	{1:
   ,2:CZK,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":10,"upper_bound":10},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":5,"upper_bound":5},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"CZK","upper_bound":"CZK"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":0}	1	432	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:       }	{1:   ,2:EUR,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":20,"upper_bound":20},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":11,"upper_bound":11},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":1}	2	448	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:       }	{1:
   ,2:EUR,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":4,"upper_bound":10},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":12},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"EUR","c_bucket":2}	3	448	{1:8,2:17,3:5}	{1:3,2:3,3:3}	{1:0,2:0,3:0}	{}	{1:   ,2:EUR,3:
       }	{1:(   ,2:EUR,3:
       }	NULL	[3]	NULL	0	{"a":{"column_size":8,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":1,"upper_bound":40},"c":{"column_size":5,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":10,"upper_bound":10},"ccy":{"column_size":17,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":"EUR","upper_bound":"EUR"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"HUF","c_bucket":1}	2	448	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:HUF,3:       }	{1:2   ,2:HUF,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":5,"upper_bound":50},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":30,"upper_bound":30},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"HUF","upper_bound":"HUF"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"PLN","c_bucket":0}	2	448	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:PLN,3:       }	{1:	   ,2:PLN,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":8,"upper_bound":9},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":11,"upper_bound":20},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"PLN","upper_bound":"PLN"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"PLN","c_bucket":1}	1	448	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:P   ,2:PLN,3:d       }	{1:P   ,2:PLN,3:d       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":80,"upper_bound":80},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":100,"upper_bound":100},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"PLN","upper_bound":"PLN"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"PLN","c_bucket":2}	1	449	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:Z   ,2:PLN,3:       }	{1:Z   ,2:PLN,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":90,"upper_bound":90},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":18,"upper_bound":18},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"PLN","upper_bound":"PLN"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"USD","c_bucket":0}	2	462	{1:7,2:18,3:7}	{1:2,2:2,3:2}	{1:0,2:0,3:0}	{}	{1:   ,2:USD,3:       }	{1:F   ,2:USD,3:       }	NULL	[3]	NULL	0	{"a":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":3,"upper_bound":70},"c":{"column_size":7,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":11,"upper_bound":20},"ccy":{"column_size":18,"value_count":2,"null_value_count":0,"nan_value_count":null,"lower_bound":"USD","upper_bound":"USD"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"USD","c_bucket":1}	3	470	{1:8,2:17,3:8}	{1:3,2:3,3:3}	{1:0,2:0,3:0}	{}	{1:   ,2:USD,3:       }	{1:<   ,2:USD,3:d       }	NULL	[3]	NULL	0	{"a":{"column_size":8,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":7,"upper_bound":60},"c":{"column_size":8,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":12,"upper_bound":100},"ccy":{"column_size":17,"value_count":3,"null_value_count":0,"nan_value_count":null,"lower_bound":"USD","upper_bound":"USD"}}
0	hdfs://### HDFS PATH ###	ORC	0	{"ccy":"USD","c_bucket":2}	1	432	{1:6,2:12,3:6}	{1:1,2:1,3:1}	{1:0,2:0,3:0}	{}	{1:   ,2:USD,3:
       }	{1:   ,2:USD,3:
       }	NULL	[3]	NULL	0	{"a":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":6,"upper_bound":6},"c":{"column_size":6,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":10,"upper_bound":10},"ccy":{"column_size":12,"value_count":1,"null_value_count":0,"nan_value_count":null,"lower_bound":"USD","upper_bound":"USD"}}
PREHOOK: query: create external table tbl_bucket_date (id string, date_time_date date, year_partition int) 
    partitioned by spec (year_partition, bucket(1, date_time_date))
stored by iceberg stored as parquet 
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_bucket_date
POSTHOOK: query: create external table tbl_bucket_date (id string, date_time_date date, year_partition int) 
    partitioned by spec (year_partition, bucket(1, date_time_date))
stored by iceberg stored as parquet 
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_bucket_date
PREHOOK: query: insert into tbl_bucket_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_bucket_date
POSTHOOK: query: insert into tbl_bucket_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_bucket_date
PREHOOK: query: update tbl_bucket_date set date_time_date = '2018-07-02' where date_time_date = '2018-07-03'
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_bucket_date
PREHOOK: Output: default@tbl_bucket_date
PREHOOK: Output: default@tbl_bucket_date
POSTHOOK: query: update tbl_bucket_date set date_time_date = '2018-07-02' where date_time_date = '2018-07-03'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_bucket_date
POSTHOOK: Output: default@tbl_bucket_date
POSTHOOK: Output: default@tbl_bucket_date
PREHOOK: query: select count(*) from tbl_bucket_date where date_time_date = '2018-07-02'
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_bucket_date
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(*) from tbl_bucket_date where date_time_date = '2018-07-02'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_bucket_date
POSTHOOK: Output: hdfs://### HDFS PATH ###
1
PREHOOK: query: create external table tbl_target_truncate_str (a int, ccy string) partitioned by spec (truncate(2, ccy)) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_target_truncate_str
POSTHOOK: query: create external table tbl_target_truncate_str (a int, ccy string) partitioned by spec (truncate(2, ccy)) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_target_truncate_str
PREHOOK: query: explain insert into table tbl_target_truncate_str select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_str
POSTHOOK: query: explain insert into table tbl_target_truncate_str select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_str
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_truncate_str"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_18]
                table:{"name:":"default.tbl_target_truncate_str"}
                Select Operator [SEL_17]
                  Output:["_col0","_col1","iceberg_truncate(_col1, 2)"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:iceberg_truncate(_col1, 2)
                    Select Operator [SEL_12] (rows=22 width=87)
                      Output:["_col0","_col1"]
                      TableScan [TS_0] (rows=22 width=87)
                        default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b"]
              Reducer 3 vectorized
              File Output Operator [FS_21]
                Select Operator [SEL_20] (rows=1 width=530)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_19] (rows=1 width=332)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_16]
                      Group By Operator [GBY_15] (rows=1 width=400)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","max(length(ccy))","avg(COALESCE(length(ccy),0))","count(ccy)","compute_bit_vector_hll(ccy)"]
                        Select Operator [SEL_14] (rows=22 width=87)
                          Output:["a","ccy"]
                           Please refer to the previous Select Operator [SEL_12]

PREHOOK: query: insert into table tbl_target_truncate_str select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_str
POSTHOOK: query: insert into table tbl_target_truncate_str select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_str
PREHOOK: query: select * from tbl_target_truncate_str order by a, ccy
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_truncate_str
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_truncate_str order by a, ccy
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_truncate_str
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	EUR
2	EUR
3	USD
4	EUR
5	HUF
6	USD
7	USD
8	PLN
9	PLN
10	CZK
10	EUR
12	NULL
20	EUR
30	USD
40	EUR
50	HUF
60	USD
70	USD
80	PLN
90	PLN
100	CZK
110	NULL
PREHOOK: query: create external table tbl_target_truncate_int (id int, ccy string) partitioned by spec (truncate(2, id)) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_target_truncate_int
POSTHOOK: query: create external table tbl_target_truncate_int (id int, ccy string) partitioned by spec (truncate(2, id)) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_target_truncate_int
PREHOOK: query: explain insert into table tbl_target_truncate_int select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_int
POSTHOOK: query: explain insert into table tbl_target_truncate_int select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_int
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_truncate_int"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_18]
                table:{"name:":"default.tbl_target_truncate_int"}
                Select Operator [SEL_17]
                  Output:["_col0","_col1","iceberg_truncate(_col0, 2)"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:iceberg_truncate(_col0, 2)
                    Select Operator [SEL_12] (rows=22 width=87)
                      Output:["_col0","_col1"]
                      TableScan [TS_0] (rows=22 width=87)
                        default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b"]
              Reducer 3 vectorized
              File Output Operator [FS_21]
                Select Operator [SEL_20] (rows=1 width=530)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_19] (rows=1 width=332)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_16]
                      Group By Operator [GBY_15] (rows=1 width=400)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(id)","max(id)","count(1)","count(id)","compute_bit_vector_hll(id)","max(length(ccy))","avg(COALESCE(length(ccy),0))","count(ccy)","compute_bit_vector_hll(ccy)"]
                        Select Operator [SEL_14] (rows=22 width=87)
                          Output:["id","ccy"]
                           Please refer to the previous Select Operator [SEL_12]

PREHOOK: query: insert into table tbl_target_truncate_int select a, b from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_int
POSTHOOK: query: insert into table tbl_target_truncate_int select a, b from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_int
PREHOOK: query: select * from tbl_target_truncate_int order by id, ccy
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_truncate_int
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_truncate_int order by id, ccy
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_truncate_int
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	EUR
2	EUR
3	USD
4	EUR
5	HUF
6	USD
7	USD
8	PLN
9	PLN
10	CZK
10	EUR
12	NULL
20	EUR
30	USD
40	EUR
50	HUF
60	USD
70	USD
80	PLN
90	PLN
100	CZK
110	NULL
PREHOOK: query: create external table tbl_target_truncate_bigint (a int, ccy bigint) partitioned by spec (truncate(2, ccy)) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_target_truncate_bigint
POSTHOOK: query: create external table tbl_target_truncate_bigint (a int, ccy bigint) partitioned by spec (truncate(2, ccy)) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_target_truncate_bigint
PREHOOK: query: explain insert into table tbl_target_truncate_bigint select a, c from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_bigint
POSTHOOK: query: explain insert into table tbl_target_truncate_bigint select a, c from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_bigint
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_truncate_bigint"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_18]
                table:{"name:":"default.tbl_target_truncate_bigint"}
                Select Operator [SEL_17]
                  Output:["_col0","_col1","iceberg_truncate(_col1, 2)"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:iceberg_truncate(_col1, 2)
                    Select Operator [SEL_12] (rows=22 width=11)
                      Output:["_col0","_col1"]
                      TableScan [TS_0] (rows=22 width=11)
                        default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","c"]
              Reducer 3 vectorized
              File Output Operator [FS_21]
                Select Operator [SEL_20] (rows=1 width=528)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  Group By Operator [GBY_19] (rows=1 width=336)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_16]
                      Group By Operator [GBY_15] (rows=1 width=336)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","min(ccy)","max(ccy)","count(ccy)","compute_bit_vector_hll(ccy)"]
                        Select Operator [SEL_14] (rows=22 width=11)
                          Output:["a","ccy"]
                           Please refer to the previous Select Operator [SEL_12]

PREHOOK: query: insert into table tbl_target_truncate_bigint select a, c from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_bigint
POSTHOOK: query: insert into table tbl_target_truncate_bigint select a, c from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_bigint
PREHOOK: query: select * from tbl_target_truncate_bigint order by a, ccy
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_truncate_bigint
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_truncate_bigint order by a, ccy
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_truncate_bigint
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	10
2	10
3	11
4	12
5	30
6	10
7	100
8	20
9	11
10	5
10	12
12	NULL
20	11
30	100
40	10
50	30
60	12
70	20
80	100
90	18
100	12
110	NULL
PREHOOK: query: create external table tbl_target_truncate_decimal (a int, b string, ccy decimal(10,6)) partitioned by spec (truncate(2, b), truncate(3, ccy)) stored by iceberg stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_target_truncate_decimal
POSTHOOK: query: create external table tbl_target_truncate_decimal (a int, b string, ccy decimal(10,6)) partitioned by spec (truncate(2, b), truncate(3, ccy)) stored by iceberg stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_target_truncate_decimal
PREHOOK: query: explain insert into table tbl_target_truncate_decimal select a, b, 1.567894 from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_decimal
POSTHOOK: query: explain insert into table tbl_target_truncate_decimal select a, b, 1.567894 from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_decimal
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_target_truncate_decimal"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_19]
                table:{"name:":"default.tbl_target_truncate_decimal"}
                Select Operator [SEL_18]
                  Output:["_col0","_col1","_col2","iceberg_truncate(_col1, 2)","iceberg_truncate(_col2, 3)"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_14]
                    PartitionCols:iceberg_truncate(_col1, 2), iceberg_truncate(_col2, 3)
                    Select Operator [SEL_13] (rows=22 width=199)
                      Output:["_col0","_col1","_col2"]
                      TableScan [TS_0] (rows=22 width=87)
                        default@tbl_src,tbl_src,Tbl:COMPLETE,Col:COMPLETE,Output:["a","b"]
              Reducer 3 vectorized
              File Output Operator [FS_22]
                Select Operator [SEL_21] (rows=1 width=1005)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_20] (rows=1 width=708)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","max(VALUE._col5)","avg(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_17]
                      Group By Operator [GBY_16] (rows=1 width=776)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["min(a)","max(a)","count(1)","count(a)","compute_bit_vector_hll(a)","max(length(b))","avg(COALESCE(length(b),0))","count(b)","compute_bit_vector_hll(b)","min(ccy)","max(ccy)","count(ccy)","compute_bit_vector_hll(ccy)"]
                        Select Operator [SEL_15] (rows=22 width=199)
                          Output:["a","b","ccy"]
                           Please refer to the previous Select Operator [SEL_13]

PREHOOK: query: insert into table tbl_target_truncate_decimal select a, b, 1.567894 from tbl_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_src
PREHOOK: Output: default@tbl_target_truncate_decimal
POSTHOOK: query: insert into table tbl_target_truncate_decimal select a, b, 1.567894 from tbl_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_src
POSTHOOK: Output: default@tbl_target_truncate_decimal
PREHOOK: query: select * from tbl_target_truncate_decimal order by a, b
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_target_truncate_decimal
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_target_truncate_decimal order by a, b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_target_truncate_decimal
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	EUR	1.567894
2	EUR	1.567894
3	USD	1.567894
4	EUR	1.567894
5	HUF	1.567894
6	USD	1.567894
7	USD	1.567894
8	PLN	1.567894
9	PLN	1.567894
10	CZK	1.567894
10	EUR	1.567894
12	NULL	1.567894
20	EUR	1.567894
30	USD	1.567894
40	EUR	1.567894
50	HUF	1.567894
60	USD	1.567894
70	USD	1.567894
80	PLN	1.567894
90	PLN	1.567894
100	CZK	1.567894
110	NULL	1.567894
PREHOOK: query: create external table tbl_year_date (id string, date_time_date date, year_partition int)
    partitioned by spec (year_partition, year(date_time_date))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_year_date
POSTHOOK: query: create external table tbl_year_date (id string, date_time_date date, year_partition int)
    partitioned by spec (year_partition, year(date_time_date))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_year_date
PREHOOK: query: explain insert into tbl_year_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_year_date
POSTHOOK: query: explain insert into tbl_year_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_year_date
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_year_date"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_16]
                table:{"name:":"default.tbl_year_date"}
                Select Operator [SEL_15]
                  Output:["_col0","_col1","_col2","_col2","iceberg_year(_col1)"]
                <-Map 1 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2, iceberg_year(_col1)
                    Select Operator [SEL_3] (rows=1 width=240)
                      Output:["_col0","_col1","_col2"]
                      UDTF Operator [UDTF_2] (rows=1 width=64)
                        function name:inline
                        Select Operator [SEL_1] (rows=1 width=64)
                          Output:["_col0"]
                          TableScan [TS_0] (rows=1 width=10)
                            _dummy_database@_dummy_table,_dummy_table,Tbl:COMPLETE,Col:COMPLETE
              Reducer 3 vectorized
              File Output Operator [FS_19]
                Select Operator [SEL_18] (rows=1 width=890)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_17] (rows=1 width=596)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_9]
                      Group By Operator [GBY_8] (rows=1 width=664)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(id))","avg(COALESCE(length(id),0))","count(1)","count(id)","compute_bit_vector_hll(id)","min(date_time_date)","max(date_time_date)","count(date_time_date)","compute_bit_vector_hll(date_time_date)","min(year_partition)","max(year_partition)","count(year_partition)","compute_bit_vector_hll(year_partition)"]
                        Select Operator [SEL_7] (rows=1 width=240)
                          Output:["id","date_time_date","year_partition"]
                           Please refer to the previous Select Operator [SEL_3]

PREHOOK: query: insert into tbl_year_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_year_date
POSTHOOK: query: insert into tbl_year_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_year_date
PREHOOK: query: select * from tbl_year_date order by id, date_time_date
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_year_date
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_year_date order by id, date_time_date
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_year_date
POSTHOOK: Output: hdfs://### HDFS PATH ###
40568	2018-02-12	2018
40568	2018-07-03	2018
88669	2018-05-27	2018
PREHOOK: query: create external table tbl_year_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, year(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_year_timestamp
POSTHOOK: query: create external table tbl_year_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, year(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_year_timestamp
PREHOOK: query: explain insert into tbl_year_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_year_timestamp
POSTHOOK: query: explain insert into tbl_year_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_year_timestamp
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_year_timestamp"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_16]
                table:{"name:":"default.tbl_year_timestamp"}
                Select Operator [SEL_15]
                  Output:["_col0","_col1","_col2","_col2","iceberg_year(_col1)"]
                <-Map 1 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2, iceberg_year(_col1)
                    Select Operator [SEL_3] (rows=1 width=224)
                      Output:["_col0","_col1","_col2"]
                      UDTF Operator [UDTF_2] (rows=1 width=64)
                        function name:inline
                        Select Operator [SEL_1] (rows=1 width=64)
                          Output:["_col0"]
                          TableScan [TS_0] (rows=1 width=10)
                            _dummy_database@_dummy_table,_dummy_table,Tbl:COMPLETE,Col:COMPLETE
              Reducer 3 vectorized
              File Output Operator [FS_19]
                Select Operator [SEL_18] (rows=1 width=863)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_17] (rows=1 width=564)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_9]
                      Group By Operator [GBY_8] (rows=1 width=632)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(id))","avg(COALESCE(length(id),0))","count(1)","count(id)","compute_bit_vector_hll(id)","min(date_time_timestamp)","max(date_time_timestamp)","count(date_time_timestamp)","compute_bit_vector_hll(date_time_timestamp)","min(year_partition)","max(year_partition)","count(year_partition)","compute_bit_vector_hll(year_partition)"]
                        Select Operator [SEL_7] (rows=1 width=224)
                          Output:["id","date_time_timestamp","year_partition"]
                           Please refer to the previous Select Operator [SEL_3]

PREHOOK: query: insert into tbl_year_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_year_timestamp
POSTHOOK: query: insert into tbl_year_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_year_timestamp
PREHOOK: query: select * from tbl_year_timestamp order by id, date_time_timestamp
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_year_timestamp
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_year_timestamp order by id, date_time_timestamp
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_year_timestamp
POSTHOOK: Output: hdfs://### HDFS PATH ###
40568	2018-02-12 12:45:56	2018
40568	2018-07-03 06:07:56	2018
88669	2018-05-27 11:12:00	2018
PREHOOK: query: create external table tbl_month_date (id string, date_time_date date, year_partition int)
    partitioned by spec (year_partition, month(date_time_date))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_month_date
POSTHOOK: query: create external table tbl_month_date (id string, date_time_date date, year_partition int)
    partitioned by spec (year_partition, month(date_time_date))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_month_date
PREHOOK: query: explain insert into tbl_month_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_month_date
POSTHOOK: query: explain insert into tbl_month_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_month_date
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_month_date"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_16]
                table:{"name:":"default.tbl_month_date"}
                Select Operator [SEL_15]
                  Output:["_col0","_col1","_col2","_col2","iceberg_month(_col1)"]
                <-Map 1 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2, iceberg_month(_col1)
                    Select Operator [SEL_3] (rows=1 width=240)
                      Output:["_col0","_col1","_col2"]
                      UDTF Operator [UDTF_2] (rows=1 width=64)
                        function name:inline
                        Select Operator [SEL_1] (rows=1 width=64)
                          Output:["_col0"]
                          TableScan [TS_0] (rows=1 width=10)
                            _dummy_database@_dummy_table,_dummy_table,Tbl:COMPLETE,Col:COMPLETE
              Reducer 3 vectorized
              File Output Operator [FS_19]
                Select Operator [SEL_18] (rows=1 width=890)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_17] (rows=1 width=596)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_9]
                      Group By Operator [GBY_8] (rows=1 width=664)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(id))","avg(COALESCE(length(id),0))","count(1)","count(id)","compute_bit_vector_hll(id)","min(date_time_date)","max(date_time_date)","count(date_time_date)","compute_bit_vector_hll(date_time_date)","min(year_partition)","max(year_partition)","count(year_partition)","compute_bit_vector_hll(year_partition)"]
                        Select Operator [SEL_7] (rows=1 width=240)
                          Output:["id","date_time_date","year_partition"]
                           Please refer to the previous Select Operator [SEL_3]

PREHOOK: query: insert into tbl_month_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_month_date
POSTHOOK: query: insert into tbl_month_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_month_date
PREHOOK: query: select * from tbl_month_date order by id, date_time_date
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_month_date
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_month_date order by id, date_time_date
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_month_date
POSTHOOK: Output: hdfs://### HDFS PATH ###
40568	2018-02-12	2018
40568	2018-07-03	2018
88669	2018-05-27	2018
PREHOOK: query: create external table tbl_month_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, month(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_month_timestamp
POSTHOOK: query: create external table tbl_month_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, month(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_month_timestamp
PREHOOK: query: explain insert into tbl_month_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_month_timestamp
POSTHOOK: query: explain insert into tbl_month_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_month_timestamp
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_month_timestamp"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_16]
                table:{"name:":"default.tbl_month_timestamp"}
                Select Operator [SEL_15]
                  Output:["_col0","_col1","_col2","_col2","iceberg_month(_col1)"]
                <-Map 1 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2, iceberg_month(_col1)
                    Select Operator [SEL_3] (rows=1 width=224)
                      Output:["_col0","_col1","_col2"]
                      UDTF Operator [UDTF_2] (rows=1 width=64)
                        function name:inline
                        Select Operator [SEL_1] (rows=1 width=64)
                          Output:["_col0"]
                          TableScan [TS_0] (rows=1 width=10)
                            _dummy_database@_dummy_table,_dummy_table,Tbl:COMPLETE,Col:COMPLETE
              Reducer 3 vectorized
              File Output Operator [FS_19]
                Select Operator [SEL_18] (rows=1 width=863)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_17] (rows=1 width=564)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_9]
                      Group By Operator [GBY_8] (rows=1 width=632)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(id))","avg(COALESCE(length(id),0))","count(1)","count(id)","compute_bit_vector_hll(id)","min(date_time_timestamp)","max(date_time_timestamp)","count(date_time_timestamp)","compute_bit_vector_hll(date_time_timestamp)","min(year_partition)","max(year_partition)","count(year_partition)","compute_bit_vector_hll(year_partition)"]
                        Select Operator [SEL_7] (rows=1 width=224)
                          Output:["id","date_time_timestamp","year_partition"]
                           Please refer to the previous Select Operator [SEL_3]

PREHOOK: query: insert into tbl_month_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_month_timestamp
POSTHOOK: query: insert into tbl_month_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_month_timestamp
PREHOOK: query: select * from tbl_month_timestamp order by id, date_time_timestamp
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_month_timestamp
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_month_timestamp order by id, date_time_timestamp
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_month_timestamp
POSTHOOK: Output: hdfs://### HDFS PATH ###
40568	2018-02-12 12:45:56	2018
40568	2018-07-03 06:07:56	2018
88669	2018-05-27 11:12:00	2018
PREHOOK: query: create external table tbl_day_date (id string, date_time_date date, year_partition int)
    partitioned by spec (year_partition, day(date_time_date))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_day_date
POSTHOOK: query: create external table tbl_day_date (id string, date_time_date date, year_partition int)
    partitioned by spec (year_partition, day(date_time_date))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_day_date
PREHOOK: query: explain insert into tbl_day_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_day_date
POSTHOOK: query: explain insert into tbl_day_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_day_date
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_day_date"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_16]
                table:{"name:":"default.tbl_day_date"}
                Select Operator [SEL_15]
                  Output:["_col0","_col1","_col2","_col2","iceberg_day(_col1)"]
                <-Map 1 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2, iceberg_day(_col1)
                    Select Operator [SEL_3] (rows=1 width=240)
                      Output:["_col0","_col1","_col2"]
                      UDTF Operator [UDTF_2] (rows=1 width=64)
                        function name:inline
                        Select Operator [SEL_1] (rows=1 width=64)
                          Output:["_col0"]
                          TableScan [TS_0] (rows=1 width=10)
                            _dummy_database@_dummy_table,_dummy_table,Tbl:COMPLETE,Col:COMPLETE
              Reducer 3 vectorized
              File Output Operator [FS_19]
                Select Operator [SEL_18] (rows=1 width=890)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_17] (rows=1 width=596)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_9]
                      Group By Operator [GBY_8] (rows=1 width=664)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(id))","avg(COALESCE(length(id),0))","count(1)","count(id)","compute_bit_vector_hll(id)","min(date_time_date)","max(date_time_date)","count(date_time_date)","compute_bit_vector_hll(date_time_date)","min(year_partition)","max(year_partition)","count(year_partition)","compute_bit_vector_hll(year_partition)"]
                        Select Operator [SEL_7] (rows=1 width=240)
                          Output:["id","date_time_date","year_partition"]
                           Please refer to the previous Select Operator [SEL_3]

PREHOOK: query: insert into tbl_day_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_day_date
POSTHOOK: query: insert into tbl_day_date values (88669, '2018-05-27', 2018), (40568, '2018-02-12', 2018), (40568, '2018-07-03', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_day_date
PREHOOK: query: select * from tbl_day_date order by id, date_time_date
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_day_date
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_day_date order by id, date_time_date
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_day_date
POSTHOOK: Output: hdfs://### HDFS PATH ###
40568	2018-02-12	2018
40568	2018-07-03	2018
88669	2018-05-27	2018
PREHOOK: query: create external table tbl_day_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, day(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_day_timestamp
POSTHOOK: query: create external table tbl_day_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, day(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_day_timestamp
PREHOOK: query: explain insert into tbl_day_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_day_timestamp
POSTHOOK: query: explain insert into tbl_day_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_day_timestamp
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_day_timestamp"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_16]
                table:{"name:":"default.tbl_day_timestamp"}
                Select Operator [SEL_15]
                  Output:["_col0","_col1","_col2","_col2","iceberg_day(_col1)"]
                <-Map 1 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2, iceberg_day(_col1)
                    Select Operator [SEL_3] (rows=1 width=224)
                      Output:["_col0","_col1","_col2"]
                      UDTF Operator [UDTF_2] (rows=1 width=64)
                        function name:inline
                        Select Operator [SEL_1] (rows=1 width=64)
                          Output:["_col0"]
                          TableScan [TS_0] (rows=1 width=10)
                            _dummy_database@_dummy_table,_dummy_table,Tbl:COMPLETE,Col:COMPLETE
              Reducer 3 vectorized
              File Output Operator [FS_19]
                Select Operator [SEL_18] (rows=1 width=863)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_17] (rows=1 width=564)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_9]
                      Group By Operator [GBY_8] (rows=1 width=632)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(id))","avg(COALESCE(length(id),0))","count(1)","count(id)","compute_bit_vector_hll(id)","min(date_time_timestamp)","max(date_time_timestamp)","count(date_time_timestamp)","compute_bit_vector_hll(date_time_timestamp)","min(year_partition)","max(year_partition)","count(year_partition)","compute_bit_vector_hll(year_partition)"]
                        Select Operator [SEL_7] (rows=1 width=224)
                          Output:["id","date_time_timestamp","year_partition"]
                           Please refer to the previous Select Operator [SEL_3]

PREHOOK: query: insert into tbl_day_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_day_timestamp
POSTHOOK: query: insert into tbl_day_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_day_timestamp
PREHOOK: query: select * from tbl_day_timestamp order by id, date_time_timestamp
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_day_timestamp
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_day_timestamp order by id, date_time_timestamp
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_day_timestamp
POSTHOOK: Output: hdfs://### HDFS PATH ###
40568	2018-02-12 12:45:56	2018
40568	2018-07-03 06:07:56	2018
88669	2018-05-27 11:12:00	2018
PREHOOK: query: create external table tbl_hour_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, hour(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tbl_hour_timestamp
POSTHOOK: query: create external table tbl_hour_timestamp (id string, date_time_timestamp timestamp, year_partition int)
    partitioned by spec (year_partition, hour(date_time_timestamp))
stored by iceberg stored as parquet
tblproperties ('parquet.compression'='snappy','format-version'='2')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tbl_hour_timestamp
PREHOOK: query: explain insert into tbl_hour_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_hour_timestamp
POSTHOOK: query: explain insert into tbl_hour_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_hour_timestamp
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.tbl_hour_timestamp"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 2 vectorized
              File Output Operator [FS_16]
                table:{"name:":"default.tbl_hour_timestamp"}
                Select Operator [SEL_15]
                  Output:["_col0","_col1","_col2","_col2","iceberg_hour(_col1)"]
                <-Map 1 [SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_13]
                    PartitionCols:_col2, iceberg_hour(_col1)
                    Select Operator [SEL_3] (rows=1 width=224)
                      Output:["_col0","_col1","_col2"]
                      UDTF Operator [UDTF_2] (rows=1 width=64)
                        function name:inline
                        Select Operator [SEL_1] (rows=1 width=64)
                          Output:["_col0"]
                          TableScan [TS_0] (rows=1 width=10)
                            _dummy_database@_dummy_table,_dummy_table,Tbl:COMPLETE,Col:COMPLETE
              Reducer 3 vectorized
              File Output Operator [FS_19]
                Select Operator [SEL_18] (rows=1 width=863)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
                  Group By Operator [GBY_17] (rows=1 width=564)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(VALUE._col0)","avg(VALUE._col1)","count(VALUE._col2)","count(VALUE._col3)","compute_bit_vector_hll(VALUE._col4)","min(VALUE._col5)","max(VALUE._col6)","count(VALUE._col7)","compute_bit_vector_hll(VALUE._col8)","min(VALUE._col9)","max(VALUE._col10)","count(VALUE._col11)","compute_bit_vector_hll(VALUE._col12)"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_9]
                      Group By Operator [GBY_8] (rows=1 width=632)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"],aggregations:["max(length(id))","avg(COALESCE(length(id),0))","count(1)","count(id)","compute_bit_vector_hll(id)","min(date_time_timestamp)","max(date_time_timestamp)","count(date_time_timestamp)","compute_bit_vector_hll(date_time_timestamp)","min(year_partition)","max(year_partition)","count(year_partition)","compute_bit_vector_hll(year_partition)"]
                        Select Operator [SEL_7] (rows=1 width=224)
                          Output:["id","date_time_timestamp","year_partition"]
                           Please refer to the previous Select Operator [SEL_3]

PREHOOK: query: insert into tbl_hour_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tbl_hour_timestamp
POSTHOOK: query: insert into tbl_hour_timestamp values (88669, '2018-05-27 11:12:00', 2018), (40568, '2018-02-12 12:45:56', 2018), (40568, '2018-07-03 06:07:56', 2018)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tbl_hour_timestamp
PREHOOK: query: select * from tbl_hour_timestamp order by id, date_time_timestamp
PREHOOK: type: QUERY
PREHOOK: Input: default@tbl_hour_timestamp
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from tbl_hour_timestamp order by id, date_time_timestamp
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tbl_hour_timestamp
POSTHOOK: Output: hdfs://### HDFS PATH ###
40568	2018-02-12 12:45:56	2018
40568	2018-07-03 06:07:56	2018
88669	2018-05-27 11:12:00	2018
