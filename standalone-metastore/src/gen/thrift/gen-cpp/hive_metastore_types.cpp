/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hive_metastore_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Apache { namespace Hadoop { namespace Hive {

int _kHiveObjectTypeValues[] = {
  HiveObjectType::GLOBAL,
  HiveObjectType::DATABASE,
  HiveObjectType::TABLE,
  HiveObjectType::PARTITION,
  HiveObjectType::COLUMN
};
const char* _kHiveObjectTypeNames[] = {
  "GLOBAL",
  "DATABASE",
  "TABLE",
  "PARTITION",
  "COLUMN"
};
const std::map<int, const char*> _HiveObjectType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kHiveObjectTypeValues, _kHiveObjectTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPrincipalTypeValues[] = {
  PrincipalType::USER,
  PrincipalType::ROLE,
  PrincipalType::GROUP
};
const char* _kPrincipalTypeNames[] = {
  "USER",
  "ROLE",
  "GROUP"
};
const std::map<int, const char*> _PrincipalType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPrincipalTypeValues, _kPrincipalTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPartitionEventTypeValues[] = {
  PartitionEventType::LOAD_DONE
};
const char* _kPartitionEventTypeNames[] = {
  "LOAD_DONE"
};
const std::map<int, const char*> _PartitionEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPartitionEventTypeValues, _kPartitionEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTxnStateValues[] = {
  TxnState::COMMITTED,
  TxnState::ABORTED,
  TxnState::OPEN
};
const char* _kTxnStateNames[] = {
  "COMMITTED",
  "ABORTED",
  "OPEN"
};
const std::map<int, const char*> _TxnState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTxnStateValues, _kTxnStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLockLevelValues[] = {
  LockLevel::DB,
  LockLevel::TABLE,
  LockLevel::PARTITION
};
const char* _kLockLevelNames[] = {
  "DB",
  "TABLE",
  "PARTITION"
};
const std::map<int, const char*> _LockLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLockLevelValues, _kLockLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLockStateValues[] = {
  LockState::ACQUIRED,
  LockState::WAITING,
  LockState::ABORT,
  LockState::NOT_ACQUIRED
};
const char* _kLockStateNames[] = {
  "ACQUIRED",
  "WAITING",
  "ABORT",
  "NOT_ACQUIRED"
};
const std::map<int, const char*> _LockState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLockStateValues, _kLockStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLockTypeValues[] = {
  LockType::SHARED_READ,
  LockType::SHARED_WRITE,
  LockType::EXCLUSIVE
};
const char* _kLockTypeNames[] = {
  "SHARED_READ",
  "SHARED_WRITE",
  "EXCLUSIVE"
};
const std::map<int, const char*> _LockType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLockTypeValues, _kLockTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCompactionTypeValues[] = {
  CompactionType::MINOR,
  CompactionType::MAJOR
};
const char* _kCompactionTypeNames[] = {
  "MINOR",
  "MAJOR"
};
const std::map<int, const char*> _CompactionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCompactionTypeValues, _kCompactionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGrantRevokeTypeValues[] = {
  GrantRevokeType::GRANT,
  GrantRevokeType::REVOKE
};
const char* _kGrantRevokeTypeNames[] = {
  "GRANT",
  "REVOKE"
};
const std::map<int, const char*> _GrantRevokeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGrantRevokeTypeValues, _kGrantRevokeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDataOperationTypeValues[] = {
  DataOperationType::SELECT,
  DataOperationType::INSERT,
  DataOperationType::UPDATE,
  DataOperationType::DELETE,
  DataOperationType::UNSET,
  DataOperationType::NO_TXN
};
const char* _kDataOperationTypeNames[] = {
  "SELECT",
  "INSERT",
  "UPDATE",
  "DELETE",
  "UNSET",
  "NO_TXN"
};
const std::map<int, const char*> _DataOperationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDataOperationTypeValues, _kDataOperationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEventRequestTypeValues[] = {
  EventRequestType::INSERT,
  EventRequestType::UPDATE,
  EventRequestType::DELETE
};
const char* _kEventRequestTypeNames[] = {
  "INSERT",
  "UPDATE",
  "DELETE"
};
const std::map<int, const char*> _EventRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEventRequestTypeValues, _kEventRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSerdeTypeValues[] = {
  SerdeType::HIVE,
  SerdeType::SCHEMA_REGISTRY
};
const char* _kSerdeTypeNames[] = {
  "HIVE",
  "SCHEMA_REGISTRY"
};
const std::map<int, const char*> _SerdeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSerdeTypeValues, _kSerdeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSchemaTypeValues[] = {
  SchemaType::HIVE,
  SchemaType::AVRO
};
const char* _kSchemaTypeNames[] = {
  "HIVE",
  "AVRO"
};
const std::map<int, const char*> _SchemaType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSchemaTypeValues, _kSchemaTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSchemaCompatibilityValues[] = {
  SchemaCompatibility::NONE,
  SchemaCompatibility::BACKWARD,
  SchemaCompatibility::FORWARD,
  SchemaCompatibility::BOTH
};
const char* _kSchemaCompatibilityNames[] = {
  "NONE",
  "BACKWARD",
  "FORWARD",
  "BOTH"
};
const std::map<int, const char*> _SchemaCompatibility_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSchemaCompatibilityValues, _kSchemaCompatibilityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSchemaValidationValues[] = {
  SchemaValidation::LATEST,
  SchemaValidation::ALL
};
const char* _kSchemaValidationNames[] = {
  "LATEST",
  "ALL"
};
const std::map<int, const char*> _SchemaValidation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSchemaValidationValues, _kSchemaValidationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSchemaVersionStateValues[] = {
  SchemaVersionState::INITIATED,
  SchemaVersionState::START_REVIEW,
  SchemaVersionState::CHANGES_REQUIRED,
  SchemaVersionState::REVIEWED,
  SchemaVersionState::ENABLED,
  SchemaVersionState::DISABLED,
  SchemaVersionState::ARCHIVED,
  SchemaVersionState::DELETED
};
const char* _kSchemaVersionStateNames[] = {
  "INITIATED",
  "START_REVIEW",
  "CHANGES_REQUIRED",
  "REVIEWED",
  "ENABLED",
  "DISABLED",
  "ARCHIVED",
  "DELETED"
};
const std::map<int, const char*> _SchemaVersionState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSchemaVersionStateValues, _kSchemaVersionStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFunctionTypeValues[] = {
  FunctionType::JAVA
};
const char* _kFunctionTypeNames[] = {
  "JAVA"
};
const std::map<int, const char*> _FunctionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kFunctionTypeValues, _kFunctionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kResourceTypeValues[] = {
  ResourceType::JAR,
  ResourceType::FILE,
  ResourceType::ARCHIVE
};
const char* _kResourceTypeNames[] = {
  "JAR",
  "FILE",
  "ARCHIVE"
};
const std::map<int, const char*> _ResourceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResourceTypeValues, _kResourceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFileMetadataExprTypeValues[] = {
  FileMetadataExprType::ORC_SARG
};
const char* _kFileMetadataExprTypeNames[] = {
  "ORC_SARG"
};
const std::map<int, const char*> _FileMetadataExprType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kFileMetadataExprTypeValues, _kFileMetadataExprTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kClientCapabilityValues[] = {
  ClientCapability::TEST_CAPABILITY,
  ClientCapability::INSERT_ONLY_TABLES
};
const char* _kClientCapabilityNames[] = {
  "TEST_CAPABILITY",
  "INSERT_ONLY_TABLES"
};
const std::map<int, const char*> _ClientCapability_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kClientCapabilityValues, _kClientCapabilityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kWMResourcePlanStatusValues[] = {
  WMResourcePlanStatus::ACTIVE,
  WMResourcePlanStatus::ENABLED,
  WMResourcePlanStatus::DISABLED
};
const char* _kWMResourcePlanStatusNames[] = {
  "ACTIVE",
  "ENABLED",
  "DISABLED"
};
const std::map<int, const char*> _WMResourcePlanStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kWMResourcePlanStatusValues, _kWMResourcePlanStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kWMPoolSchedulingPolicyValues[] = {
  WMPoolSchedulingPolicy::FAIR,
  WMPoolSchedulingPolicy::FIFO
};
const char* _kWMPoolSchedulingPolicyNames[] = {
  "FAIR",
  "FIFO"
};
const std::map<int, const char*> _WMPoolSchedulingPolicy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kWMPoolSchedulingPolicyValues, _kWMPoolSchedulingPolicyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Version::~Version() throw() {
}


void Version::__set_version(const std::string& val) {
  this->version = val;
}

void Version::__set_comments(const std::string& val) {
  this->comments = val;
}

uint32_t Version::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Version::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Version");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->comments);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Version &a, Version &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.comments, b.comments);
  swap(a.__isset, b.__isset);
}

Version::Version(const Version& other0) {
  version = other0.version;
  comments = other0.comments;
  __isset = other0.__isset;
}
Version& Version::operator=(const Version& other1) {
  version = other1.version;
  comments = other1.comments;
  __isset = other1.__isset;
  return *this;
}
void Version::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Version(";
  out << "version=" << to_string(version);
  out << ", " << "comments=" << to_string(comments);
  out << ")";
}


FieldSchema::~FieldSchema() throw() {
}


void FieldSchema::__set_name(const std::string& val) {
  this->name = val;
}

void FieldSchema::__set_type(const std::string& val) {
  this->type = val;
}

void FieldSchema::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t FieldSchema::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FieldSchema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldSchema");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldSchema &a, FieldSchema &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

FieldSchema::FieldSchema(const FieldSchema& other2) {
  name = other2.name;
  type = other2.type;
  comment = other2.comment;
  __isset = other2.__isset;
}
FieldSchema& FieldSchema::operator=(const FieldSchema& other3) {
  name = other3.name;
  type = other3.type;
  comment = other3.comment;
  __isset = other3.__isset;
  return *this;
}
void FieldSchema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSchema(";
  out << "name=" << to_string(name);
  out << ", " << "type=" << to_string(type);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


SQLPrimaryKey::~SQLPrimaryKey() throw() {
}


void SQLPrimaryKey::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLPrimaryKey::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLPrimaryKey::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLPrimaryKey::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLPrimaryKey::__set_pk_name(const std::string& val) {
  this->pk_name = val;
}

void SQLPrimaryKey::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLPrimaryKey::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLPrimaryKey::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

void SQLPrimaryKey::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t SQLPrimaryKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_seq);
          this->__isset.key_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pk_name);
          this->__isset.pk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLPrimaryKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLPrimaryKey");

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->key_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pk_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->pk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLPrimaryKey &a, SQLPrimaryKey &b) {
  using ::std::swap;
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.key_seq, b.key_seq);
  swap(a.pk_name, b.pk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

SQLPrimaryKey::SQLPrimaryKey(const SQLPrimaryKey& other4) {
  table_db = other4.table_db;
  table_name = other4.table_name;
  column_name = other4.column_name;
  key_seq = other4.key_seq;
  pk_name = other4.pk_name;
  enable_cstr = other4.enable_cstr;
  validate_cstr = other4.validate_cstr;
  rely_cstr = other4.rely_cstr;
  catName = other4.catName;
  __isset = other4.__isset;
}
SQLPrimaryKey& SQLPrimaryKey::operator=(const SQLPrimaryKey& other5) {
  table_db = other5.table_db;
  table_name = other5.table_name;
  column_name = other5.column_name;
  key_seq = other5.key_seq;
  pk_name = other5.pk_name;
  enable_cstr = other5.enable_cstr;
  validate_cstr = other5.validate_cstr;
  rely_cstr = other5.rely_cstr;
  catName = other5.catName;
  __isset = other5.__isset;
  return *this;
}
void SQLPrimaryKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLPrimaryKey(";
  out << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "pk_name=" << to_string(pk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


SQLForeignKey::~SQLForeignKey() throw() {
}


void SQLForeignKey::__set_pktable_db(const std::string& val) {
  this->pktable_db = val;
}

void SQLForeignKey::__set_pktable_name(const std::string& val) {
  this->pktable_name = val;
}

void SQLForeignKey::__set_pkcolumn_name(const std::string& val) {
  this->pkcolumn_name = val;
}

void SQLForeignKey::__set_fktable_db(const std::string& val) {
  this->fktable_db = val;
}

void SQLForeignKey::__set_fktable_name(const std::string& val) {
  this->fktable_name = val;
}

void SQLForeignKey::__set_fkcolumn_name(const std::string& val) {
  this->fkcolumn_name = val;
}

void SQLForeignKey::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLForeignKey::__set_update_rule(const int32_t val) {
  this->update_rule = val;
}

void SQLForeignKey::__set_delete_rule(const int32_t val) {
  this->delete_rule = val;
}

void SQLForeignKey::__set_fk_name(const std::string& val) {
  this->fk_name = val;
}

void SQLForeignKey::__set_pk_name(const std::string& val) {
  this->pk_name = val;
}

void SQLForeignKey::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLForeignKey::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLForeignKey::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

void SQLForeignKey::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t SQLForeignKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pktable_db);
          this->__isset.pktable_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pktable_name);
          this->__isset.pktable_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pkcolumn_name);
          this->__isset.pkcolumn_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fktable_db);
          this->__isset.fktable_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fktable_name);
          this->__isset.fktable_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fkcolumn_name);
          this->__isset.fkcolumn_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_seq);
          this->__isset.key_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_rule);
          this->__isset.update_rule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delete_rule);
          this->__isset.delete_rule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fk_name);
          this->__isset.fk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pk_name);
          this->__isset.pk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLForeignKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLForeignKey");

  xfer += oprot->writeFieldBegin("pktable_db", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pktable_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pktable_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pktable_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pkcolumn_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pkcolumn_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fktable_db", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fktable_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fktable_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->fktable_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fkcolumn_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->fkcolumn_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->key_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_rule", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->update_rule);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delete_rule", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->delete_rule);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fk_name", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->fk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pk_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->pk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLForeignKey &a, SQLForeignKey &b) {
  using ::std::swap;
  swap(a.pktable_db, b.pktable_db);
  swap(a.pktable_name, b.pktable_name);
  swap(a.pkcolumn_name, b.pkcolumn_name);
  swap(a.fktable_db, b.fktable_db);
  swap(a.fktable_name, b.fktable_name);
  swap(a.fkcolumn_name, b.fkcolumn_name);
  swap(a.key_seq, b.key_seq);
  swap(a.update_rule, b.update_rule);
  swap(a.delete_rule, b.delete_rule);
  swap(a.fk_name, b.fk_name);
  swap(a.pk_name, b.pk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

SQLForeignKey::SQLForeignKey(const SQLForeignKey& other6) {
  pktable_db = other6.pktable_db;
  pktable_name = other6.pktable_name;
  pkcolumn_name = other6.pkcolumn_name;
  fktable_db = other6.fktable_db;
  fktable_name = other6.fktable_name;
  fkcolumn_name = other6.fkcolumn_name;
  key_seq = other6.key_seq;
  update_rule = other6.update_rule;
  delete_rule = other6.delete_rule;
  fk_name = other6.fk_name;
  pk_name = other6.pk_name;
  enable_cstr = other6.enable_cstr;
  validate_cstr = other6.validate_cstr;
  rely_cstr = other6.rely_cstr;
  catName = other6.catName;
  __isset = other6.__isset;
}
SQLForeignKey& SQLForeignKey::operator=(const SQLForeignKey& other7) {
  pktable_db = other7.pktable_db;
  pktable_name = other7.pktable_name;
  pkcolumn_name = other7.pkcolumn_name;
  fktable_db = other7.fktable_db;
  fktable_name = other7.fktable_name;
  fkcolumn_name = other7.fkcolumn_name;
  key_seq = other7.key_seq;
  update_rule = other7.update_rule;
  delete_rule = other7.delete_rule;
  fk_name = other7.fk_name;
  pk_name = other7.pk_name;
  enable_cstr = other7.enable_cstr;
  validate_cstr = other7.validate_cstr;
  rely_cstr = other7.rely_cstr;
  catName = other7.catName;
  __isset = other7.__isset;
  return *this;
}
void SQLForeignKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLForeignKey(";
  out << "pktable_db=" << to_string(pktable_db);
  out << ", " << "pktable_name=" << to_string(pktable_name);
  out << ", " << "pkcolumn_name=" << to_string(pkcolumn_name);
  out << ", " << "fktable_db=" << to_string(fktable_db);
  out << ", " << "fktable_name=" << to_string(fktable_name);
  out << ", " << "fkcolumn_name=" << to_string(fkcolumn_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "update_rule=" << to_string(update_rule);
  out << ", " << "delete_rule=" << to_string(delete_rule);
  out << ", " << "fk_name=" << to_string(fk_name);
  out << ", " << "pk_name=" << to_string(pk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


SQLUniqueConstraint::~SQLUniqueConstraint() throw() {
}


void SQLUniqueConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLUniqueConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLUniqueConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLUniqueConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLUniqueConstraint::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLUniqueConstraint::__set_uk_name(const std::string& val) {
  this->uk_name = val;
}

void SQLUniqueConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLUniqueConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLUniqueConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLUniqueConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_seq);
          this->__isset.key_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uk_name);
          this->__isset.uk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLUniqueConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLUniqueConstraint");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->key_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uk_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->uk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLUniqueConstraint &a, SQLUniqueConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.key_seq, b.key_seq);
  swap(a.uk_name, b.uk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLUniqueConstraint::SQLUniqueConstraint(const SQLUniqueConstraint& other8) {
  catName = other8.catName;
  table_db = other8.table_db;
  table_name = other8.table_name;
  column_name = other8.column_name;
  key_seq = other8.key_seq;
  uk_name = other8.uk_name;
  enable_cstr = other8.enable_cstr;
  validate_cstr = other8.validate_cstr;
  rely_cstr = other8.rely_cstr;
  __isset = other8.__isset;
}
SQLUniqueConstraint& SQLUniqueConstraint::operator=(const SQLUniqueConstraint& other9) {
  catName = other9.catName;
  table_db = other9.table_db;
  table_name = other9.table_name;
  column_name = other9.column_name;
  key_seq = other9.key_seq;
  uk_name = other9.uk_name;
  enable_cstr = other9.enable_cstr;
  validate_cstr = other9.validate_cstr;
  rely_cstr = other9.rely_cstr;
  __isset = other9.__isset;
  return *this;
}
void SQLUniqueConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLUniqueConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "uk_name=" << to_string(uk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLNotNullConstraint::~SQLNotNullConstraint() throw() {
}


void SQLNotNullConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLNotNullConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLNotNullConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLNotNullConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLNotNullConstraint::__set_nn_name(const std::string& val) {
  this->nn_name = val;
}

void SQLNotNullConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLNotNullConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLNotNullConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLNotNullConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nn_name);
          this->__isset.nn_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLNotNullConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLNotNullConstraint");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nn_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->nn_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLNotNullConstraint &a, SQLNotNullConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.nn_name, b.nn_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLNotNullConstraint::SQLNotNullConstraint(const SQLNotNullConstraint& other10) {
  catName = other10.catName;
  table_db = other10.table_db;
  table_name = other10.table_name;
  column_name = other10.column_name;
  nn_name = other10.nn_name;
  enable_cstr = other10.enable_cstr;
  validate_cstr = other10.validate_cstr;
  rely_cstr = other10.rely_cstr;
  __isset = other10.__isset;
}
SQLNotNullConstraint& SQLNotNullConstraint::operator=(const SQLNotNullConstraint& other11) {
  catName = other11.catName;
  table_db = other11.table_db;
  table_name = other11.table_name;
  column_name = other11.column_name;
  nn_name = other11.nn_name;
  enable_cstr = other11.enable_cstr;
  validate_cstr = other11.validate_cstr;
  rely_cstr = other11.rely_cstr;
  __isset = other11.__isset;
  return *this;
}
void SQLNotNullConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLNotNullConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "nn_name=" << to_string(nn_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLDefaultConstraint::~SQLDefaultConstraint() throw() {
}


void SQLDefaultConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLDefaultConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLDefaultConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLDefaultConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLDefaultConstraint::__set_default_value(const std::string& val) {
  this->default_value = val;
}

void SQLDefaultConstraint::__set_dc_name(const std::string& val) {
  this->dc_name = val;
}

void SQLDefaultConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLDefaultConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLDefaultConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLDefaultConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_value);
          this->__isset.default_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dc_name);
          this->__isset.dc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLDefaultConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLDefaultConstraint");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_value", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->default_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dc_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLDefaultConstraint &a, SQLDefaultConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.default_value, b.default_value);
  swap(a.dc_name, b.dc_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLDefaultConstraint::SQLDefaultConstraint(const SQLDefaultConstraint& other12) {
  catName = other12.catName;
  table_db = other12.table_db;
  table_name = other12.table_name;
  column_name = other12.column_name;
  default_value = other12.default_value;
  dc_name = other12.dc_name;
  enable_cstr = other12.enable_cstr;
  validate_cstr = other12.validate_cstr;
  rely_cstr = other12.rely_cstr;
  __isset = other12.__isset;
}
SQLDefaultConstraint& SQLDefaultConstraint::operator=(const SQLDefaultConstraint& other13) {
  catName = other13.catName;
  table_db = other13.table_db;
  table_name = other13.table_name;
  column_name = other13.column_name;
  default_value = other13.default_value;
  dc_name = other13.dc_name;
  enable_cstr = other13.enable_cstr;
  validate_cstr = other13.validate_cstr;
  rely_cstr = other13.rely_cstr;
  __isset = other13.__isset;
  return *this;
}
void SQLDefaultConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLDefaultConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "default_value=" << to_string(default_value);
  out << ", " << "dc_name=" << to_string(dc_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLCheckConstraint::~SQLCheckConstraint() throw() {
}


void SQLCheckConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLCheckConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLCheckConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLCheckConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLCheckConstraint::__set_check_expression(const std::string& val) {
  this->check_expression = val;
}

void SQLCheckConstraint::__set_dc_name(const std::string& val) {
  this->dc_name = val;
}

void SQLCheckConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLCheckConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLCheckConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLCheckConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->check_expression);
          this->__isset.check_expression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dc_name);
          this->__isset.dc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLCheckConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLCheckConstraint");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("check_expression", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->check_expression);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dc_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLCheckConstraint &a, SQLCheckConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.check_expression, b.check_expression);
  swap(a.dc_name, b.dc_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLCheckConstraint::SQLCheckConstraint(const SQLCheckConstraint& other14) {
  catName = other14.catName;
  table_db = other14.table_db;
  table_name = other14.table_name;
  column_name = other14.column_name;
  check_expression = other14.check_expression;
  dc_name = other14.dc_name;
  enable_cstr = other14.enable_cstr;
  validate_cstr = other14.validate_cstr;
  rely_cstr = other14.rely_cstr;
  __isset = other14.__isset;
}
SQLCheckConstraint& SQLCheckConstraint::operator=(const SQLCheckConstraint& other15) {
  catName = other15.catName;
  table_db = other15.table_db;
  table_name = other15.table_name;
  column_name = other15.column_name;
  check_expression = other15.check_expression;
  dc_name = other15.dc_name;
  enable_cstr = other15.enable_cstr;
  validate_cstr = other15.validate_cstr;
  rely_cstr = other15.rely_cstr;
  __isset = other15.__isset;
  return *this;
}
void SQLCheckConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLCheckConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "check_expression=" << to_string(check_expression);
  out << ", " << "dc_name=" << to_string(dc_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


Type::~Type() throw() {
}


void Type::__set_name(const std::string& val) {
  this->name = val;
}

void Type::__set_type1(const std::string& val) {
  this->type1 = val;
__isset.type1 = true;
}

void Type::__set_type2(const std::string& val) {
  this->type2 = val;
__isset.type2 = true;
}

void Type::__set_fields(const std::vector<FieldSchema> & val) {
  this->fields = val;
__isset.fields = true;
}

uint32_t Type::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type1);
          this->__isset.type1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type2);
          this->__isset.type2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->fields.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->fields[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Type::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Type");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type1) {
    xfer += oprot->writeFieldBegin("type1", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->type1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type2) {
    xfer += oprot->writeFieldBegin("type2", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->type2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fields) {
    xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields.size()));
      std::vector<FieldSchema> ::const_iterator _iter21;
      for (_iter21 = this->fields.begin(); _iter21 != this->fields.end(); ++_iter21)
      {
        xfer += (*_iter21).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Type &a, Type &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type1, b.type1);
  swap(a.type2, b.type2);
  swap(a.fields, b.fields);
  swap(a.__isset, b.__isset);
}

Type::Type(const Type& other22) {
  name = other22.name;
  type1 = other22.type1;
  type2 = other22.type2;
  fields = other22.fields;
  __isset = other22.__isset;
}
Type& Type::operator=(const Type& other23) {
  name = other23.name;
  type1 = other23.type1;
  type2 = other23.type2;
  fields = other23.fields;
  __isset = other23.__isset;
  return *this;
}
void Type::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Type(";
  out << "name=" << to_string(name);
  out << ", " << "type1="; (__isset.type1 ? (out << to_string(type1)) : (out << "<null>"));
  out << ", " << "type2="; (__isset.type2 ? (out << to_string(type2)) : (out << "<null>"));
  out << ", " << "fields="; (__isset.fields ? (out << to_string(fields)) : (out << "<null>"));
  out << ")";
}


HiveObjectRef::~HiveObjectRef() throw() {
}


void HiveObjectRef::__set_objectType(const HiveObjectType::type val) {
  this->objectType = val;
}

void HiveObjectRef::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void HiveObjectRef::__set_objectName(const std::string& val) {
  this->objectName = val;
}

void HiveObjectRef::__set_partValues(const std::vector<std::string> & val) {
  this->partValues = val;
}

void HiveObjectRef::__set_columnName(const std::string& val) {
  this->columnName = val;
}

void HiveObjectRef::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t HiveObjectRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->objectType = (HiveObjectType::type)ecast24;
          this->__isset.objectType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->objectName);
          this->__isset.objectName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partValues.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->partValues.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readString(this->partValues[_i29]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->columnName);
          this->__isset.columnName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveObjectRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HiveObjectRef");

  xfer += oprot->writeFieldBegin("objectType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->objectType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objectName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->objectName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partValues", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partValues.size()));
    std::vector<std::string> ::const_iterator _iter30;
    for (_iter30 = this->partValues.begin(); _iter30 != this->partValues.end(); ++_iter30)
    {
      xfer += oprot->writeString((*_iter30));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("columnName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->columnName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HiveObjectRef &a, HiveObjectRef &b) {
  using ::std::swap;
  swap(a.objectType, b.objectType);
  swap(a.dbName, b.dbName);
  swap(a.objectName, b.objectName);
  swap(a.partValues, b.partValues);
  swap(a.columnName, b.columnName);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

HiveObjectRef::HiveObjectRef(const HiveObjectRef& other31) {
  objectType = other31.objectType;
  dbName = other31.dbName;
  objectName = other31.objectName;
  partValues = other31.partValues;
  columnName = other31.columnName;
  catName = other31.catName;
  __isset = other31.__isset;
}
HiveObjectRef& HiveObjectRef::operator=(const HiveObjectRef& other32) {
  objectType = other32.objectType;
  dbName = other32.dbName;
  objectName = other32.objectName;
  partValues = other32.partValues;
  columnName = other32.columnName;
  catName = other32.catName;
  __isset = other32.__isset;
  return *this;
}
void HiveObjectRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveObjectRef(";
  out << "objectType=" << to_string(objectType);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "objectName=" << to_string(objectName);
  out << ", " << "partValues=" << to_string(partValues);
  out << ", " << "columnName=" << to_string(columnName);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PrivilegeGrantInfo::~PrivilegeGrantInfo() throw() {
}


void PrivilegeGrantInfo::__set_privilege(const std::string& val) {
  this->privilege = val;
}

void PrivilegeGrantInfo::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void PrivilegeGrantInfo::__set_grantor(const std::string& val) {
  this->grantor = val;
}

void PrivilegeGrantInfo::__set_grantorType(const PrincipalType::type val) {
  this->grantorType = val;
}

void PrivilegeGrantInfo::__set_grantOption(const bool val) {
  this->grantOption = val;
}

uint32_t PrivilegeGrantInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->privilege);
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->grantor);
          this->__isset.grantor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast33;
          xfer += iprot->readI32(ecast33);
          this->grantorType = (PrincipalType::type)ecast33;
          this->__isset.grantorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantOption);
          this->__isset.grantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrivilegeGrantInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrivilegeGrantInfo");

  xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->privilege);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantor", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->grantor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantorType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->grantorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantOption", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->grantOption);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrivilegeGrantInfo &a, PrivilegeGrantInfo &b) {
  using ::std::swap;
  swap(a.privilege, b.privilege);
  swap(a.createTime, b.createTime);
  swap(a.grantor, b.grantor);
  swap(a.grantorType, b.grantorType);
  swap(a.grantOption, b.grantOption);
  swap(a.__isset, b.__isset);
}

PrivilegeGrantInfo::PrivilegeGrantInfo(const PrivilegeGrantInfo& other34) {
  privilege = other34.privilege;
  createTime = other34.createTime;
  grantor = other34.grantor;
  grantorType = other34.grantorType;
  grantOption = other34.grantOption;
  __isset = other34.__isset;
}
PrivilegeGrantInfo& PrivilegeGrantInfo::operator=(const PrivilegeGrantInfo& other35) {
  privilege = other35.privilege;
  createTime = other35.createTime;
  grantor = other35.grantor;
  grantorType = other35.grantorType;
  grantOption = other35.grantOption;
  __isset = other35.__isset;
  return *this;
}
void PrivilegeGrantInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrivilegeGrantInfo(";
  out << "privilege=" << to_string(privilege);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "grantor=" << to_string(grantor);
  out << ", " << "grantorType=" << to_string(grantorType);
  out << ", " << "grantOption=" << to_string(grantOption);
  out << ")";
}


HiveObjectPrivilege::~HiveObjectPrivilege() throw() {
}


void HiveObjectPrivilege::__set_hiveObject(const HiveObjectRef& val) {
  this->hiveObject = val;
}

void HiveObjectPrivilege::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void HiveObjectPrivilege::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void HiveObjectPrivilege::__set_grantInfo(const PrivilegeGrantInfo& val) {
  this->grantInfo = val;
}

uint32_t HiveObjectPrivilege::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->hiveObject.read(iprot);
          this->__isset.hiveObject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principalName);
          this->__isset.principalName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->principalType = (PrincipalType::type)ecast36;
          this->__isset.principalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->grantInfo.read(iprot);
          this->__isset.grantInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveObjectPrivilege::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HiveObjectPrivilege");

  xfer += oprot->writeFieldBegin("hiveObject", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->hiveObject.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->principalName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->principalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantInfo", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->grantInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HiveObjectPrivilege &a, HiveObjectPrivilege &b) {
  using ::std::swap;
  swap(a.hiveObject, b.hiveObject);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantInfo, b.grantInfo);
  swap(a.__isset, b.__isset);
}

HiveObjectPrivilege::HiveObjectPrivilege(const HiveObjectPrivilege& other37) {
  hiveObject = other37.hiveObject;
  principalName = other37.principalName;
  principalType = other37.principalType;
  grantInfo = other37.grantInfo;
  __isset = other37.__isset;
}
HiveObjectPrivilege& HiveObjectPrivilege::operator=(const HiveObjectPrivilege& other38) {
  hiveObject = other38.hiveObject;
  principalName = other38.principalName;
  principalType = other38.principalType;
  grantInfo = other38.grantInfo;
  __isset = other38.__isset;
  return *this;
}
void HiveObjectPrivilege::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveObjectPrivilege(";
  out << "hiveObject=" << to_string(hiveObject);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantInfo=" << to_string(grantInfo);
  out << ")";
}


PrivilegeBag::~PrivilegeBag() throw() {
}


void PrivilegeBag::__set_privileges(const std::vector<HiveObjectPrivilege> & val) {
  this->privileges = val;
}

uint32_t PrivilegeBag::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->privileges.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->privileges.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->privileges[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrivilegeBag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrivilegeBag");

  xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->privileges.size()));
    std::vector<HiveObjectPrivilege> ::const_iterator _iter44;
    for (_iter44 = this->privileges.begin(); _iter44 != this->privileges.end(); ++_iter44)
    {
      xfer += (*_iter44).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrivilegeBag &a, PrivilegeBag &b) {
  using ::std::swap;
  swap(a.privileges, b.privileges);
  swap(a.__isset, b.__isset);
}

PrivilegeBag::PrivilegeBag(const PrivilegeBag& other45) {
  privileges = other45.privileges;
  __isset = other45.__isset;
}
PrivilegeBag& PrivilegeBag::operator=(const PrivilegeBag& other46) {
  privileges = other46.privileges;
  __isset = other46.__isset;
  return *this;
}
void PrivilegeBag::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrivilegeBag(";
  out << "privileges=" << to_string(privileges);
  out << ")";
}


PrincipalPrivilegeSet::~PrincipalPrivilegeSet() throw() {
}


void PrincipalPrivilegeSet::__set_userPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->userPrivileges = val;
}

void PrincipalPrivilegeSet::__set_groupPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->groupPrivileges = val;
}

void PrincipalPrivilegeSet::__set_rolePrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->rolePrivileges = val;
}

uint32_t PrincipalPrivilegeSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userPrivileges.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _ktype48;
            ::apache::thrift::protocol::TType _vtype49;
            xfer += iprot->readMapBegin(_ktype48, _vtype49, _size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              std::string _key52;
              xfer += iprot->readString(_key52);
              std::vector<PrivilegeGrantInfo> & _val53 = this->userPrivileges[_key52];
              {
                _val53.clear();
                uint32_t _size54;
                ::apache::thrift::protocol::TType _etype57;
                xfer += iprot->readListBegin(_etype57, _size54);
                _val53.resize(_size54);
                uint32_t _i58;
                for (_i58 = 0; _i58 < _size54; ++_i58)
                {
                  xfer += _val53[_i58].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.userPrivileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->groupPrivileges.clear();
            uint32_t _size59;
            ::apache::thrift::protocol::TType _ktype60;
            ::apache::thrift::protocol::TType _vtype61;
            xfer += iprot->readMapBegin(_ktype60, _vtype61, _size59);
            uint32_t _i63;
            for (_i63 = 0; _i63 < _size59; ++_i63)
            {
              std::string _key64;
              xfer += iprot->readString(_key64);
              std::vector<PrivilegeGrantInfo> & _val65 = this->groupPrivileges[_key64];
              {
                _val65.clear();
                uint32_t _size66;
                ::apache::thrift::protocol::TType _etype69;
                xfer += iprot->readListBegin(_etype69, _size66);
                _val65.resize(_size66);
                uint32_t _i70;
                for (_i70 = 0; _i70 < _size66; ++_i70)
                {
                  xfer += _val65[_i70].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.groupPrivileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rolePrivileges.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _ktype72;
            ::apache::thrift::protocol::TType _vtype73;
            xfer += iprot->readMapBegin(_ktype72, _vtype73, _size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              std::string _key76;
              xfer += iprot->readString(_key76);
              std::vector<PrivilegeGrantInfo> & _val77 = this->rolePrivileges[_key76];
              {
                _val77.clear();
                uint32_t _size78;
                ::apache::thrift::protocol::TType _etype81;
                xfer += iprot->readListBegin(_etype81, _size78);
                _val77.resize(_size78);
                uint32_t _i82;
                for (_i82 = 0; _i82 < _size78; ++_i82)
                {
                  xfer += _val77[_i82].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.rolePrivileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrincipalPrivilegeSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrincipalPrivilegeSet");

  xfer += oprot->writeFieldBegin("userPrivileges", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->userPrivileges.size()));
    std::map<std::string, std::vector<PrivilegeGrantInfo> > ::const_iterator _iter83;
    for (_iter83 = this->userPrivileges.begin(); _iter83 != this->userPrivileges.end(); ++_iter83)
    {
      xfer += oprot->writeString(_iter83->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter83->second.size()));
        std::vector<PrivilegeGrantInfo> ::const_iterator _iter84;
        for (_iter84 = _iter83->second.begin(); _iter84 != _iter83->second.end(); ++_iter84)
        {
          xfer += (*_iter84).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupPrivileges", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->groupPrivileges.size()));
    std::map<std::string, std::vector<PrivilegeGrantInfo> > ::const_iterator _iter85;
    for (_iter85 = this->groupPrivileges.begin(); _iter85 != this->groupPrivileges.end(); ++_iter85)
    {
      xfer += oprot->writeString(_iter85->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter85->second.size()));
        std::vector<PrivilegeGrantInfo> ::const_iterator _iter86;
        for (_iter86 = _iter85->second.begin(); _iter86 != _iter85->second.end(); ++_iter86)
        {
          xfer += (*_iter86).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rolePrivileges", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->rolePrivileges.size()));
    std::map<std::string, std::vector<PrivilegeGrantInfo> > ::const_iterator _iter87;
    for (_iter87 = this->rolePrivileges.begin(); _iter87 != this->rolePrivileges.end(); ++_iter87)
    {
      xfer += oprot->writeString(_iter87->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter87->second.size()));
        std::vector<PrivilegeGrantInfo> ::const_iterator _iter88;
        for (_iter88 = _iter87->second.begin(); _iter88 != _iter87->second.end(); ++_iter88)
        {
          xfer += (*_iter88).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrincipalPrivilegeSet &a, PrincipalPrivilegeSet &b) {
  using ::std::swap;
  swap(a.userPrivileges, b.userPrivileges);
  swap(a.groupPrivileges, b.groupPrivileges);
  swap(a.rolePrivileges, b.rolePrivileges);
  swap(a.__isset, b.__isset);
}

PrincipalPrivilegeSet::PrincipalPrivilegeSet(const PrincipalPrivilegeSet& other89) {
  userPrivileges = other89.userPrivileges;
  groupPrivileges = other89.groupPrivileges;
  rolePrivileges = other89.rolePrivileges;
  __isset = other89.__isset;
}
PrincipalPrivilegeSet& PrincipalPrivilegeSet::operator=(const PrincipalPrivilegeSet& other90) {
  userPrivileges = other90.userPrivileges;
  groupPrivileges = other90.groupPrivileges;
  rolePrivileges = other90.rolePrivileges;
  __isset = other90.__isset;
  return *this;
}
void PrincipalPrivilegeSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrincipalPrivilegeSet(";
  out << "userPrivileges=" << to_string(userPrivileges);
  out << ", " << "groupPrivileges=" << to_string(groupPrivileges);
  out << ", " << "rolePrivileges=" << to_string(rolePrivileges);
  out << ")";
}


GrantRevokePrivilegeRequest::~GrantRevokePrivilegeRequest() throw() {
}


void GrantRevokePrivilegeRequest::__set_requestType(const GrantRevokeType::type val) {
  this->requestType = val;
}

void GrantRevokePrivilegeRequest::__set_privileges(const PrivilegeBag& val) {
  this->privileges = val;
}

void GrantRevokePrivilegeRequest::__set_revokeGrantOption(const bool val) {
  this->revokeGrantOption = val;
__isset.revokeGrantOption = true;
}

uint32_t GrantRevokePrivilegeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast91;
          xfer += iprot->readI32(ecast91);
          this->requestType = (GrantRevokeType::type)ecast91;
          this->__isset.requestType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->revokeGrantOption);
          this->__isset.revokeGrantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokePrivilegeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokePrivilegeRequest");

  xfer += oprot->writeFieldBegin("requestType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->requestType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->privileges.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.revokeGrantOption) {
    xfer += oprot->writeFieldBegin("revokeGrantOption", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->revokeGrantOption);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokePrivilegeRequest &a, GrantRevokePrivilegeRequest &b) {
  using ::std::swap;
  swap(a.requestType, b.requestType);
  swap(a.privileges, b.privileges);
  swap(a.revokeGrantOption, b.revokeGrantOption);
  swap(a.__isset, b.__isset);
}

GrantRevokePrivilegeRequest::GrantRevokePrivilegeRequest(const GrantRevokePrivilegeRequest& other92) {
  requestType = other92.requestType;
  privileges = other92.privileges;
  revokeGrantOption = other92.revokeGrantOption;
  __isset = other92.__isset;
}
GrantRevokePrivilegeRequest& GrantRevokePrivilegeRequest::operator=(const GrantRevokePrivilegeRequest& other93) {
  requestType = other93.requestType;
  privileges = other93.privileges;
  revokeGrantOption = other93.revokeGrantOption;
  __isset = other93.__isset;
  return *this;
}
void GrantRevokePrivilegeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokePrivilegeRequest(";
  out << "requestType=" << to_string(requestType);
  out << ", " << "privileges=" << to_string(privileges);
  out << ", " << "revokeGrantOption="; (__isset.revokeGrantOption ? (out << to_string(revokeGrantOption)) : (out << "<null>"));
  out << ")";
}


GrantRevokePrivilegeResponse::~GrantRevokePrivilegeResponse() throw() {
}


void GrantRevokePrivilegeResponse::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

uint32_t GrantRevokePrivilegeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokePrivilegeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokePrivilegeResponse");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokePrivilegeResponse &a, GrantRevokePrivilegeResponse &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

GrantRevokePrivilegeResponse::GrantRevokePrivilegeResponse(const GrantRevokePrivilegeResponse& other94) {
  success = other94.success;
  __isset = other94.__isset;
}
GrantRevokePrivilegeResponse& GrantRevokePrivilegeResponse::operator=(const GrantRevokePrivilegeResponse& other95) {
  success = other95.success;
  __isset = other95.__isset;
  return *this;
}
void GrantRevokePrivilegeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokePrivilegeResponse(";
  out << "success="; (__isset.success ? (out << to_string(success)) : (out << "<null>"));
  out << ")";
}


Role::~Role() throw() {
}


void Role::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void Role::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Role::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

uint32_t Role::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          this->__isset.roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerName);
          this->__isset.ownerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Role::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Role");

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ownerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Role &a, Role &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
  swap(a.createTime, b.createTime);
  swap(a.ownerName, b.ownerName);
  swap(a.__isset, b.__isset);
}

Role::Role(const Role& other96) {
  roleName = other96.roleName;
  createTime = other96.createTime;
  ownerName = other96.ownerName;
  __isset = other96.__isset;
}
Role& Role::operator=(const Role& other97) {
  roleName = other97.roleName;
  createTime = other97.createTime;
  ownerName = other97.ownerName;
  __isset = other97.__isset;
  return *this;
}
void Role::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Role(";
  out << "roleName=" << to_string(roleName);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ")";
}


RolePrincipalGrant::~RolePrincipalGrant() throw() {
}


void RolePrincipalGrant::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void RolePrincipalGrant::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void RolePrincipalGrant::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void RolePrincipalGrant::__set_grantOption(const bool val) {
  this->grantOption = val;
}

void RolePrincipalGrant::__set_grantTime(const int32_t val) {
  this->grantTime = val;
}

void RolePrincipalGrant::__set_grantorName(const std::string& val) {
  this->grantorName = val;
}

void RolePrincipalGrant::__set_grantorPrincipalType(const PrincipalType::type val) {
  this->grantorPrincipalType = val;
}

uint32_t RolePrincipalGrant::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          this->__isset.roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principalName);
          this->__isset.principalName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast98;
          xfer += iprot->readI32(ecast98);
          this->principalType = (PrincipalType::type)ecast98;
          this->__isset.principalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantOption);
          this->__isset.grantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->grantTime);
          this->__isset.grantTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->grantorName);
          this->__isset.grantorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast99;
          xfer += iprot->readI32(ecast99);
          this->grantorPrincipalType = (PrincipalType::type)ecast99;
          this->__isset.grantorPrincipalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RolePrincipalGrant::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RolePrincipalGrant");

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->principalName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->principalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantOption", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->grantOption);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->grantTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantorName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->grantorName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantorPrincipalType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->grantorPrincipalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RolePrincipalGrant &a, RolePrincipalGrant &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantOption, b.grantOption);
  swap(a.grantTime, b.grantTime);
  swap(a.grantorName, b.grantorName);
  swap(a.grantorPrincipalType, b.grantorPrincipalType);
  swap(a.__isset, b.__isset);
}

RolePrincipalGrant::RolePrincipalGrant(const RolePrincipalGrant& other100) {
  roleName = other100.roleName;
  principalName = other100.principalName;
  principalType = other100.principalType;
  grantOption = other100.grantOption;
  grantTime = other100.grantTime;
  grantorName = other100.grantorName;
  grantorPrincipalType = other100.grantorPrincipalType;
  __isset = other100.__isset;
}
RolePrincipalGrant& RolePrincipalGrant::operator=(const RolePrincipalGrant& other101) {
  roleName = other101.roleName;
  principalName = other101.principalName;
  principalType = other101.principalType;
  grantOption = other101.grantOption;
  grantTime = other101.grantTime;
  grantorName = other101.grantorName;
  grantorPrincipalType = other101.grantorPrincipalType;
  __isset = other101.__isset;
  return *this;
}
void RolePrincipalGrant::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RolePrincipalGrant(";
  out << "roleName=" << to_string(roleName);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantOption=" << to_string(grantOption);
  out << ", " << "grantTime=" << to_string(grantTime);
  out << ", " << "grantorName=" << to_string(grantorName);
  out << ", " << "grantorPrincipalType=" << to_string(grantorPrincipalType);
  out << ")";
}


GetRoleGrantsForPrincipalRequest::~GetRoleGrantsForPrincipalRequest() throw() {
}


void GetRoleGrantsForPrincipalRequest::__set_principal_name(const std::string& val) {
  this->principal_name = val;
}

void GetRoleGrantsForPrincipalRequest::__set_principal_type(const PrincipalType::type val) {
  this->principal_type = val;
}

uint32_t GetRoleGrantsForPrincipalRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_principal_name = false;
  bool isset_principal_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principal_name);
          isset_principal_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast102;
          xfer += iprot->readI32(ecast102);
          this->principal_type = (PrincipalType::type)ecast102;
          isset_principal_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_principal_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_principal_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetRoleGrantsForPrincipalRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetRoleGrantsForPrincipalRequest");

  xfer += oprot->writeFieldBegin("principal_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->principal_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principal_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->principal_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRoleGrantsForPrincipalRequest &a, GetRoleGrantsForPrincipalRequest &b) {
  using ::std::swap;
  swap(a.principal_name, b.principal_name);
  swap(a.principal_type, b.principal_type);
}

GetRoleGrantsForPrincipalRequest::GetRoleGrantsForPrincipalRequest(const GetRoleGrantsForPrincipalRequest& other103) {
  principal_name = other103.principal_name;
  principal_type = other103.principal_type;
}
GetRoleGrantsForPrincipalRequest& GetRoleGrantsForPrincipalRequest::operator=(const GetRoleGrantsForPrincipalRequest& other104) {
  principal_name = other104.principal_name;
  principal_type = other104.principal_type;
  return *this;
}
void GetRoleGrantsForPrincipalRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRoleGrantsForPrincipalRequest(";
  out << "principal_name=" << to_string(principal_name);
  out << ", " << "principal_type=" << to_string(principal_type);
  out << ")";
}


GetRoleGrantsForPrincipalResponse::~GetRoleGrantsForPrincipalResponse() throw() {
}


void GetRoleGrantsForPrincipalResponse::__set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
  this->principalGrants = val;
}

uint32_t GetRoleGrantsForPrincipalResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_principalGrants = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->principalGrants.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            xfer += iprot->readListBegin(_etype108, _size105);
            this->principalGrants.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += this->principalGrants[_i109].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_principalGrants = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_principalGrants)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetRoleGrantsForPrincipalResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetRoleGrantsForPrincipalResponse");

  xfer += oprot->writeFieldBegin("principalGrants", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->principalGrants.size()));
    std::vector<RolePrincipalGrant> ::const_iterator _iter110;
    for (_iter110 = this->principalGrants.begin(); _iter110 != this->principalGrants.end(); ++_iter110)
    {
      xfer += (*_iter110).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRoleGrantsForPrincipalResponse &a, GetRoleGrantsForPrincipalResponse &b) {
  using ::std::swap;
  swap(a.principalGrants, b.principalGrants);
}

GetRoleGrantsForPrincipalResponse::GetRoleGrantsForPrincipalResponse(const GetRoleGrantsForPrincipalResponse& other111) {
  principalGrants = other111.principalGrants;
}
GetRoleGrantsForPrincipalResponse& GetRoleGrantsForPrincipalResponse::operator=(const GetRoleGrantsForPrincipalResponse& other112) {
  principalGrants = other112.principalGrants;
  return *this;
}
void GetRoleGrantsForPrincipalResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRoleGrantsForPrincipalResponse(";
  out << "principalGrants=" << to_string(principalGrants);
  out << ")";
}


GetPrincipalsInRoleRequest::~GetPrincipalsInRoleRequest() throw() {
}


void GetPrincipalsInRoleRequest::__set_roleName(const std::string& val) {
  this->roleName = val;
}

uint32_t GetPrincipalsInRoleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_roleName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          isset_roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_roleName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetPrincipalsInRoleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetPrincipalsInRoleRequest");

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetPrincipalsInRoleRequest &a, GetPrincipalsInRoleRequest &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
}

GetPrincipalsInRoleRequest::GetPrincipalsInRoleRequest(const GetPrincipalsInRoleRequest& other113) {
  roleName = other113.roleName;
}
GetPrincipalsInRoleRequest& GetPrincipalsInRoleRequest::operator=(const GetPrincipalsInRoleRequest& other114) {
  roleName = other114.roleName;
  return *this;
}
void GetPrincipalsInRoleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPrincipalsInRoleRequest(";
  out << "roleName=" << to_string(roleName);
  out << ")";
}


GetPrincipalsInRoleResponse::~GetPrincipalsInRoleResponse() throw() {
}


void GetPrincipalsInRoleResponse::__set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
  this->principalGrants = val;
}

uint32_t GetPrincipalsInRoleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_principalGrants = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->principalGrants.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _etype118;
            xfer += iprot->readListBegin(_etype118, _size115);
            this->principalGrants.resize(_size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              xfer += this->principalGrants[_i119].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_principalGrants = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_principalGrants)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetPrincipalsInRoleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetPrincipalsInRoleResponse");

  xfer += oprot->writeFieldBegin("principalGrants", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->principalGrants.size()));
    std::vector<RolePrincipalGrant> ::const_iterator _iter120;
    for (_iter120 = this->principalGrants.begin(); _iter120 != this->principalGrants.end(); ++_iter120)
    {
      xfer += (*_iter120).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetPrincipalsInRoleResponse &a, GetPrincipalsInRoleResponse &b) {
  using ::std::swap;
  swap(a.principalGrants, b.principalGrants);
}

GetPrincipalsInRoleResponse::GetPrincipalsInRoleResponse(const GetPrincipalsInRoleResponse& other121) {
  principalGrants = other121.principalGrants;
}
GetPrincipalsInRoleResponse& GetPrincipalsInRoleResponse::operator=(const GetPrincipalsInRoleResponse& other122) {
  principalGrants = other122.principalGrants;
  return *this;
}
void GetPrincipalsInRoleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPrincipalsInRoleResponse(";
  out << "principalGrants=" << to_string(principalGrants);
  out << ")";
}


GrantRevokeRoleRequest::~GrantRevokeRoleRequest() throw() {
}


void GrantRevokeRoleRequest::__set_requestType(const GrantRevokeType::type val) {
  this->requestType = val;
}

void GrantRevokeRoleRequest::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void GrantRevokeRoleRequest::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void GrantRevokeRoleRequest::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void GrantRevokeRoleRequest::__set_grantor(const std::string& val) {
  this->grantor = val;
__isset.grantor = true;
}

void GrantRevokeRoleRequest::__set_grantorType(const PrincipalType::type val) {
  this->grantorType = val;
__isset.grantorType = true;
}

void GrantRevokeRoleRequest::__set_grantOption(const bool val) {
  this->grantOption = val;
__isset.grantOption = true;
}

uint32_t GrantRevokeRoleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast123;
          xfer += iprot->readI32(ecast123);
          this->requestType = (GrantRevokeType::type)ecast123;
          this->__isset.requestType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          this->__isset.roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principalName);
          this->__isset.principalName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast124;
          xfer += iprot->readI32(ecast124);
          this->principalType = (PrincipalType::type)ecast124;
          this->__isset.principalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->grantor);
          this->__isset.grantor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast125;
          xfer += iprot->readI32(ecast125);
          this->grantorType = (PrincipalType::type)ecast125;
          this->__isset.grantorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantOption);
          this->__isset.grantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokeRoleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokeRoleRequest");

  xfer += oprot->writeFieldBegin("requestType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->requestType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->principalName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->principalType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.grantor) {
    xfer += oprot->writeFieldBegin("grantor", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->grantor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.grantorType) {
    xfer += oprot->writeFieldBegin("grantorType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->grantorType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.grantOption) {
    xfer += oprot->writeFieldBegin("grantOption", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->grantOption);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokeRoleRequest &a, GrantRevokeRoleRequest &b) {
  using ::std::swap;
  swap(a.requestType, b.requestType);
  swap(a.roleName, b.roleName);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantor, b.grantor);
  swap(a.grantorType, b.grantorType);
  swap(a.grantOption, b.grantOption);
  swap(a.__isset, b.__isset);
}

GrantRevokeRoleRequest::GrantRevokeRoleRequest(const GrantRevokeRoleRequest& other126) {
  requestType = other126.requestType;
  roleName = other126.roleName;
  principalName = other126.principalName;
  principalType = other126.principalType;
  grantor = other126.grantor;
  grantorType = other126.grantorType;
  grantOption = other126.grantOption;
  __isset = other126.__isset;
}
GrantRevokeRoleRequest& GrantRevokeRoleRequest::operator=(const GrantRevokeRoleRequest& other127) {
  requestType = other127.requestType;
  roleName = other127.roleName;
  principalName = other127.principalName;
  principalType = other127.principalType;
  grantor = other127.grantor;
  grantorType = other127.grantorType;
  grantOption = other127.grantOption;
  __isset = other127.__isset;
  return *this;
}
void GrantRevokeRoleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokeRoleRequest(";
  out << "requestType=" << to_string(requestType);
  out << ", " << "roleName=" << to_string(roleName);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantor="; (__isset.grantor ? (out << to_string(grantor)) : (out << "<null>"));
  out << ", " << "grantorType="; (__isset.grantorType ? (out << to_string(grantorType)) : (out << "<null>"));
  out << ", " << "grantOption="; (__isset.grantOption ? (out << to_string(grantOption)) : (out << "<null>"));
  out << ")";
}


GrantRevokeRoleResponse::~GrantRevokeRoleResponse() throw() {
}


void GrantRevokeRoleResponse::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

uint32_t GrantRevokeRoleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokeRoleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokeRoleResponse");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokeRoleResponse &a, GrantRevokeRoleResponse &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

GrantRevokeRoleResponse::GrantRevokeRoleResponse(const GrantRevokeRoleResponse& other128) {
  success = other128.success;
  __isset = other128.__isset;
}
GrantRevokeRoleResponse& GrantRevokeRoleResponse::operator=(const GrantRevokeRoleResponse& other129) {
  success = other129.success;
  __isset = other129.__isset;
  return *this;
}
void GrantRevokeRoleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokeRoleResponse(";
  out << "success="; (__isset.success ? (out << to_string(success)) : (out << "<null>"));
  out << ")";
}


Catalog::~Catalog() throw() {
}


void Catalog::__set_name(const std::string& val) {
  this->name = val;
}

void Catalog::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void Catalog::__set_locationUri(const std::string& val) {
  this->locationUri = val;
}

uint32_t Catalog::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationUri);
          this->__isset.locationUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Catalog::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Catalog");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("locationUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->locationUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Catalog &a, Catalog &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.locationUri, b.locationUri);
  swap(a.__isset, b.__isset);
}

Catalog::Catalog(const Catalog& other130) {
  name = other130.name;
  description = other130.description;
  locationUri = other130.locationUri;
  __isset = other130.__isset;
}
Catalog& Catalog::operator=(const Catalog& other131) {
  name = other131.name;
  description = other131.description;
  locationUri = other131.locationUri;
  __isset = other131.__isset;
  return *this;
}
void Catalog::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Catalog(";
  out << "name=" << to_string(name);
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "locationUri=" << to_string(locationUri);
  out << ")";
}


CreateCatalogRequest::~CreateCatalogRequest() throw() {
}


void CreateCatalogRequest::__set_catalog(const Catalog& val) {
  this->catalog = val;
}

uint32_t CreateCatalogRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->catalog.read(iprot);
          this->__isset.catalog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateCatalogRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateCatalogRequest");

  xfer += oprot->writeFieldBegin("catalog", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->catalog.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateCatalogRequest &a, CreateCatalogRequest &b) {
  using ::std::swap;
  swap(a.catalog, b.catalog);
  swap(a.__isset, b.__isset);
}

CreateCatalogRequest::CreateCatalogRequest(const CreateCatalogRequest& other132) {
  catalog = other132.catalog;
  __isset = other132.__isset;
}
CreateCatalogRequest& CreateCatalogRequest::operator=(const CreateCatalogRequest& other133) {
  catalog = other133.catalog;
  __isset = other133.__isset;
  return *this;
}
void CreateCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateCatalogRequest(";
  out << "catalog=" << to_string(catalog);
  out << ")";
}


GetCatalogRequest::~GetCatalogRequest() throw() {
}


void GetCatalogRequest::__set_name(const std::string& val) {
  this->name = val;
}

uint32_t GetCatalogRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetCatalogRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetCatalogRequest");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetCatalogRequest &a, GetCatalogRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

GetCatalogRequest::GetCatalogRequest(const GetCatalogRequest& other134) {
  name = other134.name;
  __isset = other134.__isset;
}
GetCatalogRequest& GetCatalogRequest::operator=(const GetCatalogRequest& other135) {
  name = other135.name;
  __isset = other135.__isset;
  return *this;
}
void GetCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetCatalogRequest(";
  out << "name=" << to_string(name);
  out << ")";
}


GetCatalogResponse::~GetCatalogResponse() throw() {
}


void GetCatalogResponse::__set_catalog(const Catalog& val) {
  this->catalog = val;
}

uint32_t GetCatalogResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->catalog.read(iprot);
          this->__isset.catalog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetCatalogResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetCatalogResponse");

  xfer += oprot->writeFieldBegin("catalog", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->catalog.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetCatalogResponse &a, GetCatalogResponse &b) {
  using ::std::swap;
  swap(a.catalog, b.catalog);
  swap(a.__isset, b.__isset);
}

GetCatalogResponse::GetCatalogResponse(const GetCatalogResponse& other136) {
  catalog = other136.catalog;
  __isset = other136.__isset;
}
GetCatalogResponse& GetCatalogResponse::operator=(const GetCatalogResponse& other137) {
  catalog = other137.catalog;
  __isset = other137.__isset;
  return *this;
}
void GetCatalogResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetCatalogResponse(";
  out << "catalog=" << to_string(catalog);
  out << ")";
}


GetCatalogsResponse::~GetCatalogsResponse() throw() {
}


void GetCatalogsResponse::__set_names(const std::vector<std::string> & val) {
  this->names = val;
}

uint32_t GetCatalogsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->names.clear();
            uint32_t _size138;
            ::apache::thrift::protocol::TType _etype141;
            xfer += iprot->readListBegin(_etype141, _size138);
            this->names.resize(_size138);
            uint32_t _i142;
            for (_i142 = 0; _i142 < _size138; ++_i142)
            {
              xfer += iprot->readString(this->names[_i142]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetCatalogsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetCatalogsResponse");

  xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
    std::vector<std::string> ::const_iterator _iter143;
    for (_iter143 = this->names.begin(); _iter143 != this->names.end(); ++_iter143)
    {
      xfer += oprot->writeString((*_iter143));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetCatalogsResponse &a, GetCatalogsResponse &b) {
  using ::std::swap;
  swap(a.names, b.names);
  swap(a.__isset, b.__isset);
}

GetCatalogsResponse::GetCatalogsResponse(const GetCatalogsResponse& other144) {
  names = other144.names;
  __isset = other144.__isset;
}
GetCatalogsResponse& GetCatalogsResponse::operator=(const GetCatalogsResponse& other145) {
  names = other145.names;
  __isset = other145.__isset;
  return *this;
}
void GetCatalogsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetCatalogsResponse(";
  out << "names=" << to_string(names);
  out << ")";
}


DropCatalogRequest::~DropCatalogRequest() throw() {
}


void DropCatalogRequest::__set_name(const std::string& val) {
  this->name = val;
}

uint32_t DropCatalogRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropCatalogRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropCatalogRequest");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropCatalogRequest &a, DropCatalogRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

DropCatalogRequest::DropCatalogRequest(const DropCatalogRequest& other146) {
  name = other146.name;
  __isset = other146.__isset;
}
DropCatalogRequest& DropCatalogRequest::operator=(const DropCatalogRequest& other147) {
  name = other147.name;
  __isset = other147.__isset;
  return *this;
}
void DropCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropCatalogRequest(";
  out << "name=" << to_string(name);
  out << ")";
}


Database::~Database() throw() {
}


void Database::__set_name(const std::string& val) {
  this->name = val;
}

void Database::__set_description(const std::string& val) {
  this->description = val;
}

void Database::__set_locationUri(const std::string& val) {
  this->locationUri = val;
}

void Database::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Database::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Database::__set_ownerName(const std::string& val) {
  this->ownerName = val;
__isset.ownerName = true;
}

void Database::__set_ownerType(const PrincipalType::type val) {
  this->ownerType = val;
__isset.ownerType = true;
}

void Database::__set_catalogName(const std::string& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

uint32_t Database::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationUri);
          this->__isset.locationUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _ktype149;
            ::apache::thrift::protocol::TType _vtype150;
            xfer += iprot->readMapBegin(_ktype149, _vtype150, _size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              std::string _key153;
              xfer += iprot->readString(_key153);
              std::string& _val154 = this->parameters[_key153];
              xfer += iprot->readString(_val154);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerName);
          this->__isset.ownerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast155;
          xfer += iprot->readI32(ecast155);
          this->ownerType = (PrincipalType::type)ecast155;
          this->__isset.ownerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catalogName);
          this->__isset.catalogName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Database::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Database");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locationUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->locationUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter156;
    for (_iter156 = this->parameters.begin(); _iter156 != this->parameters.end(); ++_iter156)
    {
      xfer += oprot->writeString(_iter156->first);
      xfer += oprot->writeString(_iter156->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ownerName) {
    xfer += oprot->writeFieldBegin("ownerName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->ownerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ownerType) {
    xfer += oprot->writeFieldBegin("ownerType", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->ownerType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catalogName) {
    xfer += oprot->writeFieldBegin("catalogName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->catalogName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Database &a, Database &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.locationUri, b.locationUri);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.ownerName, b.ownerName);
  swap(a.ownerType, b.ownerType);
  swap(a.catalogName, b.catalogName);
  swap(a.__isset, b.__isset);
}

Database::Database(const Database& other157) {
  name = other157.name;
  description = other157.description;
  locationUri = other157.locationUri;
  parameters = other157.parameters;
  privileges = other157.privileges;
  ownerName = other157.ownerName;
  ownerType = other157.ownerType;
  catalogName = other157.catalogName;
  __isset = other157.__isset;
}
Database& Database::operator=(const Database& other158) {
  name = other158.name;
  description = other158.description;
  locationUri = other158.locationUri;
  parameters = other158.parameters;
  privileges = other158.privileges;
  ownerName = other158.ownerName;
  ownerType = other158.ownerType;
  catalogName = other158.catalogName;
  __isset = other158.__isset;
  return *this;
}
void Database::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Database(";
  out << "name=" << to_string(name);
  out << ", " << "description=" << to_string(description);
  out << ", " << "locationUri=" << to_string(locationUri);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "ownerName="; (__isset.ownerName ? (out << to_string(ownerName)) : (out << "<null>"));
  out << ", " << "ownerType="; (__isset.ownerType ? (out << to_string(ownerType)) : (out << "<null>"));
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ")";
}


SerDeInfo::~SerDeInfo() throw() {
}


void SerDeInfo::__set_name(const std::string& val) {
  this->name = val;
}

void SerDeInfo::__set_serializationLib(const std::string& val) {
  this->serializationLib = val;
}

void SerDeInfo::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void SerDeInfo::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void SerDeInfo::__set_serializerClass(const std::string& val) {
  this->serializerClass = val;
__isset.serializerClass = true;
}

void SerDeInfo::__set_deserializerClass(const std::string& val) {
  this->deserializerClass = val;
__isset.deserializerClass = true;
}

void SerDeInfo::__set_serdeType(const SerdeType::type val) {
  this->serdeType = val;
__isset.serdeType = true;
}

uint32_t SerDeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serializationLib);
          this->__isset.serializationLib = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size159;
            ::apache::thrift::protocol::TType _ktype160;
            ::apache::thrift::protocol::TType _vtype161;
            xfer += iprot->readMapBegin(_ktype160, _vtype161, _size159);
            uint32_t _i163;
            for (_i163 = 0; _i163 < _size159; ++_i163)
            {
              std::string _key164;
              xfer += iprot->readString(_key164);
              std::string& _val165 = this->parameters[_key164];
              xfer += iprot->readString(_val165);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serializerClass);
          this->__isset.serializerClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deserializerClass);
          this->__isset.deserializerClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast166;
          xfer += iprot->readI32(ecast166);
          this->serdeType = (SerdeType::type)ecast166;
          this->__isset.serdeType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SerDeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SerDeInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serializationLib", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serializationLib);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter167;
    for (_iter167 = this->parameters.begin(); _iter167 != this->parameters.end(); ++_iter167)
    {
      xfer += oprot->writeString(_iter167->first);
      xfer += oprot->writeString(_iter167->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serializerClass) {
    xfer += oprot->writeFieldBegin("serializerClass", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->serializerClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deserializerClass) {
    xfer += oprot->writeFieldBegin("deserializerClass", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->deserializerClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serdeType) {
    xfer += oprot->writeFieldBegin("serdeType", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->serdeType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SerDeInfo &a, SerDeInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.serializationLib, b.serializationLib);
  swap(a.parameters, b.parameters);
  swap(a.description, b.description);
  swap(a.serializerClass, b.serializerClass);
  swap(a.deserializerClass, b.deserializerClass);
  swap(a.serdeType, b.serdeType);
  swap(a.__isset, b.__isset);
}

SerDeInfo::SerDeInfo(const SerDeInfo& other168) {
  name = other168.name;
  serializationLib = other168.serializationLib;
  parameters = other168.parameters;
  description = other168.description;
  serializerClass = other168.serializerClass;
  deserializerClass = other168.deserializerClass;
  serdeType = other168.serdeType;
  __isset = other168.__isset;
}
SerDeInfo& SerDeInfo::operator=(const SerDeInfo& other169) {
  name = other169.name;
  serializationLib = other169.serializationLib;
  parameters = other169.parameters;
  description = other169.description;
  serializerClass = other169.serializerClass;
  deserializerClass = other169.deserializerClass;
  serdeType = other169.serdeType;
  __isset = other169.__isset;
  return *this;
}
void SerDeInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SerDeInfo(";
  out << "name=" << to_string(name);
  out << ", " << "serializationLib=" << to_string(serializationLib);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "serializerClass="; (__isset.serializerClass ? (out << to_string(serializerClass)) : (out << "<null>"));
  out << ", " << "deserializerClass="; (__isset.deserializerClass ? (out << to_string(deserializerClass)) : (out << "<null>"));
  out << ", " << "serdeType="; (__isset.serdeType ? (out << to_string(serdeType)) : (out << "<null>"));
  out << ")";
}


Order::~Order() throw() {
}


void Order::__set_col(const std::string& val) {
  this->col = val;
}

void Order::__set_order(const int32_t val) {
  this->order = val;
}

uint32_t Order::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->col);
          this->__isset.col = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Order::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Order");

  xfer += oprot->writeFieldBegin("col", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->col);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Order &a, Order &b) {
  using ::std::swap;
  swap(a.col, b.col);
  swap(a.order, b.order);
  swap(a.__isset, b.__isset);
}

Order::Order(const Order& other170) {
  col = other170.col;
  order = other170.order;
  __isset = other170.__isset;
}
Order& Order::operator=(const Order& other171) {
  col = other171.col;
  order = other171.order;
  __isset = other171.__isset;
  return *this;
}
void Order::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Order(";
  out << "col=" << to_string(col);
  out << ", " << "order=" << to_string(order);
  out << ")";
}


SkewedInfo::~SkewedInfo() throw() {
}


void SkewedInfo::__set_skewedColNames(const std::vector<std::string> & val) {
  this->skewedColNames = val;
}

void SkewedInfo::__set_skewedColValues(const std::vector<std::vector<std::string> > & val) {
  this->skewedColValues = val;
}

void SkewedInfo::__set_skewedColValueLocationMaps(const std::map<std::vector<std::string> , std::string> & val) {
  this->skewedColValueLocationMaps = val;
}

uint32_t SkewedInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->skewedColNames.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _etype175;
            xfer += iprot->readListBegin(_etype175, _size172);
            this->skewedColNames.resize(_size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              xfer += iprot->readString(this->skewedColNames[_i176]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.skewedColNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->skewedColValues.clear();
            uint32_t _size177;
            ::apache::thrift::protocol::TType _etype180;
            xfer += iprot->readListBegin(_etype180, _size177);
            this->skewedColValues.resize(_size177);
            uint32_t _i181;
            for (_i181 = 0; _i181 < _size177; ++_i181)
            {
              {
                this->skewedColValues[_i181].clear();
                uint32_t _size182;
                ::apache::thrift::protocol::TType _etype185;
                xfer += iprot->readListBegin(_etype185, _size182);
                this->skewedColValues[_i181].resize(_size182);
                uint32_t _i186;
                for (_i186 = 0; _i186 < _size182; ++_i186)
                {
                  xfer += iprot->readString(this->skewedColValues[_i181][_i186]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.skewedColValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skewedColValueLocationMaps.clear();
            uint32_t _size187;
            ::apache::thrift::protocol::TType _ktype188;
            ::apache::thrift::protocol::TType _vtype189;
            xfer += iprot->readMapBegin(_ktype188, _vtype189, _size187);
            uint32_t _i191;
            for (_i191 = 0; _i191 < _size187; ++_i191)
            {
              std::vector<std::string>  _key192;
              {
                _key192.clear();
                uint32_t _size194;
                ::apache::thrift::protocol::TType _etype197;
                xfer += iprot->readListBegin(_etype197, _size194);
                _key192.resize(_size194);
                uint32_t _i198;
                for (_i198 = 0; _i198 < _size194; ++_i198)
                {
                  xfer += iprot->readString(_key192[_i198]);
                }
                xfer += iprot->readListEnd();
              }
              std::string& _val193 = this->skewedColValueLocationMaps[_key192];
              xfer += iprot->readString(_val193);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skewedColValueLocationMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SkewedInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SkewedInfo");

  xfer += oprot->writeFieldBegin("skewedColNames", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->skewedColNames.size()));
    std::vector<std::string> ::const_iterator _iter199;
    for (_iter199 = this->skewedColNames.begin(); _iter199 != this->skewedColNames.end(); ++_iter199)
    {
      xfer += oprot->writeString((*_iter199));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skewedColValues", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->skewedColValues.size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter200;
    for (_iter200 = this->skewedColValues.begin(); _iter200 != this->skewedColValues.end(); ++_iter200)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter200).size()));
        std::vector<std::string> ::const_iterator _iter201;
        for (_iter201 = (*_iter200).begin(); _iter201 != (*_iter200).end(); ++_iter201)
        {
          xfer += oprot->writeString((*_iter201));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skewedColValueLocationMaps", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->skewedColValueLocationMaps.size()));
    std::map<std::vector<std::string> , std::string> ::const_iterator _iter202;
    for (_iter202 = this->skewedColValueLocationMaps.begin(); _iter202 != this->skewedColValueLocationMaps.end(); ++_iter202)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter202->first.size()));
        std::vector<std::string> ::const_iterator _iter203;
        for (_iter203 = _iter202->first.begin(); _iter203 != _iter202->first.end(); ++_iter203)
        {
          xfer += oprot->writeString((*_iter203));
        }
        xfer += oprot->writeListEnd();
      }
      xfer += oprot->writeString(_iter202->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SkewedInfo &a, SkewedInfo &b) {
  using ::std::swap;
  swap(a.skewedColNames, b.skewedColNames);
  swap(a.skewedColValues, b.skewedColValues);
  swap(a.skewedColValueLocationMaps, b.skewedColValueLocationMaps);
  swap(a.__isset, b.__isset);
}

SkewedInfo::SkewedInfo(const SkewedInfo& other204) {
  skewedColNames = other204.skewedColNames;
  skewedColValues = other204.skewedColValues;
  skewedColValueLocationMaps = other204.skewedColValueLocationMaps;
  __isset = other204.__isset;
}
SkewedInfo& SkewedInfo::operator=(const SkewedInfo& other205) {
  skewedColNames = other205.skewedColNames;
  skewedColValues = other205.skewedColValues;
  skewedColValueLocationMaps = other205.skewedColValueLocationMaps;
  __isset = other205.__isset;
  return *this;
}
void SkewedInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SkewedInfo(";
  out << "skewedColNames=" << to_string(skewedColNames);
  out << ", " << "skewedColValues=" << to_string(skewedColValues);
  out << ", " << "skewedColValueLocationMaps=" << to_string(skewedColValueLocationMaps);
  out << ")";
}


StorageDescriptor::~StorageDescriptor() throw() {
}


void StorageDescriptor::__set_cols(const std::vector<FieldSchema> & val) {
  this->cols = val;
}

void StorageDescriptor::__set_location(const std::string& val) {
  this->location = val;
}

void StorageDescriptor::__set_inputFormat(const std::string& val) {
  this->inputFormat = val;
}

void StorageDescriptor::__set_outputFormat(const std::string& val) {
  this->outputFormat = val;
}

void StorageDescriptor::__set_compressed(const bool val) {
  this->compressed = val;
}

void StorageDescriptor::__set_numBuckets(const int32_t val) {
  this->numBuckets = val;
}

void StorageDescriptor::__set_serdeInfo(const SerDeInfo& val) {
  this->serdeInfo = val;
}

void StorageDescriptor::__set_bucketCols(const std::vector<std::string> & val) {
  this->bucketCols = val;
}

void StorageDescriptor::__set_sortCols(const std::vector<Order> & val) {
  this->sortCols = val;
}

void StorageDescriptor::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void StorageDescriptor::__set_skewedInfo(const SkewedInfo& val) {
  this->skewedInfo = val;
__isset.skewedInfo = true;
}

void StorageDescriptor::__set_storedAsSubDirectories(const bool val) {
  this->storedAsSubDirectories = val;
__isset.storedAsSubDirectories = true;
}

uint32_t StorageDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cols.clear();
            uint32_t _size206;
            ::apache::thrift::protocol::TType _etype209;
            xfer += iprot->readListBegin(_etype209, _size206);
            this->cols.resize(_size206);
            uint32_t _i210;
            for (_i210 = 0; _i210 < _size206; ++_i210)
            {
              xfer += this->cols[_i210].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inputFormat);
          this->__isset.inputFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputFormat);
          this->__isset.outputFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->compressed);
          this->__isset.compressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numBuckets);
          this->__isset.numBuckets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serdeInfo.read(iprot);
          this->__isset.serdeInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bucketCols.clear();
            uint32_t _size211;
            ::apache::thrift::protocol::TType _etype214;
            xfer += iprot->readListBegin(_etype214, _size211);
            this->bucketCols.resize(_size211);
            uint32_t _i215;
            for (_i215 = 0; _i215 < _size211; ++_i215)
            {
              xfer += iprot->readString(this->bucketCols[_i215]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bucketCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sortCols.clear();
            uint32_t _size216;
            ::apache::thrift::protocol::TType _etype219;
            xfer += iprot->readListBegin(_etype219, _size216);
            this->sortCols.resize(_size216);
            uint32_t _i220;
            for (_i220 = 0; _i220 < _size216; ++_i220)
            {
              xfer += this->sortCols[_i220].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sortCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size221;
            ::apache::thrift::protocol::TType _ktype222;
            ::apache::thrift::protocol::TType _vtype223;
            xfer += iprot->readMapBegin(_ktype222, _vtype223, _size221);
            uint32_t _i225;
            for (_i225 = 0; _i225 < _size221; ++_i225)
            {
              std::string _key226;
              xfer += iprot->readString(_key226);
              std::string& _val227 = this->parameters[_key226];
              xfer += iprot->readString(_val227);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->skewedInfo.read(iprot);
          this->__isset.skewedInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->storedAsSubDirectories);
          this->__isset.storedAsSubDirectories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StorageDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StorageDescriptor");

  xfer += oprot->writeFieldBegin("cols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cols.size()));
    std::vector<FieldSchema> ::const_iterator _iter228;
    for (_iter228 = this->cols.begin(); _iter228 != this->cols.end(); ++_iter228)
    {
      xfer += (*_iter228).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inputFormat", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->inputFormat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("outputFormat", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->outputFormat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compressed", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->compressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numBuckets", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->numBuckets);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serdeInfo", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->serdeInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bucketCols", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->bucketCols.size()));
    std::vector<std::string> ::const_iterator _iter229;
    for (_iter229 = this->bucketCols.begin(); _iter229 != this->bucketCols.end(); ++_iter229)
    {
      xfer += oprot->writeString((*_iter229));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sortCols", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sortCols.size()));
    std::vector<Order> ::const_iterator _iter230;
    for (_iter230 = this->sortCols.begin(); _iter230 != this->sortCols.end(); ++_iter230)
    {
      xfer += (*_iter230).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter231;
    for (_iter231 = this->parameters.begin(); _iter231 != this->parameters.end(); ++_iter231)
    {
      xfer += oprot->writeString(_iter231->first);
      xfer += oprot->writeString(_iter231->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.skewedInfo) {
    xfer += oprot->writeFieldBegin("skewedInfo", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->skewedInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storedAsSubDirectories) {
    xfer += oprot->writeFieldBegin("storedAsSubDirectories", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->storedAsSubDirectories);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageDescriptor &a, StorageDescriptor &b) {
  using ::std::swap;
  swap(a.cols, b.cols);
  swap(a.location, b.location);
  swap(a.inputFormat, b.inputFormat);
  swap(a.outputFormat, b.outputFormat);
  swap(a.compressed, b.compressed);
  swap(a.numBuckets, b.numBuckets);
  swap(a.serdeInfo, b.serdeInfo);
  swap(a.bucketCols, b.bucketCols);
  swap(a.sortCols, b.sortCols);
  swap(a.parameters, b.parameters);
  swap(a.skewedInfo, b.skewedInfo);
  swap(a.storedAsSubDirectories, b.storedAsSubDirectories);
  swap(a.__isset, b.__isset);
}

StorageDescriptor::StorageDescriptor(const StorageDescriptor& other232) {
  cols = other232.cols;
  location = other232.location;
  inputFormat = other232.inputFormat;
  outputFormat = other232.outputFormat;
  compressed = other232.compressed;
  numBuckets = other232.numBuckets;
  serdeInfo = other232.serdeInfo;
  bucketCols = other232.bucketCols;
  sortCols = other232.sortCols;
  parameters = other232.parameters;
  skewedInfo = other232.skewedInfo;
  storedAsSubDirectories = other232.storedAsSubDirectories;
  __isset = other232.__isset;
}
StorageDescriptor& StorageDescriptor::operator=(const StorageDescriptor& other233) {
  cols = other233.cols;
  location = other233.location;
  inputFormat = other233.inputFormat;
  outputFormat = other233.outputFormat;
  compressed = other233.compressed;
  numBuckets = other233.numBuckets;
  serdeInfo = other233.serdeInfo;
  bucketCols = other233.bucketCols;
  sortCols = other233.sortCols;
  parameters = other233.parameters;
  skewedInfo = other233.skewedInfo;
  storedAsSubDirectories = other233.storedAsSubDirectories;
  __isset = other233.__isset;
  return *this;
}
void StorageDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StorageDescriptor(";
  out << "cols=" << to_string(cols);
  out << ", " << "location=" << to_string(location);
  out << ", " << "inputFormat=" << to_string(inputFormat);
  out << ", " << "outputFormat=" << to_string(outputFormat);
  out << ", " << "compressed=" << to_string(compressed);
  out << ", " << "numBuckets=" << to_string(numBuckets);
  out << ", " << "serdeInfo=" << to_string(serdeInfo);
  out << ", " << "bucketCols=" << to_string(bucketCols);
  out << ", " << "sortCols=" << to_string(sortCols);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "skewedInfo="; (__isset.skewedInfo ? (out << to_string(skewedInfo)) : (out << "<null>"));
  out << ", " << "storedAsSubDirectories="; (__isset.storedAsSubDirectories ? (out << to_string(storedAsSubDirectories)) : (out << "<null>"));
  out << ")";
}


Table::~Table() throw() {
}


void Table::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void Table::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Table::__set_owner(const std::string& val) {
  this->owner = val;
}

void Table::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Table::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void Table::__set_retention(const int32_t val) {
  this->retention = val;
}

void Table::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

void Table::__set_partitionKeys(const std::vector<FieldSchema> & val) {
  this->partitionKeys = val;
}

void Table::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Table::__set_viewOriginalText(const std::string& val) {
  this->viewOriginalText = val;
}

void Table::__set_viewExpandedText(const std::string& val) {
  this->viewExpandedText = val;
}

void Table::__set_tableType(const std::string& val) {
  this->tableType = val;
}

void Table::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Table::__set_temporary(const bool val) {
  this->temporary = val;
__isset.temporary = true;
}

void Table::__set_rewriteEnabled(const bool val) {
  this->rewriteEnabled = val;
__isset.rewriteEnabled = true;
}

void Table::__set_creationMetadata(const CreationMetadata& val) {
  this->creationMetadata = val;
__isset.creationMetadata = true;
}

void Table::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t Table::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retention);
          this->__isset.retention = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sd.read(iprot);
          this->__isset.sd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionKeys.clear();
            uint32_t _size234;
            ::apache::thrift::protocol::TType _etype237;
            xfer += iprot->readListBegin(_etype237, _size234);
            this->partitionKeys.resize(_size234);
            uint32_t _i238;
            for (_i238 = 0; _i238 < _size234; ++_i238)
            {
              xfer += this->partitionKeys[_i238].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitionKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size239;
            ::apache::thrift::protocol::TType _ktype240;
            ::apache::thrift::protocol::TType _vtype241;
            xfer += iprot->readMapBegin(_ktype240, _vtype241, _size239);
            uint32_t _i243;
            for (_i243 = 0; _i243 < _size239; ++_i243)
            {
              std::string _key244;
              xfer += iprot->readString(_key244);
              std::string& _val245 = this->parameters[_key244];
              xfer += iprot->readString(_val245);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewOriginalText);
          this->__isset.viewOriginalText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewExpandedText);
          this->__isset.viewExpandedText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableType);
          this->__isset.tableType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->temporary);
          this->__isset.temporary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rewriteEnabled);
          this->__isset.rewriteEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->creationMetadata.read(iprot);
          this->__isset.creationMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Table::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Table");

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retention", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->retention);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sd", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->sd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionKeys", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionKeys.size()));
    std::vector<FieldSchema> ::const_iterator _iter246;
    for (_iter246 = this->partitionKeys.begin(); _iter246 != this->partitionKeys.end(); ++_iter246)
    {
      xfer += (*_iter246).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter247;
    for (_iter247 = this->parameters.begin(); _iter247 != this->parameters.end(); ++_iter247)
    {
      xfer += oprot->writeString(_iter247->first);
      xfer += oprot->writeString(_iter247->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewOriginalText", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->viewOriginalText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewExpandedText", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->viewExpandedText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableType", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->tableType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temporary) {
    xfer += oprot->writeFieldBegin("temporary", ::apache::thrift::protocol::T_BOOL, 14);
    xfer += oprot->writeBool(this->temporary);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rewriteEnabled) {
    xfer += oprot->writeFieldBegin("rewriteEnabled", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->rewriteEnabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.creationMetadata) {
    xfer += oprot->writeFieldBegin("creationMetadata", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->creationMetadata.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Table &a, Table &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.dbName, b.dbName);
  swap(a.owner, b.owner);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.retention, b.retention);
  swap(a.sd, b.sd);
  swap(a.partitionKeys, b.partitionKeys);
  swap(a.parameters, b.parameters);
  swap(a.viewOriginalText, b.viewOriginalText);
  swap(a.viewExpandedText, b.viewExpandedText);
  swap(a.tableType, b.tableType);
  swap(a.privileges, b.privileges);
  swap(a.temporary, b.temporary);
  swap(a.rewriteEnabled, b.rewriteEnabled);
  swap(a.creationMetadata, b.creationMetadata);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

Table::Table(const Table& other248) {
  tableName = other248.tableName;
  dbName = other248.dbName;
  owner = other248.owner;
  createTime = other248.createTime;
  lastAccessTime = other248.lastAccessTime;
  retention = other248.retention;
  sd = other248.sd;
  partitionKeys = other248.partitionKeys;
  parameters = other248.parameters;
  viewOriginalText = other248.viewOriginalText;
  viewExpandedText = other248.viewExpandedText;
  tableType = other248.tableType;
  privileges = other248.privileges;
  temporary = other248.temporary;
  rewriteEnabled = other248.rewriteEnabled;
  creationMetadata = other248.creationMetadata;
  catName = other248.catName;
  __isset = other248.__isset;
}
Table& Table::operator=(const Table& other249) {
  tableName = other249.tableName;
  dbName = other249.dbName;
  owner = other249.owner;
  createTime = other249.createTime;
  lastAccessTime = other249.lastAccessTime;
  retention = other249.retention;
  sd = other249.sd;
  partitionKeys = other249.partitionKeys;
  parameters = other249.parameters;
  viewOriginalText = other249.viewOriginalText;
  viewExpandedText = other249.viewExpandedText;
  tableType = other249.tableType;
  privileges = other249.privileges;
  temporary = other249.temporary;
  rewriteEnabled = other249.rewriteEnabled;
  creationMetadata = other249.creationMetadata;
  catName = other249.catName;
  __isset = other249.__isset;
  return *this;
}
void Table::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Table(";
  out << "tableName=" << to_string(tableName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "retention=" << to_string(retention);
  out << ", " << "sd=" << to_string(sd);
  out << ", " << "partitionKeys=" << to_string(partitionKeys);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "viewOriginalText=" << to_string(viewOriginalText);
  out << ", " << "viewExpandedText=" << to_string(viewExpandedText);
  out << ", " << "tableType=" << to_string(tableType);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "temporary="; (__isset.temporary ? (out << to_string(temporary)) : (out << "<null>"));
  out << ", " << "rewriteEnabled="; (__isset.rewriteEnabled ? (out << to_string(rewriteEnabled)) : (out << "<null>"));
  out << ", " << "creationMetadata="; (__isset.creationMetadata ? (out << to_string(creationMetadata)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


Partition::~Partition() throw() {
}


void Partition::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void Partition::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Partition::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void Partition::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Partition::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void Partition::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

void Partition::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Partition::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Partition::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t Partition::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size250;
            ::apache::thrift::protocol::TType _etype253;
            xfer += iprot->readListBegin(_etype253, _size250);
            this->values.resize(_size250);
            uint32_t _i254;
            for (_i254 = 0; _i254 < _size250; ++_i254)
            {
              xfer += iprot->readString(this->values[_i254]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sd.read(iprot);
          this->__isset.sd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size255;
            ::apache::thrift::protocol::TType _ktype256;
            ::apache::thrift::protocol::TType _vtype257;
            xfer += iprot->readMapBegin(_ktype256, _vtype257, _size255);
            uint32_t _i259;
            for (_i259 = 0; _i259 < _size255; ++_i259)
            {
              std::string _key260;
              xfer += iprot->readString(_key260);
              std::string& _val261 = this->parameters[_key260];
              xfer += iprot->readString(_val261);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Partition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Partition");

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->values.size()));
    std::vector<std::string> ::const_iterator _iter262;
    for (_iter262 = this->values.begin(); _iter262 != this->values.end(); ++_iter262)
    {
      xfer += oprot->writeString((*_iter262));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sd", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->sd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter263;
    for (_iter263 = this->parameters.begin(); _iter263 != this->parameters.end(); ++_iter263)
    {
      xfer += oprot->writeString(_iter263->first);
      xfer += oprot->writeString(_iter263->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Partition &a, Partition &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.sd, b.sd);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

Partition::Partition(const Partition& other264) {
  values = other264.values;
  dbName = other264.dbName;
  tableName = other264.tableName;
  createTime = other264.createTime;
  lastAccessTime = other264.lastAccessTime;
  sd = other264.sd;
  parameters = other264.parameters;
  privileges = other264.privileges;
  catName = other264.catName;
  __isset = other264.__isset;
}
Partition& Partition::operator=(const Partition& other265) {
  values = other265.values;
  dbName = other265.dbName;
  tableName = other265.tableName;
  createTime = other265.createTime;
  lastAccessTime = other265.lastAccessTime;
  sd = other265.sd;
  parameters = other265.parameters;
  privileges = other265.privileges;
  catName = other265.catName;
  __isset = other265.__isset;
  return *this;
}
void Partition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Partition(";
  out << "values=" << to_string(values);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "sd=" << to_string(sd);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PartitionWithoutSD::~PartitionWithoutSD() throw() {
}


void PartitionWithoutSD::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void PartitionWithoutSD::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void PartitionWithoutSD::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void PartitionWithoutSD::__set_relativePath(const std::string& val) {
  this->relativePath = val;
}

void PartitionWithoutSD::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void PartitionWithoutSD::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

uint32_t PartitionWithoutSD::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size266;
            ::apache::thrift::protocol::TType _etype269;
            xfer += iprot->readListBegin(_etype269, _size266);
            this->values.resize(_size266);
            uint32_t _i270;
            for (_i270 = 0; _i270 < _size266; ++_i270)
            {
              xfer += iprot->readString(this->values[_i270]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->relativePath);
          this->__isset.relativePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size271;
            ::apache::thrift::protocol::TType _ktype272;
            ::apache::thrift::protocol::TType _vtype273;
            xfer += iprot->readMapBegin(_ktype272, _vtype273, _size271);
            uint32_t _i275;
            for (_i275 = 0; _i275 < _size271; ++_i275)
            {
              std::string _key276;
              xfer += iprot->readString(_key276);
              std::string& _val277 = this->parameters[_key276];
              xfer += iprot->readString(_val277);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionWithoutSD::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionWithoutSD");

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->values.size()));
    std::vector<std::string> ::const_iterator _iter278;
    for (_iter278 = this->values.begin(); _iter278 != this->values.end(); ++_iter278)
    {
      xfer += oprot->writeString((*_iter278));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relativePath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->relativePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter279;
    for (_iter279 = this->parameters.begin(); _iter279 != this->parameters.end(); ++_iter279)
    {
      xfer += oprot->writeString(_iter279->first);
      xfer += oprot->writeString(_iter279->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionWithoutSD &a, PartitionWithoutSD &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.relativePath, b.relativePath);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.__isset, b.__isset);
}

PartitionWithoutSD::PartitionWithoutSD(const PartitionWithoutSD& other280) {
  values = other280.values;
  createTime = other280.createTime;
  lastAccessTime = other280.lastAccessTime;
  relativePath = other280.relativePath;
  parameters = other280.parameters;
  privileges = other280.privileges;
  __isset = other280.__isset;
}
PartitionWithoutSD& PartitionWithoutSD::operator=(const PartitionWithoutSD& other281) {
  values = other281.values;
  createTime = other281.createTime;
  lastAccessTime = other281.lastAccessTime;
  relativePath = other281.relativePath;
  parameters = other281.parameters;
  privileges = other281.privileges;
  __isset = other281.__isset;
  return *this;
}
void PartitionWithoutSD::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionWithoutSD(";
  out << "values=" << to_string(values);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "relativePath=" << to_string(relativePath);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ")";
}


PartitionSpecWithSharedSD::~PartitionSpecWithSharedSD() throw() {
}


void PartitionSpecWithSharedSD::__set_partitions(const std::vector<PartitionWithoutSD> & val) {
  this->partitions = val;
}

void PartitionSpecWithSharedSD::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

uint32_t PartitionSpecWithSharedSD::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size282;
            ::apache::thrift::protocol::TType _etype285;
            xfer += iprot->readListBegin(_etype285, _size282);
            this->partitions.resize(_size282);
            uint32_t _i286;
            for (_i286 = 0; _i286 < _size282; ++_i286)
            {
              xfer += this->partitions[_i286].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sd.read(iprot);
          this->__isset.sd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionSpecWithSharedSD::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionSpecWithSharedSD");

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<PartitionWithoutSD> ::const_iterator _iter287;
    for (_iter287 = this->partitions.begin(); _iter287 != this->partitions.end(); ++_iter287)
    {
      xfer += (*_iter287).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sd", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionSpecWithSharedSD &a, PartitionSpecWithSharedSD &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.sd, b.sd);
  swap(a.__isset, b.__isset);
}

PartitionSpecWithSharedSD::PartitionSpecWithSharedSD(const PartitionSpecWithSharedSD& other288) {
  partitions = other288.partitions;
  sd = other288.sd;
  __isset = other288.__isset;
}
PartitionSpecWithSharedSD& PartitionSpecWithSharedSD::operator=(const PartitionSpecWithSharedSD& other289) {
  partitions = other289.partitions;
  sd = other289.sd;
  __isset = other289.__isset;
  return *this;
}
void PartitionSpecWithSharedSD::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionSpecWithSharedSD(";
  out << "partitions=" << to_string(partitions);
  out << ", " << "sd=" << to_string(sd);
  out << ")";
}


PartitionListComposingSpec::~PartitionListComposingSpec() throw() {
}


void PartitionListComposingSpec::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}

uint32_t PartitionListComposingSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size290;
            ::apache::thrift::protocol::TType _etype293;
            xfer += iprot->readListBegin(_etype293, _size290);
            this->partitions.resize(_size290);
            uint32_t _i294;
            for (_i294 = 0; _i294 < _size290; ++_i294)
            {
              xfer += this->partitions[_i294].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionListComposingSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionListComposingSpec");

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<Partition> ::const_iterator _iter295;
    for (_iter295 = this->partitions.begin(); _iter295 != this->partitions.end(); ++_iter295)
    {
      xfer += (*_iter295).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionListComposingSpec &a, PartitionListComposingSpec &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

PartitionListComposingSpec::PartitionListComposingSpec(const PartitionListComposingSpec& other296) {
  partitions = other296.partitions;
  __isset = other296.__isset;
}
PartitionListComposingSpec& PartitionListComposingSpec::operator=(const PartitionListComposingSpec& other297) {
  partitions = other297.partitions;
  __isset = other297.__isset;
  return *this;
}
void PartitionListComposingSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionListComposingSpec(";
  out << "partitions=" << to_string(partitions);
  out << ")";
}


PartitionSpec::~PartitionSpec() throw() {
}


void PartitionSpec::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionSpec::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void PartitionSpec::__set_rootPath(const std::string& val) {
  this->rootPath = val;
}

void PartitionSpec::__set_sharedSDPartitionSpec(const PartitionSpecWithSharedSD& val) {
  this->sharedSDPartitionSpec = val;
__isset.sharedSDPartitionSpec = true;
}

void PartitionSpec::__set_partitionList(const PartitionListComposingSpec& val) {
  this->partitionList = val;
__isset.partitionList = true;
}

void PartitionSpec::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t PartitionSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rootPath);
          this->__isset.rootPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sharedSDPartitionSpec.read(iprot);
          this->__isset.sharedSDPartitionSpec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->partitionList.read(iprot);
          this->__isset.partitionList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionSpec");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rootPath", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->rootPath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sharedSDPartitionSpec) {
    xfer += oprot->writeFieldBegin("sharedSDPartitionSpec", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->sharedSDPartitionSpec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionList) {
    xfer += oprot->writeFieldBegin("partitionList", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->partitionList.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionSpec &a, PartitionSpec &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.rootPath, b.rootPath);
  swap(a.sharedSDPartitionSpec, b.sharedSDPartitionSpec);
  swap(a.partitionList, b.partitionList);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

PartitionSpec::PartitionSpec(const PartitionSpec& other298) {
  dbName = other298.dbName;
  tableName = other298.tableName;
  rootPath = other298.rootPath;
  sharedSDPartitionSpec = other298.sharedSDPartitionSpec;
  partitionList = other298.partitionList;
  catName = other298.catName;
  __isset = other298.__isset;
}
PartitionSpec& PartitionSpec::operator=(const PartitionSpec& other299) {
  dbName = other299.dbName;
  tableName = other299.tableName;
  rootPath = other299.rootPath;
  sharedSDPartitionSpec = other299.sharedSDPartitionSpec;
  partitionList = other299.partitionList;
  catName = other299.catName;
  __isset = other299.__isset;
  return *this;
}
void PartitionSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionSpec(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "rootPath=" << to_string(rootPath);
  out << ", " << "sharedSDPartitionSpec="; (__isset.sharedSDPartitionSpec ? (out << to_string(sharedSDPartitionSpec)) : (out << "<null>"));
  out << ", " << "partitionList="; (__isset.partitionList ? (out << to_string(partitionList)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


BooleanColumnStatsData::~BooleanColumnStatsData() throw() {
}


void BooleanColumnStatsData::__set_numTrues(const int64_t val) {
  this->numTrues = val;
}

void BooleanColumnStatsData::__set_numFalses(const int64_t val) {
  this->numFalses = val;
}

void BooleanColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void BooleanColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t BooleanColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numTrues = false;
  bool isset_numFalses = false;
  bool isset_numNulls = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numTrues);
          isset_numTrues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numFalses);
          isset_numFalses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numTrues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numFalses)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BooleanColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BooleanColumnStatsData");

  xfer += oprot->writeFieldBegin("numTrues", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->numTrues);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numFalses", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->numFalses);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BooleanColumnStatsData &a, BooleanColumnStatsData &b) {
  using ::std::swap;
  swap(a.numTrues, b.numTrues);
  swap(a.numFalses, b.numFalses);
  swap(a.numNulls, b.numNulls);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

BooleanColumnStatsData::BooleanColumnStatsData(const BooleanColumnStatsData& other300) {
  numTrues = other300.numTrues;
  numFalses = other300.numFalses;
  numNulls = other300.numNulls;
  bitVectors = other300.bitVectors;
  __isset = other300.__isset;
}
BooleanColumnStatsData& BooleanColumnStatsData::operator=(const BooleanColumnStatsData& other301) {
  numTrues = other301.numTrues;
  numFalses = other301.numFalses;
  numNulls = other301.numNulls;
  bitVectors = other301.bitVectors;
  __isset = other301.__isset;
  return *this;
}
void BooleanColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BooleanColumnStatsData(";
  out << "numTrues=" << to_string(numTrues);
  out << ", " << "numFalses=" << to_string(numFalses);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


DoubleColumnStatsData::~DoubleColumnStatsData() throw() {
}


void DoubleColumnStatsData::__set_lowValue(const double val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DoubleColumnStatsData::__set_highValue(const double val) {
  this->highValue = val;
__isset.highValue = true;
}

void DoubleColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DoubleColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DoubleColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t DoubleColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lowValue);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->highValue);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DoubleColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoubleColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_DOUBLE, 1);
    xfer += oprot->writeDouble(this->lowValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->highValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoubleColumnStatsData &a, DoubleColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DoubleColumnStatsData::DoubleColumnStatsData(const DoubleColumnStatsData& other302) {
  lowValue = other302.lowValue;
  highValue = other302.highValue;
  numNulls = other302.numNulls;
  numDVs = other302.numDVs;
  bitVectors = other302.bitVectors;
  __isset = other302.__isset;
}
DoubleColumnStatsData& DoubleColumnStatsData::operator=(const DoubleColumnStatsData& other303) {
  lowValue = other303.lowValue;
  highValue = other303.highValue;
  numNulls = other303.numNulls;
  numDVs = other303.numDVs;
  bitVectors = other303.bitVectors;
  __isset = other303.__isset;
  return *this;
}
void DoubleColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoubleColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


LongColumnStatsData::~LongColumnStatsData() throw() {
}


void LongColumnStatsData::__set_lowValue(const int64_t val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void LongColumnStatsData::__set_highValue(const int64_t val) {
  this->highValue = val;
__isset.highValue = true;
}

void LongColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void LongColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void LongColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t LongColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lowValue);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->highValue);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LongColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LongColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->lowValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->highValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LongColumnStatsData &a, LongColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

LongColumnStatsData::LongColumnStatsData(const LongColumnStatsData& other304) {
  lowValue = other304.lowValue;
  highValue = other304.highValue;
  numNulls = other304.numNulls;
  numDVs = other304.numDVs;
  bitVectors = other304.bitVectors;
  __isset = other304.__isset;
}
LongColumnStatsData& LongColumnStatsData::operator=(const LongColumnStatsData& other305) {
  lowValue = other305.lowValue;
  highValue = other305.highValue;
  numNulls = other305.numNulls;
  numDVs = other305.numDVs;
  bitVectors = other305.bitVectors;
  __isset = other305.__isset;
  return *this;
}
void LongColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LongColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


StringColumnStatsData::~StringColumnStatsData() throw() {
}


void StringColumnStatsData::__set_maxColLen(const int64_t val) {
  this->maxColLen = val;
}

void StringColumnStatsData::__set_avgColLen(const double val) {
  this->avgColLen = val;
}

void StringColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void StringColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void StringColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t StringColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_maxColLen = false;
  bool isset_avgColLen = false;
  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxColLen);
          isset_maxColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avgColLen);
          isset_avgColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_maxColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_avgColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StringColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StringColumnStatsData");

  xfer += oprot->writeFieldBegin("maxColLen", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->maxColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgColLen", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->avgColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StringColumnStatsData &a, StringColumnStatsData &b) {
  using ::std::swap;
  swap(a.maxColLen, b.maxColLen);
  swap(a.avgColLen, b.avgColLen);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

StringColumnStatsData::StringColumnStatsData(const StringColumnStatsData& other306) {
  maxColLen = other306.maxColLen;
  avgColLen = other306.avgColLen;
  numNulls = other306.numNulls;
  numDVs = other306.numDVs;
  bitVectors = other306.bitVectors;
  __isset = other306.__isset;
}
StringColumnStatsData& StringColumnStatsData::operator=(const StringColumnStatsData& other307) {
  maxColLen = other307.maxColLen;
  avgColLen = other307.avgColLen;
  numNulls = other307.numNulls;
  numDVs = other307.numDVs;
  bitVectors = other307.bitVectors;
  __isset = other307.__isset;
  return *this;
}
void StringColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StringColumnStatsData(";
  out << "maxColLen=" << to_string(maxColLen);
  out << ", " << "avgColLen=" << to_string(avgColLen);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


BinaryColumnStatsData::~BinaryColumnStatsData() throw() {
}


void BinaryColumnStatsData::__set_maxColLen(const int64_t val) {
  this->maxColLen = val;
}

void BinaryColumnStatsData::__set_avgColLen(const double val) {
  this->avgColLen = val;
}

void BinaryColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void BinaryColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t BinaryColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_maxColLen = false;
  bool isset_avgColLen = false;
  bool isset_numNulls = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxColLen);
          isset_maxColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avgColLen);
          isset_avgColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_maxColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_avgColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BinaryColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BinaryColumnStatsData");

  xfer += oprot->writeFieldBegin("maxColLen", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->maxColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgColLen", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->avgColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BinaryColumnStatsData &a, BinaryColumnStatsData &b) {
  using ::std::swap;
  swap(a.maxColLen, b.maxColLen);
  swap(a.avgColLen, b.avgColLen);
  swap(a.numNulls, b.numNulls);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

BinaryColumnStatsData::BinaryColumnStatsData(const BinaryColumnStatsData& other308) {
  maxColLen = other308.maxColLen;
  avgColLen = other308.avgColLen;
  numNulls = other308.numNulls;
  bitVectors = other308.bitVectors;
  __isset = other308.__isset;
}
BinaryColumnStatsData& BinaryColumnStatsData::operator=(const BinaryColumnStatsData& other309) {
  maxColLen = other309.maxColLen;
  avgColLen = other309.avgColLen;
  numNulls = other309.numNulls;
  bitVectors = other309.bitVectors;
  __isset = other309.__isset;
  return *this;
}
void BinaryColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BinaryColumnStatsData(";
  out << "maxColLen=" << to_string(maxColLen);
  out << ", " << "avgColLen=" << to_string(avgColLen);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


Decimal::~Decimal() throw() {
}


void Decimal::__set_unscaled(const std::string& val) {
  this->unscaled = val;
}

void Decimal::__set_scale(const int16_t val) {
  this->scale = val;
}

uint32_t Decimal::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_unscaled = false;
  bool isset_scale = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->unscaled);
          isset_unscaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->scale);
          isset_scale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_unscaled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scale)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Decimal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Decimal");

  xfer += oprot->writeFieldBegin("unscaled", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->unscaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scale", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->scale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Decimal &a, Decimal &b) {
  using ::std::swap;
  swap(a.unscaled, b.unscaled);
  swap(a.scale, b.scale);
}

Decimal::Decimal(const Decimal& other310) {
  unscaled = other310.unscaled;
  scale = other310.scale;
}
Decimal& Decimal::operator=(const Decimal& other311) {
  unscaled = other311.unscaled;
  scale = other311.scale;
  return *this;
}
void Decimal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Decimal(";
  out << "unscaled=" << to_string(unscaled);
  out << ", " << "scale=" << to_string(scale);
  out << ")";
}


DecimalColumnStatsData::~DecimalColumnStatsData() throw() {
}


void DecimalColumnStatsData::__set_lowValue(const Decimal& val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DecimalColumnStatsData::__set_highValue(const Decimal& val) {
  this->highValue = val;
__isset.highValue = true;
}

void DecimalColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DecimalColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DecimalColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t DecimalColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lowValue.read(iprot);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->highValue.read(iprot);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DecimalColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DecimalColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->lowValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->highValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DecimalColumnStatsData &a, DecimalColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DecimalColumnStatsData::DecimalColumnStatsData(const DecimalColumnStatsData& other312) {
  lowValue = other312.lowValue;
  highValue = other312.highValue;
  numNulls = other312.numNulls;
  numDVs = other312.numDVs;
  bitVectors = other312.bitVectors;
  __isset = other312.__isset;
}
DecimalColumnStatsData& DecimalColumnStatsData::operator=(const DecimalColumnStatsData& other313) {
  lowValue = other313.lowValue;
  highValue = other313.highValue;
  numNulls = other313.numNulls;
  numDVs = other313.numDVs;
  bitVectors = other313.bitVectors;
  __isset = other313.__isset;
  return *this;
}
void DecimalColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DecimalColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


Date::~Date() throw() {
}


void Date::__set_daysSinceEpoch(const int64_t val) {
  this->daysSinceEpoch = val;
}

uint32_t Date::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_daysSinceEpoch = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->daysSinceEpoch);
          isset_daysSinceEpoch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_daysSinceEpoch)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Date::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Date");

  xfer += oprot->writeFieldBegin("daysSinceEpoch", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->daysSinceEpoch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Date &a, Date &b) {
  using ::std::swap;
  swap(a.daysSinceEpoch, b.daysSinceEpoch);
}

Date::Date(const Date& other314) {
  daysSinceEpoch = other314.daysSinceEpoch;
}
Date& Date::operator=(const Date& other315) {
  daysSinceEpoch = other315.daysSinceEpoch;
  return *this;
}
void Date::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Date(";
  out << "daysSinceEpoch=" << to_string(daysSinceEpoch);
  out << ")";
}


DateColumnStatsData::~DateColumnStatsData() throw() {
}


void DateColumnStatsData::__set_lowValue(const Date& val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DateColumnStatsData::__set_highValue(const Date& val) {
  this->highValue = val;
__isset.highValue = true;
}

void DateColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DateColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DateColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t DateColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lowValue.read(iprot);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->highValue.read(iprot);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DateColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DateColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->lowValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->highValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DateColumnStatsData &a, DateColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DateColumnStatsData::DateColumnStatsData(const DateColumnStatsData& other316) {
  lowValue = other316.lowValue;
  highValue = other316.highValue;
  numNulls = other316.numNulls;
  numDVs = other316.numDVs;
  bitVectors = other316.bitVectors;
  __isset = other316.__isset;
}
DateColumnStatsData& DateColumnStatsData::operator=(const DateColumnStatsData& other317) {
  lowValue = other317.lowValue;
  highValue = other317.highValue;
  numNulls = other317.numNulls;
  numDVs = other317.numDVs;
  bitVectors = other317.bitVectors;
  __isset = other317.__isset;
  return *this;
}
void DateColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DateColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


ColumnStatisticsData::~ColumnStatisticsData() throw() {
}


void ColumnStatisticsData::__set_booleanStats(const BooleanColumnStatsData& val) {
  this->booleanStats = val;
}

void ColumnStatisticsData::__set_longStats(const LongColumnStatsData& val) {
  this->longStats = val;
}

void ColumnStatisticsData::__set_doubleStats(const DoubleColumnStatsData& val) {
  this->doubleStats = val;
}

void ColumnStatisticsData::__set_stringStats(const StringColumnStatsData& val) {
  this->stringStats = val;
}

void ColumnStatisticsData::__set_binaryStats(const BinaryColumnStatsData& val) {
  this->binaryStats = val;
}

void ColumnStatisticsData::__set_decimalStats(const DecimalColumnStatsData& val) {
  this->decimalStats = val;
}

void ColumnStatisticsData::__set_dateStats(const DateColumnStatsData& val) {
  this->dateStats = val;
}

uint32_t ColumnStatisticsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->booleanStats.read(iprot);
          this->__isset.booleanStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->longStats.read(iprot);
          this->__isset.longStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->doubleStats.read(iprot);
          this->__isset.doubleStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stringStats.read(iprot);
          this->__isset.stringStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->binaryStats.read(iprot);
          this->__isset.binaryStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->decimalStats.read(iprot);
          this->__isset.decimalStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dateStats.read(iprot);
          this->__isset.dateStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnStatisticsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatisticsData");

  xfer += oprot->writeFieldBegin("booleanStats", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->booleanStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longStats", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->longStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doubleStats", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->doubleStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringStats", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->stringStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("binaryStats", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->binaryStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decimalStats", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->decimalStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dateStats", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->dateStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatisticsData &a, ColumnStatisticsData &b) {
  using ::std::swap;
  swap(a.booleanStats, b.booleanStats);
  swap(a.longStats, b.longStats);
  swap(a.doubleStats, b.doubleStats);
  swap(a.stringStats, b.stringStats);
  swap(a.binaryStats, b.binaryStats);
  swap(a.decimalStats, b.decimalStats);
  swap(a.dateStats, b.dateStats);
  swap(a.__isset, b.__isset);
}

ColumnStatisticsData::ColumnStatisticsData(const ColumnStatisticsData& other318) {
  booleanStats = other318.booleanStats;
  longStats = other318.longStats;
  doubleStats = other318.doubleStats;
  stringStats = other318.stringStats;
  binaryStats = other318.binaryStats;
  decimalStats = other318.decimalStats;
  dateStats = other318.dateStats;
  __isset = other318.__isset;
}
ColumnStatisticsData& ColumnStatisticsData::operator=(const ColumnStatisticsData& other319) {
  booleanStats = other319.booleanStats;
  longStats = other319.longStats;
  doubleStats = other319.doubleStats;
  stringStats = other319.stringStats;
  binaryStats = other319.binaryStats;
  decimalStats = other319.decimalStats;
  dateStats = other319.dateStats;
  __isset = other319.__isset;
  return *this;
}
void ColumnStatisticsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsData(";
  out << "booleanStats=" << to_string(booleanStats);
  out << ", " << "longStats=" << to_string(longStats);
  out << ", " << "doubleStats=" << to_string(doubleStats);
  out << ", " << "stringStats=" << to_string(stringStats);
  out << ", " << "binaryStats=" << to_string(binaryStats);
  out << ", " << "decimalStats=" << to_string(decimalStats);
  out << ", " << "dateStats=" << to_string(dateStats);
  out << ")";
}


ColumnStatisticsObj::~ColumnStatisticsObj() throw() {
}


void ColumnStatisticsObj::__set_colName(const std::string& val) {
  this->colName = val;
}

void ColumnStatisticsObj::__set_colType(const std::string& val) {
  this->colType = val;
}

void ColumnStatisticsObj::__set_statsData(const ColumnStatisticsData& val) {
  this->statsData = val;
}

uint32_t ColumnStatisticsObj::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_colName = false;
  bool isset_colType = false;
  bool isset_statsData = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colName);
          isset_colName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colType);
          isset_colType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->statsData.read(iprot);
          isset_statsData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_colName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_statsData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnStatisticsObj::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatisticsObj");

  xfer += oprot->writeFieldBegin("colName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->colName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->colType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statsData", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->statsData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatisticsObj &a, ColumnStatisticsObj &b) {
  using ::std::swap;
  swap(a.colName, b.colName);
  swap(a.colType, b.colType);
  swap(a.statsData, b.statsData);
}

ColumnStatisticsObj::ColumnStatisticsObj(const ColumnStatisticsObj& other320) {
  colName = other320.colName;
  colType = other320.colType;
  statsData = other320.statsData;
}
ColumnStatisticsObj& ColumnStatisticsObj::operator=(const ColumnStatisticsObj& other321) {
  colName = other321.colName;
  colType = other321.colType;
  statsData = other321.statsData;
  return *this;
}
void ColumnStatisticsObj::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsObj(";
  out << "colName=" << to_string(colName);
  out << ", " << "colType=" << to_string(colType);
  out << ", " << "statsData=" << to_string(statsData);
  out << ")";
}


ColumnStatisticsDesc::~ColumnStatisticsDesc() throw() {
}


void ColumnStatisticsDesc::__set_isTblLevel(const bool val) {
  this->isTblLevel = val;
}

void ColumnStatisticsDesc::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ColumnStatisticsDesc::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void ColumnStatisticsDesc::__set_partName(const std::string& val) {
  this->partName = val;
__isset.partName = true;
}

void ColumnStatisticsDesc::__set_lastAnalyzed(const int64_t val) {
  this->lastAnalyzed = val;
__isset.lastAnalyzed = true;
}

void ColumnStatisticsDesc::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t ColumnStatisticsDesc::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isTblLevel = false;
  bool isset_dbName = false;
  bool isset_tableName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isTblLevel);
          isset_isTblLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          isset_tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partName);
          this->__isset.partName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastAnalyzed);
          this->__isset.lastAnalyzed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isTblLevel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnStatisticsDesc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatisticsDesc");

  xfer += oprot->writeFieldBegin("isTblLevel", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isTblLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partName) {
    xfer += oprot->writeFieldBegin("partName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->partName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastAnalyzed) {
    xfer += oprot->writeFieldBegin("lastAnalyzed", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->lastAnalyzed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatisticsDesc &a, ColumnStatisticsDesc &b) {
  using ::std::swap;
  swap(a.isTblLevel, b.isTblLevel);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partName, b.partName);
  swap(a.lastAnalyzed, b.lastAnalyzed);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

ColumnStatisticsDesc::ColumnStatisticsDesc(const ColumnStatisticsDesc& other322) {
  isTblLevel = other322.isTblLevel;
  dbName = other322.dbName;
  tableName = other322.tableName;
  partName = other322.partName;
  lastAnalyzed = other322.lastAnalyzed;
  catName = other322.catName;
  __isset = other322.__isset;
}
ColumnStatisticsDesc& ColumnStatisticsDesc::operator=(const ColumnStatisticsDesc& other323) {
  isTblLevel = other323.isTblLevel;
  dbName = other323.dbName;
  tableName = other323.tableName;
  partName = other323.partName;
  lastAnalyzed = other323.lastAnalyzed;
  catName = other323.catName;
  __isset = other323.__isset;
  return *this;
}
void ColumnStatisticsDesc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsDesc(";
  out << "isTblLevel=" << to_string(isTblLevel);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "partName="; (__isset.partName ? (out << to_string(partName)) : (out << "<null>"));
  out << ", " << "lastAnalyzed="; (__isset.lastAnalyzed ? (out << to_string(lastAnalyzed)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


ColumnStatistics::~ColumnStatistics() throw() {
}


void ColumnStatistics::__set_statsDesc(const ColumnStatisticsDesc& val) {
  this->statsDesc = val;
}

void ColumnStatistics::__set_statsObj(const std::vector<ColumnStatisticsObj> & val) {
  this->statsObj = val;
}

uint32_t ColumnStatistics::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_statsDesc = false;
  bool isset_statsObj = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->statsDesc.read(iprot);
          isset_statsDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->statsObj.clear();
            uint32_t _size324;
            ::apache::thrift::protocol::TType _etype327;
            xfer += iprot->readListBegin(_etype327, _size324);
            this->statsObj.resize(_size324);
            uint32_t _i328;
            for (_i328 = 0; _i328 < _size324; ++_i328)
            {
              xfer += this->statsObj[_i328].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_statsObj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_statsDesc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_statsObj)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnStatistics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatistics");

  xfer += oprot->writeFieldBegin("statsDesc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->statsDesc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statsObj", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statsObj.size()));
    std::vector<ColumnStatisticsObj> ::const_iterator _iter329;
    for (_iter329 = this->statsObj.begin(); _iter329 != this->statsObj.end(); ++_iter329)
    {
      xfer += (*_iter329).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatistics &a, ColumnStatistics &b) {
  using ::std::swap;
  swap(a.statsDesc, b.statsDesc);
  swap(a.statsObj, b.statsObj);
}

ColumnStatistics::ColumnStatistics(const ColumnStatistics& other330) {
  statsDesc = other330.statsDesc;
  statsObj = other330.statsObj;
}
ColumnStatistics& ColumnStatistics::operator=(const ColumnStatistics& other331) {
  statsDesc = other331.statsDesc;
  statsObj = other331.statsObj;
  return *this;
}
void ColumnStatistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatistics(";
  out << "statsDesc=" << to_string(statsDesc);
  out << ", " << "statsObj=" << to_string(statsObj);
  out << ")";
}


AggrStats::~AggrStats() throw() {
}


void AggrStats::__set_colStats(const std::vector<ColumnStatisticsObj> & val) {
  this->colStats = val;
}

void AggrStats::__set_partsFound(const int64_t val) {
  this->partsFound = val;
}

uint32_t AggrStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_colStats = false;
  bool isset_partsFound = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colStats.clear();
            uint32_t _size332;
            ::apache::thrift::protocol::TType _etype335;
            xfer += iprot->readListBegin(_etype335, _size332);
            this->colStats.resize(_size332);
            uint32_t _i336;
            for (_i336 = 0; _i336 < _size332; ++_i336)
            {
              xfer += this->colStats[_i336].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_colStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partsFound);
          isset_partsFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_colStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partsFound)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AggrStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AggrStats");

  xfer += oprot->writeFieldBegin("colStats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->colStats.size()));
    std::vector<ColumnStatisticsObj> ::const_iterator _iter337;
    for (_iter337 = this->colStats.begin(); _iter337 != this->colStats.end(); ++_iter337)
    {
      xfer += (*_iter337).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partsFound", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->partsFound);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AggrStats &a, AggrStats &b) {
  using ::std::swap;
  swap(a.colStats, b.colStats);
  swap(a.partsFound, b.partsFound);
}

AggrStats::AggrStats(const AggrStats& other338) {
  colStats = other338.colStats;
  partsFound = other338.partsFound;
}
AggrStats& AggrStats::operator=(const AggrStats& other339) {
  colStats = other339.colStats;
  partsFound = other339.partsFound;
  return *this;
}
void AggrStats::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AggrStats(";
  out << "colStats=" << to_string(colStats);
  out << ", " << "partsFound=" << to_string(partsFound);
  out << ")";
}


SetPartitionsStatsRequest::~SetPartitionsStatsRequest() throw() {
}


void SetPartitionsStatsRequest::__set_colStats(const std::vector<ColumnStatistics> & val) {
  this->colStats = val;
}

void SetPartitionsStatsRequest::__set_needMerge(const bool val) {
  this->needMerge = val;
__isset.needMerge = true;
}

uint32_t SetPartitionsStatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_colStats = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colStats.clear();
            uint32_t _size340;
            ::apache::thrift::protocol::TType _etype343;
            xfer += iprot->readListBegin(_etype343, _size340);
            this->colStats.resize(_size340);
            uint32_t _i344;
            for (_i344 = 0; _i344 < _size340; ++_i344)
            {
              xfer += this->colStats[_i344].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_colStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needMerge);
          this->__isset.needMerge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_colStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetPartitionsStatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SetPartitionsStatsRequest");

  xfer += oprot->writeFieldBegin("colStats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->colStats.size()));
    std::vector<ColumnStatistics> ::const_iterator _iter345;
    for (_iter345 = this->colStats.begin(); _iter345 != this->colStats.end(); ++_iter345)
    {
      xfer += (*_iter345).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.needMerge) {
    xfer += oprot->writeFieldBegin("needMerge", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->needMerge);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetPartitionsStatsRequest &a, SetPartitionsStatsRequest &b) {
  using ::std::swap;
  swap(a.colStats, b.colStats);
  swap(a.needMerge, b.needMerge);
  swap(a.__isset, b.__isset);
}

SetPartitionsStatsRequest::SetPartitionsStatsRequest(const SetPartitionsStatsRequest& other346) {
  colStats = other346.colStats;
  needMerge = other346.needMerge;
  __isset = other346.__isset;
}
SetPartitionsStatsRequest& SetPartitionsStatsRequest::operator=(const SetPartitionsStatsRequest& other347) {
  colStats = other347.colStats;
  needMerge = other347.needMerge;
  __isset = other347.__isset;
  return *this;
}
void SetPartitionsStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetPartitionsStatsRequest(";
  out << "colStats=" << to_string(colStats);
  out << ", " << "needMerge="; (__isset.needMerge ? (out << to_string(needMerge)) : (out << "<null>"));
  out << ")";
}


Schema::~Schema() throw() {
}


void Schema::__set_fieldSchemas(const std::vector<FieldSchema> & val) {
  this->fieldSchemas = val;
}

void Schema::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t Schema::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fieldSchemas.clear();
            uint32_t _size348;
            ::apache::thrift::protocol::TType _etype351;
            xfer += iprot->readListBegin(_etype351, _size348);
            this->fieldSchemas.resize(_size348);
            uint32_t _i352;
            for (_i352 = 0; _i352 < _size348; ++_i352)
            {
              xfer += this->fieldSchemas[_i352].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fieldSchemas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size353;
            ::apache::thrift::protocol::TType _ktype354;
            ::apache::thrift::protocol::TType _vtype355;
            xfer += iprot->readMapBegin(_ktype354, _vtype355, _size353);
            uint32_t _i357;
            for (_i357 = 0; _i357 < _size353; ++_i357)
            {
              std::string _key358;
              xfer += iprot->readString(_key358);
              std::string& _val359 = this->properties[_key358];
              xfer += iprot->readString(_val359);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Schema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Schema");

  xfer += oprot->writeFieldBegin("fieldSchemas", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fieldSchemas.size()));
    std::vector<FieldSchema> ::const_iterator _iter360;
    for (_iter360 = this->fieldSchemas.begin(); _iter360 != this->fieldSchemas.end(); ++_iter360)
    {
      xfer += (*_iter360).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter361;
    for (_iter361 = this->properties.begin(); _iter361 != this->properties.end(); ++_iter361)
    {
      xfer += oprot->writeString(_iter361->first);
      xfer += oprot->writeString(_iter361->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Schema &a, Schema &b) {
  using ::std::swap;
  swap(a.fieldSchemas, b.fieldSchemas);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

Schema::Schema(const Schema& other362) {
  fieldSchemas = other362.fieldSchemas;
  properties = other362.properties;
  __isset = other362.__isset;
}
Schema& Schema::operator=(const Schema& other363) {
  fieldSchemas = other363.fieldSchemas;
  properties = other363.properties;
  __isset = other363.__isset;
  return *this;
}
void Schema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Schema(";
  out << "fieldSchemas=" << to_string(fieldSchemas);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


EnvironmentContext::~EnvironmentContext() throw() {
}


void EnvironmentContext::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t EnvironmentContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size364;
            ::apache::thrift::protocol::TType _ktype365;
            ::apache::thrift::protocol::TType _vtype366;
            xfer += iprot->readMapBegin(_ktype365, _vtype366, _size364);
            uint32_t _i368;
            for (_i368 = 0; _i368 < _size364; ++_i368)
            {
              std::string _key369;
              xfer += iprot->readString(_key369);
              std::string& _val370 = this->properties[_key369];
              xfer += iprot->readString(_val370);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EnvironmentContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EnvironmentContext");

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter371;
    for (_iter371 = this->properties.begin(); _iter371 != this->properties.end(); ++_iter371)
    {
      xfer += oprot->writeString(_iter371->first);
      xfer += oprot->writeString(_iter371->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EnvironmentContext &a, EnvironmentContext &b) {
  using ::std::swap;
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

EnvironmentContext::EnvironmentContext(const EnvironmentContext& other372) {
  properties = other372.properties;
  __isset = other372.__isset;
}
EnvironmentContext& EnvironmentContext::operator=(const EnvironmentContext& other373) {
  properties = other373.properties;
  __isset = other373.__isset;
  return *this;
}
void EnvironmentContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EnvironmentContext(";
  out << "properties=" << to_string(properties);
  out << ")";
}


PrimaryKeysRequest::~PrimaryKeysRequest() throw() {
}


void PrimaryKeysRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void PrimaryKeysRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

void PrimaryKeysRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t PrimaryKeysRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrimaryKeysRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrimaryKeysRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrimaryKeysRequest &a, PrimaryKeysRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

PrimaryKeysRequest::PrimaryKeysRequest(const PrimaryKeysRequest& other374) {
  db_name = other374.db_name;
  tbl_name = other374.tbl_name;
  catName = other374.catName;
  __isset = other374.__isset;
}
PrimaryKeysRequest& PrimaryKeysRequest::operator=(const PrimaryKeysRequest& other375) {
  db_name = other375.db_name;
  tbl_name = other375.tbl_name;
  catName = other375.catName;
  __isset = other375.__isset;
  return *this;
}
void PrimaryKeysRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrimaryKeysRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PrimaryKeysResponse::~PrimaryKeysResponse() throw() {
}


void PrimaryKeysResponse::__set_primaryKeys(const std::vector<SQLPrimaryKey> & val) {
  this->primaryKeys = val;
}

uint32_t PrimaryKeysResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_primaryKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->primaryKeys.clear();
            uint32_t _size376;
            ::apache::thrift::protocol::TType _etype379;
            xfer += iprot->readListBegin(_etype379, _size376);
            this->primaryKeys.resize(_size376);
            uint32_t _i380;
            for (_i380 = 0; _i380 < _size376; ++_i380)
            {
              xfer += this->primaryKeys[_i380].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_primaryKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_primaryKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrimaryKeysResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrimaryKeysResponse");

  xfer += oprot->writeFieldBegin("primaryKeys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->primaryKeys.size()));
    std::vector<SQLPrimaryKey> ::const_iterator _iter381;
    for (_iter381 = this->primaryKeys.begin(); _iter381 != this->primaryKeys.end(); ++_iter381)
    {
      xfer += (*_iter381).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrimaryKeysResponse &a, PrimaryKeysResponse &b) {
  using ::std::swap;
  swap(a.primaryKeys, b.primaryKeys);
}

PrimaryKeysResponse::PrimaryKeysResponse(const PrimaryKeysResponse& other382) {
  primaryKeys = other382.primaryKeys;
}
PrimaryKeysResponse& PrimaryKeysResponse::operator=(const PrimaryKeysResponse& other383) {
  primaryKeys = other383.primaryKeys;
  return *this;
}
void PrimaryKeysResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrimaryKeysResponse(";
  out << "primaryKeys=" << to_string(primaryKeys);
  out << ")";
}


ForeignKeysRequest::~ForeignKeysRequest() throw() {
}


void ForeignKeysRequest::__set_parent_db_name(const std::string& val) {
  this->parent_db_name = val;
}

void ForeignKeysRequest::__set_parent_tbl_name(const std::string& val) {
  this->parent_tbl_name = val;
}

void ForeignKeysRequest::__set_foreign_db_name(const std::string& val) {
  this->foreign_db_name = val;
}

void ForeignKeysRequest::__set_foreign_tbl_name(const std::string& val) {
  this->foreign_tbl_name = val;
}

void ForeignKeysRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t ForeignKeysRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parent_db_name);
          this->__isset.parent_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parent_tbl_name);
          this->__isset.parent_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->foreign_db_name);
          this->__isset.foreign_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->foreign_tbl_name);
          this->__isset.foreign_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ForeignKeysRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ForeignKeysRequest");

  xfer += oprot->writeFieldBegin("parent_db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->parent_db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent_tbl_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->parent_tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foreign_db_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->foreign_db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foreign_tbl_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->foreign_tbl_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ForeignKeysRequest &a, ForeignKeysRequest &b) {
  using ::std::swap;
  swap(a.parent_db_name, b.parent_db_name);
  swap(a.parent_tbl_name, b.parent_tbl_name);
  swap(a.foreign_db_name, b.foreign_db_name);
  swap(a.foreign_tbl_name, b.foreign_tbl_name);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

ForeignKeysRequest::ForeignKeysRequest(const ForeignKeysRequest& other384) {
  parent_db_name = other384.parent_db_name;
  parent_tbl_name = other384.parent_tbl_name;
  foreign_db_name = other384.foreign_db_name;
  foreign_tbl_name = other384.foreign_tbl_name;
  catName = other384.catName;
  __isset = other384.__isset;
}
ForeignKeysRequest& ForeignKeysRequest::operator=(const ForeignKeysRequest& other385) {
  parent_db_name = other385.parent_db_name;
  parent_tbl_name = other385.parent_tbl_name;
  foreign_db_name = other385.foreign_db_name;
  foreign_tbl_name = other385.foreign_tbl_name;
  catName = other385.catName;
  __isset = other385.__isset;
  return *this;
}
void ForeignKeysRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ForeignKeysRequest(";
  out << "parent_db_name=" << to_string(parent_db_name);
  out << ", " << "parent_tbl_name=" << to_string(parent_tbl_name);
  out << ", " << "foreign_db_name=" << to_string(foreign_db_name);
  out << ", " << "foreign_tbl_name=" << to_string(foreign_tbl_name);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


ForeignKeysResponse::~ForeignKeysResponse() throw() {
}


void ForeignKeysResponse::__set_foreignKeys(const std::vector<SQLForeignKey> & val) {
  this->foreignKeys = val;
}

uint32_t ForeignKeysResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_foreignKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->foreignKeys.clear();
            uint32_t _size386;
            ::apache::thrift::protocol::TType _etype389;
            xfer += iprot->readListBegin(_etype389, _size386);
            this->foreignKeys.resize(_size386);
            uint32_t _i390;
            for (_i390 = 0; _i390 < _size386; ++_i390)
            {
              xfer += this->foreignKeys[_i390].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_foreignKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_foreignKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ForeignKeysResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ForeignKeysResponse");

  xfer += oprot->writeFieldBegin("foreignKeys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->foreignKeys.size()));
    std::vector<SQLForeignKey> ::const_iterator _iter391;
    for (_iter391 = this->foreignKeys.begin(); _iter391 != this->foreignKeys.end(); ++_iter391)
    {
      xfer += (*_iter391).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ForeignKeysResponse &a, ForeignKeysResponse &b) {
  using ::std::swap;
  swap(a.foreignKeys, b.foreignKeys);
}

ForeignKeysResponse::ForeignKeysResponse(const ForeignKeysResponse& other392) {
  foreignKeys = other392.foreignKeys;
}
ForeignKeysResponse& ForeignKeysResponse::operator=(const ForeignKeysResponse& other393) {
  foreignKeys = other393.foreignKeys;
  return *this;
}
void ForeignKeysResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ForeignKeysResponse(";
  out << "foreignKeys=" << to_string(foreignKeys);
  out << ")";
}


UniqueConstraintsRequest::~UniqueConstraintsRequest() throw() {
}


void UniqueConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void UniqueConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void UniqueConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t UniqueConstraintsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_catName = false;
  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          isset_catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_catName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UniqueConstraintsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UniqueConstraintsRequest");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UniqueConstraintsRequest &a, UniqueConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

UniqueConstraintsRequest::UniqueConstraintsRequest(const UniqueConstraintsRequest& other394) {
  catName = other394.catName;
  db_name = other394.db_name;
  tbl_name = other394.tbl_name;
}
UniqueConstraintsRequest& UniqueConstraintsRequest::operator=(const UniqueConstraintsRequest& other395) {
  catName = other395.catName;
  db_name = other395.db_name;
  tbl_name = other395.tbl_name;
  return *this;
}
void UniqueConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UniqueConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


UniqueConstraintsResponse::~UniqueConstraintsResponse() throw() {
}


void UniqueConstraintsResponse::__set_uniqueConstraints(const std::vector<SQLUniqueConstraint> & val) {
  this->uniqueConstraints = val;
}

uint32_t UniqueConstraintsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uniqueConstraints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uniqueConstraints.clear();
            uint32_t _size396;
            ::apache::thrift::protocol::TType _etype399;
            xfer += iprot->readListBegin(_etype399, _size396);
            this->uniqueConstraints.resize(_size396);
            uint32_t _i400;
            for (_i400 = 0; _i400 < _size396; ++_i400)
            {
              xfer += this->uniqueConstraints[_i400].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_uniqueConstraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uniqueConstraints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UniqueConstraintsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UniqueConstraintsResponse");

  xfer += oprot->writeFieldBegin("uniqueConstraints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->uniqueConstraints.size()));
    std::vector<SQLUniqueConstraint> ::const_iterator _iter401;
    for (_iter401 = this->uniqueConstraints.begin(); _iter401 != this->uniqueConstraints.end(); ++_iter401)
    {
      xfer += (*_iter401).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UniqueConstraintsResponse &a, UniqueConstraintsResponse &b) {
  using ::std::swap;
  swap(a.uniqueConstraints, b.uniqueConstraints);
}

UniqueConstraintsResponse::UniqueConstraintsResponse(const UniqueConstraintsResponse& other402) {
  uniqueConstraints = other402.uniqueConstraints;
}
UniqueConstraintsResponse& UniqueConstraintsResponse::operator=(const UniqueConstraintsResponse& other403) {
  uniqueConstraints = other403.uniqueConstraints;
  return *this;
}
void UniqueConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UniqueConstraintsResponse(";
  out << "uniqueConstraints=" << to_string(uniqueConstraints);
  out << ")";
}


NotNullConstraintsRequest::~NotNullConstraintsRequest() throw() {
}


void NotNullConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void NotNullConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void NotNullConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t NotNullConstraintsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_catName = false;
  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          isset_catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_catName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotNullConstraintsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotNullConstraintsRequest");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotNullConstraintsRequest &a, NotNullConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

NotNullConstraintsRequest::NotNullConstraintsRequest(const NotNullConstraintsRequest& other404) {
  catName = other404.catName;
  db_name = other404.db_name;
  tbl_name = other404.tbl_name;
}
NotNullConstraintsRequest& NotNullConstraintsRequest::operator=(const NotNullConstraintsRequest& other405) {
  catName = other405.catName;
  db_name = other405.db_name;
  tbl_name = other405.tbl_name;
  return *this;
}
void NotNullConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotNullConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


NotNullConstraintsResponse::~NotNullConstraintsResponse() throw() {
}


void NotNullConstraintsResponse::__set_notNullConstraints(const std::vector<SQLNotNullConstraint> & val) {
  this->notNullConstraints = val;
}

uint32_t NotNullConstraintsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notNullConstraints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->notNullConstraints.clear();
            uint32_t _size406;
            ::apache::thrift::protocol::TType _etype409;
            xfer += iprot->readListBegin(_etype409, _size406);
            this->notNullConstraints.resize(_size406);
            uint32_t _i410;
            for (_i410 = 0; _i410 < _size406; ++_i410)
            {
              xfer += this->notNullConstraints[_i410].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_notNullConstraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notNullConstraints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotNullConstraintsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotNullConstraintsResponse");

  xfer += oprot->writeFieldBegin("notNullConstraints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->notNullConstraints.size()));
    std::vector<SQLNotNullConstraint> ::const_iterator _iter411;
    for (_iter411 = this->notNullConstraints.begin(); _iter411 != this->notNullConstraints.end(); ++_iter411)
    {
      xfer += (*_iter411).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotNullConstraintsResponse &a, NotNullConstraintsResponse &b) {
  using ::std::swap;
  swap(a.notNullConstraints, b.notNullConstraints);
}

NotNullConstraintsResponse::NotNullConstraintsResponse(const NotNullConstraintsResponse& other412) {
  notNullConstraints = other412.notNullConstraints;
}
NotNullConstraintsResponse& NotNullConstraintsResponse::operator=(const NotNullConstraintsResponse& other413) {
  notNullConstraints = other413.notNullConstraints;
  return *this;
}
void NotNullConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotNullConstraintsResponse(";
  out << "notNullConstraints=" << to_string(notNullConstraints);
  out << ")";
}


DefaultConstraintsRequest::~DefaultConstraintsRequest() throw() {
}


void DefaultConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void DefaultConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DefaultConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t DefaultConstraintsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_catName = false;
  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          isset_catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_catName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DefaultConstraintsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DefaultConstraintsRequest");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DefaultConstraintsRequest &a, DefaultConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

DefaultConstraintsRequest::DefaultConstraintsRequest(const DefaultConstraintsRequest& other414) {
  catName = other414.catName;
  db_name = other414.db_name;
  tbl_name = other414.tbl_name;
}
DefaultConstraintsRequest& DefaultConstraintsRequest::operator=(const DefaultConstraintsRequest& other415) {
  catName = other415.catName;
  db_name = other415.db_name;
  tbl_name = other415.tbl_name;
  return *this;
}
void DefaultConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefaultConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


DefaultConstraintsResponse::~DefaultConstraintsResponse() throw() {
}


void DefaultConstraintsResponse::__set_defaultConstraints(const std::vector<SQLDefaultConstraint> & val) {
  this->defaultConstraints = val;
}

uint32_t DefaultConstraintsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_defaultConstraints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->defaultConstraints.clear();
            uint32_t _size416;
            ::apache::thrift::protocol::TType _etype419;
            xfer += iprot->readListBegin(_etype419, _size416);
            this->defaultConstraints.resize(_size416);
            uint32_t _i420;
            for (_i420 = 0; _i420 < _size416; ++_i420)
            {
              xfer += this->defaultConstraints[_i420].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_defaultConstraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_defaultConstraints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DefaultConstraintsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DefaultConstraintsResponse");

  xfer += oprot->writeFieldBegin("defaultConstraints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->defaultConstraints.size()));
    std::vector<SQLDefaultConstraint> ::const_iterator _iter421;
    for (_iter421 = this->defaultConstraints.begin(); _iter421 != this->defaultConstraints.end(); ++_iter421)
    {
      xfer += (*_iter421).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DefaultConstraintsResponse &a, DefaultConstraintsResponse &b) {
  using ::std::swap;
  swap(a.defaultConstraints, b.defaultConstraints);
}

DefaultConstraintsResponse::DefaultConstraintsResponse(const DefaultConstraintsResponse& other422) {
  defaultConstraints = other422.defaultConstraints;
}
DefaultConstraintsResponse& DefaultConstraintsResponse::operator=(const DefaultConstraintsResponse& other423) {
  defaultConstraints = other423.defaultConstraints;
  return *this;
}
void DefaultConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefaultConstraintsResponse(";
  out << "defaultConstraints=" << to_string(defaultConstraints);
  out << ")";
}


CheckConstraintsRequest::~CheckConstraintsRequest() throw() {
}


void CheckConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void CheckConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CheckConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t CheckConstraintsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_catName = false;
  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          isset_catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_catName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CheckConstraintsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckConstraintsRequest");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckConstraintsRequest &a, CheckConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

CheckConstraintsRequest::CheckConstraintsRequest(const CheckConstraintsRequest& other424) {
  catName = other424.catName;
  db_name = other424.db_name;
  tbl_name = other424.tbl_name;
}
CheckConstraintsRequest& CheckConstraintsRequest::operator=(const CheckConstraintsRequest& other425) {
  catName = other425.catName;
  db_name = other425.db_name;
  tbl_name = other425.tbl_name;
  return *this;
}
void CheckConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


CheckConstraintsResponse::~CheckConstraintsResponse() throw() {
}


void CheckConstraintsResponse::__set_checkConstraints(const std::vector<SQLCheckConstraint> & val) {
  this->checkConstraints = val;
}

uint32_t CheckConstraintsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_checkConstraints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->checkConstraints.clear();
            uint32_t _size426;
            ::apache::thrift::protocol::TType _etype429;
            xfer += iprot->readListBegin(_etype429, _size426);
            this->checkConstraints.resize(_size426);
            uint32_t _i430;
            for (_i430 = 0; _i430 < _size426; ++_i430)
            {
              xfer += this->checkConstraints[_i430].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_checkConstraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_checkConstraints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CheckConstraintsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckConstraintsResponse");

  xfer += oprot->writeFieldBegin("checkConstraints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->checkConstraints.size()));
    std::vector<SQLCheckConstraint> ::const_iterator _iter431;
    for (_iter431 = this->checkConstraints.begin(); _iter431 != this->checkConstraints.end(); ++_iter431)
    {
      xfer += (*_iter431).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckConstraintsResponse &a, CheckConstraintsResponse &b) {
  using ::std::swap;
  swap(a.checkConstraints, b.checkConstraints);
}

CheckConstraintsResponse::CheckConstraintsResponse(const CheckConstraintsResponse& other432) {
  checkConstraints = other432.checkConstraints;
}
CheckConstraintsResponse& CheckConstraintsResponse::operator=(const CheckConstraintsResponse& other433) {
  checkConstraints = other433.checkConstraints;
  return *this;
}
void CheckConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckConstraintsResponse(";
  out << "checkConstraints=" << to_string(checkConstraints);
  out << ")";
}


DropConstraintRequest::~DropConstraintRequest() throw() {
}


void DropConstraintRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void DropConstraintRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void DropConstraintRequest::__set_constraintname(const std::string& val) {
  this->constraintname = val;
}

void DropConstraintRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t DropConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_constraintname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->constraintname);
          isset_constraintname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_constraintname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DropConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropConstraintRequest");

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("constraintname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->constraintname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropConstraintRequest &a, DropConstraintRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.constraintname, b.constraintname);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

DropConstraintRequest::DropConstraintRequest(const DropConstraintRequest& other434) {
  dbname = other434.dbname;
  tablename = other434.tablename;
  constraintname = other434.constraintname;
  catName = other434.catName;
  __isset = other434.__isset;
}
DropConstraintRequest& DropConstraintRequest::operator=(const DropConstraintRequest& other435) {
  dbname = other435.dbname;
  tablename = other435.tablename;
  constraintname = other435.constraintname;
  catName = other435.catName;
  __isset = other435.__isset;
  return *this;
}
void DropConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropConstraintRequest(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "constraintname=" << to_string(constraintname);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


AddPrimaryKeyRequest::~AddPrimaryKeyRequest() throw() {
}


void AddPrimaryKeyRequest::__set_primaryKeyCols(const std::vector<SQLPrimaryKey> & val) {
  this->primaryKeyCols = val;
}

uint32_t AddPrimaryKeyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_primaryKeyCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->primaryKeyCols.clear();
            uint32_t _size436;
            ::apache::thrift::protocol::TType _etype439;
            xfer += iprot->readListBegin(_etype439, _size436);
            this->primaryKeyCols.resize(_size436);
            uint32_t _i440;
            for (_i440 = 0; _i440 < _size436; ++_i440)
            {
              xfer += this->primaryKeyCols[_i440].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_primaryKeyCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_primaryKeyCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddPrimaryKeyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddPrimaryKeyRequest");

  xfer += oprot->writeFieldBegin("primaryKeyCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->primaryKeyCols.size()));
    std::vector<SQLPrimaryKey> ::const_iterator _iter441;
    for (_iter441 = this->primaryKeyCols.begin(); _iter441 != this->primaryKeyCols.end(); ++_iter441)
    {
      xfer += (*_iter441).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddPrimaryKeyRequest &a, AddPrimaryKeyRequest &b) {
  using ::std::swap;
  swap(a.primaryKeyCols, b.primaryKeyCols);
}

AddPrimaryKeyRequest::AddPrimaryKeyRequest(const AddPrimaryKeyRequest& other442) {
  primaryKeyCols = other442.primaryKeyCols;
}
AddPrimaryKeyRequest& AddPrimaryKeyRequest::operator=(const AddPrimaryKeyRequest& other443) {
  primaryKeyCols = other443.primaryKeyCols;
  return *this;
}
void AddPrimaryKeyRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPrimaryKeyRequest(";
  out << "primaryKeyCols=" << to_string(primaryKeyCols);
  out << ")";
}


AddForeignKeyRequest::~AddForeignKeyRequest() throw() {
}


void AddForeignKeyRequest::__set_foreignKeyCols(const std::vector<SQLForeignKey> & val) {
  this->foreignKeyCols = val;
}

uint32_t AddForeignKeyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_foreignKeyCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->foreignKeyCols.clear();
            uint32_t _size444;
            ::apache::thrift::protocol::TType _etype447;
            xfer += iprot->readListBegin(_etype447, _size444);
            this->foreignKeyCols.resize(_size444);
            uint32_t _i448;
            for (_i448 = 0; _i448 < _size444; ++_i448)
            {
              xfer += this->foreignKeyCols[_i448].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_foreignKeyCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_foreignKeyCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddForeignKeyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddForeignKeyRequest");

  xfer += oprot->writeFieldBegin("foreignKeyCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->foreignKeyCols.size()));
    std::vector<SQLForeignKey> ::const_iterator _iter449;
    for (_iter449 = this->foreignKeyCols.begin(); _iter449 != this->foreignKeyCols.end(); ++_iter449)
    {
      xfer += (*_iter449).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddForeignKeyRequest &a, AddForeignKeyRequest &b) {
  using ::std::swap;
  swap(a.foreignKeyCols, b.foreignKeyCols);
}

AddForeignKeyRequest::AddForeignKeyRequest(const AddForeignKeyRequest& other450) {
  foreignKeyCols = other450.foreignKeyCols;
}
AddForeignKeyRequest& AddForeignKeyRequest::operator=(const AddForeignKeyRequest& other451) {
  foreignKeyCols = other451.foreignKeyCols;
  return *this;
}
void AddForeignKeyRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddForeignKeyRequest(";
  out << "foreignKeyCols=" << to_string(foreignKeyCols);
  out << ")";
}


AddUniqueConstraintRequest::~AddUniqueConstraintRequest() throw() {
}


void AddUniqueConstraintRequest::__set_uniqueConstraintCols(const std::vector<SQLUniqueConstraint> & val) {
  this->uniqueConstraintCols = val;
}

uint32_t AddUniqueConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uniqueConstraintCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uniqueConstraintCols.clear();
            uint32_t _size452;
            ::apache::thrift::protocol::TType _etype455;
            xfer += iprot->readListBegin(_etype455, _size452);
            this->uniqueConstraintCols.resize(_size452);
            uint32_t _i456;
            for (_i456 = 0; _i456 < _size452; ++_i456)
            {
              xfer += this->uniqueConstraintCols[_i456].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_uniqueConstraintCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uniqueConstraintCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddUniqueConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddUniqueConstraintRequest");

  xfer += oprot->writeFieldBegin("uniqueConstraintCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->uniqueConstraintCols.size()));
    std::vector<SQLUniqueConstraint> ::const_iterator _iter457;
    for (_iter457 = this->uniqueConstraintCols.begin(); _iter457 != this->uniqueConstraintCols.end(); ++_iter457)
    {
      xfer += (*_iter457).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddUniqueConstraintRequest &a, AddUniqueConstraintRequest &b) {
  using ::std::swap;
  swap(a.uniqueConstraintCols, b.uniqueConstraintCols);
}

AddUniqueConstraintRequest::AddUniqueConstraintRequest(const AddUniqueConstraintRequest& other458) {
  uniqueConstraintCols = other458.uniqueConstraintCols;
}
AddUniqueConstraintRequest& AddUniqueConstraintRequest::operator=(const AddUniqueConstraintRequest& other459) {
  uniqueConstraintCols = other459.uniqueConstraintCols;
  return *this;
}
void AddUniqueConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddUniqueConstraintRequest(";
  out << "uniqueConstraintCols=" << to_string(uniqueConstraintCols);
  out << ")";
}


AddNotNullConstraintRequest::~AddNotNullConstraintRequest() throw() {
}


void AddNotNullConstraintRequest::__set_notNullConstraintCols(const std::vector<SQLNotNullConstraint> & val) {
  this->notNullConstraintCols = val;
}

uint32_t AddNotNullConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notNullConstraintCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->notNullConstraintCols.clear();
            uint32_t _size460;
            ::apache::thrift::protocol::TType _etype463;
            xfer += iprot->readListBegin(_etype463, _size460);
            this->notNullConstraintCols.resize(_size460);
            uint32_t _i464;
            for (_i464 = 0; _i464 < _size460; ++_i464)
            {
              xfer += this->notNullConstraintCols[_i464].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_notNullConstraintCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notNullConstraintCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddNotNullConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddNotNullConstraintRequest");

  xfer += oprot->writeFieldBegin("notNullConstraintCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->notNullConstraintCols.size()));
    std::vector<SQLNotNullConstraint> ::const_iterator _iter465;
    for (_iter465 = this->notNullConstraintCols.begin(); _iter465 != this->notNullConstraintCols.end(); ++_iter465)
    {
      xfer += (*_iter465).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddNotNullConstraintRequest &a, AddNotNullConstraintRequest &b) {
  using ::std::swap;
  swap(a.notNullConstraintCols, b.notNullConstraintCols);
}

AddNotNullConstraintRequest::AddNotNullConstraintRequest(const AddNotNullConstraintRequest& other466) {
  notNullConstraintCols = other466.notNullConstraintCols;
}
AddNotNullConstraintRequest& AddNotNullConstraintRequest::operator=(const AddNotNullConstraintRequest& other467) {
  notNullConstraintCols = other467.notNullConstraintCols;
  return *this;
}
void AddNotNullConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddNotNullConstraintRequest(";
  out << "notNullConstraintCols=" << to_string(notNullConstraintCols);
  out << ")";
}


AddDefaultConstraintRequest::~AddDefaultConstraintRequest() throw() {
}


void AddDefaultConstraintRequest::__set_defaultConstraintCols(const std::vector<SQLDefaultConstraint> & val) {
  this->defaultConstraintCols = val;
}

uint32_t AddDefaultConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_defaultConstraintCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->defaultConstraintCols.clear();
            uint32_t _size468;
            ::apache::thrift::protocol::TType _etype471;
            xfer += iprot->readListBegin(_etype471, _size468);
            this->defaultConstraintCols.resize(_size468);
            uint32_t _i472;
            for (_i472 = 0; _i472 < _size468; ++_i472)
            {
              xfer += this->defaultConstraintCols[_i472].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_defaultConstraintCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_defaultConstraintCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddDefaultConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddDefaultConstraintRequest");

  xfer += oprot->writeFieldBegin("defaultConstraintCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->defaultConstraintCols.size()));
    std::vector<SQLDefaultConstraint> ::const_iterator _iter473;
    for (_iter473 = this->defaultConstraintCols.begin(); _iter473 != this->defaultConstraintCols.end(); ++_iter473)
    {
      xfer += (*_iter473).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddDefaultConstraintRequest &a, AddDefaultConstraintRequest &b) {
  using ::std::swap;
  swap(a.defaultConstraintCols, b.defaultConstraintCols);
}

AddDefaultConstraintRequest::AddDefaultConstraintRequest(const AddDefaultConstraintRequest& other474) {
  defaultConstraintCols = other474.defaultConstraintCols;
}
AddDefaultConstraintRequest& AddDefaultConstraintRequest::operator=(const AddDefaultConstraintRequest& other475) {
  defaultConstraintCols = other475.defaultConstraintCols;
  return *this;
}
void AddDefaultConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddDefaultConstraintRequest(";
  out << "defaultConstraintCols=" << to_string(defaultConstraintCols);
  out << ")";
}


AddCheckConstraintRequest::~AddCheckConstraintRequest() throw() {
}


void AddCheckConstraintRequest::__set_checkConstraintCols(const std::vector<SQLCheckConstraint> & val) {
  this->checkConstraintCols = val;
}

uint32_t AddCheckConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_checkConstraintCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->checkConstraintCols.clear();
            uint32_t _size476;
            ::apache::thrift::protocol::TType _etype479;
            xfer += iprot->readListBegin(_etype479, _size476);
            this->checkConstraintCols.resize(_size476);
            uint32_t _i480;
            for (_i480 = 0; _i480 < _size476; ++_i480)
            {
              xfer += this->checkConstraintCols[_i480].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_checkConstraintCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_checkConstraintCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddCheckConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddCheckConstraintRequest");

  xfer += oprot->writeFieldBegin("checkConstraintCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->checkConstraintCols.size()));
    std::vector<SQLCheckConstraint> ::const_iterator _iter481;
    for (_iter481 = this->checkConstraintCols.begin(); _iter481 != this->checkConstraintCols.end(); ++_iter481)
    {
      xfer += (*_iter481).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddCheckConstraintRequest &a, AddCheckConstraintRequest &b) {
  using ::std::swap;
  swap(a.checkConstraintCols, b.checkConstraintCols);
}

AddCheckConstraintRequest::AddCheckConstraintRequest(const AddCheckConstraintRequest& other482) {
  checkConstraintCols = other482.checkConstraintCols;
}
AddCheckConstraintRequest& AddCheckConstraintRequest::operator=(const AddCheckConstraintRequest& other483) {
  checkConstraintCols = other483.checkConstraintCols;
  return *this;
}
void AddCheckConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddCheckConstraintRequest(";
  out << "checkConstraintCols=" << to_string(checkConstraintCols);
  out << ")";
}


PartitionsByExprResult::~PartitionsByExprResult() throw() {
}


void PartitionsByExprResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}

void PartitionsByExprResult::__set_hasUnknownPartitions(const bool val) {
  this->hasUnknownPartitions = val;
}

uint32_t PartitionsByExprResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partitions = false;
  bool isset_hasUnknownPartitions = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size484;
            ::apache::thrift::protocol::TType _etype487;
            xfer += iprot->readListBegin(_etype487, _size484);
            this->partitions.resize(_size484);
            uint32_t _i488;
            for (_i488 = 0; _i488 < _size484; ++_i488)
            {
              xfer += this->partitions[_i488].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasUnknownPartitions);
          isset_hasUnknownPartitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partitions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hasUnknownPartitions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsByExprResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsByExprResult");

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<Partition> ::const_iterator _iter489;
    for (_iter489 = this->partitions.begin(); _iter489 != this->partitions.end(); ++_iter489)
    {
      xfer += (*_iter489).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasUnknownPartitions", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasUnknownPartitions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsByExprResult &a, PartitionsByExprResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.hasUnknownPartitions, b.hasUnknownPartitions);
}

PartitionsByExprResult::PartitionsByExprResult(const PartitionsByExprResult& other490) {
  partitions = other490.partitions;
  hasUnknownPartitions = other490.hasUnknownPartitions;
}
PartitionsByExprResult& PartitionsByExprResult::operator=(const PartitionsByExprResult& other491) {
  partitions = other491.partitions;
  hasUnknownPartitions = other491.hasUnknownPartitions;
  return *this;
}
void PartitionsByExprResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsByExprResult(";
  out << "partitions=" << to_string(partitions);
  out << ", " << "hasUnknownPartitions=" << to_string(hasUnknownPartitions);
  out << ")";
}


PartitionsByExprRequest::~PartitionsByExprRequest() throw() {
}


void PartitionsByExprRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionsByExprRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionsByExprRequest::__set_expr(const std::string& val) {
  this->expr = val;
}

void PartitionsByExprRequest::__set_defaultPartitionName(const std::string& val) {
  this->defaultPartitionName = val;
__isset.defaultPartitionName = true;
}

void PartitionsByExprRequest::__set_maxParts(const int16_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

void PartitionsByExprRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t PartitionsByExprRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_expr = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->expr);
          isset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultPartitionName);
          this->__isset.defaultPartitionName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->maxParts);
          this->__isset.maxParts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsByExprRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsByExprRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->expr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.defaultPartitionName) {
    xfer += oprot->writeFieldBegin("defaultPartitionName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->defaultPartitionName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxParts) {
    xfer += oprot->writeFieldBegin("maxParts", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->maxParts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsByExprRequest &a, PartitionsByExprRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.expr, b.expr);
  swap(a.defaultPartitionName, b.defaultPartitionName);
  swap(a.maxParts, b.maxParts);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

PartitionsByExprRequest::PartitionsByExprRequest(const PartitionsByExprRequest& other492) {
  dbName = other492.dbName;
  tblName = other492.tblName;
  expr = other492.expr;
  defaultPartitionName = other492.defaultPartitionName;
  maxParts = other492.maxParts;
  catName = other492.catName;
  __isset = other492.__isset;
}
PartitionsByExprRequest& PartitionsByExprRequest::operator=(const PartitionsByExprRequest& other493) {
  dbName = other493.dbName;
  tblName = other493.tblName;
  expr = other493.expr;
  defaultPartitionName = other493.defaultPartitionName;
  maxParts = other493.maxParts;
  catName = other493.catName;
  __isset = other493.__isset;
  return *this;
}
void PartitionsByExprRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsByExprRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "expr=" << to_string(expr);
  out << ", " << "defaultPartitionName="; (__isset.defaultPartitionName ? (out << to_string(defaultPartitionName)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


TableStatsResult::~TableStatsResult() throw() {
}


void TableStatsResult::__set_tableStats(const std::vector<ColumnStatisticsObj> & val) {
  this->tableStats = val;
}

uint32_t TableStatsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tableStats = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tableStats.clear();
            uint32_t _size494;
            ::apache::thrift::protocol::TType _etype497;
            xfer += iprot->readListBegin(_etype497, _size494);
            this->tableStats.resize(_size494);
            uint32_t _i498;
            for (_i498 = 0; _i498 < _size494; ++_i498)
            {
              xfer += this->tableStats[_i498].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_tableStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tableStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableStatsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableStatsResult");

  xfer += oprot->writeFieldBegin("tableStats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tableStats.size()));
    std::vector<ColumnStatisticsObj> ::const_iterator _iter499;
    for (_iter499 = this->tableStats.begin(); _iter499 != this->tableStats.end(); ++_iter499)
    {
      xfer += (*_iter499).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableStatsResult &a, TableStatsResult &b) {
  using ::std::swap;
  swap(a.tableStats, b.tableStats);
}

TableStatsResult::TableStatsResult(const TableStatsResult& other500) {
  tableStats = other500.tableStats;
}
TableStatsResult& TableStatsResult::operator=(const TableStatsResult& other501) {
  tableStats = other501.tableStats;
  return *this;
}
void TableStatsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableStatsResult(";
  out << "tableStats=" << to_string(tableStats);
  out << ")";
}


PartitionsStatsResult::~PartitionsStatsResult() throw() {
}


void PartitionsStatsResult::__set_partStats(const std::map<std::string, std::vector<ColumnStatisticsObj> > & val) {
  this->partStats = val;
}

uint32_t PartitionsStatsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partStats = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->partStats.clear();
            uint32_t _size502;
            ::apache::thrift::protocol::TType _ktype503;
            ::apache::thrift::protocol::TType _vtype504;
            xfer += iprot->readMapBegin(_ktype503, _vtype504, _size502);
            uint32_t _i506;
            for (_i506 = 0; _i506 < _size502; ++_i506)
            {
              std::string _key507;
              xfer += iprot->readString(_key507);
              std::vector<ColumnStatisticsObj> & _val508 = this->partStats[_key507];
              {
                _val508.clear();
                uint32_t _size509;
                ::apache::thrift::protocol::TType _etype512;
                xfer += iprot->readListBegin(_etype512, _size509);
                _val508.resize(_size509);
                uint32_t _i513;
                for (_i513 = 0; _i513 < _size509; ++_i513)
                {
                  xfer += _val508[_i513].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_partStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsStatsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsStatsResult");

  xfer += oprot->writeFieldBegin("partStats", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->partStats.size()));
    std::map<std::string, std::vector<ColumnStatisticsObj> > ::const_iterator _iter514;
    for (_iter514 = this->partStats.begin(); _iter514 != this->partStats.end(); ++_iter514)
    {
      xfer += oprot->writeString(_iter514->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter514->second.size()));
        std::vector<ColumnStatisticsObj> ::const_iterator _iter515;
        for (_iter515 = _iter514->second.begin(); _iter515 != _iter514->second.end(); ++_iter515)
        {
          xfer += (*_iter515).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsStatsResult &a, PartitionsStatsResult &b) {
  using ::std::swap;
  swap(a.partStats, b.partStats);
}

PartitionsStatsResult::PartitionsStatsResult(const PartitionsStatsResult& other516) {
  partStats = other516.partStats;
}
PartitionsStatsResult& PartitionsStatsResult::operator=(const PartitionsStatsResult& other517) {
  partStats = other517.partStats;
  return *this;
}
void PartitionsStatsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsStatsResult(";
  out << "partStats=" << to_string(partStats);
  out << ")";
}


TableStatsRequest::~TableStatsRequest() throw() {
}


void TableStatsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void TableStatsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void TableStatsRequest::__set_colNames(const std::vector<std::string> & val) {
  this->colNames = val;
}

void TableStatsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t TableStatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_colNames = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colNames.clear();
            uint32_t _size518;
            ::apache::thrift::protocol::TType _etype521;
            xfer += iprot->readListBegin(_etype521, _size518);
            this->colNames.resize(_size518);
            uint32_t _i522;
            for (_i522 = 0; _i522 < _size518; ++_i522)
            {
              xfer += iprot->readString(this->colNames[_i522]);
            }
            xfer += iprot->readListEnd();
          }
          isset_colNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableStatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableStatsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colNames", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->colNames.size()));
    std::vector<std::string> ::const_iterator _iter523;
    for (_iter523 = this->colNames.begin(); _iter523 != this->colNames.end(); ++_iter523)
    {
      xfer += oprot->writeString((*_iter523));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableStatsRequest &a, TableStatsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.colNames, b.colNames);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

TableStatsRequest::TableStatsRequest(const TableStatsRequest& other524) {
  dbName = other524.dbName;
  tblName = other524.tblName;
  colNames = other524.colNames;
  catName = other524.catName;
  __isset = other524.__isset;
}
TableStatsRequest& TableStatsRequest::operator=(const TableStatsRequest& other525) {
  dbName = other525.dbName;
  tblName = other525.tblName;
  colNames = other525.colNames;
  catName = other525.catName;
  __isset = other525.__isset;
  return *this;
}
void TableStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableStatsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "colNames=" << to_string(colNames);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PartitionsStatsRequest::~PartitionsStatsRequest() throw() {
}


void PartitionsStatsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionsStatsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionsStatsRequest::__set_colNames(const std::vector<std::string> & val) {
  this->colNames = val;
}

void PartitionsStatsRequest::__set_partNames(const std::vector<std::string> & val) {
  this->partNames = val;
}

void PartitionsStatsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t PartitionsStatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_colNames = false;
  bool isset_partNames = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colNames.clear();
            uint32_t _size526;
            ::apache::thrift::protocol::TType _etype529;
            xfer += iprot->readListBegin(_etype529, _size526);
            this->colNames.resize(_size526);
            uint32_t _i530;
            for (_i530 = 0; _i530 < _size526; ++_i530)
            {
              xfer += iprot->readString(this->colNames[_i530]);
            }
            xfer += iprot->readListEnd();
          }
          isset_colNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partNames.clear();
            uint32_t _size531;
            ::apache::thrift::protocol::TType _etype534;
            xfer += iprot->readListBegin(_etype534, _size531);
            this->partNames.resize(_size531);
            uint32_t _i535;
            for (_i535 = 0; _i535 < _size531; ++_i535)
            {
              xfer += iprot->readString(this->partNames[_i535]);
            }
            xfer += iprot->readListEnd();
          }
          isset_partNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsStatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsStatsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colNames", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->colNames.size()));
    std::vector<std::string> ::const_iterator _iter536;
    for (_iter536 = this->colNames.begin(); _iter536 != this->colNames.end(); ++_iter536)
    {
      xfer += oprot->writeString((*_iter536));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partNames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partNames.size()));
    std::vector<std::string> ::const_iterator _iter537;
    for (_iter537 = this->partNames.begin(); _iter537 != this->partNames.end(); ++_iter537)
    {
      xfer += oprot->writeString((*_iter537));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsStatsRequest &a, PartitionsStatsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.colNames, b.colNames);
  swap(a.partNames, b.partNames);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

PartitionsStatsRequest::PartitionsStatsRequest(const PartitionsStatsRequest& other538) {
  dbName = other538.dbName;
  tblName = other538.tblName;
  colNames = other538.colNames;
  partNames = other538.partNames;
  catName = other538.catName;
  __isset = other538.__isset;
}
PartitionsStatsRequest& PartitionsStatsRequest::operator=(const PartitionsStatsRequest& other539) {
  dbName = other539.dbName;
  tblName = other539.tblName;
  colNames = other539.colNames;
  partNames = other539.partNames;
  catName = other539.catName;
  __isset = other539.__isset;
  return *this;
}
void PartitionsStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsStatsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "colNames=" << to_string(colNames);
  out << ", " << "partNames=" << to_string(partNames);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


AddPartitionsResult::~AddPartitionsResult() throw() {
}


void AddPartitionsResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
__isset.partitions = true;
}

uint32_t AddPartitionsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size540;
            ::apache::thrift::protocol::TType _etype543;
            xfer += iprot->readListBegin(_etype543, _size540);
            this->partitions.resize(_size540);
            uint32_t _i544;
            for (_i544 = 0; _i544 < _size540; ++_i544)
            {
              xfer += this->partitions[_i544].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddPartitionsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddPartitionsResult");

  if (this->__isset.partitions) {
    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
      std::vector<Partition> ::const_iterator _iter545;
      for (_iter545 = this->partitions.begin(); _iter545 != this->partitions.end(); ++_iter545)
      {
        xfer += (*_iter545).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddPartitionsResult &a, AddPartitionsResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

AddPartitionsResult::AddPartitionsResult(const AddPartitionsResult& other546) {
  partitions = other546.partitions;
  __isset = other546.__isset;
}
AddPartitionsResult& AddPartitionsResult::operator=(const AddPartitionsResult& other547) {
  partitions = other547.partitions;
  __isset = other547.__isset;
  return *this;
}
void AddPartitionsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPartitionsResult(";
  out << "partitions="; (__isset.partitions ? (out << to_string(partitions)) : (out << "<null>"));
  out << ")";
}


AddPartitionsRequest::~AddPartitionsRequest() throw() {
}


void AddPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AddPartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void AddPartitionsRequest::__set_parts(const std::vector<Partition> & val) {
  this->parts = val;
}

void AddPartitionsRequest::__set_ifNotExists(const bool val) {
  this->ifNotExists = val;
}

void AddPartitionsRequest::__set_needResult(const bool val) {
  this->needResult = val;
__isset.needResult = true;
}

void AddPartitionsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t AddPartitionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_parts = false;
  bool isset_ifNotExists = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parts.clear();
            uint32_t _size548;
            ::apache::thrift::protocol::TType _etype551;
            xfer += iprot->readListBegin(_etype551, _size548);
            this->parts.resize(_size548);
            uint32_t _i552;
            for (_i552 = 0; _i552 < _size548; ++_i552)
            {
              xfer += this->parts[_i552].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_parts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ifNotExists);
          isset_ifNotExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needResult);
          this->__isset.needResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ifNotExists)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddPartitionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddPartitionsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parts", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parts.size()));
    std::vector<Partition> ::const_iterator _iter553;
    for (_iter553 = this->parts.begin(); _iter553 != this->parts.end(); ++_iter553)
    {
      xfer += (*_iter553).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ifNotExists", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->ifNotExists);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.needResult) {
    xfer += oprot->writeFieldBegin("needResult", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->needResult);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddPartitionsRequest &a, AddPartitionsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.parts, b.parts);
  swap(a.ifNotExists, b.ifNotExists);
  swap(a.needResult, b.needResult);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

AddPartitionsRequest::AddPartitionsRequest(const AddPartitionsRequest& other554) {
  dbName = other554.dbName;
  tblName = other554.tblName;
  parts = other554.parts;
  ifNotExists = other554.ifNotExists;
  needResult = other554.needResult;
  catName = other554.catName;
  __isset = other554.__isset;
}
AddPartitionsRequest& AddPartitionsRequest::operator=(const AddPartitionsRequest& other555) {
  dbName = other555.dbName;
  tblName = other555.tblName;
  parts = other555.parts;
  ifNotExists = other555.ifNotExists;
  needResult = other555.needResult;
  catName = other555.catName;
  __isset = other555.__isset;
  return *this;
}
void AddPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPartitionsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "parts=" << to_string(parts);
  out << ", " << "ifNotExists=" << to_string(ifNotExists);
  out << ", " << "needResult="; (__isset.needResult ? (out << to_string(needResult)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


DropPartitionsResult::~DropPartitionsResult() throw() {
}


void DropPartitionsResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
__isset.partitions = true;
}

uint32_t DropPartitionsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size556;
            ::apache::thrift::protocol::TType _etype559;
            xfer += iprot->readListBegin(_etype559, _size556);
            this->partitions.resize(_size556);
            uint32_t _i560;
            for (_i560 = 0; _i560 < _size556; ++_i560)
            {
              xfer += this->partitions[_i560].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropPartitionsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropPartitionsResult");

  if (this->__isset.partitions) {
    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
      std::vector<Partition> ::const_iterator _iter561;
      for (_iter561 = this->partitions.begin(); _iter561 != this->partitions.end(); ++_iter561)
      {
        xfer += (*_iter561).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropPartitionsResult &a, DropPartitionsResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

DropPartitionsResult::DropPartitionsResult(const DropPartitionsResult& other562) {
  partitions = other562.partitions;
  __isset = other562.__isset;
}
DropPartitionsResult& DropPartitionsResult::operator=(const DropPartitionsResult& other563) {
  partitions = other563.partitions;
  __isset = other563.__isset;
  return *this;
}
void DropPartitionsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsResult(";
  out << "partitions="; (__isset.partitions ? (out << to_string(partitions)) : (out << "<null>"));
  out << ")";
}


DropPartitionsExpr::~DropPartitionsExpr() throw() {
}


void DropPartitionsExpr::__set_expr(const std::string& val) {
  this->expr = val;
}

void DropPartitionsExpr::__set_partArchiveLevel(const int32_t val) {
  this->partArchiveLevel = val;
__isset.partArchiveLevel = true;
}

uint32_t DropPartitionsExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_expr = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->expr);
          isset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partArchiveLevel);
          this->__isset.partArchiveLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_expr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DropPartitionsExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropPartitionsExpr");

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->expr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partArchiveLevel) {
    xfer += oprot->writeFieldBegin("partArchiveLevel", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->partArchiveLevel);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropPartitionsExpr &a, DropPartitionsExpr &b) {
  using ::std::swap;
  swap(a.expr, b.expr);
  swap(a.partArchiveLevel, b.partArchiveLevel);
  swap(a.__isset, b.__isset);
}

DropPartitionsExpr::DropPartitionsExpr(const DropPartitionsExpr& other564) {
  expr = other564.expr;
  partArchiveLevel = other564.partArchiveLevel;
  __isset = other564.__isset;
}
DropPartitionsExpr& DropPartitionsExpr::operator=(const DropPartitionsExpr& other565) {
  expr = other565.expr;
  partArchiveLevel = other565.partArchiveLevel;
  __isset = other565.__isset;
  return *this;
}
void DropPartitionsExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsExpr(";
  out << "expr=" << to_string(expr);
  out << ", " << "partArchiveLevel="; (__isset.partArchiveLevel ? (out << to_string(partArchiveLevel)) : (out << "<null>"));
  out << ")";
}


RequestPartsSpec::~RequestPartsSpec() throw() {
}


void RequestPartsSpec::__set_names(const std::vector<std::string> & val) {
  this->names = val;
}

void RequestPartsSpec::__set_exprs(const std::vector<DropPartitionsExpr> & val) {
  this->exprs = val;
}

uint32_t RequestPartsSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->names.clear();
            uint32_t _size566;
            ::apache::thrift::protocol::TType _etype569;
            xfer += iprot->readListBegin(_etype569, _size566);
            this->names.resize(_size566);
            uint32_t _i570;
            for (_i570 = 0; _i570 < _size566; ++_i570)
            {
              xfer += iprot->readString(this->names[_i570]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->exprs.clear();
            uint32_t _size571;
            ::apache::thrift::protocol::TType _etype574;
            xfer += iprot->readListBegin(_etype574, _size571);
            this->exprs.resize(_size571);
            uint32_t _i575;
            for (_i575 = 0; _i575 < _size571; ++_i575)
            {
              xfer += this->exprs[_i575].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestPartsSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestPartsSpec");

  xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
    std::vector<std::string> ::const_iterator _iter576;
    for (_iter576 = this->names.begin(); _iter576 != this->names.end(); ++_iter576)
    {
      xfer += oprot->writeString((*_iter576));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exprs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->exprs.size()));
    std::vector<DropPartitionsExpr> ::const_iterator _iter577;
    for (_iter577 = this->exprs.begin(); _iter577 != this->exprs.end(); ++_iter577)
    {
      xfer += (*_iter577).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPartsSpec &a, RequestPartsSpec &b) {
  using ::std::swap;
  swap(a.names, b.names);
  swap(a.exprs, b.exprs);
  swap(a.__isset, b.__isset);
}

RequestPartsSpec::RequestPartsSpec(const RequestPartsSpec& other578) {
  names = other578.names;
  exprs = other578.exprs;
  __isset = other578.__isset;
}
RequestPartsSpec& RequestPartsSpec::operator=(const RequestPartsSpec& other579) {
  names = other579.names;
  exprs = other579.exprs;
  __isset = other579.__isset;
  return *this;
}
void RequestPartsSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestPartsSpec(";
  out << "names=" << to_string(names);
  out << ", " << "exprs=" << to_string(exprs);
  out << ")";
}


DropPartitionsRequest::~DropPartitionsRequest() throw() {
}


void DropPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void DropPartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void DropPartitionsRequest::__set_parts(const RequestPartsSpec& val) {
  this->parts = val;
}

void DropPartitionsRequest::__set_deleteData(const bool val) {
  this->deleteData = val;
__isset.deleteData = true;
}

void DropPartitionsRequest::__set_ifExists(const bool val) {
  this->ifExists = val;
__isset.ifExists = true;
}

void DropPartitionsRequest::__set_ignoreProtection(const bool val) {
  this->ignoreProtection = val;
__isset.ignoreProtection = true;
}

void DropPartitionsRequest::__set_environmentContext(const EnvironmentContext& val) {
  this->environmentContext = val;
__isset.environmentContext = true;
}

void DropPartitionsRequest::__set_needResult(const bool val) {
  this->needResult = val;
__isset.needResult = true;
}

void DropPartitionsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t DropPartitionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_parts = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parts.read(iprot);
          isset_parts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteData);
          this->__isset.deleteData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ifExists);
          this->__isset.ifExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignoreProtection);
          this->__isset.ignoreProtection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->environmentContext.read(iprot);
          this->__isset.environmentContext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needResult);
          this->__isset.needResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DropPartitionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropPartitionsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parts", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->parts.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.deleteData) {
    xfer += oprot->writeFieldBegin("deleteData", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->deleteData);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ifExists) {
    xfer += oprot->writeFieldBegin("ifExists", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->ifExists);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ignoreProtection) {
    xfer += oprot->writeFieldBegin("ignoreProtection", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->ignoreProtection);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.environmentContext) {
    xfer += oprot->writeFieldBegin("environmentContext", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->environmentContext.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.needResult) {
    xfer += oprot->writeFieldBegin("needResult", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->needResult);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropPartitionsRequest &a, DropPartitionsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.parts, b.parts);
  swap(a.deleteData, b.deleteData);
  swap(a.ifExists, b.ifExists);
  swap(a.ignoreProtection, b.ignoreProtection);
  swap(a.environmentContext, b.environmentContext);
  swap(a.needResult, b.needResult);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

DropPartitionsRequest::DropPartitionsRequest(const DropPartitionsRequest& other580) {
  dbName = other580.dbName;
  tblName = other580.tblName;
  parts = other580.parts;
  deleteData = other580.deleteData;
  ifExists = other580.ifExists;
  ignoreProtection = other580.ignoreProtection;
  environmentContext = other580.environmentContext;
  needResult = other580.needResult;
  catName = other580.catName;
  __isset = other580.__isset;
}
DropPartitionsRequest& DropPartitionsRequest::operator=(const DropPartitionsRequest& other581) {
  dbName = other581.dbName;
  tblName = other581.tblName;
  parts = other581.parts;
  deleteData = other581.deleteData;
  ifExists = other581.ifExists;
  ignoreProtection = other581.ignoreProtection;
  environmentContext = other581.environmentContext;
  needResult = other581.needResult;
  catName = other581.catName;
  __isset = other581.__isset;
  return *this;
}
void DropPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "parts=" << to_string(parts);
  out << ", " << "deleteData="; (__isset.deleteData ? (out << to_string(deleteData)) : (out << "<null>"));
  out << ", " << "ifExists="; (__isset.ifExists ? (out << to_string(ifExists)) : (out << "<null>"));
  out << ", " << "ignoreProtection="; (__isset.ignoreProtection ? (out << to_string(ignoreProtection)) : (out << "<null>"));
  out << ", " << "environmentContext="; (__isset.environmentContext ? (out << to_string(environmentContext)) : (out << "<null>"));
  out << ", " << "needResult="; (__isset.needResult ? (out << to_string(needResult)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PartitionValuesRequest::~PartitionValuesRequest() throw() {
}


void PartitionValuesRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionValuesRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionValuesRequest::__set_partitionKeys(const std::vector<FieldSchema> & val) {
  this->partitionKeys = val;
}

void PartitionValuesRequest::__set_applyDistinct(const bool val) {
  this->applyDistinct = val;
__isset.applyDistinct = true;
}

void PartitionValuesRequest::__set_filter(const std::string& val) {
  this->filter = val;
__isset.filter = true;
}

void PartitionValuesRequest::__set_partitionOrder(const std::vector<FieldSchema> & val) {
  this->partitionOrder = val;
__isset.partitionOrder = true;
}

void PartitionValuesRequest::__set_ascending(const bool val) {
  this->ascending = val;
__isset.ascending = true;
}

void PartitionValuesRequest::__set_maxParts(const int64_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

void PartitionValuesRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t PartitionValuesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_partitionKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionKeys.clear();
            uint32_t _size582;
            ::apache::thrift::protocol::TType _etype585;
            xfer += iprot->readListBegin(_etype585, _size582);
            this->partitionKeys.resize(_size582);
            uint32_t _i586;
            for (_i586 = 0; _i586 < _size582; ++_i586)
            {
              xfer += this->partitionKeys[_i586].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partitionKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->applyDistinct);
          this->__isset.applyDistinct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filter);
          this->__isset.filter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionOrder.clear();
            uint32_t _size587;
            ::apache::thrift::protocol::TType _etype590;
            xfer += iprot->readListBegin(_etype590, _size587);
            this->partitionOrder.resize(_size587);
            uint32_t _i591;
            for (_i591 = 0; _i591 < _size587; ++_i591)
            {
              xfer += this->partitionOrder[_i591].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitionOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ascending);
          this->__isset.ascending = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxParts);
          this->__isset.maxParts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partitionKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionValuesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionValuesRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionKeys", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionKeys.size()));
    std::vector<FieldSchema> ::const_iterator _iter592;
    for (_iter592 = this->partitionKeys.begin(); _iter592 != this->partitionKeys.end(); ++_iter592)
    {
      xfer += (*_iter592).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applyDistinct) {
    xfer += oprot->writeFieldBegin("applyDistinct", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->applyDistinct);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.filter) {
    xfer += oprot->writeFieldBegin("filter", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->filter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionOrder) {
    xfer += oprot->writeFieldBegin("partitionOrder", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionOrder.size()));
      std::vector<FieldSchema> ::const_iterator _iter593;
      for (_iter593 = this->partitionOrder.begin(); _iter593 != this->partitionOrder.end(); ++_iter593)
      {
        xfer += (*_iter593).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ascending) {
    xfer += oprot->writeFieldBegin("ascending", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->ascending);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxParts) {
    xfer += oprot->writeFieldBegin("maxParts", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->maxParts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionValuesRequest &a, PartitionValuesRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partitionKeys, b.partitionKeys);
  swap(a.applyDistinct, b.applyDistinct);
  swap(a.filter, b.filter);
  swap(a.partitionOrder, b.partitionOrder);
  swap(a.ascending, b.ascending);
  swap(a.maxParts, b.maxParts);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

PartitionValuesRequest::PartitionValuesRequest(const PartitionValuesRequest& other594) {
  dbName = other594.dbName;
  tblName = other594.tblName;
  partitionKeys = other594.partitionKeys;
  applyDistinct = other594.applyDistinct;
  filter = other594.filter;
  partitionOrder = other594.partitionOrder;
  ascending = other594.ascending;
  maxParts = other594.maxParts;
  catName = other594.catName;
  __isset = other594.__isset;
}
PartitionValuesRequest& PartitionValuesRequest::operator=(const PartitionValuesRequest& other595) {
  dbName = other595.dbName;
  tblName = other595.tblName;
  partitionKeys = other595.partitionKeys;
  applyDistinct = other595.applyDistinct;
  filter = other595.filter;
  partitionOrder = other595.partitionOrder;
  ascending = other595.ascending;
  maxParts = other595.maxParts;
  catName = other595.catName;
  __isset = other595.__isset;
  return *this;
}
void PartitionValuesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partitionKeys=" << to_string(partitionKeys);
  out << ", " << "applyDistinct="; (__isset.applyDistinct ? (out << to_string(applyDistinct)) : (out << "<null>"));
  out << ", " << "filter="; (__isset.filter ? (out << to_string(filter)) : (out << "<null>"));
  out << ", " << "partitionOrder="; (__isset.partitionOrder ? (out << to_string(partitionOrder)) : (out << "<null>"));
  out << ", " << "ascending="; (__isset.ascending ? (out << to_string(ascending)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PartitionValuesRow::~PartitionValuesRow() throw() {
}


void PartitionValuesRow::__set_row(const std::vector<std::string> & val) {
  this->row = val;
}

uint32_t PartitionValuesRow::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_row = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->row.clear();
            uint32_t _size596;
            ::apache::thrift::protocol::TType _etype599;
            xfer += iprot->readListBegin(_etype599, _size596);
            this->row.resize(_size596);
            uint32_t _i600;
            for (_i600 = 0; _i600 < _size596; ++_i600)
            {
              xfer += iprot->readString(this->row[_i600]);
            }
            xfer += iprot->readListEnd();
          }
          isset_row = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_row)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionValuesRow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionValuesRow");

  xfer += oprot->writeFieldBegin("row", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row.size()));
    std::vector<std::string> ::const_iterator _iter601;
    for (_iter601 = this->row.begin(); _iter601 != this->row.end(); ++_iter601)
    {
      xfer += oprot->writeString((*_iter601));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionValuesRow &a, PartitionValuesRow &b) {
  using ::std::swap;
  swap(a.row, b.row);
}

PartitionValuesRow::PartitionValuesRow(const PartitionValuesRow& other602) {
  row = other602.row;
}
PartitionValuesRow& PartitionValuesRow::operator=(const PartitionValuesRow& other603) {
  row = other603.row;
  return *this;
}
void PartitionValuesRow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesRow(";
  out << "row=" << to_string(row);
  out << ")";
}


PartitionValuesResponse::~PartitionValuesResponse() throw() {
}


void PartitionValuesResponse::__set_partitionValues(const std::vector<PartitionValuesRow> & val) {
  this->partitionValues = val;
}

uint32_t PartitionValuesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partitionValues = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionValues.clear();
            uint32_t _size604;
            ::apache::thrift::protocol::TType _etype607;
            xfer += iprot->readListBegin(_etype607, _size604);
            this->partitionValues.resize(_size604);
            uint32_t _i608;
            for (_i608 = 0; _i608 < _size604; ++_i608)
            {
              xfer += this->partitionValues[_i608].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partitionValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partitionValues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionValuesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionValuesResponse");

  xfer += oprot->writeFieldBegin("partitionValues", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionValues.size()));
    std::vector<PartitionValuesRow> ::const_iterator _iter609;
    for (_iter609 = this->partitionValues.begin(); _iter609 != this->partitionValues.end(); ++_iter609)
    {
      xfer += (*_iter609).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionValuesResponse &a, PartitionValuesResponse &b) {
  using ::std::swap;
  swap(a.partitionValues, b.partitionValues);
}

PartitionValuesResponse::PartitionValuesResponse(const PartitionValuesResponse& other610) {
  partitionValues = other610.partitionValues;
}
PartitionValuesResponse& PartitionValuesResponse::operator=(const PartitionValuesResponse& other611) {
  partitionValues = other611.partitionValues;
  return *this;
}
void PartitionValuesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesResponse(";
  out << "partitionValues=" << to_string(partitionValues);
  out << ")";
}


ResourceUri::~ResourceUri() throw() {
}


void ResourceUri::__set_resourceType(const ResourceType::type val) {
  this->resourceType = val;
}

void ResourceUri::__set_uri(const std::string& val) {
  this->uri = val;
}

uint32_t ResourceUri::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast612;
          xfer += iprot->readI32(ecast612);
          this->resourceType = (ResourceType::type)ecast612;
          this->__isset.resourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResourceUri::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResourceUri");

  xfer += oprot->writeFieldBegin("resourceType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->resourceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResourceUri &a, ResourceUri &b) {
  using ::std::swap;
  swap(a.resourceType, b.resourceType);
  swap(a.uri, b.uri);
  swap(a.__isset, b.__isset);
}

ResourceUri::ResourceUri(const ResourceUri& other613) {
  resourceType = other613.resourceType;
  uri = other613.uri;
  __isset = other613.__isset;
}
ResourceUri& ResourceUri::operator=(const ResourceUri& other614) {
  resourceType = other614.resourceType;
  uri = other614.uri;
  __isset = other614.__isset;
  return *this;
}
void ResourceUri::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResourceUri(";
  out << "resourceType=" << to_string(resourceType);
  out << ", " << "uri=" << to_string(uri);
  out << ")";
}


Function::~Function() throw() {
}


void Function::__set_functionName(const std::string& val) {
  this->functionName = val;
}

void Function::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Function::__set_className(const std::string& val) {
  this->className = val;
}

void Function::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

void Function::__set_ownerType(const PrincipalType::type val) {
  this->ownerType = val;
}

void Function::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Function::__set_functionType(const FunctionType::type val) {
  this->functionType = val;
}

void Function::__set_resourceUris(const std::vector<ResourceUri> & val) {
  this->resourceUris = val;
}

void Function::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t Function::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->functionName);
          this->__isset.functionName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->className);
          this->__isset.className = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerName);
          this->__isset.ownerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast615;
          xfer += iprot->readI32(ecast615);
          this->ownerType = (PrincipalType::type)ecast615;
          this->__isset.ownerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast616;
          xfer += iprot->readI32(ecast616);
          this->functionType = (FunctionType::type)ecast616;
          this->__isset.functionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resourceUris.clear();
            uint32_t _size617;
            ::apache::thrift::protocol::TType _etype620;
            xfer += iprot->readListBegin(_etype620, _size617);
            this->resourceUris.resize(_size617);
            uint32_t _i621;
            for (_i621 = 0; _i621 < _size617; ++_i621)
            {
              xfer += this->resourceUris[_i621].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resourceUris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Function::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Function");

  xfer += oprot->writeFieldBegin("functionName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->functionName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("className", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->className);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ownerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->ownerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("functionType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->functionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resourceUris", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resourceUris.size()));
    std::vector<ResourceUri> ::const_iterator _iter622;
    for (_iter622 = this->resourceUris.begin(); _iter622 != this->resourceUris.end(); ++_iter622)
    {
      xfer += (*_iter622).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Function &a, Function &b) {
  using ::std::swap;
  swap(a.functionName, b.functionName);
  swap(a.dbName, b.dbName);
  swap(a.className, b.className);
  swap(a.ownerName, b.ownerName);
  swap(a.ownerType, b.ownerType);
  swap(a.createTime, b.createTime);
  swap(a.functionType, b.functionType);
  swap(a.resourceUris, b.resourceUris);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

Function::Function(const Function& other623) {
  functionName = other623.functionName;
  dbName = other623.dbName;
  className = other623.className;
  ownerName = other623.ownerName;
  ownerType = other623.ownerType;
  createTime = other623.createTime;
  functionType = other623.functionType;
  resourceUris = other623.resourceUris;
  catName = other623.catName;
  __isset = other623.__isset;
}
Function& Function::operator=(const Function& other624) {
  functionName = other624.functionName;
  dbName = other624.dbName;
  className = other624.className;
  ownerName = other624.ownerName;
  ownerType = other624.ownerType;
  createTime = other624.createTime;
  functionType = other624.functionType;
  resourceUris = other624.resourceUris;
  catName = other624.catName;
  __isset = other624.__isset;
  return *this;
}
void Function::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Function(";
  out << "functionName=" << to_string(functionName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "className=" << to_string(className);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ", " << "ownerType=" << to_string(ownerType);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "functionType=" << to_string(functionType);
  out << ", " << "resourceUris=" << to_string(resourceUris);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


TxnInfo::~TxnInfo() throw() {
}


void TxnInfo::__set_id(const int64_t val) {
  this->id = val;
}

void TxnInfo::__set_state(const TxnState::type val) {
  this->state = val;
}

void TxnInfo::__set_user(const std::string& val) {
  this->user = val;
}

void TxnInfo::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void TxnInfo::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void TxnInfo::__set_heartbeatCount(const int32_t val) {
  this->heartbeatCount = val;
__isset.heartbeatCount = true;
}

void TxnInfo::__set_metaInfo(const std::string& val) {
  this->metaInfo = val;
__isset.metaInfo = true;
}

void TxnInfo::__set_startedTime(const int64_t val) {
  this->startedTime = val;
__isset.startedTime = true;
}

void TxnInfo::__set_lastHeartbeatTime(const int64_t val) {
  this->lastHeartbeatTime = val;
__isset.lastHeartbeatTime = true;
}

uint32_t TxnInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_state = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast625;
          xfer += iprot->readI32(ecast625);
          this->state = (TxnState::type)ecast625;
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heartbeatCount);
          this->__isset.heartbeatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metaInfo);
          this->__isset.metaInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startedTime);
          this->__isset.startedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastHeartbeatTime);
          this->__isset.lastHeartbeatTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TxnInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.heartbeatCount) {
    xfer += oprot->writeFieldBegin("heartbeatCount", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->heartbeatCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metaInfo) {
    xfer += oprot->writeFieldBegin("metaInfo", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->metaInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startedTime) {
    xfer += oprot->writeFieldBegin("startedTime", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->startedTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastHeartbeatTime) {
    xfer += oprot->writeFieldBegin("lastHeartbeatTime", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->lastHeartbeatTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnInfo &a, TxnInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.state, b.state);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.heartbeatCount, b.heartbeatCount);
  swap(a.metaInfo, b.metaInfo);
  swap(a.startedTime, b.startedTime);
  swap(a.lastHeartbeatTime, b.lastHeartbeatTime);
  swap(a.__isset, b.__isset);
}

TxnInfo::TxnInfo(const TxnInfo& other626) {
  id = other626.id;
  state = other626.state;
  user = other626.user;
  hostname = other626.hostname;
  agentInfo = other626.agentInfo;
  heartbeatCount = other626.heartbeatCount;
  metaInfo = other626.metaInfo;
  startedTime = other626.startedTime;
  lastHeartbeatTime = other626.lastHeartbeatTime;
  __isset = other626.__isset;
}
TxnInfo& TxnInfo::operator=(const TxnInfo& other627) {
  id = other627.id;
  state = other627.state;
  user = other627.user;
  hostname = other627.hostname;
  agentInfo = other627.agentInfo;
  heartbeatCount = other627.heartbeatCount;
  metaInfo = other627.metaInfo;
  startedTime = other627.startedTime;
  lastHeartbeatTime = other627.lastHeartbeatTime;
  __isset = other627.__isset;
  return *this;
}
void TxnInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnInfo(";
  out << "id=" << to_string(id);
  out << ", " << "state=" << to_string(state);
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "heartbeatCount="; (__isset.heartbeatCount ? (out << to_string(heartbeatCount)) : (out << "<null>"));
  out << ", " << "metaInfo="; (__isset.metaInfo ? (out << to_string(metaInfo)) : (out << "<null>"));
  out << ", " << "startedTime="; (__isset.startedTime ? (out << to_string(startedTime)) : (out << "<null>"));
  out << ", " << "lastHeartbeatTime="; (__isset.lastHeartbeatTime ? (out << to_string(lastHeartbeatTime)) : (out << "<null>"));
  out << ")";
}


GetOpenTxnsInfoResponse::~GetOpenTxnsInfoResponse() throw() {
}


void GetOpenTxnsInfoResponse::__set_txn_high_water_mark(const int64_t val) {
  this->txn_high_water_mark = val;
}

void GetOpenTxnsInfoResponse::__set_open_txns(const std::vector<TxnInfo> & val) {
  this->open_txns = val;
}

uint32_t GetOpenTxnsInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_high_water_mark = false;
  bool isset_open_txns = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txn_high_water_mark);
          isset_txn_high_water_mark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->open_txns.clear();
            uint32_t _size628;
            ::apache::thrift::protocol::TType _etype631;
            xfer += iprot->readListBegin(_etype631, _size628);
            this->open_txns.resize(_size628);
            uint32_t _i632;
            for (_i632 = 0; _i632 < _size628; ++_i632)
            {
              xfer += this->open_txns[_i632].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_open_txns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_high_water_mark)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_open_txns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetOpenTxnsInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetOpenTxnsInfoResponse");

  xfer += oprot->writeFieldBegin("txn_high_water_mark", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txn_high_water_mark);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open_txns", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->open_txns.size()));
    std::vector<TxnInfo> ::const_iterator _iter633;
    for (_iter633 = this->open_txns.begin(); _iter633 != this->open_txns.end(); ++_iter633)
    {
      xfer += (*_iter633).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetOpenTxnsInfoResponse &a, GetOpenTxnsInfoResponse &b) {
  using ::std::swap;
  swap(a.txn_high_water_mark, b.txn_high_water_mark);
  swap(a.open_txns, b.open_txns);
}

GetOpenTxnsInfoResponse::GetOpenTxnsInfoResponse(const GetOpenTxnsInfoResponse& other634) {
  txn_high_water_mark = other634.txn_high_water_mark;
  open_txns = other634.open_txns;
}
GetOpenTxnsInfoResponse& GetOpenTxnsInfoResponse::operator=(const GetOpenTxnsInfoResponse& other635) {
  txn_high_water_mark = other635.txn_high_water_mark;
  open_txns = other635.open_txns;
  return *this;
}
void GetOpenTxnsInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetOpenTxnsInfoResponse(";
  out << "txn_high_water_mark=" << to_string(txn_high_water_mark);
  out << ", " << "open_txns=" << to_string(open_txns);
  out << ")";
}


GetOpenTxnsResponse::~GetOpenTxnsResponse() throw() {
}


void GetOpenTxnsResponse::__set_txn_high_water_mark(const int64_t val) {
  this->txn_high_water_mark = val;
}

void GetOpenTxnsResponse::__set_open_txns(const std::vector<int64_t> & val) {
  this->open_txns = val;
}

void GetOpenTxnsResponse::__set_min_open_txn(const int64_t val) {
  this->min_open_txn = val;
__isset.min_open_txn = true;
}

void GetOpenTxnsResponse::__set_abortedBits(const std::string& val) {
  this->abortedBits = val;
}

uint32_t GetOpenTxnsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_high_water_mark = false;
  bool isset_open_txns = false;
  bool isset_abortedBits = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txn_high_water_mark);
          isset_txn_high_water_mark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->open_txns.clear();
            uint32_t _size636;
            ::apache::thrift::protocol::TType _etype639;
            xfer += iprot->readListBegin(_etype639, _size636);
            this->open_txns.resize(_size636);
            uint32_t _i640;
            for (_i640 = 0; _i640 < _size636; ++_i640)
            {
              xfer += iprot->readI64(this->open_txns[_i640]);
            }
            xfer += iprot->readListEnd();
          }
          isset_open_txns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_open_txn);
          this->__isset.min_open_txn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->abortedBits);
          isset_abortedBits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_high_water_mark)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_open_txns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_abortedBits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetOpenTxnsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetOpenTxnsResponse");

  xfer += oprot->writeFieldBegin("txn_high_water_mark", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txn_high_water_mark);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open_txns", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->open_txns.size()));
    std::vector<int64_t> ::const_iterator _iter641;
    for (_iter641 = this->open_txns.begin(); _iter641 != this->open_txns.end(); ++_iter641)
    {
      xfer += oprot->writeI64((*_iter641));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.min_open_txn) {
    xfer += oprot->writeFieldBegin("min_open_txn", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->min_open_txn);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("abortedBits", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->abortedBits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetOpenTxnsResponse &a, GetOpenTxnsResponse &b) {
  using ::std::swap;
  swap(a.txn_high_water_mark, b.txn_high_water_mark);
  swap(a.open_txns, b.open_txns);
  swap(a.min_open_txn, b.min_open_txn);
  swap(a.abortedBits, b.abortedBits);
  swap(a.__isset, b.__isset);
}

GetOpenTxnsResponse::GetOpenTxnsResponse(const GetOpenTxnsResponse& other642) {
  txn_high_water_mark = other642.txn_high_water_mark;
  open_txns = other642.open_txns;
  min_open_txn = other642.min_open_txn;
  abortedBits = other642.abortedBits;
  __isset = other642.__isset;
}
GetOpenTxnsResponse& GetOpenTxnsResponse::operator=(const GetOpenTxnsResponse& other643) {
  txn_high_water_mark = other643.txn_high_water_mark;
  open_txns = other643.open_txns;
  min_open_txn = other643.min_open_txn;
  abortedBits = other643.abortedBits;
  __isset = other643.__isset;
  return *this;
}
void GetOpenTxnsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetOpenTxnsResponse(";
  out << "txn_high_water_mark=" << to_string(txn_high_water_mark);
  out << ", " << "open_txns=" << to_string(open_txns);
  out << ", " << "min_open_txn="; (__isset.min_open_txn ? (out << to_string(min_open_txn)) : (out << "<null>"));
  out << ", " << "abortedBits=" << to_string(abortedBits);
  out << ")";
}


OpenTxnRequest::~OpenTxnRequest() throw() {
}


void OpenTxnRequest::__set_num_txns(const int32_t val) {
  this->num_txns = val;
}

void OpenTxnRequest::__set_user(const std::string& val) {
  this->user = val;
}

void OpenTxnRequest::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void OpenTxnRequest::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void OpenTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

void OpenTxnRequest::__set_replSrcTxnIds(const std::vector<int64_t> & val) {
  this->replSrcTxnIds = val;
__isset.replSrcTxnIds = true;
}

uint32_t OpenTxnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_num_txns = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_txns);
          isset_num_txns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replPolicy);
          this->__isset.replPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->replSrcTxnIds.clear();
            uint32_t _size606;
            ::apache::thrift::protocol::TType _etype609;
            xfer += iprot->readListBegin(_etype609, _size606);
            this->replSrcTxnIds.resize(_size606);
            uint32_t _i610;
            for (_i610 = 0; _i610 < _size606; ++_i610)
            {
              xfer += iprot->readI64(this->replSrcTxnIds[_i610]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.replSrcTxnIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_num_txns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t OpenTxnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OpenTxnRequest");

  xfer += oprot->writeFieldBegin("num_txns", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_txns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.replPolicy) {
    xfer += oprot->writeFieldBegin("replPolicy", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->replPolicy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.replSrcTxnIds) {
    xfer += oprot->writeFieldBegin("replSrcTxnIds", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->replSrcTxnIds.size()));
      std::vector<int64_t> ::const_iterator _iter611;
      for (_iter611 = this->replSrcTxnIds.begin(); _iter611 != this->replSrcTxnIds.end(); ++_iter611)
      {
        xfer += oprot->writeI64((*_iter611));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OpenTxnRequest &a, OpenTxnRequest &b) {
  using ::std::swap;
  swap(a.num_txns, b.num_txns);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.replPolicy, b.replPolicy);
  swap(a.replSrcTxnIds, b.replSrcTxnIds);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
OpenTxnRequest::OpenTxnRequest(const OpenTxnRequest& other644) {
  num_txns = other644.num_txns;
  user = other644.user;
  hostname = other644.hostname;
  agentInfo = other644.agentInfo;
  __isset = other644.__isset;
}
OpenTxnRequest& OpenTxnRequest::operator=(const OpenTxnRequest& other645) {
  num_txns = other645.num_txns;
  user = other645.user;
  hostname = other645.hostname;
  agentInfo = other645.agentInfo;
  __isset = other645.__isset;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
OpenTxnRequest::OpenTxnRequest(const OpenTxnRequest& other626) {
  num_txns = other626.num_txns;
  user = other626.user;
  hostname = other626.hostname;
  agentInfo = other626.agentInfo;
  __isset = other626.__isset;
}
OpenTxnRequest& OpenTxnRequest::operator=(const OpenTxnRequest& other627) {
  num_txns = other627.num_txns;
  user = other627.user;
  hostname = other627.hostname;
  agentInfo = other627.agentInfo;
  __isset = other627.__isset;
=======
<<<<<<< HEAD
OpenTxnRequest::OpenTxnRequest(const OpenTxnRequest& other606) {
  num_txns = other606.num_txns;
  user = other606.user;
  hostname = other606.hostname;
  agentInfo = other606.agentInfo;
  __isset = other606.__isset;
}
OpenTxnRequest& OpenTxnRequest::operator=(const OpenTxnRequest& other607) {
  num_txns = other607.num_txns;
  user = other607.user;
  hostname = other607.hostname;
  agentInfo = other607.agentInfo;
  __isset = other607.__isset;
=======
OpenTxnRequest::OpenTxnRequest(const OpenTxnRequest& other621) {
  num_txns = other621.num_txns;
  user = other621.user;
  hostname = other621.hostname;
  agentInfo = other621.agentInfo;
  replPolicy = other621.replPolicy;
  replSrcTxnId = other621.replSrcTxnId;
  __isset = other621.__isset;
}
OpenTxnRequest& OpenTxnRequest::operator=(const OpenTxnRequest& other622) {
  num_txns = other622.num_txns;
  user = other622.user;
  hostname = other622.hostname;
  agentInfo = other622.agentInfo;
  replPolicy = other622.replPolicy;
  replSrcTxnId = other622.replSrcTxnId;
  __isset = other622.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
OpenTxnRequest::OpenTxnRequest(const OpenTxnRequest& other612) {
  num_txns = other612.num_txns;
  user = other612.user;
  hostname = other612.hostname;
  agentInfo = other612.agentInfo;
  replPolicy = other612.replPolicy;
  replSrcTxnIds = other612.replSrcTxnIds;
  __isset = other612.__isset;
}
OpenTxnRequest& OpenTxnRequest::operator=(const OpenTxnRequest& other613) {
  num_txns = other613.num_txns;
  user = other613.user;
  hostname = other613.hostname;
  agentInfo = other613.agentInfo;
  replPolicy = other613.replPolicy;
  replSrcTxnIds = other613.replSrcTxnIds;
  __isset = other613.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void OpenTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OpenTxnRequest(";
  out << "num_txns=" << to_string(num_txns);
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ", " << "replSrcTxnIds="; (__isset.replSrcTxnIds ? (out << to_string(replSrcTxnIds)) : (out << "<null>"));
  out << ")";
}


OpenTxnsResponse::~OpenTxnsResponse() throw() {
}


void OpenTxnsResponse::__set_txn_ids(const std::vector<int64_t> & val) {
  this->txn_ids = val;
}

uint32_t OpenTxnsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_ids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txn_ids.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size646;
            ::apache::thrift::protocol::TType _etype649;
            xfer += iprot->readListBegin(_etype649, _size646);
            this->txn_ids.resize(_size646);
            uint32_t _i650;
            for (_i650 = 0; _i650 < _size646; ++_i650)
            {
              xfer += iprot->readI64(this->txn_ids[_i650]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size628;
            ::apache::thrift::protocol::TType _etype631;
            xfer += iprot->readListBegin(_etype631, _size628);
            this->txn_ids.resize(_size628);
            uint32_t _i632;
            for (_i632 = 0; _i632 < _size628; ++_i632)
            {
              xfer += iprot->readI64(this->txn_ids[_i632]);
=======
<<<<<<< HEAD
            uint32_t _size608;
            ::apache::thrift::protocol::TType _etype611;
            xfer += iprot->readListBegin(_etype611, _size608);
            this->txn_ids.resize(_size608);
            uint32_t _i612;
            for (_i612 = 0; _i612 < _size608; ++_i612)
            {
              xfer += iprot->readI64(this->txn_ids[_i612]);
=======
            uint32_t _size623;
            ::apache::thrift::protocol::TType _etype626;
            xfer += iprot->readListBegin(_etype626, _size623);
            this->txn_ids.resize(_size623);
            uint32_t _i627;
            for (_i627 = 0; _i627 < _size623; ++_i627)
            {
              xfer += iprot->readI64(this->txn_ids[_i627]);
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
            uint32_t _size614;
            ::apache::thrift::protocol::TType _etype617;
            xfer += iprot->readListBegin(_etype617, _size614);
            this->txn_ids.resize(_size614);
            uint32_t _i618;
            for (_i618 = 0; _i618 < _size614; ++_i618)
            {
              xfer += iprot->readI64(this->txn_ids[_i618]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_txn_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_ids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t OpenTxnsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OpenTxnsResponse");

  xfer += oprot->writeFieldBegin("txn_ids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->txn_ids.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter651;
    for (_iter651 = this->txn_ids.begin(); _iter651 != this->txn_ids.end(); ++_iter651)
    {
      xfer += oprot->writeI64((*_iter651));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter633;
    for (_iter633 = this->txn_ids.begin(); _iter633 != this->txn_ids.end(); ++_iter633)
    {
      xfer += oprot->writeI64((*_iter633));
=======
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter613;
    for (_iter613 = this->txn_ids.begin(); _iter613 != this->txn_ids.end(); ++_iter613)
    {
      xfer += oprot->writeI64((*_iter613));
=======
    std::vector<int64_t> ::const_iterator _iter628;
    for (_iter628 = this->txn_ids.begin(); _iter628 != this->txn_ids.end(); ++_iter628)
    {
      xfer += oprot->writeI64((*_iter628));
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
    std::vector<int64_t> ::const_iterator _iter619;
    for (_iter619 = this->txn_ids.begin(); _iter619 != this->txn_ids.end(); ++_iter619)
    {
      xfer += oprot->writeI64((*_iter619));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OpenTxnsResponse &a, OpenTxnsResponse &b) {
  using ::std::swap;
  swap(a.txn_ids, b.txn_ids);
}

<<<<<<< HEAD
<<<<<<< HEAD
OpenTxnsResponse::OpenTxnsResponse(const OpenTxnsResponse& other652) {
  txn_ids = other652.txn_ids;
}
OpenTxnsResponse& OpenTxnsResponse::operator=(const OpenTxnsResponse& other653) {
  txn_ids = other653.txn_ids;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
OpenTxnsResponse::OpenTxnsResponse(const OpenTxnsResponse& other634) {
  txn_ids = other634.txn_ids;
}
OpenTxnsResponse& OpenTxnsResponse::operator=(const OpenTxnsResponse& other635) {
  txn_ids = other635.txn_ids;
=======
<<<<<<< HEAD
OpenTxnsResponse::OpenTxnsResponse(const OpenTxnsResponse& other614) {
  txn_ids = other614.txn_ids;
}
OpenTxnsResponse& OpenTxnsResponse::operator=(const OpenTxnsResponse& other615) {
  txn_ids = other615.txn_ids;
=======
OpenTxnsResponse::OpenTxnsResponse(const OpenTxnsResponse& other629) {
  txn_ids = other629.txn_ids;
}
OpenTxnsResponse& OpenTxnsResponse::operator=(const OpenTxnsResponse& other630) {
  txn_ids = other630.txn_ids;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
OpenTxnsResponse::OpenTxnsResponse(const OpenTxnsResponse& other620) {
  txn_ids = other620.txn_ids;
}
OpenTxnsResponse& OpenTxnsResponse::operator=(const OpenTxnsResponse& other621) {
  txn_ids = other621.txn_ids;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void OpenTxnsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OpenTxnsResponse(";
  out << "txn_ids=" << to_string(txn_ids);
  out << ")";
}


AbortTxnRequest::~AbortTxnRequest() throw() {
}


void AbortTxnRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void AbortTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

uint32_t AbortTxnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replPolicy);
          this->__isset.replPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AbortTxnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AbortTxnRequest");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.replPolicy) {
    xfer += oprot->writeFieldBegin("replPolicy", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->replPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AbortTxnRequest &a, AbortTxnRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.replPolicy, b.replPolicy);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other654) {
  txnid = other654.txnid;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other655) {
  txnid = other655.txnid;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other636) {
  txnid = other636.txnid;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other637) {
  txnid = other637.txnid;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other616) {
  txnid = other616.txnid;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other617) {
  txnid = other617.txnid;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other631) {
  txnid = other631.txnid;
  replPolicy = other631.replPolicy;
  __isset = other631.__isset;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other632) {
  txnid = other632.txnid;
  replPolicy = other632.replPolicy;
  __isset = other632.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other611) {
  txnid = other611.txnid;
  replPolicy = other611.replPolicy;
  __isset = other611.__isset;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other612) {
  txnid = other612.txnid;
  replPolicy = other612.replPolicy;
  __isset = other612.__isset;
<<<<<<< HEAD
=======
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other612) {
  txnid = other612.txnid;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
  replPolicy = other611.replPolicy;
  __isset = other611.__isset;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other612) {
  txnid = other612.txnid;
  replPolicy = other612.replPolicy;
  __isset = other612.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other622) {
  txnid = other622.txnid;
  replPolicy = other622.replPolicy;
  __isset = other622.__isset;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other623) {
  txnid = other623.txnid;
  replPolicy = other623.replPolicy;
  __isset = other623.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void AbortTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortTxnRequest(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ")";
}


AbortTxnsRequest::~AbortTxnsRequest() throw() {
}


void AbortTxnsRequest::__set_txn_ids(const std::vector<int64_t> & val) {
  this->txn_ids = val;
}

uint32_t AbortTxnsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_ids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txn_ids.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size656;
            ::apache::thrift::protocol::TType _etype659;
            xfer += iprot->readListBegin(_etype659, _size656);
            this->txn_ids.resize(_size656);
            uint32_t _i660;
            for (_i660 = 0; _i660 < _size656; ++_i660)
            {
              xfer += iprot->readI64(this->txn_ids[_i660]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size638;
            ::apache::thrift::protocol::TType _etype641;
            xfer += iprot->readListBegin(_etype641, _size638);
            this->txn_ids.resize(_size638);
            uint32_t _i642;
            for (_i642 = 0; _i642 < _size638; ++_i642)
            {
              xfer += iprot->readI64(this->txn_ids[_i642]);
=======
<<<<<<< HEAD
            uint32_t _size618;
            ::apache::thrift::protocol::TType _etype621;
            xfer += iprot->readListBegin(_etype621, _size618);
            this->txn_ids.resize(_size618);
            uint32_t _i622;
            for (_i622 = 0; _i622 < _size618; ++_i622)
            {
              xfer += iprot->readI64(this->txn_ids[_i622]);
=======
            uint32_t _size633;
            ::apache::thrift::protocol::TType _etype636;
            xfer += iprot->readListBegin(_etype636, _size633);
            this->txn_ids.resize(_size633);
            uint32_t _i637;
            for (_i637 = 0; _i637 < _size633; ++_i637)
            {
              xfer += iprot->readI64(this->txn_ids[_i637]);
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
            uint32_t _size624;
            ::apache::thrift::protocol::TType _etype627;
            xfer += iprot->readListBegin(_etype627, _size624);
            this->txn_ids.resize(_size624);
            uint32_t _i628;
            for (_i628 = 0; _i628 < _size624; ++_i628)
            {
              xfer += iprot->readI64(this->txn_ids[_i628]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_txn_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_ids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AbortTxnsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AbortTxnsRequest");

  xfer += oprot->writeFieldBegin("txn_ids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->txn_ids.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter661;
    for (_iter661 = this->txn_ids.begin(); _iter661 != this->txn_ids.end(); ++_iter661)
    {
      xfer += oprot->writeI64((*_iter661));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter643;
    for (_iter643 = this->txn_ids.begin(); _iter643 != this->txn_ids.end(); ++_iter643)
    {
      xfer += oprot->writeI64((*_iter643));
=======
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter623;
    for (_iter623 = this->txn_ids.begin(); _iter623 != this->txn_ids.end(); ++_iter623)
    {
      xfer += oprot->writeI64((*_iter623));
=======
    std::vector<int64_t> ::const_iterator _iter638;
    for (_iter638 = this->txn_ids.begin(); _iter638 != this->txn_ids.end(); ++_iter638)
    {
      xfer += oprot->writeI64((*_iter638));
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
    std::vector<int64_t> ::const_iterator _iter629;
    for (_iter629 = this->txn_ids.begin(); _iter629 != this->txn_ids.end(); ++_iter629)
    {
      xfer += oprot->writeI64((*_iter629));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AbortTxnsRequest &a, AbortTxnsRequest &b) {
  using ::std::swap;
  swap(a.txn_ids, b.txn_ids);
}

<<<<<<< HEAD
<<<<<<< HEAD
AbortTxnsRequest::AbortTxnsRequest(const AbortTxnsRequest& other662) {
  txn_ids = other662.txn_ids;
}
AbortTxnsRequest& AbortTxnsRequest::operator=(const AbortTxnsRequest& other663) {
  txn_ids = other663.txn_ids;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
AbortTxnsRequest::AbortTxnsRequest(const AbortTxnsRequest& other644) {
  txn_ids = other644.txn_ids;
}
AbortTxnsRequest& AbortTxnsRequest::operator=(const AbortTxnsRequest& other645) {
  txn_ids = other645.txn_ids;
=======
<<<<<<< HEAD
AbortTxnsRequest::AbortTxnsRequest(const AbortTxnsRequest& other624) {
  txn_ids = other624.txn_ids;
}
AbortTxnsRequest& AbortTxnsRequest::operator=(const AbortTxnsRequest& other625) {
  txn_ids = other625.txn_ids;
=======
AbortTxnsRequest::AbortTxnsRequest(const AbortTxnsRequest& other639) {
  txn_ids = other639.txn_ids;
}
AbortTxnsRequest& AbortTxnsRequest::operator=(const AbortTxnsRequest& other640) {
  txn_ids = other640.txn_ids;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
AbortTxnsRequest::AbortTxnsRequest(const AbortTxnsRequest& other630) {
  txn_ids = other630.txn_ids;
}
AbortTxnsRequest& AbortTxnsRequest::operator=(const AbortTxnsRequest& other631) {
  txn_ids = other631.txn_ids;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void AbortTxnsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortTxnsRequest(";
  out << "txn_ids=" << to_string(txn_ids);
  out << ")";
}


CommitTxnRequest::~CommitTxnRequest() throw() {
}


void CommitTxnRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void CommitTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

uint32_t CommitTxnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replPolicy);
          this->__isset.replPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CommitTxnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommitTxnRequest");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.replPolicy) {
    xfer += oprot->writeFieldBegin("replPolicy", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->replPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommitTxnRequest &a, CommitTxnRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.replPolicy, b.replPolicy);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other664) {
  txnid = other664.txnid;
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other665) {
  txnid = other665.txnid;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other646) {
  txnid = other646.txnid;
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other647) {
  txnid = other647.txnid;
=======
<<<<<<< HEAD
CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other626) {
  txnid = other626.txnid;
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other627) {
  txnid = other627.txnid;
=======
CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other641) {
  txnid = other641.txnid;
  replPolicy = other641.replPolicy;
  __isset = other641.__isset;
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other642) {
  txnid = other642.txnid;
  replPolicy = other642.replPolicy;
  __isset = other642.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other632) {
  txnid = other632.txnid;
  replPolicy = other632.replPolicy;
  __isset = other632.__isset;
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other633) {
  txnid = other633.txnid;
  replPolicy = other633.replPolicy;
  __isset = other633.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CommitTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommitTxnRequest(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ")";
}


GetValidWriteIdsRequest::~GetValidWriteIdsRequest() throw() {
}


void GetValidWriteIdsRequest::__set_fullTableNames(const std::vector<std::string> & val) {
  this->fullTableNames = val;
}

void GetValidWriteIdsRequest::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
}

uint32_t GetValidWriteIdsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fullTableNames = false;
  bool isset_validTxnList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fullTableNames.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size666;
            ::apache::thrift::protocol::TType _etype669;
            xfer += iprot->readListBegin(_etype669, _size666);
            this->fullTableNames.resize(_size666);
            uint32_t _i670;
            for (_i670 = 0; _i670 < _size666; ++_i670)
            {
              xfer += iprot->readString(this->fullTableNames[_i670]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size648;
            ::apache::thrift::protocol::TType _etype651;
            xfer += iprot->readListBegin(_etype651, _size648);
            this->fullTableNames.resize(_size648);
            uint32_t _i652;
            for (_i652 = 0; _i652 < _size648; ++_i652)
            {
              xfer += iprot->readString(this->fullTableNames[_i652]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size628;
            ::apache::thrift::protocol::TType _etype631;
            xfer += iprot->readListBegin(_etype631, _size628);
            this->fullTableNames.resize(_size628);
            uint32_t _i632;
            for (_i632 = 0; _i632 < _size628; ++_i632)
            {
              xfer += iprot->readString(this->fullTableNames[_i632]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size647;
            ::apache::thrift::protocol::TType _etype650;
            xfer += iprot->readListBegin(_etype650, _size647);
            this->fullTableNames.resize(_size647);
            uint32_t _i651;
            for (_i651 = 0; _i651 < _size647; ++_i651)
            {
              xfer += iprot->readString(this->fullTableNames[_i651]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
            uint32_t _size627;
            ::apache::thrift::protocol::TType _etype630;
            xfer += iprot->readListBegin(_etype630, _size627);
            this->fullTableNames.resize(_size627);
            uint32_t _i631;
            for (_i631 = 0; _i631 < _size627; ++_i631)
            {
              xfer += iprot->readString(this->fullTableNames[_i631]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size634;
            ::apache::thrift::protocol::TType _etype637;
            xfer += iprot->readListBegin(_etype637, _size634);
            this->fullTableNames.resize(_size634);
            uint32_t _i638;
            for (_i638 = 0; _i638 < _size634; ++_i638)
            {
              xfer += iprot->readString(this->fullTableNames[_i638]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_fullTableNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->validTxnList);
          isset_validTxnList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fullTableNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validTxnList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetValidWriteIdsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetValidWriteIdsRequest");

  xfer += oprot->writeFieldBegin("fullTableNames", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->fullTableNames.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter671;
    for (_iter671 = this->fullTableNames.begin(); _iter671 != this->fullTableNames.end(); ++_iter671)
    {
      xfer += oprot->writeString((*_iter671));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter653;
    for (_iter653 = this->fullTableNames.begin(); _iter653 != this->fullTableNames.end(); ++_iter653)
    {
      xfer += oprot->writeString((*_iter653));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter633;
    for (_iter633 = this->fullTableNames.begin(); _iter633 != this->fullTableNames.end(); ++_iter633)
    {
      xfer += oprot->writeString((*_iter633));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<std::string> ::const_iterator _iter652;
    for (_iter652 = this->fullTableNames.begin(); _iter652 != this->fullTableNames.end(); ++_iter652)
    {
      xfer += oprot->writeString((*_iter652));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
    std::vector<std::string> ::const_iterator _iter632;
    for (_iter632 = this->fullTableNames.begin(); _iter632 != this->fullTableNames.end(); ++_iter632)
    {
      xfer += oprot->writeString((*_iter632));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<std::string> ::const_iterator _iter639;
    for (_iter639 = this->fullTableNames.begin(); _iter639 != this->fullTableNames.end(); ++_iter639)
    {
      xfer += oprot->writeString((*_iter639));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validTxnList", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->validTxnList);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetValidWriteIdsRequest &a, GetValidWriteIdsRequest &b) {
  using ::std::swap;
  swap(a.fullTableNames, b.fullTableNames);
  swap(a.validTxnList, b.validTxnList);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other672) {
  fullTableNames = other672.fullTableNames;
  validTxnList = other672.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other673) {
  fullTableNames = other673.fullTableNames;
  validTxnList = other673.validTxnList;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other654) {
  fullTableNames = other654.fullTableNames;
  validTxnList = other654.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other655) {
  fullTableNames = other655.fullTableNames;
  validTxnList = other655.validTxnList;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other634) {
  fullTableNames = other634.fullTableNames;
  validTxnList = other634.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other635) {
  fullTableNames = other635.fullTableNames;
  validTxnList = other635.validTxnList;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other653) {
  fullTableNames = other653.fullTableNames;
  validTxnList = other653.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other654) {
  fullTableNames = other654.fullTableNames;
  validTxnList = other654.validTxnList;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other633) {
  fullTableNames = other633.fullTableNames;
  validTxnList = other633.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other634) {
  fullTableNames = other634.fullTableNames;
  validTxnList = other634.validTxnList;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other640) {
  fullTableNames = other640.fullTableNames;
  validTxnList = other640.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other641) {
  fullTableNames = other641.fullTableNames;
  validTxnList = other641.validTxnList;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetValidWriteIdsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetValidWriteIdsRequest(";
  out << "fullTableNames=" << to_string(fullTableNames);
  out << ", " << "validTxnList=" << to_string(validTxnList);
  out << ")";
}


TableValidWriteIds::~TableValidWriteIds() throw() {
}


void TableValidWriteIds::__set_fullTableName(const std::string& val) {
  this->fullTableName = val;
}

void TableValidWriteIds::__set_writeIdHighWaterMark(const int64_t val) {
  this->writeIdHighWaterMark = val;
}

void TableValidWriteIds::__set_invalidWriteIds(const std::vector<int64_t> & val) {
  this->invalidWriteIds = val;
}

void TableValidWriteIds::__set_minOpenWriteId(const int64_t val) {
  this->minOpenWriteId = val;
__isset.minOpenWriteId = true;
}

void TableValidWriteIds::__set_abortedBits(const std::string& val) {
  this->abortedBits = val;
}

uint32_t TableValidWriteIds::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fullTableName = false;
  bool isset_writeIdHighWaterMark = false;
  bool isset_invalidWriteIds = false;
  bool isset_abortedBits = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullTableName);
          isset_fullTableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeIdHighWaterMark);
          isset_writeIdHighWaterMark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->invalidWriteIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size674;
            ::apache::thrift::protocol::TType _etype677;
            xfer += iprot->readListBegin(_etype677, _size674);
            this->invalidWriteIds.resize(_size674);
            uint32_t _i678;
            for (_i678 = 0; _i678 < _size674; ++_i678)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i678]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size656;
            ::apache::thrift::protocol::TType _etype659;
            xfer += iprot->readListBegin(_etype659, _size656);
            this->invalidWriteIds.resize(_size656);
            uint32_t _i660;
            for (_i660 = 0; _i660 < _size656; ++_i660)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i660]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size636;
            ::apache::thrift::protocol::TType _etype639;
            xfer += iprot->readListBegin(_etype639, _size636);
            this->invalidWriteIds.resize(_size636);
            uint32_t _i640;
            for (_i640 = 0; _i640 < _size636; ++_i640)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i640]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size655;
            ::apache::thrift::protocol::TType _etype658;
            xfer += iprot->readListBegin(_etype658, _size655);
            this->invalidWriteIds.resize(_size655);
            uint32_t _i659;
            for (_i659 = 0; _i659 < _size655; ++_i659)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i659]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
            uint32_t _size635;
            ::apache::thrift::protocol::TType _etype638;
            xfer += iprot->readListBegin(_etype638, _size635);
            this->invalidWriteIds.resize(_size635);
            uint32_t _i639;
            for (_i639 = 0; _i639 < _size635; ++_i639)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i639]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size642;
            ::apache::thrift::protocol::TType _etype645;
            xfer += iprot->readListBegin(_etype645, _size642);
            this->invalidWriteIds.resize(_size642);
            uint32_t _i646;
            for (_i646 = 0; _i646 < _size642; ++_i646)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i646]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_invalidWriteIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->minOpenWriteId);
          this->__isset.minOpenWriteId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->abortedBits);
          isset_abortedBits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fullTableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_writeIdHighWaterMark)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidWriteIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_abortedBits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableValidWriteIds::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableValidWriteIds");

  xfer += oprot->writeFieldBegin("fullTableName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fullTableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("writeIdHighWaterMark", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->writeIdHighWaterMark);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invalidWriteIds", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->invalidWriteIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter679;
    for (_iter679 = this->invalidWriteIds.begin(); _iter679 != this->invalidWriteIds.end(); ++_iter679)
    {
      xfer += oprot->writeI64((*_iter679));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter661;
    for (_iter661 = this->invalidWriteIds.begin(); _iter661 != this->invalidWriteIds.end(); ++_iter661)
    {
      xfer += oprot->writeI64((*_iter661));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter641;
    for (_iter641 = this->invalidWriteIds.begin(); _iter641 != this->invalidWriteIds.end(); ++_iter641)
    {
      xfer += oprot->writeI64((*_iter641));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<int64_t> ::const_iterator _iter660;
    for (_iter660 = this->invalidWriteIds.begin(); _iter660 != this->invalidWriteIds.end(); ++_iter660)
    {
      xfer += oprot->writeI64((*_iter660));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
    std::vector<int64_t> ::const_iterator _iter640;
    for (_iter640 = this->invalidWriteIds.begin(); _iter640 != this->invalidWriteIds.end(); ++_iter640)
    {
      xfer += oprot->writeI64((*_iter640));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<int64_t> ::const_iterator _iter647;
    for (_iter647 = this->invalidWriteIds.begin(); _iter647 != this->invalidWriteIds.end(); ++_iter647)
    {
      xfer += oprot->writeI64((*_iter647));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.minOpenWriteId) {
    xfer += oprot->writeFieldBegin("minOpenWriteId", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->minOpenWriteId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("abortedBits", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->abortedBits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableValidWriteIds &a, TableValidWriteIds &b) {
  using ::std::swap;
  swap(a.fullTableName, b.fullTableName);
  swap(a.writeIdHighWaterMark, b.writeIdHighWaterMark);
  swap(a.invalidWriteIds, b.invalidWriteIds);
  swap(a.minOpenWriteId, b.minOpenWriteId);
  swap(a.abortedBits, b.abortedBits);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other680) {
  fullTableName = other680.fullTableName;
  writeIdHighWaterMark = other680.writeIdHighWaterMark;
  invalidWriteIds = other680.invalidWriteIds;
  minOpenWriteId = other680.minOpenWriteId;
  abortedBits = other680.abortedBits;
  __isset = other680.__isset;
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other681) {
  fullTableName = other681.fullTableName;
  writeIdHighWaterMark = other681.writeIdHighWaterMark;
  invalidWriteIds = other681.invalidWriteIds;
  minOpenWriteId = other681.minOpenWriteId;
  abortedBits = other681.abortedBits;
  __isset = other681.__isset;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other662) {
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other642) {
  fullTableName = other642.fullTableName;
  writeIdHighWaterMark = other642.writeIdHighWaterMark;
  invalidWriteIds = other642.invalidWriteIds;
  minOpenWriteId = other642.minOpenWriteId;
  abortedBits = other642.abortedBits;
  __isset = other642.__isset;
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other643) {
  fullTableName = other643.fullTableName;
  writeIdHighWaterMark = other643.writeIdHighWaterMark;
  invalidWriteIds = other643.invalidWriteIds;
  minOpenWriteId = other643.minOpenWriteId;
  abortedBits = other643.abortedBits;
  __isset = other643.__isset;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other661) {
  fullTableName = other661.fullTableName;
  writeIdHighWaterMark = other661.writeIdHighWaterMark;
  invalidWriteIds = other661.invalidWriteIds;
  minOpenWriteId = other661.minOpenWriteId;
  abortedBits = other661.abortedBits;
  __isset = other661.__isset;
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other662) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  fullTableName = other662.fullTableName;
  writeIdHighWaterMark = other662.writeIdHighWaterMark;
  invalidWriteIds = other662.invalidWriteIds;
  minOpenWriteId = other662.minOpenWriteId;
  abortedBits = other662.abortedBits;
  __isset = other662.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other663) {
  fullTableName = other663.fullTableName;
  writeIdHighWaterMark = other663.writeIdHighWaterMark;
  invalidWriteIds = other663.invalidWriteIds;
  minOpenWriteId = other663.minOpenWriteId;
  abortedBits = other663.abortedBits;
  __isset = other663.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other641) {
  fullTableName = other641.fullTableName;
  writeIdHighWaterMark = other641.writeIdHighWaterMark;
  invalidWriteIds = other641.invalidWriteIds;
  minOpenWriteId = other641.minOpenWriteId;
  abortedBits = other641.abortedBits;
  __isset = other641.__isset;
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other642) {
  fullTableName = other642.fullTableName;
  writeIdHighWaterMark = other642.writeIdHighWaterMark;
  invalidWriteIds = other642.invalidWriteIds;
  minOpenWriteId = other642.minOpenWriteId;
  abortedBits = other642.abortedBits;
  __isset = other642.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other648) {
  fullTableName = other648.fullTableName;
  writeIdHighWaterMark = other648.writeIdHighWaterMark;
  invalidWriteIds = other648.invalidWriteIds;
  minOpenWriteId = other648.minOpenWriteId;
  abortedBits = other648.abortedBits;
  __isset = other648.__isset;
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other649) {
  fullTableName = other649.fullTableName;
  writeIdHighWaterMark = other649.writeIdHighWaterMark;
  invalidWriteIds = other649.invalidWriteIds;
  minOpenWriteId = other649.minOpenWriteId;
  abortedBits = other649.abortedBits;
  __isset = other649.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void TableValidWriteIds::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableValidWriteIds(";
  out << "fullTableName=" << to_string(fullTableName);
  out << ", " << "writeIdHighWaterMark=" << to_string(writeIdHighWaterMark);
  out << ", " << "invalidWriteIds=" << to_string(invalidWriteIds);
  out << ", " << "minOpenWriteId="; (__isset.minOpenWriteId ? (out << to_string(minOpenWriteId)) : (out << "<null>"));
  out << ", " << "abortedBits=" << to_string(abortedBits);
  out << ")";
}


GetValidWriteIdsResponse::~GetValidWriteIdsResponse() throw() {
}


void GetValidWriteIdsResponse::__set_tblValidWriteIds(const std::vector<TableValidWriteIds> & val) {
  this->tblValidWriteIds = val;
}

uint32_t GetValidWriteIdsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tblValidWriteIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tblValidWriteIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size682;
            ::apache::thrift::protocol::TType _etype685;
            xfer += iprot->readListBegin(_etype685, _size682);
            this->tblValidWriteIds.resize(_size682);
            uint32_t _i686;
            for (_i686 = 0; _i686 < _size682; ++_i686)
            {
              xfer += this->tblValidWriteIds[_i686].read(iprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size664;
            ::apache::thrift::protocol::TType _etype667;
            xfer += iprot->readListBegin(_etype667, _size664);
            this->tblValidWriteIds.resize(_size664);
            uint32_t _i668;
            for (_i668 = 0; _i668 < _size664; ++_i668)
            {
              xfer += this->tblValidWriteIds[_i668].read(iprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size644;
            ::apache::thrift::protocol::TType _etype647;
            xfer += iprot->readListBegin(_etype647, _size644);
            this->tblValidWriteIds.resize(_size644);
            uint32_t _i648;
            for (_i648 = 0; _i648 < _size644; ++_i648)
            {
              xfer += this->tblValidWriteIds[_i648].read(iprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size663;
            ::apache::thrift::protocol::TType _etype666;
            xfer += iprot->readListBegin(_etype666, _size663);
            this->tblValidWriteIds.resize(_size663);
            uint32_t _i667;
            for (_i667 = 0; _i667 < _size663; ++_i667)
            {
              xfer += this->tblValidWriteIds[_i667].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
            uint32_t _size643;
            ::apache::thrift::protocol::TType _etype646;
            xfer += iprot->readListBegin(_etype646, _size643);
            this->tblValidWriteIds.resize(_size643);
            uint32_t _i647;
            for (_i647 = 0; _i647 < _size643; ++_i647)
            {
              xfer += this->tblValidWriteIds[_i647].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size650;
            ::apache::thrift::protocol::TType _etype653;
            xfer += iprot->readListBegin(_etype653, _size650);
            this->tblValidWriteIds.resize(_size650);
            uint32_t _i654;
            for (_i654 = 0; _i654 < _size650; ++_i654)
            {
              xfer += this->tblValidWriteIds[_i654].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_tblValidWriteIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tblValidWriteIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetValidWriteIdsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetValidWriteIdsResponse");

  xfer += oprot->writeFieldBegin("tblValidWriteIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tblValidWriteIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<TableValidWriteIds> ::const_iterator _iter687;
    for (_iter687 = this->tblValidWriteIds.begin(); _iter687 != this->tblValidWriteIds.end(); ++_iter687)
    {
      xfer += (*_iter687).write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<TableValidWriteIds> ::const_iterator _iter669;
    for (_iter669 = this->tblValidWriteIds.begin(); _iter669 != this->tblValidWriteIds.end(); ++_iter669)
    {
      xfer += (*_iter669).write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<TableValidWriteIds> ::const_iterator _iter649;
    for (_iter649 = this->tblValidWriteIds.begin(); _iter649 != this->tblValidWriteIds.end(); ++_iter649)
    {
      xfer += (*_iter649).write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<TableValidWriteIds> ::const_iterator _iter668;
    for (_iter668 = this->tblValidWriteIds.begin(); _iter668 != this->tblValidWriteIds.end(); ++_iter668)
    {
      xfer += (*_iter668).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
    std::vector<TableValidWriteIds> ::const_iterator _iter648;
    for (_iter648 = this->tblValidWriteIds.begin(); _iter648 != this->tblValidWriteIds.end(); ++_iter648)
    {
      xfer += (*_iter648).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<TableValidWriteIds> ::const_iterator _iter655;
    for (_iter655 = this->tblValidWriteIds.begin(); _iter655 != this->tblValidWriteIds.end(); ++_iter655)
    {
      xfer += (*_iter655).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetValidWriteIdsResponse &a, GetValidWriteIdsResponse &b) {
  using ::std::swap;
  swap(a.tblValidWriteIds, b.tblValidWriteIds);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other688) {
  tblValidWriteIds = other688.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other689) {
  tblValidWriteIds = other689.tblValidWriteIds;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other670) {
  tblValidWriteIds = other670.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other671) {
  tblValidWriteIds = other671.tblValidWriteIds;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other650) {
  tblValidWriteIds = other650.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other651) {
  tblValidWriteIds = other651.tblValidWriteIds;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other669) {
  tblValidWriteIds = other669.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other670) {
  tblValidWriteIds = other670.tblValidWriteIds;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other649) {
  tblValidWriteIds = other649.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other650) {
  tblValidWriteIds = other650.tblValidWriteIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other656) {
  tblValidWriteIds = other656.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other657) {
  tblValidWriteIds = other657.tblValidWriteIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetValidWriteIdsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetValidWriteIdsResponse(";
  out << "tblValidWriteIds=" << to_string(tblValidWriteIds);
  out << ")";
}


AllocateTableWriteIdsRequest::~AllocateTableWriteIdsRequest() throw() {
}


void AllocateTableWriteIdsRequest::__set_txnIds(const std::vector<int64_t> & val) {
  this->txnIds = val;
}

void AllocateTableWriteIdsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AllocateTableWriteIdsRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

uint32_t AllocateTableWriteIdsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnIds = false;
  bool isset_dbName = false;
  bool isset_tableName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txnIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size690;
            ::apache::thrift::protocol::TType _etype693;
            xfer += iprot->readListBegin(_etype693, _size690);
            this->txnIds.resize(_size690);
            uint32_t _i694;
            for (_i694 = 0; _i694 < _size690; ++_i694)
            {
              xfer += iprot->readI64(this->txnIds[_i694]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size672;
            ::apache::thrift::protocol::TType _etype675;
            xfer += iprot->readListBegin(_etype675, _size672);
            this->txnIds.resize(_size672);
            uint32_t _i676;
            for (_i676 = 0; _i676 < _size672; ++_i676)
            {
              xfer += iprot->readI64(this->txnIds[_i676]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size652;
            ::apache::thrift::protocol::TType _etype655;
            xfer += iprot->readListBegin(_etype655, _size652);
            this->txnIds.resize(_size652);
            uint32_t _i656;
            for (_i656 = 0; _i656 < _size652; ++_i656)
            {
              xfer += iprot->readI64(this->txnIds[_i656]);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size671;
            ::apache::thrift::protocol::TType _etype674;
            xfer += iprot->readListBegin(_etype674, _size671);
            this->txnIds.resize(_size671);
            uint32_t _i675;
            for (_i675 = 0; _i675 < _size671; ++_i675)
            {
              xfer += iprot->readI64(this->txnIds[_i675]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
            uint32_t _size651;
            ::apache::thrift::protocol::TType _etype654;
            xfer += iprot->readListBegin(_etype654, _size651);
            this->txnIds.resize(_size651);
            uint32_t _i655;
            for (_i655 = 0; _i655 < _size651; ++_i655)
            {
              xfer += iprot->readI64(this->txnIds[_i655]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size658;
            ::apache::thrift::protocol::TType _etype661;
            xfer += iprot->readListBegin(_etype661, _size658);
            this->txnIds.resize(_size658);
            uint32_t _i662;
            for (_i662 = 0; _i662 < _size658; ++_i662)
            {
              xfer += iprot->readI64(this->txnIds[_i662]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_txnIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          isset_tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AllocateTableWriteIdsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AllocateTableWriteIdsRequest");

  xfer += oprot->writeFieldBegin("txnIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->txnIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter695;
    for (_iter695 = this->txnIds.begin(); _iter695 != this->txnIds.end(); ++_iter695)
    {
      xfer += oprot->writeI64((*_iter695));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter677;
    for (_iter677 = this->txnIds.begin(); _iter677 != this->txnIds.end(); ++_iter677)
    {
      xfer += oprot->writeI64((*_iter677));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter657;
    for (_iter657 = this->txnIds.begin(); _iter657 != this->txnIds.end(); ++_iter657)
    {
      xfer += oprot->writeI64((*_iter657));
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<int64_t> ::const_iterator _iter676;
    for (_iter676 = this->txnIds.begin(); _iter676 != this->txnIds.end(); ++_iter676)
    {
      xfer += oprot->writeI64((*_iter676));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
    std::vector<int64_t> ::const_iterator _iter656;
    for (_iter656 = this->txnIds.begin(); _iter656 != this->txnIds.end(); ++_iter656)
    {
      xfer += oprot->writeI64((*_iter656));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<int64_t> ::const_iterator _iter663;
    for (_iter663 = this->txnIds.begin(); _iter663 != this->txnIds.end(); ++_iter663)
    {
      xfer += oprot->writeI64((*_iter663));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AllocateTableWriteIdsRequest &a, AllocateTableWriteIdsRequest &b) {
  using ::std::swap;
  swap(a.txnIds, b.txnIds);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other696) {
  txnIds = other696.txnIds;
  dbName = other696.dbName;
  tableName = other696.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other697) {
  txnIds = other697.txnIds;
  dbName = other697.dbName;
  tableName = other697.tableName;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other678) {
  txnIds = other678.txnIds;
  dbName = other678.dbName;
  tableName = other678.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other679) {
  txnIds = other679.txnIds;
  dbName = other679.dbName;
  tableName = other679.tableName;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other658) {
  txnIds = other658.txnIds;
  dbName = other658.dbName;
  tableName = other658.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other659) {
  txnIds = other659.txnIds;
  dbName = other659.dbName;
  tableName = other659.tableName;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other677) {
  txnIds = other677.txnIds;
  dbName = other677.dbName;
  tableName = other677.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other678) {
  txnIds = other678.txnIds;
  dbName = other678.dbName;
  tableName = other678.tableName;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other657) {
  txnIds = other657.txnIds;
  dbName = other657.dbName;
  tableName = other657.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other658) {
  txnIds = other658.txnIds;
  dbName = other658.dbName;
  tableName = other658.tableName;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other664) {
  txnIds = other664.txnIds;
  dbName = other664.dbName;
  tableName = other664.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other665) {
  txnIds = other665.txnIds;
  dbName = other665.dbName;
  tableName = other665.tableName;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void AllocateTableWriteIdsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AllocateTableWriteIdsRequest(";
  out << "txnIds=" << to_string(txnIds);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ")";
}


TxnToWriteId::~TxnToWriteId() throw() {
}


void TxnToWriteId::__set_txnId(const int64_t val) {
  this->txnId = val;
}

void TxnToWriteId::__set_writeId(const int64_t val) {
  this->writeId = val;
}

uint32_t TxnToWriteId::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnId = false;
  bool isset_writeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnId);
          isset_txnId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeId);
          isset_writeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_writeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TxnToWriteId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnToWriteId");

  xfer += oprot->writeFieldBegin("txnId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("writeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->writeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnToWriteId &a, TxnToWriteId &b) {
  using ::std::swap;
  swap(a.txnId, b.txnId);
  swap(a.writeId, b.writeId);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other698) {
  txnId = other698.txnId;
  writeId = other698.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other699) {
  txnId = other699.txnId;
  writeId = other699.writeId;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other680) {
  txnId = other680.txnId;
  writeId = other680.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other681) {
  txnId = other681.txnId;
  writeId = other681.writeId;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other660) {
  txnId = other660.txnId;
  writeId = other660.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other661) {
  txnId = other661.txnId;
  writeId = other661.writeId;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other679) {
  txnId = other679.txnId;
  writeId = other679.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other680) {
  txnId = other680.txnId;
  writeId = other680.writeId;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other659) {
  txnId = other659.txnId;
  writeId = other659.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other660) {
  txnId = other660.txnId;
  writeId = other660.writeId;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other666) {
  txnId = other666.txnId;
  writeId = other666.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other667) {
  txnId = other667.txnId;
  writeId = other667.writeId;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void TxnToWriteId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnToWriteId(";
  out << "txnId=" << to_string(txnId);
  out << ", " << "writeId=" << to_string(writeId);
  out << ")";
}


AllocateTableWriteIdsResponse::~AllocateTableWriteIdsResponse() throw() {
}


void AllocateTableWriteIdsResponse::__set_txnToWriteIds(const std::vector<TxnToWriteId> & val) {
  this->txnToWriteIds = val;
}

uint32_t AllocateTableWriteIdsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnToWriteIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txnToWriteIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size700;
            ::apache::thrift::protocol::TType _etype703;
            xfer += iprot->readListBegin(_etype703, _size700);
            this->txnToWriteIds.resize(_size700);
            uint32_t _i704;
            for (_i704 = 0; _i704 < _size700; ++_i704)
            {
              xfer += this->txnToWriteIds[_i704].read(iprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size682;
            ::apache::thrift::protocol::TType _etype685;
            xfer += iprot->readListBegin(_etype685, _size682);
            this->txnToWriteIds.resize(_size682);
            uint32_t _i686;
            for (_i686 = 0; _i686 < _size682; ++_i686)
            {
              xfer += this->txnToWriteIds[_i686].read(iprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size662;
            ::apache::thrift::protocol::TType _etype665;
            xfer += iprot->readListBegin(_etype665, _size662);
            this->txnToWriteIds.resize(_size662);
            uint32_t _i666;
            for (_i666 = 0; _i666 < _size662; ++_i666)
            {
              xfer += this->txnToWriteIds[_i666].read(iprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size681;
            ::apache::thrift::protocol::TType _etype684;
            xfer += iprot->readListBegin(_etype684, _size681);
            this->txnToWriteIds.resize(_size681);
            uint32_t _i685;
            for (_i685 = 0; _i685 < _size681; ++_i685)
            {
              xfer += this->txnToWriteIds[_i685].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
            uint32_t _size661;
            ::apache::thrift::protocol::TType _etype664;
            xfer += iprot->readListBegin(_etype664, _size661);
            this->txnToWriteIds.resize(_size661);
            uint32_t _i665;
            for (_i665 = 0; _i665 < _size661; ++_i665)
            {
              xfer += this->txnToWriteIds[_i665].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size668;
            ::apache::thrift::protocol::TType _etype671;
            xfer += iprot->readListBegin(_etype671, _size668);
            this->txnToWriteIds.resize(_size668);
            uint32_t _i672;
            for (_i672 = 0; _i672 < _size668; ++_i672)
            {
              xfer += this->txnToWriteIds[_i672].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_txnToWriteIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnToWriteIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AllocateTableWriteIdsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AllocateTableWriteIdsResponse");

  xfer += oprot->writeFieldBegin("txnToWriteIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->txnToWriteIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<TxnToWriteId> ::const_iterator _iter705;
    for (_iter705 = this->txnToWriteIds.begin(); _iter705 != this->txnToWriteIds.end(); ++_iter705)
    {
      xfer += (*_iter705).write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<TxnToWriteId> ::const_iterator _iter687;
    for (_iter687 = this->txnToWriteIds.begin(); _iter687 != this->txnToWriteIds.end(); ++_iter687)
    {
      xfer += (*_iter687).write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<TxnToWriteId> ::const_iterator _iter667;
    for (_iter667 = this->txnToWriteIds.begin(); _iter667 != this->txnToWriteIds.end(); ++_iter667)
    {
      xfer += (*_iter667).write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<TxnToWriteId> ::const_iterator _iter686;
    for (_iter686 = this->txnToWriteIds.begin(); _iter686 != this->txnToWriteIds.end(); ++_iter686)
    {
      xfer += (*_iter686).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
    std::vector<TxnToWriteId> ::const_iterator _iter666;
    for (_iter666 = this->txnToWriteIds.begin(); _iter666 != this->txnToWriteIds.end(); ++_iter666)
    {
      xfer += (*_iter666).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<TxnToWriteId> ::const_iterator _iter673;
    for (_iter673 = this->txnToWriteIds.begin(); _iter673 != this->txnToWriteIds.end(); ++_iter673)
    {
      xfer += (*_iter673).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AllocateTableWriteIdsResponse &a, AllocateTableWriteIdsResponse &b) {
  using ::std::swap;
  swap(a.txnToWriteIds, b.txnToWriteIds);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other706) {
  txnToWriteIds = other706.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other707) {
  txnToWriteIds = other707.txnToWriteIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other688) {
  txnToWriteIds = other688.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other689) {
  txnToWriteIds = other689.txnToWriteIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other668) {
  txnToWriteIds = other668.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other669) {
  txnToWriteIds = other669.txnToWriteIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other687) {
  txnToWriteIds = other687.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other688) {
  txnToWriteIds = other688.txnToWriteIds;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other663) {
  txnToWriteIds = other663.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other664) {
  txnToWriteIds = other664.txnToWriteIds;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other621) {
  txnid = other621.txnid;
  replPolicy = other621.replPolicy;
  __isset = other621.__isset;
<<<<<<< HEAD
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other622) {
  txnid = other622.txnid;
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
  replPolicy = other622.replPolicy;
  __isset = other622.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
  return *this;
}
void AllocateTableWriteIdsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
<<<<<<< HEAD
  out << "AllocateTableWriteIdsResponse(";
  out << "txnToWriteIds=" << to_string(txnToWriteIds);
=======
  out << "CommitTxnRequest(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ")";
}


GetTargetTxnIdRequest::~GetTargetTxnIdRequest() throw() {
}


void GetTargetTxnIdRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

uint32_t GetTargetTxnIdRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTargetTxnIdRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTargetTxnIdRequest");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTargetTxnIdRequest &a, GetTargetTxnIdRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
}

GetTargetTxnIdRequest::GetTargetTxnIdRequest(const GetTargetTxnIdRequest& other623) {
  txnid = other623.txnid;
}
GetTargetTxnIdRequest& GetTargetTxnIdRequest::operator=(const GetTargetTxnIdRequest& other624) {
  txnid = other624.txnid;
  return *this;
}
void GetTargetTxnIdRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTargetTxnIdRequest(";
  out << "txnid=" << to_string(txnid);
  out << ")";
}


GetTargetTxnIdResponse::~GetTargetTxnIdResponse() throw() {
}


void GetTargetTxnIdResponse::__set_txnid(const int64_t val) {
  this->txnid = val;
}

uint32_t GetTargetTxnIdResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTargetTxnIdResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTargetTxnIdResponse");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTargetTxnIdResponse &a, GetTargetTxnIdResponse &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other622) {
  txnid = other622.txnid;
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
  replPolicy = other622.replPolicy;
  __isset = other622.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other667) {
  txnToWriteIds = other667.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other668) {
  txnToWriteIds = other668.txnToWriteIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other674) {
  txnToWriteIds = other674.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other675) {
  txnToWriteIds = other675.txnToWriteIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void AllocateTableWriteIdsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AllocateTableWriteIdsResponse(";
  out << "txnToWriteIds=" << to_string(txnToWriteIds);
  out << ")";
}


LockComponent::~LockComponent() throw() {
}


void LockComponent::__set_type(const LockType::type val) {
  this->type = val;
}

void LockComponent::__set_level(const LockLevel::type val) {
  this->level = val;
}

void LockComponent::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void LockComponent::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void LockComponent::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void LockComponent::__set_operationType(const DataOperationType::type val) {
  this->operationType = val;
__isset.operationType = true;
}

void LockComponent::__set_isTransactional(const bool val) {
  this->isTransactional = val;
__isset.isTransactional = true;
}

void LockComponent::__set_isDynamicPartitionWrite(const bool val) {
  this->isDynamicPartitionWrite = val;
__isset.isDynamicPartitionWrite = true;
}

uint32_t LockComponent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_level = false;
  bool isset_dbname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast708;
          xfer += iprot->readI32(ecast708);
          this->type = (LockType::type)ecast708;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast690;
          xfer += iprot->readI32(ecast690);
          this->type = (LockType::type)ecast690;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast670;
          xfer += iprot->readI32(ecast670);
          this->type = (LockType::type)ecast670;
=======
          int32_t ecast689;
          xfer += iprot->readI32(ecast689);
          this->type = (LockType::type)ecast689;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast689;
          xfer += iprot->readI32(ecast689);
          this->type = (LockType::type)ecast689;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast665;
          xfer += iprot->readI32(ecast665);
          this->type = (LockType::type)ecast665;
=======
          int32_t ecast623;
          xfer += iprot->readI32(ecast623);
          this->type = (LockType::type)ecast623;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast627;
          xfer += iprot->readI32(ecast627);
          this->type = (LockType::type)ecast627;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast623;
          xfer += iprot->readI32(ecast623);
          this->type = (LockType::type)ecast623;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast627;
          xfer += iprot->readI32(ecast627);
          this->type = (LockType::type)ecast627;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast669;
          xfer += iprot->readI32(ecast669);
          this->type = (LockType::type)ecast669;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast676;
          xfer += iprot->readI32(ecast676);
          this->type = (LockType::type)ecast676;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast709;
          xfer += iprot->readI32(ecast709);
          this->level = (LockLevel::type)ecast709;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast691;
          xfer += iprot->readI32(ecast691);
          this->level = (LockLevel::type)ecast691;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast671;
          xfer += iprot->readI32(ecast671);
          this->level = (LockLevel::type)ecast671;
=======
          int32_t ecast690;
          xfer += iprot->readI32(ecast690);
          this->level = (LockLevel::type)ecast690;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast690;
          xfer += iprot->readI32(ecast690);
          this->level = (LockLevel::type)ecast690;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast666;
          xfer += iprot->readI32(ecast666);
          this->level = (LockLevel::type)ecast666;
=======
          int32_t ecast624;
          xfer += iprot->readI32(ecast624);
          this->level = (LockLevel::type)ecast624;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast628;
          xfer += iprot->readI32(ecast628);
          this->level = (LockLevel::type)ecast628;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast624;
          xfer += iprot->readI32(ecast624);
          this->level = (LockLevel::type)ecast624;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast628;
          xfer += iprot->readI32(ecast628);
          this->level = (LockLevel::type)ecast628;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast670;
          xfer += iprot->readI32(ecast670);
          this->level = (LockLevel::type)ecast670;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast677;
          xfer += iprot->readI32(ecast677);
          this->level = (LockLevel::type)ecast677;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          isset_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast710;
          xfer += iprot->readI32(ecast710);
          this->operationType = (DataOperationType::type)ecast710;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->operationType = (DataOperationType::type)ecast692;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast672;
          xfer += iprot->readI32(ecast672);
          this->operationType = (DataOperationType::type)ecast672;
=======
          int32_t ecast691;
          xfer += iprot->readI32(ecast691);
          this->operationType = (DataOperationType::type)ecast691;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast691;
          xfer += iprot->readI32(ecast691);
          this->operationType = (DataOperationType::type)ecast691;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast667;
          xfer += iprot->readI32(ecast667);
          this->operationType = (DataOperationType::type)ecast667;
=======
          int32_t ecast625;
          xfer += iprot->readI32(ecast625);
          this->operationType = (DataOperationType::type)ecast625;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast629;
          xfer += iprot->readI32(ecast629);
          this->operationType = (DataOperationType::type)ecast629;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast625;
          xfer += iprot->readI32(ecast625);
          this->operationType = (DataOperationType::type)ecast625;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast629;
          xfer += iprot->readI32(ecast629);
          this->operationType = (DataOperationType::type)ecast629;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast671;
          xfer += iprot->readI32(ecast671);
          this->operationType = (DataOperationType::type)ecast671;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast678;
          xfer += iprot->readI32(ecast678);
          this->operationType = (DataOperationType::type)ecast678;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.operationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isTransactional);
          this->__isset.isTransactional = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDynamicPartitionWrite);
          this->__isset.isDynamicPartitionWrite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LockComponent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LockComponent");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operationType) {
    xfer += oprot->writeFieldBegin("operationType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->operationType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isTransactional) {
    xfer += oprot->writeFieldBegin("isTransactional", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->isTransactional);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isDynamicPartitionWrite) {
    xfer += oprot->writeFieldBegin("isDynamicPartitionWrite", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->isDynamicPartitionWrite);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LockComponent &a, LockComponent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.level, b.level);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.operationType, b.operationType);
  swap(a.isTransactional, b.isTransactional);
  swap(a.isDynamicPartitionWrite, b.isDynamicPartitionWrite);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockComponent::LockComponent(const LockComponent& other711) {
  type = other711.type;
  level = other711.level;
  dbname = other711.dbname;
  tablename = other711.tablename;
  partitionname = other711.partitionname;
  operationType = other711.operationType;
  isTransactional = other711.isTransactional;
  isDynamicPartitionWrite = other711.isDynamicPartitionWrite;
  __isset = other711.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other712) {
  type = other712.type;
  level = other712.level;
  dbname = other712.dbname;
  tablename = other712.tablename;
  partitionname = other712.partitionname;
  operationType = other712.operationType;
  isTransactional = other712.isTransactional;
  isDynamicPartitionWrite = other712.isDynamicPartitionWrite;
  __isset = other712.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
LockComponent::LockComponent(const LockComponent& other693) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
LockComponent::LockComponent(const LockComponent& other673) {
  type = other673.type;
  level = other673.level;
  dbname = other673.dbname;
  tablename = other673.tablename;
  partitionname = other673.partitionname;
  operationType = other673.operationType;
  isTransactional = other673.isTransactional;
  isDynamicPartitionWrite = other673.isDynamicPartitionWrite;
  __isset = other673.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other674) {
  type = other674.type;
  level = other674.level;
  dbname = other674.dbname;
  tablename = other674.tablename;
  partitionname = other674.partitionname;
  operationType = other674.operationType;
  isTransactional = other674.isTransactional;
  isDynamicPartitionWrite = other674.isDynamicPartitionWrite;
  __isset = other674.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
LockComponent::LockComponent(const LockComponent& other692) {
  type = other692.type;
  level = other692.level;
  dbname = other692.dbname;
  tablename = other692.tablename;
  partitionname = other692.partitionname;
  operationType = other692.operationType;
  isAcid = other692.isAcid;
  isDynamicPartitionWrite = other692.isDynamicPartitionWrite;
  __isset = other692.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other693) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  type = other693.type;
  level = other693.level;
  dbname = other693.dbname;
  tablename = other693.tablename;
  partitionname = other693.partitionname;
  operationType = other693.operationType;
<<<<<<< HEAD
  isTransactional = other693.isTransactional;
  isDynamicPartitionWrite = other693.isDynamicPartitionWrite;
  __isset = other693.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other694) {
  type = other694.type;
  level = other694.level;
  dbname = other694.dbname;
  tablename = other694.tablename;
  partitionname = other694.partitionname;
  operationType = other694.operationType;
  isTransactional = other694.isTransactional;
  isDynamicPartitionWrite = other694.isDynamicPartitionWrite;
  __isset = other694.__isset;
=======
  isAcid = other693.isAcid;
  isDynamicPartitionWrite = other693.isDynamicPartitionWrite;
  __isset = other693.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockComponent::LockComponent(const LockComponent& other668) {
  type = other668.type;
  level = other668.level;
  dbname = other668.dbname;
  tablename = other668.tablename;
  partitionname = other668.partitionname;
  operationType = other668.operationType;
  isAcid = other668.isAcid;
  isDynamicPartitionWrite = other668.isDynamicPartitionWrite;
  __isset = other668.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other669) {
  type = other669.type;
  level = other669.level;
  dbname = other669.dbname;
  tablename = other669.tablename;
  partitionname = other669.partitionname;
  operationType = other669.operationType;
  isAcid = other669.isAcid;
  isDynamicPartitionWrite = other669.isDynamicPartitionWrite;
  __isset = other669.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
LockComponent::LockComponent(const LockComponent& other626) {
  type = other626.type;
  level = other626.level;
  dbname = other626.dbname;
  tablename = other626.tablename;
  partitionname = other626.partitionname;
  operationType = other626.operationType;
  isAcid = other626.isAcid;
  isDynamicPartitionWrite = other626.isDynamicPartitionWrite;
  __isset = other626.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other627) {
  type = other627.type;
  level = other627.level;
  dbname = other627.dbname;
  tablename = other627.tablename;
  partitionname = other627.partitionname;
  operationType = other627.operationType;
  isAcid = other627.isAcid;
  isDynamicPartitionWrite = other627.isDynamicPartitionWrite;
  __isset = other627.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
LockComponent::LockComponent(const LockComponent& other630) {
  type = other630.type;
  level = other630.level;
  dbname = other630.dbname;
  tablename = other630.tablename;
  partitionname = other630.partitionname;
  operationType = other630.operationType;
  isAcid = other630.isAcid;
  isDynamicPartitionWrite = other630.isDynamicPartitionWrite;
  __isset = other630.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other631) {
  type = other631.type;
  level = other631.level;
  dbname = other631.dbname;
  tablename = other631.tablename;
  partitionname = other631.partitionname;
  operationType = other631.operationType;
  isAcid = other631.isAcid;
  isDynamicPartitionWrite = other631.isDynamicPartitionWrite;
  __isset = other631.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
LockComponent::LockComponent(const LockComponent& other672) {
  type = other672.type;
  level = other672.level;
  dbname = other672.dbname;
  tablename = other672.tablename;
  partitionname = other672.partitionname;
  operationType = other672.operationType;
  isAcid = other672.isAcid;
  isDynamicPartitionWrite = other672.isDynamicPartitionWrite;
  __isset = other672.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other673) {
  type = other673.type;
  level = other673.level;
  dbname = other673.dbname;
  tablename = other673.tablename;
  partitionname = other673.partitionname;
  operationType = other673.operationType;
  isAcid = other673.isAcid;
  isDynamicPartitionWrite = other673.isDynamicPartitionWrite;
  __isset = other673.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
LockComponent::LockComponent(const LockComponent& other679) {
  type = other679.type;
  level = other679.level;
  dbname = other679.dbname;
  tablename = other679.tablename;
  partitionname = other679.partitionname;
  operationType = other679.operationType;
  isTransactional = other679.isTransactional;
  isDynamicPartitionWrite = other679.isDynamicPartitionWrite;
  __isset = other679.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other680) {
  type = other680.type;
  level = other680.level;
  dbname = other680.dbname;
  tablename = other680.tablename;
  partitionname = other680.partitionname;
  operationType = other680.operationType;
  isTransactional = other680.isTransactional;
  isDynamicPartitionWrite = other680.isDynamicPartitionWrite;
  __isset = other680.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void LockComponent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockComponent(";
  out << "type=" << to_string(type);
  out << ", " << "level=" << to_string(level);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "operationType="; (__isset.operationType ? (out << to_string(operationType)) : (out << "<null>"));
  out << ", " << "isTransactional="; (__isset.isTransactional ? (out << to_string(isTransactional)) : (out << "<null>"));
  out << ", " << "isDynamicPartitionWrite="; (__isset.isDynamicPartitionWrite ? (out << to_string(isDynamicPartitionWrite)) : (out << "<null>"));
  out << ")";
}


LockRequest::~LockRequest() throw() {
}


void LockRequest::__set_component(const std::vector<LockComponent> & val) {
  this->component = val;
}

void LockRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void LockRequest::__set_user(const std::string& val) {
  this->user = val;
}

void LockRequest::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void LockRequest::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

uint32_t LockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_component = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->component.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size713;
            ::apache::thrift::protocol::TType _etype716;
            xfer += iprot->readListBegin(_etype716, _size713);
            this->component.resize(_size713);
            uint32_t _i717;
            for (_i717 = 0; _i717 < _size713; ++_i717)
            {
              xfer += this->component[_i717].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size695;
            ::apache::thrift::protocol::TType _etype698;
            xfer += iprot->readListBegin(_etype698, _size695);
            this->component.resize(_size695);
            uint32_t _i699;
            for (_i699 = 0; _i699 < _size695; ++_i699)
            {
              xfer += this->component[_i699].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size675;
            ::apache::thrift::protocol::TType _etype678;
            xfer += iprot->readListBegin(_etype678, _size675);
            this->component.resize(_size675);
            uint32_t _i679;
            for (_i679 = 0; _i679 < _size675; ++_i679)
            {
              xfer += this->component[_i679].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size694;
            ::apache::thrift::protocol::TType _etype697;
            xfer += iprot->readListBegin(_etype697, _size694);
            this->component.resize(_size694);
            uint32_t _i698;
            for (_i698 = 0; _i698 < _size694; ++_i698)
            {
              xfer += this->component[_i698].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size670;
            ::apache::thrift::protocol::TType _etype673;
            xfer += iprot->readListBegin(_etype673, _size670);
            this->component.resize(_size670);
            uint32_t _i674;
            for (_i674 = 0; _i674 < _size670; ++_i674)
            {
              xfer += this->component[_i674].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size628;
            ::apache::thrift::protocol::TType _etype631;
            xfer += iprot->readListBegin(_etype631, _size628);
            this->component.resize(_size628);
            uint32_t _i632;
            for (_i632 = 0; _i632 < _size628; ++_i632)
<<<<<<< HEAD
            {
              xfer += this->component[_i632].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size632;
            ::apache::thrift::protocol::TType _etype635;
            xfer += iprot->readListBegin(_etype635, _size632);
            this->component.resize(_size632);
            uint32_t _i636;
            for (_i636 = 0; _i636 < _size632; ++_i636)
<<<<<<< HEAD
            {
              xfer += this->component[_i636].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->component[_i632].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->component[_i636].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size674;
            ::apache::thrift::protocol::TType _etype677;
            xfer += iprot->readListBegin(_etype677, _size674);
            this->component.resize(_size674);
            uint32_t _i678;
            for (_i678 = 0; _i678 < _size674; ++_i678)
            {
              xfer += this->component[_i678].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size681;
            ::apache::thrift::protocol::TType _etype684;
            xfer += iprot->readListBegin(_etype684, _size681);
            this->component.resize(_size681);
            uint32_t _i685;
            for (_i685 = 0; _i685 < _size681; ++_i685)
            {
              xfer += this->component[_i685].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_component)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LockRequest");

  xfer += oprot->writeFieldBegin("component", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->component.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<LockComponent> ::const_iterator _iter718;
    for (_iter718 = this->component.begin(); _iter718 != this->component.end(); ++_iter718)
    {
      xfer += (*_iter718).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<LockComponent> ::const_iterator _iter700;
    for (_iter700 = this->component.begin(); _iter700 != this->component.end(); ++_iter700)
    {
      xfer += (*_iter700).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<LockComponent> ::const_iterator _iter680;
    for (_iter680 = this->component.begin(); _iter680 != this->component.end(); ++_iter680)
    {
      xfer += (*_iter680).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<LockComponent> ::const_iterator _iter699;
    for (_iter699 = this->component.begin(); _iter699 != this->component.end(); ++_iter699)
    {
      xfer += (*_iter699).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<LockComponent> ::const_iterator _iter675;
    for (_iter675 = this->component.begin(); _iter675 != this->component.end(); ++_iter675)
    {
      xfer += (*_iter675).write(oprot);
=======
    std::vector<LockComponent> ::const_iterator _iter633;
    for (_iter633 = this->component.begin(); _iter633 != this->component.end(); ++_iter633)
    {
      xfer += (*_iter633).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<LockComponent> ::const_iterator _iter637;
    for (_iter637 = this->component.begin(); _iter637 != this->component.end(); ++_iter637)
    {
      xfer += (*_iter637).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<LockComponent> ::const_iterator _iter633;
    for (_iter633 = this->component.begin(); _iter633 != this->component.end(); ++_iter633)
    {
      xfer += (*_iter633).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<LockComponent> ::const_iterator _iter637;
    for (_iter637 = this->component.begin(); _iter637 != this->component.end(); ++_iter637)
    {
      xfer += (*_iter637).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<LockComponent> ::const_iterator _iter679;
    for (_iter679 = this->component.begin(); _iter679 != this->component.end(); ++_iter679)
    {
      xfer += (*_iter679).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<LockComponent> ::const_iterator _iter686;
    for (_iter686 = this->component.begin(); _iter686 != this->component.end(); ++_iter686)
    {
      xfer += (*_iter686).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LockRequest &a, LockRequest &b) {
  using ::std::swap;
  swap(a.component, b.component);
  swap(a.txnid, b.txnid);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockRequest::LockRequest(const LockRequest& other719) {
  component = other719.component;
  txnid = other719.txnid;
  user = other719.user;
  hostname = other719.hostname;
  agentInfo = other719.agentInfo;
  __isset = other719.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other720) {
  component = other720.component;
  txnid = other720.txnid;
  user = other720.user;
  hostname = other720.hostname;
  agentInfo = other720.agentInfo;
  __isset = other720.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
LockRequest::LockRequest(const LockRequest& other701) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
LockRequest::LockRequest(const LockRequest& other681) {
  component = other681.component;
  txnid = other681.txnid;
  user = other681.user;
  hostname = other681.hostname;
  agentInfo = other681.agentInfo;
  __isset = other681.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other682) {
  component = other682.component;
  txnid = other682.txnid;
  user = other682.user;
  hostname = other682.hostname;
  agentInfo = other682.agentInfo;
  __isset = other682.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
LockRequest::LockRequest(const LockRequest& other700) {
  component = other700.component;
  txnid = other700.txnid;
  user = other700.user;
  hostname = other700.hostname;
  agentInfo = other700.agentInfo;
  __isset = other700.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other701) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  component = other701.component;
  txnid = other701.txnid;
  user = other701.user;
  hostname = other701.hostname;
  agentInfo = other701.agentInfo;
  __isset = other701.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
LockRequest& LockRequest::operator=(const LockRequest& other702) {
  component = other702.component;
  txnid = other702.txnid;
  user = other702.user;
  hostname = other702.hostname;
  agentInfo = other702.agentInfo;
  __isset = other702.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockRequest::LockRequest(const LockRequest& other676) {
  component = other676.component;
  txnid = other676.txnid;
  user = other676.user;
  hostname = other676.hostname;
  agentInfo = other676.agentInfo;
  __isset = other676.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other677) {
  component = other677.component;
  txnid = other677.txnid;
  user = other677.user;
  hostname = other677.hostname;
  agentInfo = other677.agentInfo;
  __isset = other677.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
LockRequest::LockRequest(const LockRequest& other634) {
  component = other634.component;
  txnid = other634.txnid;
  user = other634.user;
  hostname = other634.hostname;
  agentInfo = other634.agentInfo;
  __isset = other634.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other635) {
  component = other635.component;
  txnid = other635.txnid;
  user = other635.user;
  hostname = other635.hostname;
  agentInfo = other635.agentInfo;
  __isset = other635.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
LockRequest::LockRequest(const LockRequest& other638) {
  component = other638.component;
  txnid = other638.txnid;
  user = other638.user;
  hostname = other638.hostname;
  agentInfo = other638.agentInfo;
  __isset = other638.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other639) {
  component = other639.component;
  txnid = other639.txnid;
  user = other639.user;
  hostname = other639.hostname;
  agentInfo = other639.agentInfo;
  __isset = other639.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
LockRequest::LockRequest(const LockRequest& other680) {
  component = other680.component;
  txnid = other680.txnid;
  user = other680.user;
  hostname = other680.hostname;
  agentInfo = other680.agentInfo;
  __isset = other680.__isset;
<<<<<<< HEAD
}
LockRequest& LockRequest::operator=(const LockRequest& other681) {
  component = other681.component;
  txnid = other681.txnid;
  user = other681.user;
  hostname = other681.hostname;
  agentInfo = other681.agentInfo;
  __isset = other681.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
LockRequest::LockRequest(const LockRequest& other687) {
  component = other687.component;
  txnid = other687.txnid;
  user = other687.user;
  hostname = other687.hostname;
  agentInfo = other687.agentInfo;
  __isset = other687.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
LockRequest& LockRequest::operator=(const LockRequest& other688) {
  component = other688.component;
  txnid = other688.txnid;
  user = other688.user;
  hostname = other688.hostname;
  agentInfo = other688.agentInfo;
  __isset = other688.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void LockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockRequest(";
  out << "component=" << to_string(component);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ")";
}


LockResponse::~LockResponse() throw() {
}


void LockResponse::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void LockResponse::__set_state(const LockState::type val) {
  this->state = val;
}

uint32_t LockResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;
  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast721;
          xfer += iprot->readI32(ecast721);
          this->state = (LockState::type)ecast721;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast703;
          xfer += iprot->readI32(ecast703);
          this->state = (LockState::type)ecast703;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast683;
          xfer += iprot->readI32(ecast683);
          this->state = (LockState::type)ecast683;
=======
          int32_t ecast702;
          xfer += iprot->readI32(ecast702);
          this->state = (LockState::type)ecast702;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast702;
          xfer += iprot->readI32(ecast702);
          this->state = (LockState::type)ecast702;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast678;
          xfer += iprot->readI32(ecast678);
          this->state = (LockState::type)ecast678;
=======
          int32_t ecast636;
          xfer += iprot->readI32(ecast636);
          this->state = (LockState::type)ecast636;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast640;
          xfer += iprot->readI32(ecast640);
          this->state = (LockState::type)ecast640;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast636;
          xfer += iprot->readI32(ecast636);
          this->state = (LockState::type)ecast636;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast640;
          xfer += iprot->readI32(ecast640);
          this->state = (LockState::type)ecast640;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast682;
          xfer += iprot->readI32(ecast682);
          this->state = (LockState::type)ecast682;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast689;
          xfer += iprot->readI32(ecast689);
          this->state = (LockState::type)ecast689;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LockResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LockResponse");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LockResponse &a, LockResponse &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.state, b.state);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockResponse::LockResponse(const LockResponse& other722) {
  lockid = other722.lockid;
  state = other722.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other723) {
  lockid = other723.lockid;
  state = other723.state;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
LockResponse::LockResponse(const LockResponse& other704) {
  lockid = other704.lockid;
  state = other704.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other705) {
  lockid = other705.lockid;
  state = other705.state;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
LockResponse::LockResponse(const LockResponse& other684) {
  lockid = other684.lockid;
  state = other684.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other685) {
  lockid = other685.lockid;
  state = other685.state;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
LockResponse::LockResponse(const LockResponse& other703) {
  lockid = other703.lockid;
  state = other703.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other704) {
  lockid = other704.lockid;
  state = other704.state;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockResponse::LockResponse(const LockResponse& other679) {
  lockid = other679.lockid;
  state = other679.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other680) {
  lockid = other680.lockid;
  state = other680.state;
=======
LockResponse::LockResponse(const LockResponse& other637) {
  lockid = other637.lockid;
  state = other637.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other638) {
  lockid = other638.lockid;
  state = other638.state;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
LockResponse::LockResponse(const LockResponse& other641) {
  lockid = other641.lockid;
  state = other641.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other642) {
  lockid = other642.lockid;
  state = other642.state;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
LockResponse::LockResponse(const LockResponse& other637) {
  lockid = other637.lockid;
  state = other637.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other638) {
  lockid = other638.lockid;
  state = other638.state;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
LockResponse::LockResponse(const LockResponse& other641) {
  lockid = other641.lockid;
  state = other641.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other642) {
  lockid = other642.lockid;
  state = other642.state;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
LockResponse::LockResponse(const LockResponse& other683) {
  lockid = other683.lockid;
  state = other683.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other684) {
  lockid = other684.lockid;
  state = other684.state;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
LockResponse::LockResponse(const LockResponse& other690) {
  lockid = other690.lockid;
  state = other690.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other691) {
  lockid = other691.lockid;
  state = other691.state;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void LockResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockResponse(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


CheckLockRequest::~CheckLockRequest() throw() {
}


void CheckLockRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void CheckLockRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void CheckLockRequest::__set_elapsed_ms(const int64_t val) {
  this->elapsed_ms = val;
__isset.elapsed_ms = true;
}

uint32_t CheckLockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->elapsed_ms);
          this->__isset.elapsed_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CheckLockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckLockRequest");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elapsed_ms) {
    xfer += oprot->writeFieldBegin("elapsed_ms", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->elapsed_ms);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckLockRequest &a, CheckLockRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.txnid, b.txnid);
  swap(a.elapsed_ms, b.elapsed_ms);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other724) {
  lockid = other724.lockid;
  txnid = other724.txnid;
  elapsed_ms = other724.elapsed_ms;
  __isset = other724.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other725) {
  lockid = other725.lockid;
  txnid = other725.txnid;
  elapsed_ms = other725.elapsed_ms;
  __isset = other725.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other706) {
  lockid = other706.lockid;
  txnid = other706.txnid;
  elapsed_ms = other706.elapsed_ms;
  __isset = other706.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other707) {
  lockid = other707.lockid;
  txnid = other707.txnid;
  elapsed_ms = other707.elapsed_ms;
  __isset = other707.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other686) {
  lockid = other686.lockid;
  txnid = other686.txnid;
  elapsed_ms = other686.elapsed_ms;
  __isset = other686.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other687) {
  lockid = other687.lockid;
  txnid = other687.txnid;
  elapsed_ms = other687.elapsed_ms;
  __isset = other687.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other705) {
  lockid = other705.lockid;
  txnid = other705.txnid;
  elapsed_ms = other705.elapsed_ms;
  __isset = other705.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other706) {
  lockid = other706.lockid;
  txnid = other706.txnid;
  elapsed_ms = other706.elapsed_ms;
  __isset = other706.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other681) {
  lockid = other681.lockid;
  txnid = other681.txnid;
  elapsed_ms = other681.elapsed_ms;
  __isset = other681.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other682) {
  lockid = other682.lockid;
  txnid = other682.txnid;
  elapsed_ms = other682.elapsed_ms;
  __isset = other682.__isset;
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other639) {
  lockid = other639.lockid;
  txnid = other639.txnid;
  elapsed_ms = other639.elapsed_ms;
  __isset = other639.__isset;
}
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other639) {
  lockid = other639.lockid;
  txnid = other639.txnid;
  elapsed_ms = other639.elapsed_ms;
  __isset = other639.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other640) {
  lockid = other640.lockid;
  txnid = other640.txnid;
  elapsed_ms = other640.elapsed_ms;
  __isset = other640.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other643) {
  lockid = other643.lockid;
  txnid = other643.txnid;
  elapsed_ms = other643.elapsed_ms;
  __isset = other643.__isset;
}
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other643) {
  lockid = other643.lockid;
  txnid = other643.txnid;
  elapsed_ms = other643.elapsed_ms;
  __isset = other643.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other644) {
  lockid = other644.lockid;
  txnid = other644.txnid;
  elapsed_ms = other644.elapsed_ms;
  __isset = other644.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other685) {
  lockid = other685.lockid;
  txnid = other685.txnid;
  elapsed_ms = other685.elapsed_ms;
  __isset = other685.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other686) {
  lockid = other686.lockid;
  txnid = other686.txnid;
  elapsed_ms = other686.elapsed_ms;
  __isset = other686.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other692) {
  lockid = other692.lockid;
  txnid = other692.txnid;
  elapsed_ms = other692.elapsed_ms;
  __isset = other692.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other693) {
  lockid = other693.lockid;
  txnid = other693.txnid;
  elapsed_ms = other693.elapsed_ms;
  __isset = other693.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CheckLockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckLockRequest(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "elapsed_ms="; (__isset.elapsed_ms ? (out << to_string(elapsed_ms)) : (out << "<null>"));
  out << ")";
}


UnlockRequest::~UnlockRequest() throw() {
}


void UnlockRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
}

uint32_t UnlockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UnlockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnlockRequest");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnlockRequest &a, UnlockRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnlockRequest::UnlockRequest(const UnlockRequest& other726) {
  lockid = other726.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other727) {
  lockid = other727.lockid;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
UnlockRequest::UnlockRequest(const UnlockRequest& other708) {
  lockid = other708.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other709) {
  lockid = other709.lockid;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
UnlockRequest::UnlockRequest(const UnlockRequest& other688) {
  lockid = other688.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other689) {
  lockid = other689.lockid;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
UnlockRequest::UnlockRequest(const UnlockRequest& other707) {
  lockid = other707.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other708) {
  lockid = other708.lockid;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnlockRequest::UnlockRequest(const UnlockRequest& other683) {
  lockid = other683.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other684) {
  lockid = other684.lockid;
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other641) {
  lockid = other641.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other642) {
  lockid = other642.lockid;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other645) {
  lockid = other645.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other646) {
  lockid = other646.lockid;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other641) {
  lockid = other641.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other642) {
  lockid = other642.lockid;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other645) {
  lockid = other645.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other646) {
  lockid = other646.lockid;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other687) {
  lockid = other687.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other688) {
  lockid = other688.lockid;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other694) {
  lockid = other694.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other695) {
  lockid = other695.lockid;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void UnlockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnlockRequest(";
  out << "lockid=" << to_string(lockid);
  out << ")";
}


ShowLocksRequest::~ShowLocksRequest() throw() {
}


void ShowLocksRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
__isset.dbname = true;
}

void ShowLocksRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void ShowLocksRequest::__set_partname(const std::string& val) {
  this->partname = val;
__isset.partname = true;
}

void ShowLocksRequest::__set_isExtended(const bool val) {
  this->isExtended = val;
__isset.isExtended = true;
}

uint32_t ShowLocksRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          this->__isset.dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partname);
          this->__isset.partname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isExtended);
          this->__isset.isExtended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowLocksRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowLocksRequest");

  if (this->__isset.dbname) {
    xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->dbname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partname) {
    xfer += oprot->writeFieldBegin("partname", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isExtended) {
    xfer += oprot->writeFieldBegin("isExtended", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isExtended);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowLocksRequest &a, ShowLocksRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partname, b.partname);
  swap(a.isExtended, b.isExtended);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other728) {
  dbname = other728.dbname;
  tablename = other728.tablename;
  partname = other728.partname;
  isExtended = other728.isExtended;
  __isset = other728.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other729) {
  dbname = other729.dbname;
  tablename = other729.tablename;
  partname = other729.partname;
  isExtended = other729.isExtended;
  __isset = other729.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other710) {
  dbname = other710.dbname;
  tablename = other710.tablename;
  partname = other710.partname;
  isExtended = other710.isExtended;
  __isset = other710.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other711) {
  dbname = other711.dbname;
  tablename = other711.tablename;
  partname = other711.partname;
  isExtended = other711.isExtended;
  __isset = other711.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other690) {
  dbname = other690.dbname;
  tablename = other690.tablename;
  partname = other690.partname;
  isExtended = other690.isExtended;
  __isset = other690.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other691) {
  dbname = other691.dbname;
  tablename = other691.tablename;
  partname = other691.partname;
  isExtended = other691.isExtended;
  __isset = other691.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other709) {
  dbname = other709.dbname;
  tablename = other709.tablename;
  partname = other709.partname;
  isExtended = other709.isExtended;
  __isset = other709.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other710) {
  dbname = other710.dbname;
  tablename = other710.tablename;
  partname = other710.partname;
  isExtended = other710.isExtended;
  __isset = other710.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other685) {
  dbname = other685.dbname;
  tablename = other685.tablename;
  partname = other685.partname;
  isExtended = other685.isExtended;
  __isset = other685.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other686) {
  dbname = other686.dbname;
  tablename = other686.tablename;
  partname = other686.partname;
  isExtended = other686.isExtended;
  __isset = other686.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other643) {
  dbname = other643.dbname;
  tablename = other643.tablename;
  partname = other643.partname;
  isExtended = other643.isExtended;
  __isset = other643.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other644) {
  dbname = other644.dbname;
  tablename = other644.tablename;
  partname = other644.partname;
  isExtended = other644.isExtended;
  __isset = other644.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other647) {
  dbname = other647.dbname;
  tablename = other647.tablename;
  partname = other647.partname;
  isExtended = other647.isExtended;
  __isset = other647.__isset;
}
=======
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other647) {
  dbname = other647.dbname;
  tablename = other647.tablename;
  partname = other647.partname;
  isExtended = other647.isExtended;
  __isset = other647.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other648) {
  dbname = other648.dbname;
  tablename = other648.tablename;
  partname = other648.partname;
  isExtended = other648.isExtended;
  __isset = other648.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other689) {
  dbname = other689.dbname;
  tablename = other689.tablename;
  partname = other689.partname;
  isExtended = other689.isExtended;
  __isset = other689.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other690) {
  dbname = other690.dbname;
  tablename = other690.tablename;
  partname = other690.partname;
  isExtended = other690.isExtended;
  __isset = other690.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other696) {
  dbname = other696.dbname;
  tablename = other696.tablename;
  partname = other696.partname;
  isExtended = other696.isExtended;
  __isset = other696.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other697) {
  dbname = other697.dbname;
  tablename = other697.tablename;
  partname = other697.partname;
  isExtended = other697.isExtended;
  __isset = other697.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ShowLocksRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksRequest(";
  out << "dbname="; (__isset.dbname ? (out << to_string(dbname)) : (out << "<null>"));
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partname="; (__isset.partname ? (out << to_string(partname)) : (out << "<null>"));
  out << ", " << "isExtended="; (__isset.isExtended ? (out << to_string(isExtended)) : (out << "<null>"));
  out << ")";
}


ShowLocksResponseElement::~ShowLocksResponseElement() throw() {
}


void ShowLocksResponseElement::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void ShowLocksResponseElement::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void ShowLocksResponseElement::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void ShowLocksResponseElement::__set_partname(const std::string& val) {
  this->partname = val;
__isset.partname = true;
}

void ShowLocksResponseElement::__set_state(const LockState::type val) {
  this->state = val;
}

void ShowLocksResponseElement::__set_type(const LockType::type val) {
  this->type = val;
}

void ShowLocksResponseElement::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void ShowLocksResponseElement::__set_lastheartbeat(const int64_t val) {
  this->lastheartbeat = val;
}

void ShowLocksResponseElement::__set_acquiredat(const int64_t val) {
  this->acquiredat = val;
__isset.acquiredat = true;
}

void ShowLocksResponseElement::__set_user(const std::string& val) {
  this->user = val;
}

void ShowLocksResponseElement::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void ShowLocksResponseElement::__set_heartbeatCount(const int32_t val) {
  this->heartbeatCount = val;
__isset.heartbeatCount = true;
}

void ShowLocksResponseElement::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void ShowLocksResponseElement::__set_blockedByExtId(const int64_t val) {
  this->blockedByExtId = val;
__isset.blockedByExtId = true;
}

void ShowLocksResponseElement::__set_blockedByIntId(const int64_t val) {
  this->blockedByIntId = val;
__isset.blockedByIntId = true;
}

void ShowLocksResponseElement::__set_lockIdInternal(const int64_t val) {
  this->lockIdInternal = val;
__isset.lockIdInternal = true;
}

uint32_t ShowLocksResponseElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;
  bool isset_dbname = false;
  bool isset_state = false;
  bool isset_type = false;
  bool isset_lastheartbeat = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partname);
          this->__isset.partname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast730;
          xfer += iprot->readI32(ecast730);
          this->state = (LockState::type)ecast730;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->state = (LockState::type)ecast712;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->state = (LockState::type)ecast692;
=======
          int32_t ecast711;
          xfer += iprot->readI32(ecast711);
          this->state = (LockState::type)ecast711;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast711;
          xfer += iprot->readI32(ecast711);
          this->state = (LockState::type)ecast711;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast687;
          xfer += iprot->readI32(ecast687);
          this->state = (LockState::type)ecast687;
=======
          int32_t ecast645;
          xfer += iprot->readI32(ecast645);
          this->state = (LockState::type)ecast645;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast649;
          xfer += iprot->readI32(ecast649);
          this->state = (LockState::type)ecast649;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast645;
          xfer += iprot->readI32(ecast645);
          this->state = (LockState::type)ecast645;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast649;
          xfer += iprot->readI32(ecast649);
          this->state = (LockState::type)ecast649;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast691;
          xfer += iprot->readI32(ecast691);
          this->state = (LockState::type)ecast691;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast698;
          xfer += iprot->readI32(ecast698);
          this->state = (LockState::type)ecast698;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast731;
          xfer += iprot->readI32(ecast731);
          this->type = (LockType::type)ecast731;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast713;
          xfer += iprot->readI32(ecast713);
          this->type = (LockType::type)ecast713;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast693;
          xfer += iprot->readI32(ecast693);
          this->type = (LockType::type)ecast693;
=======
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->type = (LockType::type)ecast712;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->type = (LockType::type)ecast712;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast688;
          xfer += iprot->readI32(ecast688);
          this->type = (LockType::type)ecast688;
=======
          int32_t ecast646;
          xfer += iprot->readI32(ecast646);
          this->type = (LockType::type)ecast646;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast650;
          xfer += iprot->readI32(ecast650);
          this->type = (LockType::type)ecast650;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast646;
          xfer += iprot->readI32(ecast646);
          this->type = (LockType::type)ecast646;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast650;
          xfer += iprot->readI32(ecast650);
          this->type = (LockType::type)ecast650;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->type = (LockType::type)ecast692;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast699;
          xfer += iprot->readI32(ecast699);
          this->type = (LockType::type)ecast699;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastheartbeat);
          isset_lastheartbeat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acquiredat);
          this->__isset.acquiredat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heartbeatCount);
          this->__isset.heartbeatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockedByExtId);
          this->__isset.blockedByExtId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockedByIntId);
          this->__isset.blockedByIntId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockIdInternal);
          this->__isset.lockIdInternal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lastheartbeat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ShowLocksResponseElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowLocksResponseElement");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partname) {
    xfer += oprot->writeFieldBegin("partname", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->partname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("lastheartbeat", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->lastheartbeat);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.acquiredat) {
    xfer += oprot->writeFieldBegin("acquiredat", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->acquiredat);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.heartbeatCount) {
    xfer += oprot->writeFieldBegin("heartbeatCount", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->heartbeatCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blockedByExtId) {
    xfer += oprot->writeFieldBegin("blockedByExtId", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->blockedByExtId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blockedByIntId) {
    xfer += oprot->writeFieldBegin("blockedByIntId", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->blockedByIntId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lockIdInternal) {
    xfer += oprot->writeFieldBegin("lockIdInternal", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->lockIdInternal);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowLocksResponseElement &a, ShowLocksResponseElement &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partname, b.partname);
  swap(a.state, b.state);
  swap(a.type, b.type);
  swap(a.txnid, b.txnid);
  swap(a.lastheartbeat, b.lastheartbeat);
  swap(a.acquiredat, b.acquiredat);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.heartbeatCount, b.heartbeatCount);
  swap(a.agentInfo, b.agentInfo);
  swap(a.blockedByExtId, b.blockedByExtId);
  swap(a.blockedByIntId, b.blockedByIntId);
  swap(a.lockIdInternal, b.lockIdInternal);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other732) {
  lockid = other732.lockid;
  dbname = other732.dbname;
  tablename = other732.tablename;
  partname = other732.partname;
  state = other732.state;
  type = other732.type;
  txnid = other732.txnid;
  lastheartbeat = other732.lastheartbeat;
  acquiredat = other732.acquiredat;
  user = other732.user;
  hostname = other732.hostname;
  heartbeatCount = other732.heartbeatCount;
  agentInfo = other732.agentInfo;
  blockedByExtId = other732.blockedByExtId;
  blockedByIntId = other732.blockedByIntId;
  lockIdInternal = other732.lockIdInternal;
  __isset = other732.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other733) {
  lockid = other733.lockid;
  dbname = other733.dbname;
  tablename = other733.tablename;
  partname = other733.partname;
  state = other733.state;
  type = other733.type;
  txnid = other733.txnid;
  lastheartbeat = other733.lastheartbeat;
  acquiredat = other733.acquiredat;
  user = other733.user;
  hostname = other733.hostname;
  heartbeatCount = other733.heartbeatCount;
  agentInfo = other733.agentInfo;
  blockedByExtId = other733.blockedByExtId;
  blockedByIntId = other733.blockedByIntId;
  lockIdInternal = other733.lockIdInternal;
  __isset = other733.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other714) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other694) {
  lockid = other694.lockid;
  dbname = other694.dbname;
  tablename = other694.tablename;
  partname = other694.partname;
  state = other694.state;
  type = other694.type;
  txnid = other694.txnid;
  lastheartbeat = other694.lastheartbeat;
  acquiredat = other694.acquiredat;
  user = other694.user;
  hostname = other694.hostname;
  heartbeatCount = other694.heartbeatCount;
  agentInfo = other694.agentInfo;
  blockedByExtId = other694.blockedByExtId;
  blockedByIntId = other694.blockedByIntId;
  lockIdInternal = other694.lockIdInternal;
  __isset = other694.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other695) {
  lockid = other695.lockid;
  dbname = other695.dbname;
  tablename = other695.tablename;
  partname = other695.partname;
  state = other695.state;
  type = other695.type;
  txnid = other695.txnid;
  lastheartbeat = other695.lastheartbeat;
  acquiredat = other695.acquiredat;
  user = other695.user;
  hostname = other695.hostname;
  heartbeatCount = other695.heartbeatCount;
  agentInfo = other695.agentInfo;
  blockedByExtId = other695.blockedByExtId;
  blockedByIntId = other695.blockedByIntId;
  lockIdInternal = other695.lockIdInternal;
  __isset = other695.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other713) {
  lockid = other713.lockid;
  dbname = other713.dbname;
  tablename = other713.tablename;
  partname = other713.partname;
  state = other713.state;
  type = other713.type;
  txnid = other713.txnid;
  lastheartbeat = other713.lastheartbeat;
  acquiredat = other713.acquiredat;
  user = other713.user;
  hostname = other713.hostname;
  heartbeatCount = other713.heartbeatCount;
  agentInfo = other713.agentInfo;
  blockedByExtId = other713.blockedByExtId;
  blockedByIntId = other713.blockedByIntId;
  lockIdInternal = other713.lockIdInternal;
  __isset = other713.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other714) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  lockid = other714.lockid;
  dbname = other714.dbname;
  tablename = other714.tablename;
  partname = other714.partname;
  state = other714.state;
  type = other714.type;
  txnid = other714.txnid;
  lastheartbeat = other714.lastheartbeat;
  acquiredat = other714.acquiredat;
  user = other714.user;
  hostname = other714.hostname;
  heartbeatCount = other714.heartbeatCount;
  agentInfo = other714.agentInfo;
  blockedByExtId = other714.blockedByExtId;
  blockedByIntId = other714.blockedByIntId;
  lockIdInternal = other714.lockIdInternal;
  __isset = other714.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other715) {
  lockid = other715.lockid;
  dbname = other715.dbname;
  tablename = other715.tablename;
  partname = other715.partname;
  state = other715.state;
  type = other715.type;
  txnid = other715.txnid;
  lastheartbeat = other715.lastheartbeat;
  acquiredat = other715.acquiredat;
  user = other715.user;
  hostname = other715.hostname;
  heartbeatCount = other715.heartbeatCount;
  agentInfo = other715.agentInfo;
  blockedByExtId = other715.blockedByExtId;
  blockedByIntId = other715.blockedByIntId;
  lockIdInternal = other715.lockIdInternal;
  __isset = other715.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other689) {
  lockid = other689.lockid;
  dbname = other689.dbname;
  tablename = other689.tablename;
  partname = other689.partname;
  state = other689.state;
  type = other689.type;
  txnid = other689.txnid;
  lastheartbeat = other689.lastheartbeat;
  acquiredat = other689.acquiredat;
  user = other689.user;
  hostname = other689.hostname;
  heartbeatCount = other689.heartbeatCount;
  agentInfo = other689.agentInfo;
  blockedByExtId = other689.blockedByExtId;
  blockedByIntId = other689.blockedByIntId;
  lockIdInternal = other689.lockIdInternal;
  __isset = other689.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other690) {
  lockid = other690.lockid;
  dbname = other690.dbname;
  tablename = other690.tablename;
  partname = other690.partname;
  state = other690.state;
  type = other690.type;
  txnid = other690.txnid;
  lastheartbeat = other690.lastheartbeat;
  acquiredat = other690.acquiredat;
  user = other690.user;
  hostname = other690.hostname;
  heartbeatCount = other690.heartbeatCount;
  agentInfo = other690.agentInfo;
  blockedByExtId = other690.blockedByExtId;
  blockedByIntId = other690.blockedByIntId;
  lockIdInternal = other690.lockIdInternal;
  __isset = other690.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other647) {
  lockid = other647.lockid;
  dbname = other647.dbname;
  tablename = other647.tablename;
  partname = other647.partname;
  state = other647.state;
  type = other647.type;
  txnid = other647.txnid;
  lastheartbeat = other647.lastheartbeat;
  acquiredat = other647.acquiredat;
  user = other647.user;
  hostname = other647.hostname;
  heartbeatCount = other647.heartbeatCount;
  agentInfo = other647.agentInfo;
  blockedByExtId = other647.blockedByExtId;
  blockedByIntId = other647.blockedByIntId;
  lockIdInternal = other647.lockIdInternal;
  __isset = other647.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other648) {
  lockid = other648.lockid;
  dbname = other648.dbname;
  tablename = other648.tablename;
  partname = other648.partname;
  state = other648.state;
  type = other648.type;
  txnid = other648.txnid;
  lastheartbeat = other648.lastheartbeat;
  acquiredat = other648.acquiredat;
  user = other648.user;
  hostname = other648.hostname;
  heartbeatCount = other648.heartbeatCount;
  agentInfo = other648.agentInfo;
  blockedByExtId = other648.blockedByExtId;
  blockedByIntId = other648.blockedByIntId;
  lockIdInternal = other648.lockIdInternal;
  __isset = other648.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other651) {
  lockid = other651.lockid;
  dbname = other651.dbname;
  tablename = other651.tablename;
  partname = other651.partname;
  state = other651.state;
  type = other651.type;
  txnid = other651.txnid;
  lastheartbeat = other651.lastheartbeat;
  acquiredat = other651.acquiredat;
  user = other651.user;
  hostname = other651.hostname;
  heartbeatCount = other651.heartbeatCount;
  agentInfo = other651.agentInfo;
  blockedByExtId = other651.blockedByExtId;
  blockedByIntId = other651.blockedByIntId;
  lockIdInternal = other651.lockIdInternal;
  __isset = other651.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other652) {
  lockid = other652.lockid;
  dbname = other652.dbname;
  tablename = other652.tablename;
  partname = other652.partname;
  state = other652.state;
  type = other652.type;
  txnid = other652.txnid;
  lastheartbeat = other652.lastheartbeat;
  acquiredat = other652.acquiredat;
  user = other652.user;
  hostname = other652.hostname;
  heartbeatCount = other652.heartbeatCount;
  agentInfo = other652.agentInfo;
  blockedByExtId = other652.blockedByExtId;
  blockedByIntId = other652.blockedByIntId;
  lockIdInternal = other652.lockIdInternal;
  __isset = other652.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other693) {
  lockid = other693.lockid;
  dbname = other693.dbname;
  tablename = other693.tablename;
  partname = other693.partname;
  state = other693.state;
  type = other693.type;
  txnid = other693.txnid;
  lastheartbeat = other693.lastheartbeat;
  acquiredat = other693.acquiredat;
  user = other693.user;
  hostname = other693.hostname;
  heartbeatCount = other693.heartbeatCount;
  agentInfo = other693.agentInfo;
  blockedByExtId = other693.blockedByExtId;
  blockedByIntId = other693.blockedByIntId;
  lockIdInternal = other693.lockIdInternal;
  __isset = other693.__isset;
<<<<<<< HEAD
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other694) {
  lockid = other694.lockid;
  dbname = other694.dbname;
  tablename = other694.tablename;
  partname = other694.partname;
  state = other694.state;
  type = other694.type;
  txnid = other694.txnid;
  lastheartbeat = other694.lastheartbeat;
  acquiredat = other694.acquiredat;
  user = other694.user;
  hostname = other694.hostname;
  heartbeatCount = other694.heartbeatCount;
  agentInfo = other694.agentInfo;
  blockedByExtId = other694.blockedByExtId;
  blockedByIntId = other694.blockedByIntId;
  lockIdInternal = other694.lockIdInternal;
  __isset = other694.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other700) {
  lockid = other700.lockid;
  dbname = other700.dbname;
  tablename = other700.tablename;
  partname = other700.partname;
  state = other700.state;
  type = other700.type;
  txnid = other700.txnid;
  lastheartbeat = other700.lastheartbeat;
  acquiredat = other700.acquiredat;
  user = other700.user;
  hostname = other700.hostname;
  heartbeatCount = other700.heartbeatCount;
  agentInfo = other700.agentInfo;
  blockedByExtId = other700.blockedByExtId;
  blockedByIntId = other700.blockedByIntId;
  lockIdInternal = other700.lockIdInternal;
  __isset = other700.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other701) {
  lockid = other701.lockid;
  dbname = other701.dbname;
  tablename = other701.tablename;
  partname = other701.partname;
  state = other701.state;
  type = other701.type;
  txnid = other701.txnid;
  lastheartbeat = other701.lastheartbeat;
  acquiredat = other701.acquiredat;
  user = other701.user;
  hostname = other701.hostname;
  heartbeatCount = other701.heartbeatCount;
  agentInfo = other701.agentInfo;
  blockedByExtId = other701.blockedByExtId;
  blockedByIntId = other701.blockedByIntId;
  lockIdInternal = other701.lockIdInternal;
  __isset = other701.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ShowLocksResponseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksResponseElement(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partname="; (__isset.partname ? (out << to_string(partname)) : (out << "<null>"));
  out << ", " << "state=" << to_string(state);
  out << ", " << "type=" << to_string(type);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "lastheartbeat=" << to_string(lastheartbeat);
  out << ", " << "acquiredat="; (__isset.acquiredat ? (out << to_string(acquiredat)) : (out << "<null>"));
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "heartbeatCount="; (__isset.heartbeatCount ? (out << to_string(heartbeatCount)) : (out << "<null>"));
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "blockedByExtId="; (__isset.blockedByExtId ? (out << to_string(blockedByExtId)) : (out << "<null>"));
  out << ", " << "blockedByIntId="; (__isset.blockedByIntId ? (out << to_string(blockedByIntId)) : (out << "<null>"));
  out << ", " << "lockIdInternal="; (__isset.lockIdInternal ? (out << to_string(lockIdInternal)) : (out << "<null>"));
  out << ")";
}


ShowLocksResponse::~ShowLocksResponse() throw() {
}


void ShowLocksResponse::__set_locks(const std::vector<ShowLocksResponseElement> & val) {
  this->locks = val;
}

uint32_t ShowLocksResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->locks.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size734;
            ::apache::thrift::protocol::TType _etype737;
            xfer += iprot->readListBegin(_etype737, _size734);
            this->locks.resize(_size734);
            uint32_t _i738;
            for (_i738 = 0; _i738 < _size734; ++_i738)
            {
              xfer += this->locks[_i738].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size716;
            ::apache::thrift::protocol::TType _etype719;
            xfer += iprot->readListBegin(_etype719, _size716);
            this->locks.resize(_size716);
            uint32_t _i720;
            for (_i720 = 0; _i720 < _size716; ++_i720)
            {
              xfer += this->locks[_i720].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size696;
            ::apache::thrift::protocol::TType _etype699;
            xfer += iprot->readListBegin(_etype699, _size696);
            this->locks.resize(_size696);
            uint32_t _i700;
            for (_i700 = 0; _i700 < _size696; ++_i700)
            {
              xfer += this->locks[_i700].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size715;
            ::apache::thrift::protocol::TType _etype718;
            xfer += iprot->readListBegin(_etype718, _size715);
            this->locks.resize(_size715);
            uint32_t _i719;
            for (_i719 = 0; _i719 < _size715; ++_i719)
            {
              xfer += this->locks[_i719].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size691;
            ::apache::thrift::protocol::TType _etype694;
            xfer += iprot->readListBegin(_etype694, _size691);
            this->locks.resize(_size691);
            uint32_t _i695;
            for (_i695 = 0; _i695 < _size691; ++_i695)
            {
              xfer += this->locks[_i695].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size649;
            ::apache::thrift::protocol::TType _etype652;
            xfer += iprot->readListBegin(_etype652, _size649);
            this->locks.resize(_size649);
            uint32_t _i653;
            for (_i653 = 0; _i653 < _size649; ++_i653)
            {
              xfer += this->locks[_i653].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size653;
            ::apache::thrift::protocol::TType _etype656;
            xfer += iprot->readListBegin(_etype656, _size653);
            this->locks.resize(_size653);
            uint32_t _i657;
            for (_i657 = 0; _i657 < _size653; ++_i657)
            {
              xfer += this->locks[_i657].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size653;
            ::apache::thrift::protocol::TType _etype656;
            xfer += iprot->readListBegin(_etype656, _size653);
            this->locks.resize(_size653);
            uint32_t _i657;
            for (_i657 = 0; _i657 < _size653; ++_i657)
            {
              xfer += this->locks[_i657].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size695;
            ::apache::thrift::protocol::TType _etype698;
            xfer += iprot->readListBegin(_etype698, _size695);
            this->locks.resize(_size695);
            uint32_t _i699;
            for (_i699 = 0; _i699 < _size695; ++_i699)
            {
              xfer += this->locks[_i699].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size702;
            ::apache::thrift::protocol::TType _etype705;
            xfer += iprot->readListBegin(_etype705, _size702);
            this->locks.resize(_size702);
            uint32_t _i706;
            for (_i706 = 0; _i706 < _size702; ++_i706)
            {
              xfer += this->locks[_i706].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.locks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowLocksResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowLocksResponse");

  xfer += oprot->writeFieldBegin("locks", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->locks.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowLocksResponseElement> ::const_iterator _iter739;
    for (_iter739 = this->locks.begin(); _iter739 != this->locks.end(); ++_iter739)
    {
      xfer += (*_iter739).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<ShowLocksResponseElement> ::const_iterator _iter721;
    for (_iter721 = this->locks.begin(); _iter721 != this->locks.end(); ++_iter721)
    {
      xfer += (*_iter721).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<ShowLocksResponseElement> ::const_iterator _iter701;
    for (_iter701 = this->locks.begin(); _iter701 != this->locks.end(); ++_iter701)
    {
      xfer += (*_iter701).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<ShowLocksResponseElement> ::const_iterator _iter720;
    for (_iter720 = this->locks.begin(); _iter720 != this->locks.end(); ++_iter720)
    {
      xfer += (*_iter720).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowLocksResponseElement> ::const_iterator _iter696;
    for (_iter696 = this->locks.begin(); _iter696 != this->locks.end(); ++_iter696)
    {
      xfer += (*_iter696).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<ShowLocksResponseElement> ::const_iterator _iter654;
    for (_iter654 = this->locks.begin(); _iter654 != this->locks.end(); ++_iter654)
    {
      xfer += (*_iter654).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowLocksResponseElement> ::const_iterator _iter658;
    for (_iter658 = this->locks.begin(); _iter658 != this->locks.end(); ++_iter658)
    {
      xfer += (*_iter658).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowLocksResponseElement> ::const_iterator _iter658;
    for (_iter658 = this->locks.begin(); _iter658 != this->locks.end(); ++_iter658)
    {
      xfer += (*_iter658).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<ShowLocksResponseElement> ::const_iterator _iter700;
    for (_iter700 = this->locks.begin(); _iter700 != this->locks.end(); ++_iter700)
    {
      xfer += (*_iter700).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<ShowLocksResponseElement> ::const_iterator _iter707;
    for (_iter707 = this->locks.begin(); _iter707 != this->locks.end(); ++_iter707)
    {
      xfer += (*_iter707).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowLocksResponse &a, ShowLocksResponse &b) {
  using ::std::swap;
  swap(a.locks, b.locks);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other740) {
  locks = other740.locks;
  __isset = other740.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other741) {
  locks = other741.locks;
  __isset = other741.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other722) {
  locks = other722.locks;
  __isset = other722.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other723) {
  locks = other723.locks;
  __isset = other723.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other702) {
  locks = other702.locks;
  __isset = other702.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other703) {
  locks = other703.locks;
  __isset = other703.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other721) {
  locks = other721.locks;
  __isset = other721.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other722) {
  locks = other722.locks;
  __isset = other722.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other697) {
  locks = other697.locks;
  __isset = other697.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other698) {
  locks = other698.locks;
  __isset = other698.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other655) {
  locks = other655.locks;
  __isset = other655.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other656) {
  locks = other656.locks;
  __isset = other656.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other659) {
  locks = other659.locks;
  __isset = other659.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other660) {
  locks = other660.locks;
  __isset = other660.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other659) {
  locks = other659.locks;
  __isset = other659.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other660) {
  locks = other660.locks;
  __isset = other660.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other701) {
  locks = other701.locks;
  __isset = other701.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other702) {
  locks = other702.locks;
  __isset = other702.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other708) {
  locks = other708.locks;
  __isset = other708.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other709) {
  locks = other709.locks;
  __isset = other709.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ShowLocksResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksResponse(";
  out << "locks=" << to_string(locks);
  out << ")";
}


HeartbeatRequest::~HeartbeatRequest() throw() {
}


void HeartbeatRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
__isset.lockid = true;
}

void HeartbeatRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

uint32_t HeartbeatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          this->__isset.lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeartbeatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartbeatRequest");

  if (this->__isset.lockid) {
    xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->lockid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartbeatRequest &a, HeartbeatRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.txnid, b.txnid);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other742) {
  lockid = other742.lockid;
  txnid = other742.txnid;
  __isset = other742.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other743) {
  lockid = other743.lockid;
  txnid = other743.txnid;
  __isset = other743.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other724) {
  lockid = other724.lockid;
  txnid = other724.txnid;
  __isset = other724.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other725) {
  lockid = other725.lockid;
  txnid = other725.txnid;
  __isset = other725.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other704) {
  lockid = other704.lockid;
  txnid = other704.txnid;
  __isset = other704.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other705) {
  lockid = other705.lockid;
  txnid = other705.txnid;
  __isset = other705.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other723) {
  lockid = other723.lockid;
  txnid = other723.txnid;
  __isset = other723.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other724) {
  lockid = other724.lockid;
  txnid = other724.txnid;
  __isset = other724.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other699) {
  lockid = other699.lockid;
  txnid = other699.txnid;
  __isset = other699.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other700) {
  lockid = other700.lockid;
  txnid = other700.txnid;
  __isset = other700.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other657) {
  lockid = other657.lockid;
  txnid = other657.txnid;
  __isset = other657.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other658) {
  lockid = other658.lockid;
  txnid = other658.txnid;
  __isset = other658.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other661) {
  lockid = other661.lockid;
  txnid = other661.txnid;
  __isset = other661.__isset;
}
=======
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other661) {
  lockid = other661.lockid;
  txnid = other661.txnid;
  __isset = other661.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other662) {
  lockid = other662.lockid;
  txnid = other662.txnid;
  __isset = other662.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other703) {
  lockid = other703.lockid;
  txnid = other703.txnid;
  __isset = other703.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other704) {
  lockid = other704.lockid;
  txnid = other704.txnid;
  __isset = other704.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other710) {
  lockid = other710.lockid;
  txnid = other710.txnid;
  __isset = other710.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other711) {
  lockid = other711.lockid;
  txnid = other711.txnid;
  __isset = other711.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void HeartbeatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatRequest(";
  out << "lockid="; (__isset.lockid ? (out << to_string(lockid)) : (out << "<null>"));
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ")";
}


HeartbeatTxnRangeRequest::~HeartbeatTxnRangeRequest() throw() {
}


void HeartbeatTxnRangeRequest::__set_min(const int64_t val) {
  this->min = val;
}

void HeartbeatTxnRangeRequest::__set_max(const int64_t val) {
  this->max = val;
}

uint32_t HeartbeatTxnRangeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_min = false;
  bool isset_max = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min);
          isset_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max);
          isset_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_min)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HeartbeatTxnRangeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartbeatTxnRangeRequest");

  xfer += oprot->writeFieldBegin("min", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartbeatTxnRangeRequest &a, HeartbeatTxnRangeRequest &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other744) {
  min = other744.min;
  max = other744.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other745) {
  min = other745.min;
  max = other745.max;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other726) {
  min = other726.min;
  max = other726.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other727) {
  min = other727.min;
  max = other727.max;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other706) {
  min = other706.min;
  max = other706.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other707) {
  min = other707.min;
  max = other707.max;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other725) {
  min = other725.min;
  max = other725.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other726) {
  min = other726.min;
  max = other726.max;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other701) {
  min = other701.min;
  max = other701.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other702) {
  min = other702.min;
  max = other702.max;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other659) {
  min = other659.min;
  max = other659.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other660) {
  min = other660.min;
  max = other660.max;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other663) {
  min = other663.min;
  max = other663.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other664) {
  min = other664.min;
  max = other664.max;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other663) {
  min = other663.min;
  max = other663.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other664) {
  min = other664.min;
  max = other664.max;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other705) {
  min = other705.min;
  max = other705.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other706) {
  min = other706.min;
  max = other706.max;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other712) {
  min = other712.min;
  max = other712.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other713) {
  min = other713.min;
  max = other713.max;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void HeartbeatTxnRangeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatTxnRangeRequest(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


HeartbeatTxnRangeResponse::~HeartbeatTxnRangeResponse() throw() {
}


void HeartbeatTxnRangeResponse::__set_aborted(const std::set<int64_t> & val) {
  this->aborted = val;
}

void HeartbeatTxnRangeResponse::__set_nosuch(const std::set<int64_t> & val) {
  this->nosuch = val;
}

uint32_t HeartbeatTxnRangeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_aborted = false;
  bool isset_nosuch = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->aborted.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size746;
            ::apache::thrift::protocol::TType _etype749;
            xfer += iprot->readSetBegin(_etype749, _size746);
            uint32_t _i750;
            for (_i750 = 0; _i750 < _size746; ++_i750)
            {
              int64_t _elem751;
              xfer += iprot->readI64(_elem751);
              this->aborted.insert(_elem751);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size728;
            ::apache::thrift::protocol::TType _etype731;
            xfer += iprot->readSetBegin(_etype731, _size728);
            uint32_t _i732;
            for (_i732 = 0; _i732 < _size728; ++_i732)
            {
              int64_t _elem733;
              xfer += iprot->readI64(_elem733);
              this->aborted.insert(_elem733);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size708;
            ::apache::thrift::protocol::TType _etype711;
            xfer += iprot->readSetBegin(_etype711, _size708);
            uint32_t _i712;
            for (_i712 = 0; _i712 < _size708; ++_i712)
            {
              int64_t _elem713;
              xfer += iprot->readI64(_elem713);
              this->aborted.insert(_elem713);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size727;
            ::apache::thrift::protocol::TType _etype730;
            xfer += iprot->readSetBegin(_etype730, _size727);
            uint32_t _i731;
            for (_i731 = 0; _i731 < _size727; ++_i731)
            {
              int64_t _elem732;
              xfer += iprot->readI64(_elem732);
              this->aborted.insert(_elem732);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size703;
            ::apache::thrift::protocol::TType _etype706;
            xfer += iprot->readSetBegin(_etype706, _size703);
            uint32_t _i707;
            for (_i707 = 0; _i707 < _size703; ++_i707)
            {
              int64_t _elem708;
              xfer += iprot->readI64(_elem708);
              this->aborted.insert(_elem708);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size661;
            ::apache::thrift::protocol::TType _etype664;
            xfer += iprot->readSetBegin(_etype664, _size661);
            uint32_t _i665;
            for (_i665 = 0; _i665 < _size661; ++_i665)
<<<<<<< HEAD
            {
              int64_t _elem666;
              xfer += iprot->readI64(_elem666);
              this->aborted.insert(_elem666);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size665;
            ::apache::thrift::protocol::TType _etype668;
            xfer += iprot->readSetBegin(_etype668, _size665);
            uint32_t _i669;
            for (_i669 = 0; _i669 < _size665; ++_i669)
<<<<<<< HEAD
            {
              int64_t _elem670;
              xfer += iprot->readI64(_elem670);
              this->aborted.insert(_elem670);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              int64_t _elem666;
              xfer += iprot->readI64(_elem666);
              this->aborted.insert(_elem666);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              int64_t _elem670;
              xfer += iprot->readI64(_elem670);
              this->aborted.insert(_elem670);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size707;
            ::apache::thrift::protocol::TType _etype710;
            xfer += iprot->readSetBegin(_etype710, _size707);
            uint32_t _i711;
            for (_i711 = 0; _i711 < _size707; ++_i711)
            {
              int64_t _elem712;
              xfer += iprot->readI64(_elem712);
              this->aborted.insert(_elem712);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size714;
            ::apache::thrift::protocol::TType _etype717;
            xfer += iprot->readSetBegin(_etype717, _size714);
            uint32_t _i718;
            for (_i718 = 0; _i718 < _size714; ++_i718)
            {
              int64_t _elem719;
              xfer += iprot->readI64(_elem719);
              this->aborted.insert(_elem719);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readSetEnd();
          }
          isset_aborted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->nosuch.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size752;
            ::apache::thrift::protocol::TType _etype755;
            xfer += iprot->readSetBegin(_etype755, _size752);
            uint32_t _i756;
            for (_i756 = 0; _i756 < _size752; ++_i756)
            {
              int64_t _elem757;
              xfer += iprot->readI64(_elem757);
              this->nosuch.insert(_elem757);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size734;
            ::apache::thrift::protocol::TType _etype737;
            xfer += iprot->readSetBegin(_etype737, _size734);
            uint32_t _i738;
            for (_i738 = 0; _i738 < _size734; ++_i738)
            {
              int64_t _elem739;
              xfer += iprot->readI64(_elem739);
              this->nosuch.insert(_elem739);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size714;
            ::apache::thrift::protocol::TType _etype717;
            xfer += iprot->readSetBegin(_etype717, _size714);
            uint32_t _i718;
            for (_i718 = 0; _i718 < _size714; ++_i718)
            {
              int64_t _elem719;
              xfer += iprot->readI64(_elem719);
              this->nosuch.insert(_elem719);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size733;
            ::apache::thrift::protocol::TType _etype736;
            xfer += iprot->readSetBegin(_etype736, _size733);
            uint32_t _i737;
            for (_i737 = 0; _i737 < _size733; ++_i737)
            {
              int64_t _elem738;
              xfer += iprot->readI64(_elem738);
              this->nosuch.insert(_elem738);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size709;
            ::apache::thrift::protocol::TType _etype712;
            xfer += iprot->readSetBegin(_etype712, _size709);
            uint32_t _i713;
            for (_i713 = 0; _i713 < _size709; ++_i713)
            {
              int64_t _elem714;
              xfer += iprot->readI64(_elem714);
              this->nosuch.insert(_elem714);
=======
            uint32_t _size667;
            ::apache::thrift::protocol::TType _etype670;
            xfer += iprot->readSetBegin(_etype670, _size667);
            uint32_t _i671;
            for (_i671 = 0; _i671 < _size667; ++_i671)
            {
              int64_t _elem672;
              xfer += iprot->readI64(_elem672);
              this->nosuch.insert(_elem672);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size671;
            ::apache::thrift::protocol::TType _etype674;
            xfer += iprot->readSetBegin(_etype674, _size671);
            uint32_t _i675;
            for (_i675 = 0; _i675 < _size671; ++_i675)
<<<<<<< HEAD
            {
              int64_t _elem676;
              xfer += iprot->readI64(_elem676);
              this->nosuch.insert(_elem676);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size667;
            ::apache::thrift::protocol::TType _etype670;
            xfer += iprot->readSetBegin(_etype670, _size667);
            uint32_t _i671;
            for (_i671 = 0; _i671 < _size667; ++_i671)
            {
              int64_t _elem672;
              xfer += iprot->readI64(_elem672);
              this->nosuch.insert(_elem672);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              int64_t _elem676;
              xfer += iprot->readI64(_elem676);
              this->nosuch.insert(_elem676);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size713;
            ::apache::thrift::protocol::TType _etype716;
            xfer += iprot->readSetBegin(_etype716, _size713);
            uint32_t _i717;
            for (_i717 = 0; _i717 < _size713; ++_i717)
            {
              int64_t _elem718;
              xfer += iprot->readI64(_elem718);
              this->nosuch.insert(_elem718);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size720;
            ::apache::thrift::protocol::TType _etype723;
            xfer += iprot->readSetBegin(_etype723, _size720);
            uint32_t _i724;
            for (_i724 = 0; _i724 < _size720; ++_i724)
            {
              int64_t _elem725;
              xfer += iprot->readI64(_elem725);
              this->nosuch.insert(_elem725);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readSetEnd();
          }
          isset_nosuch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_aborted)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nosuch)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HeartbeatTxnRangeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartbeatTxnRangeResponse");

  xfer += oprot->writeFieldBegin("aborted", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->aborted.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter758;
    for (_iter758 = this->aborted.begin(); _iter758 != this->aborted.end(); ++_iter758)
    {
      xfer += oprot->writeI64((*_iter758));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter740;
    for (_iter740 = this->aborted.begin(); _iter740 != this->aborted.end(); ++_iter740)
    {
      xfer += oprot->writeI64((*_iter740));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter720;
    for (_iter720 = this->aborted.begin(); _iter720 != this->aborted.end(); ++_iter720)
    {
      xfer += oprot->writeI64((*_iter720));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::set<int64_t> ::const_iterator _iter739;
    for (_iter739 = this->aborted.begin(); _iter739 != this->aborted.end(); ++_iter739)
    {
      xfer += oprot->writeI64((*_iter739));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter715;
    for (_iter715 = this->aborted.begin(); _iter715 != this->aborted.end(); ++_iter715)
    {
      xfer += oprot->writeI64((*_iter715));
=======
    std::set<int64_t> ::const_iterator _iter673;
    for (_iter673 = this->aborted.begin(); _iter673 != this->aborted.end(); ++_iter673)
    {
      xfer += oprot->writeI64((*_iter673));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter677;
    for (_iter677 = this->aborted.begin(); _iter677 != this->aborted.end(); ++_iter677)
    {
      xfer += oprot->writeI64((*_iter677));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<int64_t> ::const_iterator _iter673;
    for (_iter673 = this->aborted.begin(); _iter673 != this->aborted.end(); ++_iter673)
    {
      xfer += oprot->writeI64((*_iter673));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter677;
    for (_iter677 = this->aborted.begin(); _iter677 != this->aborted.end(); ++_iter677)
    {
      xfer += oprot->writeI64((*_iter677));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::set<int64_t> ::const_iterator _iter719;
    for (_iter719 = this->aborted.begin(); _iter719 != this->aborted.end(); ++_iter719)
    {
      xfer += oprot->writeI64((*_iter719));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::set<int64_t> ::const_iterator _iter726;
    for (_iter726 = this->aborted.begin(); _iter726 != this->aborted.end(); ++_iter726)
    {
      xfer += oprot->writeI64((*_iter726));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nosuch", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nosuch.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter759;
    for (_iter759 = this->nosuch.begin(); _iter759 != this->nosuch.end(); ++_iter759)
    {
      xfer += oprot->writeI64((*_iter759));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter741;
    for (_iter741 = this->nosuch.begin(); _iter741 != this->nosuch.end(); ++_iter741)
    {
      xfer += oprot->writeI64((*_iter741));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter721;
    for (_iter721 = this->nosuch.begin(); _iter721 != this->nosuch.end(); ++_iter721)
    {
      xfer += oprot->writeI64((*_iter721));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::set<int64_t> ::const_iterator _iter740;
    for (_iter740 = this->nosuch.begin(); _iter740 != this->nosuch.end(); ++_iter740)
    {
      xfer += oprot->writeI64((*_iter740));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter716;
    for (_iter716 = this->nosuch.begin(); _iter716 != this->nosuch.end(); ++_iter716)
    {
      xfer += oprot->writeI64((*_iter716));
=======
    std::set<int64_t> ::const_iterator _iter674;
    for (_iter674 = this->nosuch.begin(); _iter674 != this->nosuch.end(); ++_iter674)
    {
      xfer += oprot->writeI64((*_iter674));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter678;
    for (_iter678 = this->nosuch.begin(); _iter678 != this->nosuch.end(); ++_iter678)
    {
      xfer += oprot->writeI64((*_iter678));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<int64_t> ::const_iterator _iter674;
    for (_iter674 = this->nosuch.begin(); _iter674 != this->nosuch.end(); ++_iter674)
    {
      xfer += oprot->writeI64((*_iter674));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter678;
    for (_iter678 = this->nosuch.begin(); _iter678 != this->nosuch.end(); ++_iter678)
    {
      xfer += oprot->writeI64((*_iter678));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::set<int64_t> ::const_iterator _iter720;
    for (_iter720 = this->nosuch.begin(); _iter720 != this->nosuch.end(); ++_iter720)
    {
      xfer += oprot->writeI64((*_iter720));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::set<int64_t> ::const_iterator _iter727;
    for (_iter727 = this->nosuch.begin(); _iter727 != this->nosuch.end(); ++_iter727)
    {
      xfer += oprot->writeI64((*_iter727));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartbeatTxnRangeResponse &a, HeartbeatTxnRangeResponse &b) {
  using ::std::swap;
  swap(a.aborted, b.aborted);
  swap(a.nosuch, b.nosuch);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other760) {
  aborted = other760.aborted;
  nosuch = other760.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other761) {
  aborted = other761.aborted;
  nosuch = other761.nosuch;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other742) {
  aborted = other742.aborted;
  nosuch = other742.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other743) {
  aborted = other743.aborted;
  nosuch = other743.nosuch;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other722) {
  aborted = other722.aborted;
  nosuch = other722.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other723) {
  aborted = other723.aborted;
  nosuch = other723.nosuch;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other741) {
  aborted = other741.aborted;
  nosuch = other741.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other742) {
  aborted = other742.aborted;
  nosuch = other742.nosuch;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other717) {
  aborted = other717.aborted;
  nosuch = other717.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other718) {
  aborted = other718.aborted;
  nosuch = other718.nosuch;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other675) {
  aborted = other675.aborted;
  nosuch = other675.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other676) {
  aborted = other676.aborted;
  nosuch = other676.nosuch;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other679) {
  aborted = other679.aborted;
  nosuch = other679.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other680) {
  aborted = other680.aborted;
  nosuch = other680.nosuch;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other679) {
  aborted = other679.aborted;
  nosuch = other679.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other680) {
  aborted = other680.aborted;
  nosuch = other680.nosuch;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other721) {
  aborted = other721.aborted;
  nosuch = other721.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other722) {
  aborted = other722.aborted;
  nosuch = other722.nosuch;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other728) {
  aborted = other728.aborted;
  nosuch = other728.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other729) {
  aborted = other729.aborted;
  nosuch = other729.nosuch;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void HeartbeatTxnRangeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatTxnRangeResponse(";
  out << "aborted=" << to_string(aborted);
  out << ", " << "nosuch=" << to_string(nosuch);
  out << ")";
}


CompactionRequest::~CompactionRequest() throw() {
}


void CompactionRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void CompactionRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void CompactionRequest::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void CompactionRequest::__set_type(const CompactionType::type val) {
  this->type = val;
}

void CompactionRequest::__set_runas(const std::string& val) {
  this->runas = val;
__isset.runas = true;
}

void CompactionRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
__isset.properties = true;
}

uint32_t CompactionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast762;
          xfer += iprot->readI32(ecast762);
          this->type = (CompactionType::type)ecast762;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast744;
          xfer += iprot->readI32(ecast744);
          this->type = (CompactionType::type)ecast744;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast724;
          xfer += iprot->readI32(ecast724);
          this->type = (CompactionType::type)ecast724;
=======
          int32_t ecast743;
          xfer += iprot->readI32(ecast743);
          this->type = (CompactionType::type)ecast743;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast743;
          xfer += iprot->readI32(ecast743);
          this->type = (CompactionType::type)ecast743;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast719;
          xfer += iprot->readI32(ecast719);
          this->type = (CompactionType::type)ecast719;
=======
          int32_t ecast677;
          xfer += iprot->readI32(ecast677);
          this->type = (CompactionType::type)ecast677;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast681;
          xfer += iprot->readI32(ecast681);
          this->type = (CompactionType::type)ecast681;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast677;
          xfer += iprot->readI32(ecast677);
          this->type = (CompactionType::type)ecast677;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast681;
          xfer += iprot->readI32(ecast681);
          this->type = (CompactionType::type)ecast681;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast723;
          xfer += iprot->readI32(ecast723);
          this->type = (CompactionType::type)ecast723;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast730;
          xfer += iprot->readI32(ecast730);
          this->type = (CompactionType::type)ecast730;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runas);
          this->__isset.runas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size763;
            ::apache::thrift::protocol::TType _ktype764;
            ::apache::thrift::protocol::TType _vtype765;
            xfer += iprot->readMapBegin(_ktype764, _vtype765, _size763);
            uint32_t _i767;
            for (_i767 = 0; _i767 < _size763; ++_i767)
            {
              std::string _key768;
              xfer += iprot->readString(_key768);
              std::string& _val769 = this->properties[_key768];
              xfer += iprot->readString(_val769);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size745;
            ::apache::thrift::protocol::TType _ktype746;
            ::apache::thrift::protocol::TType _vtype747;
            xfer += iprot->readMapBegin(_ktype746, _vtype747, _size745);
            uint32_t _i749;
            for (_i749 = 0; _i749 < _size745; ++_i749)
            {
              std::string _key750;
              xfer += iprot->readString(_key750);
              std::string& _val751 = this->properties[_key750];
              xfer += iprot->readString(_val751);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size725;
            ::apache::thrift::protocol::TType _ktype726;
            ::apache::thrift::protocol::TType _vtype727;
            xfer += iprot->readMapBegin(_ktype726, _vtype727, _size725);
            uint32_t _i729;
            for (_i729 = 0; _i729 < _size725; ++_i729)
            {
              std::string _key730;
              xfer += iprot->readString(_key730);
              std::string& _val731 = this->properties[_key730];
              xfer += iprot->readString(_val731);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size744;
            ::apache::thrift::protocol::TType _ktype745;
            ::apache::thrift::protocol::TType _vtype746;
            xfer += iprot->readMapBegin(_ktype745, _vtype746, _size744);
            uint32_t _i748;
            for (_i748 = 0; _i748 < _size744; ++_i748)
            {
              std::string _key749;
              xfer += iprot->readString(_key749);
              std::string& _val750 = this->properties[_key749];
              xfer += iprot->readString(_val750);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size720;
            ::apache::thrift::protocol::TType _ktype721;
            ::apache::thrift::protocol::TType _vtype722;
            xfer += iprot->readMapBegin(_ktype721, _vtype722, _size720);
            uint32_t _i724;
            for (_i724 = 0; _i724 < _size720; ++_i724)
            {
              std::string _key725;
              xfer += iprot->readString(_key725);
              std::string& _val726 = this->properties[_key725];
              xfer += iprot->readString(_val726);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size678;
            ::apache::thrift::protocol::TType _ktype679;
            ::apache::thrift::protocol::TType _vtype680;
            xfer += iprot->readMapBegin(_ktype679, _vtype680, _size678);
            uint32_t _i682;
            for (_i682 = 0; _i682 < _size678; ++_i682)
            {
              std::string _key683;
              xfer += iprot->readString(_key683);
              std::string& _val684 = this->properties[_key683];
              xfer += iprot->readString(_val684);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size682;
            ::apache::thrift::protocol::TType _ktype683;
            ::apache::thrift::protocol::TType _vtype684;
            xfer += iprot->readMapBegin(_ktype683, _vtype684, _size682);
            uint32_t _i686;
            for (_i686 = 0; _i686 < _size682; ++_i686)
            {
=======
            uint32_t _size682;
            ::apache::thrift::protocol::TType _ktype683;
            ::apache::thrift::protocol::TType _vtype684;
            xfer += iprot->readMapBegin(_ktype683, _vtype684, _size682);
            uint32_t _i686;
            for (_i686 = 0; _i686 < _size682; ++_i686)
            {
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
              std::string _key687;
              xfer += iprot->readString(_key687);
              std::string& _val688 = this->properties[_key687];
              xfer += iprot->readString(_val688);
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size724;
            ::apache::thrift::protocol::TType _ktype725;
            ::apache::thrift::protocol::TType _vtype726;
            xfer += iprot->readMapBegin(_ktype725, _vtype726, _size724);
            uint32_t _i728;
            for (_i728 = 0; _i728 < _size724; ++_i728)
            {
              std::string _key729;
              xfer += iprot->readString(_key729);
              std::string& _val730 = this->properties[_key729];
              xfer += iprot->readString(_val730);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size731;
            ::apache::thrift::protocol::TType _ktype732;
            ::apache::thrift::protocol::TType _vtype733;
            xfer += iprot->readMapBegin(_ktype732, _vtype733, _size731);
            uint32_t _i735;
            for (_i735 = 0; _i735 < _size731; ++_i735)
            {
              std::string _key736;
              xfer += iprot->readString(_key736);
              std::string& _val737 = this->properties[_key736];
              xfer += iprot->readString(_val737);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CompactionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CompactionRequest");

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.runas) {
    xfer += oprot->writeFieldBegin("runas", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->runas);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.properties) {
    xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 6);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::map<std::string, std::string> ::const_iterator _iter770;
      for (_iter770 = this->properties.begin(); _iter770 != this->properties.end(); ++_iter770)
      {
        xfer += oprot->writeString(_iter770->first);
        xfer += oprot->writeString(_iter770->second);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::map<std::string, std::string> ::const_iterator _iter752;
      for (_iter752 = this->properties.begin(); _iter752 != this->properties.end(); ++_iter752)
      {
        xfer += oprot->writeString(_iter752->first);
        xfer += oprot->writeString(_iter752->second);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::map<std::string, std::string> ::const_iterator _iter732;
      for (_iter732 = this->properties.begin(); _iter732 != this->properties.end(); ++_iter732)
      {
        xfer += oprot->writeString(_iter732->first);
        xfer += oprot->writeString(_iter732->second);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::map<std::string, std::string> ::const_iterator _iter751;
      for (_iter751 = this->properties.begin(); _iter751 != this->properties.end(); ++_iter751)
      {
        xfer += oprot->writeString(_iter751->first);
        xfer += oprot->writeString(_iter751->second);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::map<std::string, std::string> ::const_iterator _iter727;
      for (_iter727 = this->properties.begin(); _iter727 != this->properties.end(); ++_iter727)
      {
        xfer += oprot->writeString(_iter727->first);
        xfer += oprot->writeString(_iter727->second);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
      std::map<std::string, std::string> ::const_iterator _iter685;
      for (_iter685 = this->properties.begin(); _iter685 != this->properties.end(); ++_iter685)
      {
        xfer += oprot->writeString(_iter685->first);
        xfer += oprot->writeString(_iter685->second);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::map<std::string, std::string> ::const_iterator _iter689;
      for (_iter689 = this->properties.begin(); _iter689 != this->properties.end(); ++_iter689)
      {
        xfer += oprot->writeString(_iter689->first);
        xfer += oprot->writeString(_iter689->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::map<std::string, std::string> ::const_iterator _iter689;
      for (_iter689 = this->properties.begin(); _iter689 != this->properties.end(); ++_iter689)
      {
        xfer += oprot->writeString(_iter689->first);
        xfer += oprot->writeString(_iter689->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::map<std::string, std::string> ::const_iterator _iter731;
      for (_iter731 = this->properties.begin(); _iter731 != this->properties.end(); ++_iter731)
      {
        xfer += oprot->writeString(_iter731->first);
        xfer += oprot->writeString(_iter731->second);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::map<std::string, std::string> ::const_iterator _iter738;
      for (_iter738 = this->properties.begin(); _iter738 != this->properties.end(); ++_iter738)
      {
        xfer += oprot->writeString(_iter738->first);
        xfer += oprot->writeString(_iter738->second);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompactionRequest &a, CompactionRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.type, b.type);
  swap(a.runas, b.runas);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CompactionRequest::CompactionRequest(const CompactionRequest& other771) {
  dbname = other771.dbname;
  tablename = other771.tablename;
  partitionname = other771.partitionname;
  type = other771.type;
  runas = other771.runas;
  properties = other771.properties;
  __isset = other771.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other772) {
  dbname = other772.dbname;
  tablename = other772.tablename;
  partitionname = other772.partitionname;
  type = other772.type;
  runas = other772.runas;
  properties = other772.properties;
  __isset = other772.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CompactionRequest::CompactionRequest(const CompactionRequest& other753) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CompactionRequest::CompactionRequest(const CompactionRequest& other733) {
  dbname = other733.dbname;
  tablename = other733.tablename;
  partitionname = other733.partitionname;
  type = other733.type;
  runas = other733.runas;
  properties = other733.properties;
  __isset = other733.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other734) {
  dbname = other734.dbname;
  tablename = other734.tablename;
  partitionname = other734.partitionname;
  type = other734.type;
  runas = other734.runas;
  properties = other734.properties;
  __isset = other734.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CompactionRequest::CompactionRequest(const CompactionRequest& other752) {
  dbname = other752.dbname;
  tablename = other752.tablename;
  partitionname = other752.partitionname;
  type = other752.type;
  runas = other752.runas;
  properties = other752.properties;
  __isset = other752.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other753) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  dbname = other753.dbname;
  tablename = other753.tablename;
  partitionname = other753.partitionname;
  type = other753.type;
  runas = other753.runas;
  properties = other753.properties;
  __isset = other753.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other754) {
  dbname = other754.dbname;
  tablename = other754.tablename;
  partitionname = other754.partitionname;
  type = other754.type;
  runas = other754.runas;
  properties = other754.properties;
  __isset = other754.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CompactionRequest::CompactionRequest(const CompactionRequest& other728) {
  dbname = other728.dbname;
  tablename = other728.tablename;
  partitionname = other728.partitionname;
  type = other728.type;
  runas = other728.runas;
  properties = other728.properties;
  __isset = other728.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other729) {
  dbname = other729.dbname;
  tablename = other729.tablename;
  partitionname = other729.partitionname;
  type = other729.type;
  runas = other729.runas;
  properties = other729.properties;
  __isset = other729.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CompactionRequest::CompactionRequest(const CompactionRequest& other686) {
  dbname = other686.dbname;
  tablename = other686.tablename;
  partitionname = other686.partitionname;
  type = other686.type;
  runas = other686.runas;
  properties = other686.properties;
  __isset = other686.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other687) {
  dbname = other687.dbname;
  tablename = other687.tablename;
  partitionname = other687.partitionname;
  type = other687.type;
  runas = other687.runas;
  properties = other687.properties;
  __isset = other687.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CompactionRequest::CompactionRequest(const CompactionRequest& other690) {
  dbname = other690.dbname;
  tablename = other690.tablename;
  partitionname = other690.partitionname;
  type = other690.type;
  runas = other690.runas;
  properties = other690.properties;
  __isset = other690.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other691) {
  dbname = other691.dbname;
  tablename = other691.tablename;
  partitionname = other691.partitionname;
  type = other691.type;
  runas = other691.runas;
  properties = other691.properties;
  __isset = other691.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
CompactionRequest::CompactionRequest(const CompactionRequest& other732) {
  dbname = other732.dbname;
  tablename = other732.tablename;
  partitionname = other732.partitionname;
  type = other732.type;
  runas = other732.runas;
  properties = other732.properties;
  __isset = other732.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other733) {
  dbname = other733.dbname;
  tablename = other733.tablename;
  partitionname = other733.partitionname;
  type = other733.type;
  runas = other733.runas;
  properties = other733.properties;
  __isset = other733.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CompactionRequest::CompactionRequest(const CompactionRequest& other739) {
  dbname = other739.dbname;
  tablename = other739.tablename;
  partitionname = other739.partitionname;
  type = other739.type;
  runas = other739.runas;
  properties = other739.properties;
  __isset = other739.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other740) {
  dbname = other740.dbname;
  tablename = other740.tablename;
  partitionname = other740.partitionname;
  type = other740.type;
  runas = other740.runas;
  properties = other740.properties;
  __isset = other740.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CompactionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactionRequest(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ", " << "runas="; (__isset.runas ? (out << to_string(runas)) : (out << "<null>"));
  out << ", " << "properties="; (__isset.properties ? (out << to_string(properties)) : (out << "<null>"));
  out << ")";
}


CompactionResponse::~CompactionResponse() throw() {
}


void CompactionResponse::__set_id(const int64_t val) {
  this->id = val;
}

void CompactionResponse::__set_state(const std::string& val) {
  this->state = val;
}

void CompactionResponse::__set_accepted(const bool val) {
  this->accepted = val;
}

uint32_t CompactionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_state = false;
  bool isset_accepted = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->accepted);
          isset_accepted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_accepted)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CompactionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CompactionResponse");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accepted", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->accepted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompactionResponse &a, CompactionResponse &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.state, b.state);
  swap(a.accepted, b.accepted);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CompactionResponse::CompactionResponse(const CompactionResponse& other773) {
  id = other773.id;
  state = other773.state;
  accepted = other773.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other774) {
  id = other774.id;
  state = other774.state;
  accepted = other774.accepted;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CompactionResponse::CompactionResponse(const CompactionResponse& other755) {
  id = other755.id;
  state = other755.state;
  accepted = other755.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other756) {
  id = other756.id;
  state = other756.state;
  accepted = other756.accepted;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CompactionResponse::CompactionResponse(const CompactionResponse& other735) {
  id = other735.id;
  state = other735.state;
  accepted = other735.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other736) {
  id = other736.id;
  state = other736.state;
  accepted = other736.accepted;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CompactionResponse::CompactionResponse(const CompactionResponse& other754) {
  id = other754.id;
  state = other754.state;
  accepted = other754.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other755) {
  id = other755.id;
  state = other755.state;
  accepted = other755.accepted;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CompactionResponse::CompactionResponse(const CompactionResponse& other730) {
  id = other730.id;
  state = other730.state;
  accepted = other730.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other731) {
  id = other731.id;
  state = other731.state;
  accepted = other731.accepted;
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other688) {
  id = other688.id;
  state = other688.state;
  accepted = other688.accepted;
}
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other688) {
  id = other688.id;
  state = other688.state;
  accepted = other688.accepted;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other689) {
  id = other689.id;
  state = other689.state;
  accepted = other689.accepted;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other692) {
  id = other692.id;
  state = other692.state;
  accepted = other692.accepted;
}
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other692) {
  id = other692.id;
  state = other692.state;
  accepted = other692.accepted;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other693) {
  id = other693.id;
  state = other693.state;
  accepted = other693.accepted;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other734) {
  id = other734.id;
  state = other734.state;
  accepted = other734.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other735) {
  id = other735.id;
  state = other735.state;
  accepted = other735.accepted;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other741) {
  id = other741.id;
  state = other741.state;
  accepted = other741.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other742) {
  id = other742.id;
  state = other742.state;
  accepted = other742.accepted;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CompactionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactionResponse(";
  out << "id=" << to_string(id);
  out << ", " << "state=" << to_string(state);
  out << ", " << "accepted=" << to_string(accepted);
  out << ")";
}


ShowCompactRequest::~ShowCompactRequest() throw() {
}


uint32_t ShowCompactRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowCompactRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowCompactRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowCompactRequest &a, ShowCompactRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other775) {
  (void) other775;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other776) {
  (void) other776;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other757) {
  (void) other757;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other758) {
  (void) other758;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other737) {
  (void) other737;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other738) {
  (void) other738;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other756) {
  (void) other756;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other757) {
  (void) other757;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other732) {
  (void) other732;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other733) {
  (void) other733;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other690) {
  (void) other690;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other691) {
  (void) other691;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other694) {
  (void) other694;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other695) {
  (void) other695;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other694) {
  (void) other694;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other695) {
  (void) other695;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other736) {
  (void) other736;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other737) {
  (void) other737;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other743) {
  (void) other743;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other744) {
  (void) other744;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ShowCompactRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactRequest(";
  out << ")";
}


ShowCompactResponseElement::~ShowCompactResponseElement() throw() {
}


void ShowCompactResponseElement::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void ShowCompactResponseElement::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void ShowCompactResponseElement::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void ShowCompactResponseElement::__set_type(const CompactionType::type val) {
  this->type = val;
}

void ShowCompactResponseElement::__set_state(const std::string& val) {
  this->state = val;
}

void ShowCompactResponseElement::__set_workerid(const std::string& val) {
  this->workerid = val;
__isset.workerid = true;
}

void ShowCompactResponseElement::__set_start(const int64_t val) {
  this->start = val;
__isset.start = true;
}

void ShowCompactResponseElement::__set_runAs(const std::string& val) {
  this->runAs = val;
__isset.runAs = true;
}

void ShowCompactResponseElement::__set_hightestTxnId(const int64_t val) {
  this->hightestTxnId = val;
__isset.hightestTxnId = true;
}

void ShowCompactResponseElement::__set_metaInfo(const std::string& val) {
  this->metaInfo = val;
__isset.metaInfo = true;
}

void ShowCompactResponseElement::__set_endTime(const int64_t val) {
  this->endTime = val;
__isset.endTime = true;
}

void ShowCompactResponseElement::__set_hadoopJobId(const std::string& val) {
  this->hadoopJobId = val;
__isset.hadoopJobId = true;
}

void ShowCompactResponseElement::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

uint32_t ShowCompactResponseElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_type = false;
  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast777;
          xfer += iprot->readI32(ecast777);
          this->type = (CompactionType::type)ecast777;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast759;
          xfer += iprot->readI32(ecast759);
          this->type = (CompactionType::type)ecast759;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast739;
          xfer += iprot->readI32(ecast739);
          this->type = (CompactionType::type)ecast739;
=======
          int32_t ecast758;
          xfer += iprot->readI32(ecast758);
          this->type = (CompactionType::type)ecast758;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast758;
          xfer += iprot->readI32(ecast758);
          this->type = (CompactionType::type)ecast758;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast734;
          xfer += iprot->readI32(ecast734);
          this->type = (CompactionType::type)ecast734;
=======
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->type = (CompactionType::type)ecast692;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast696;
          xfer += iprot->readI32(ecast696);
          this->type = (CompactionType::type)ecast696;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->type = (CompactionType::type)ecast692;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast696;
          xfer += iprot->readI32(ecast696);
          this->type = (CompactionType::type)ecast696;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast738;
          xfer += iprot->readI32(ecast738);
          this->type = (CompactionType::type)ecast738;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast745;
          xfer += iprot->readI32(ecast745);
          this->type = (CompactionType::type)ecast745;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->workerid);
          this->__isset.workerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runAs);
          this->__isset.runAs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hightestTxnId);
          this->__isset.hightestTxnId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metaInfo);
          this->__isset.metaInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hadoopJobId);
          this->__isset.hadoopJobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ShowCompactResponseElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowCompactResponseElement");

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.workerid) {
    xfer += oprot->writeFieldBegin("workerid", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->workerid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start) {
    xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->start);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runAs) {
    xfer += oprot->writeFieldBegin("runAs", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->runAs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hightestTxnId) {
    xfer += oprot->writeFieldBegin("hightestTxnId", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->hightestTxnId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metaInfo) {
    xfer += oprot->writeFieldBegin("metaInfo", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->metaInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endTime) {
    xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->endTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hadoopJobId) {
    xfer += oprot->writeFieldBegin("hadoopJobId", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->hadoopJobId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowCompactResponseElement &a, ShowCompactResponseElement &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.type, b.type);
  swap(a.state, b.state);
  swap(a.workerid, b.workerid);
  swap(a.start, b.start);
  swap(a.runAs, b.runAs);
  swap(a.hightestTxnId, b.hightestTxnId);
  swap(a.metaInfo, b.metaInfo);
  swap(a.endTime, b.endTime);
  swap(a.hadoopJobId, b.hadoopJobId);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other778) {
  dbname = other778.dbname;
  tablename = other778.tablename;
  partitionname = other778.partitionname;
  type = other778.type;
  state = other778.state;
  workerid = other778.workerid;
  start = other778.start;
  runAs = other778.runAs;
  hightestTxnId = other778.hightestTxnId;
  metaInfo = other778.metaInfo;
  endTime = other778.endTime;
  hadoopJobId = other778.hadoopJobId;
  id = other778.id;
  __isset = other778.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other779) {
  dbname = other779.dbname;
  tablename = other779.tablename;
  partitionname = other779.partitionname;
  type = other779.type;
  state = other779.state;
  workerid = other779.workerid;
  start = other779.start;
  runAs = other779.runAs;
  hightestTxnId = other779.hightestTxnId;
  metaInfo = other779.metaInfo;
  endTime = other779.endTime;
  hadoopJobId = other779.hadoopJobId;
  id = other779.id;
  __isset = other779.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other760) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other740) {
  dbname = other740.dbname;
  tablename = other740.tablename;
  partitionname = other740.partitionname;
  type = other740.type;
  state = other740.state;
  workerid = other740.workerid;
  start = other740.start;
  runAs = other740.runAs;
  hightestTxnId = other740.hightestTxnId;
  metaInfo = other740.metaInfo;
  endTime = other740.endTime;
  hadoopJobId = other740.hadoopJobId;
  id = other740.id;
  __isset = other740.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other741) {
  dbname = other741.dbname;
  tablename = other741.tablename;
  partitionname = other741.partitionname;
  type = other741.type;
  state = other741.state;
  workerid = other741.workerid;
  start = other741.start;
  runAs = other741.runAs;
  hightestTxnId = other741.hightestTxnId;
  metaInfo = other741.metaInfo;
  endTime = other741.endTime;
  hadoopJobId = other741.hadoopJobId;
  id = other741.id;
  __isset = other741.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other759) {
  dbname = other759.dbname;
  tablename = other759.tablename;
  partitionname = other759.partitionname;
  type = other759.type;
  state = other759.state;
  workerid = other759.workerid;
  start = other759.start;
  runAs = other759.runAs;
  hightestTxnId = other759.hightestTxnId;
  metaInfo = other759.metaInfo;
  endTime = other759.endTime;
  hadoopJobId = other759.hadoopJobId;
  id = other759.id;
  __isset = other759.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other760) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  dbname = other760.dbname;
  tablename = other760.tablename;
  partitionname = other760.partitionname;
  type = other760.type;
  state = other760.state;
  workerid = other760.workerid;
  start = other760.start;
  runAs = other760.runAs;
  hightestTxnId = other760.hightestTxnId;
  metaInfo = other760.metaInfo;
  endTime = other760.endTime;
  hadoopJobId = other760.hadoopJobId;
  id = other760.id;
  __isset = other760.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other761) {
  dbname = other761.dbname;
  tablename = other761.tablename;
  partitionname = other761.partitionname;
  type = other761.type;
  state = other761.state;
  workerid = other761.workerid;
  start = other761.start;
  runAs = other761.runAs;
  hightestTxnId = other761.hightestTxnId;
  metaInfo = other761.metaInfo;
  endTime = other761.endTime;
  hadoopJobId = other761.hadoopJobId;
  id = other761.id;
  __isset = other761.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other735) {
  dbname = other735.dbname;
  tablename = other735.tablename;
  partitionname = other735.partitionname;
  type = other735.type;
  state = other735.state;
  workerid = other735.workerid;
  start = other735.start;
  runAs = other735.runAs;
  hightestTxnId = other735.hightestTxnId;
  metaInfo = other735.metaInfo;
  endTime = other735.endTime;
  hadoopJobId = other735.hadoopJobId;
  id = other735.id;
  __isset = other735.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other736) {
  dbname = other736.dbname;
  tablename = other736.tablename;
  partitionname = other736.partitionname;
  type = other736.type;
  state = other736.state;
  workerid = other736.workerid;
  start = other736.start;
  runAs = other736.runAs;
  hightestTxnId = other736.hightestTxnId;
  metaInfo = other736.metaInfo;
  endTime = other736.endTime;
  hadoopJobId = other736.hadoopJobId;
  id = other736.id;
  __isset = other736.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other693) {
  dbname = other693.dbname;
  tablename = other693.tablename;
  partitionname = other693.partitionname;
  type = other693.type;
  state = other693.state;
  workerid = other693.workerid;
  start = other693.start;
  runAs = other693.runAs;
  hightestTxnId = other693.hightestTxnId;
  metaInfo = other693.metaInfo;
  endTime = other693.endTime;
  hadoopJobId = other693.hadoopJobId;
  id = other693.id;
  __isset = other693.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other694) {
  dbname = other694.dbname;
  tablename = other694.tablename;
  partitionname = other694.partitionname;
  type = other694.type;
  state = other694.state;
  workerid = other694.workerid;
  start = other694.start;
  runAs = other694.runAs;
  hightestTxnId = other694.hightestTxnId;
  metaInfo = other694.metaInfo;
  endTime = other694.endTime;
  hadoopJobId = other694.hadoopJobId;
  id = other694.id;
  __isset = other694.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other697) {
  dbname = other697.dbname;
  tablename = other697.tablename;
  partitionname = other697.partitionname;
  type = other697.type;
  state = other697.state;
  workerid = other697.workerid;
  start = other697.start;
  runAs = other697.runAs;
  hightestTxnId = other697.hightestTxnId;
  metaInfo = other697.metaInfo;
  endTime = other697.endTime;
  hadoopJobId = other697.hadoopJobId;
  id = other697.id;
  __isset = other697.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other698) {
  dbname = other698.dbname;
  tablename = other698.tablename;
  partitionname = other698.partitionname;
  type = other698.type;
  state = other698.state;
  workerid = other698.workerid;
  start = other698.start;
  runAs = other698.runAs;
  hightestTxnId = other698.hightestTxnId;
  metaInfo = other698.metaInfo;
  endTime = other698.endTime;
  hadoopJobId = other698.hadoopJobId;
  id = other698.id;
  __isset = other698.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other739) {
  dbname = other739.dbname;
  tablename = other739.tablename;
  partitionname = other739.partitionname;
  type = other739.type;
  state = other739.state;
  workerid = other739.workerid;
  start = other739.start;
  runAs = other739.runAs;
  hightestTxnId = other739.hightestTxnId;
  metaInfo = other739.metaInfo;
  endTime = other739.endTime;
  hadoopJobId = other739.hadoopJobId;
  id = other739.id;
  __isset = other739.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other740) {
  dbname = other740.dbname;
  tablename = other740.tablename;
  partitionname = other740.partitionname;
  type = other740.type;
  state = other740.state;
  workerid = other740.workerid;
  start = other740.start;
  runAs = other740.runAs;
  hightestTxnId = other740.hightestTxnId;
  metaInfo = other740.metaInfo;
  endTime = other740.endTime;
  hadoopJobId = other740.hadoopJobId;
  id = other740.id;
  __isset = other740.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other746) {
  dbname = other746.dbname;
  tablename = other746.tablename;
  partitionname = other746.partitionname;
  type = other746.type;
  state = other746.state;
  workerid = other746.workerid;
  start = other746.start;
  runAs = other746.runAs;
  hightestTxnId = other746.hightestTxnId;
  metaInfo = other746.metaInfo;
  endTime = other746.endTime;
  hadoopJobId = other746.hadoopJobId;
  id = other746.id;
  __isset = other746.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other747) {
  dbname = other747.dbname;
  tablename = other747.tablename;
  partitionname = other747.partitionname;
  type = other747.type;
  state = other747.state;
  workerid = other747.workerid;
  start = other747.start;
  runAs = other747.runAs;
  hightestTxnId = other747.hightestTxnId;
  metaInfo = other747.metaInfo;
  endTime = other747.endTime;
  hadoopJobId = other747.hadoopJobId;
  id = other747.id;
  __isset = other747.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ShowCompactResponseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactResponseElement(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ", " << "state=" << to_string(state);
  out << ", " << "workerid="; (__isset.workerid ? (out << to_string(workerid)) : (out << "<null>"));
  out << ", " << "start="; (__isset.start ? (out << to_string(start)) : (out << "<null>"));
  out << ", " << "runAs="; (__isset.runAs ? (out << to_string(runAs)) : (out << "<null>"));
  out << ", " << "hightestTxnId="; (__isset.hightestTxnId ? (out << to_string(hightestTxnId)) : (out << "<null>"));
  out << ", " << "metaInfo="; (__isset.metaInfo ? (out << to_string(metaInfo)) : (out << "<null>"));
  out << ", " << "endTime="; (__isset.endTime ? (out << to_string(endTime)) : (out << "<null>"));
  out << ", " << "hadoopJobId="; (__isset.hadoopJobId ? (out << to_string(hadoopJobId)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


ShowCompactResponse::~ShowCompactResponse() throw() {
}


void ShowCompactResponse::__set_compacts(const std::vector<ShowCompactResponseElement> & val) {
  this->compacts = val;
}

uint32_t ShowCompactResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_compacts = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->compacts.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size780;
            ::apache::thrift::protocol::TType _etype783;
            xfer += iprot->readListBegin(_etype783, _size780);
            this->compacts.resize(_size780);
            uint32_t _i784;
            for (_i784 = 0; _i784 < _size780; ++_i784)
            {
              xfer += this->compacts[_i784].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size762;
            ::apache::thrift::protocol::TType _etype765;
            xfer += iprot->readListBegin(_etype765, _size762);
            this->compacts.resize(_size762);
            uint32_t _i766;
            for (_i766 = 0; _i766 < _size762; ++_i766)
            {
              xfer += this->compacts[_i766].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size742;
            ::apache::thrift::protocol::TType _etype745;
            xfer += iprot->readListBegin(_etype745, _size742);
            this->compacts.resize(_size742);
            uint32_t _i746;
            for (_i746 = 0; _i746 < _size742; ++_i746)
            {
              xfer += this->compacts[_i746].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size761;
            ::apache::thrift::protocol::TType _etype764;
            xfer += iprot->readListBegin(_etype764, _size761);
            this->compacts.resize(_size761);
            uint32_t _i765;
            for (_i765 = 0; _i765 < _size761; ++_i765)
            {
              xfer += this->compacts[_i765].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size737;
            ::apache::thrift::protocol::TType _etype740;
            xfer += iprot->readListBegin(_etype740, _size737);
            this->compacts.resize(_size737);
            uint32_t _i741;
            for (_i741 = 0; _i741 < _size737; ++_i741)
            {
              xfer += this->compacts[_i741].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size695;
            ::apache::thrift::protocol::TType _etype698;
            xfer += iprot->readListBegin(_etype698, _size695);
            this->compacts.resize(_size695);
            uint32_t _i699;
            for (_i699 = 0; _i699 < _size695; ++_i699)
            {
              xfer += this->compacts[_i699].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size699;
            ::apache::thrift::protocol::TType _etype702;
            xfer += iprot->readListBegin(_etype702, _size699);
            this->compacts.resize(_size699);
            uint32_t _i703;
            for (_i703 = 0; _i703 < _size699; ++_i703)
            {
              xfer += this->compacts[_i703].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size699;
            ::apache::thrift::protocol::TType _etype702;
            xfer += iprot->readListBegin(_etype702, _size699);
            this->compacts.resize(_size699);
            uint32_t _i703;
            for (_i703 = 0; _i703 < _size699; ++_i703)
            {
              xfer += this->compacts[_i703].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size741;
            ::apache::thrift::protocol::TType _etype744;
            xfer += iprot->readListBegin(_etype744, _size741);
            this->compacts.resize(_size741);
            uint32_t _i745;
            for (_i745 = 0; _i745 < _size741; ++_i745)
            {
              xfer += this->compacts[_i745].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size748;
            ::apache::thrift::protocol::TType _etype751;
            xfer += iprot->readListBegin(_etype751, _size748);
            this->compacts.resize(_size748);
            uint32_t _i752;
            for (_i752 = 0; _i752 < _size748; ++_i752)
            {
              xfer += this->compacts[_i752].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_compacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_compacts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ShowCompactResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowCompactResponse");

  xfer += oprot->writeFieldBegin("compacts", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->compacts.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowCompactResponseElement> ::const_iterator _iter785;
    for (_iter785 = this->compacts.begin(); _iter785 != this->compacts.end(); ++_iter785)
    {
      xfer += (*_iter785).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<ShowCompactResponseElement> ::const_iterator _iter767;
    for (_iter767 = this->compacts.begin(); _iter767 != this->compacts.end(); ++_iter767)
    {
      xfer += (*_iter767).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<ShowCompactResponseElement> ::const_iterator _iter747;
    for (_iter747 = this->compacts.begin(); _iter747 != this->compacts.end(); ++_iter747)
    {
      xfer += (*_iter747).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<ShowCompactResponseElement> ::const_iterator _iter766;
    for (_iter766 = this->compacts.begin(); _iter766 != this->compacts.end(); ++_iter766)
    {
      xfer += (*_iter766).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowCompactResponseElement> ::const_iterator _iter742;
    for (_iter742 = this->compacts.begin(); _iter742 != this->compacts.end(); ++_iter742)
    {
      xfer += (*_iter742).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<ShowCompactResponseElement> ::const_iterator _iter700;
    for (_iter700 = this->compacts.begin(); _iter700 != this->compacts.end(); ++_iter700)
    {
      xfer += (*_iter700).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowCompactResponseElement> ::const_iterator _iter704;
    for (_iter704 = this->compacts.begin(); _iter704 != this->compacts.end(); ++_iter704)
    {
      xfer += (*_iter704).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowCompactResponseElement> ::const_iterator _iter704;
    for (_iter704 = this->compacts.begin(); _iter704 != this->compacts.end(); ++_iter704)
    {
      xfer += (*_iter704).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<ShowCompactResponseElement> ::const_iterator _iter746;
    for (_iter746 = this->compacts.begin(); _iter746 != this->compacts.end(); ++_iter746)
    {
      xfer += (*_iter746).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<ShowCompactResponseElement> ::const_iterator _iter753;
    for (_iter753 = this->compacts.begin(); _iter753 != this->compacts.end(); ++_iter753)
    {
      xfer += (*_iter753).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowCompactResponse &a, ShowCompactResponse &b) {
  using ::std::swap;
  swap(a.compacts, b.compacts);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other786) {
  compacts = other786.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other787) {
  compacts = other787.compacts;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other768) {
  compacts = other768.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other769) {
  compacts = other769.compacts;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other748) {
  compacts = other748.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other749) {
  compacts = other749.compacts;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other767) {
  compacts = other767.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other768) {
  compacts = other768.compacts;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other743) {
  compacts = other743.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other744) {
  compacts = other744.compacts;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other701) {
  compacts = other701.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other702) {
  compacts = other702.compacts;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other705) {
  compacts = other705.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other706) {
  compacts = other706.compacts;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other705) {
  compacts = other705.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other706) {
  compacts = other706.compacts;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other747) {
  compacts = other747.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other748) {
  compacts = other748.compacts;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other754) {
  compacts = other754.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other755) {
  compacts = other755.compacts;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ShowCompactResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactResponse(";
  out << "compacts=" << to_string(compacts);
  out << ")";
}


AddDynamicPartitions::~AddDynamicPartitions() throw() {
}


void AddDynamicPartitions::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void AddDynamicPartitions::__set_writeid(const int64_t val) {
  this->writeid = val;
}

void AddDynamicPartitions::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void AddDynamicPartitions::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void AddDynamicPartitions::__set_partitionnames(const std::vector<std::string> & val) {
  this->partitionnames = val;
}

void AddDynamicPartitions::__set_operationType(const DataOperationType::type val) {
  this->operationType = val;
__isset.operationType = true;
}

uint32_t AddDynamicPartitions::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;
  bool isset_writeid = false;
  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_partitionnames = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeid);
          isset_writeid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionnames.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size788;
            ::apache::thrift::protocol::TType _etype791;
            xfer += iprot->readListBegin(_etype791, _size788);
            this->partitionnames.resize(_size788);
            uint32_t _i792;
            for (_i792 = 0; _i792 < _size788; ++_i792)
            {
              xfer += iprot->readString(this->partitionnames[_i792]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size770;
            ::apache::thrift::protocol::TType _etype773;
            xfer += iprot->readListBegin(_etype773, _size770);
            this->partitionnames.resize(_size770);
            uint32_t _i774;
            for (_i774 = 0; _i774 < _size770; ++_i774)
            {
              xfer += iprot->readString(this->partitionnames[_i774]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size750;
            ::apache::thrift::protocol::TType _etype753;
            xfer += iprot->readListBegin(_etype753, _size750);
            this->partitionnames.resize(_size750);
            uint32_t _i754;
            for (_i754 = 0; _i754 < _size750; ++_i754)
            {
              xfer += iprot->readString(this->partitionnames[_i754]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size769;
            ::apache::thrift::protocol::TType _etype772;
            xfer += iprot->readListBegin(_etype772, _size769);
            this->partitionnames.resize(_size769);
            uint32_t _i773;
            for (_i773 = 0; _i773 < _size769; ++_i773)
            {
              xfer += iprot->readString(this->partitionnames[_i773]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size745;
            ::apache::thrift::protocol::TType _etype748;
            xfer += iprot->readListBegin(_etype748, _size745);
            this->partitionnames.resize(_size745);
            uint32_t _i749;
            for (_i749 = 0; _i749 < _size745; ++_i749)
            {
              xfer += iprot->readString(this->partitionnames[_i749]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size703;
            ::apache::thrift::protocol::TType _etype706;
            xfer += iprot->readListBegin(_etype706, _size703);
            this->partitionnames.resize(_size703);
            uint32_t _i707;
            for (_i707 = 0; _i707 < _size703; ++_i707)
            {
              xfer += iprot->readString(this->partitionnames[_i707]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size707;
            ::apache::thrift::protocol::TType _etype710;
            xfer += iprot->readListBegin(_etype710, _size707);
            this->partitionnames.resize(_size707);
            uint32_t _i711;
            for (_i711 = 0; _i711 < _size707; ++_i711)
            {
              xfer += iprot->readString(this->partitionnames[_i711]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size707;
            ::apache::thrift::protocol::TType _etype710;
            xfer += iprot->readListBegin(_etype710, _size707);
            this->partitionnames.resize(_size707);
            uint32_t _i711;
            for (_i711 = 0; _i711 < _size707; ++_i711)
            {
              xfer += iprot->readString(this->partitionnames[_i711]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size749;
            ::apache::thrift::protocol::TType _etype752;
            xfer += iprot->readListBegin(_etype752, _size749);
            this->partitionnames.resize(_size749);
            uint32_t _i753;
            for (_i753 = 0; _i753 < _size749; ++_i753)
            {
              xfer += iprot->readString(this->partitionnames[_i753]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size756;
            ::apache::thrift::protocol::TType _etype759;
            xfer += iprot->readListBegin(_etype759, _size756);
            this->partitionnames.resize(_size756);
            uint32_t _i760;
            for (_i760 = 0; _i760 < _size756; ++_i760)
            {
              xfer += iprot->readString(this->partitionnames[_i760]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_partitionnames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast793;
          xfer += iprot->readI32(ecast793);
          this->operationType = (DataOperationType::type)ecast793;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast775;
          xfer += iprot->readI32(ecast775);
          this->operationType = (DataOperationType::type)ecast775;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast755;
          xfer += iprot->readI32(ecast755);
          this->operationType = (DataOperationType::type)ecast755;
=======
          int32_t ecast774;
          xfer += iprot->readI32(ecast774);
          this->operationType = (DataOperationType::type)ecast774;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast774;
          xfer += iprot->readI32(ecast774);
          this->operationType = (DataOperationType::type)ecast774;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast750;
          xfer += iprot->readI32(ecast750);
          this->operationType = (DataOperationType::type)ecast750;
=======
          int32_t ecast708;
          xfer += iprot->readI32(ecast708);
          this->operationType = (DataOperationType::type)ecast708;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->operationType = (DataOperationType::type)ecast712;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast708;
          xfer += iprot->readI32(ecast708);
          this->operationType = (DataOperationType::type)ecast708;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->operationType = (DataOperationType::type)ecast712;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast754;
          xfer += iprot->readI32(ecast754);
          this->operationType = (DataOperationType::type)ecast754;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast761;
          xfer += iprot->readI32(ecast761);
          this->operationType = (DataOperationType::type)ecast761;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.operationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_writeid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partitionnames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddDynamicPartitions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddDynamicPartitions");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("writeid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->writeid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionnames", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionnames.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter794;
    for (_iter794 = this->partitionnames.begin(); _iter794 != this->partitionnames.end(); ++_iter794)
    {
      xfer += oprot->writeString((*_iter794));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter776;
    for (_iter776 = this->partitionnames.begin(); _iter776 != this->partitionnames.end(); ++_iter776)
    {
      xfer += oprot->writeString((*_iter776));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter756;
    for (_iter756 = this->partitionnames.begin(); _iter756 != this->partitionnames.end(); ++_iter756)
    {
      xfer += oprot->writeString((*_iter756));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<std::string> ::const_iterator _iter775;
    for (_iter775 = this->partitionnames.begin(); _iter775 != this->partitionnames.end(); ++_iter775)
    {
      xfer += oprot->writeString((*_iter775));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter751;
    for (_iter751 = this->partitionnames.begin(); _iter751 != this->partitionnames.end(); ++_iter751)
    {
      xfer += oprot->writeString((*_iter751));
=======
    std::vector<std::string> ::const_iterator _iter709;
    for (_iter709 = this->partitionnames.begin(); _iter709 != this->partitionnames.end(); ++_iter709)
    {
      xfer += oprot->writeString((*_iter709));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter713;
    for (_iter713 = this->partitionnames.begin(); _iter713 != this->partitionnames.end(); ++_iter713)
    {
      xfer += oprot->writeString((*_iter713));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<std::string> ::const_iterator _iter709;
    for (_iter709 = this->partitionnames.begin(); _iter709 != this->partitionnames.end(); ++_iter709)
    {
      xfer += oprot->writeString((*_iter709));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter713;
    for (_iter713 = this->partitionnames.begin(); _iter713 != this->partitionnames.end(); ++_iter713)
    {
      xfer += oprot->writeString((*_iter713));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<std::string> ::const_iterator _iter755;
    for (_iter755 = this->partitionnames.begin(); _iter755 != this->partitionnames.end(); ++_iter755)
    {
      xfer += oprot->writeString((*_iter755));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<std::string> ::const_iterator _iter762;
    for (_iter762 = this->partitionnames.begin(); _iter762 != this->partitionnames.end(); ++_iter762)
    {
      xfer += oprot->writeString((*_iter762));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.operationType) {
    xfer += oprot->writeFieldBegin("operationType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->operationType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddDynamicPartitions &a, AddDynamicPartitions &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.writeid, b.writeid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionnames, b.partitionnames);
  swap(a.operationType, b.operationType);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other795) {
  txnid = other795.txnid;
  writeid = other795.writeid;
  dbname = other795.dbname;
  tablename = other795.tablename;
  partitionnames = other795.partitionnames;
  operationType = other795.operationType;
  __isset = other795.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other796) {
  txnid = other796.txnid;
  writeid = other796.writeid;
  dbname = other796.dbname;
  tablename = other796.tablename;
  partitionnames = other796.partitionnames;
  operationType = other796.operationType;
  __isset = other796.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other777) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other757) {
  txnid = other757.txnid;
  writeid = other757.writeid;
  dbname = other757.dbname;
  tablename = other757.tablename;
  partitionnames = other757.partitionnames;
  operationType = other757.operationType;
  __isset = other757.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other758) {
  txnid = other758.txnid;
  writeid = other758.writeid;
  dbname = other758.dbname;
  tablename = other758.tablename;
  partitionnames = other758.partitionnames;
  operationType = other758.operationType;
  __isset = other758.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other776) {
  txnid = other776.txnid;
  writeid = other776.writeid;
  dbname = other776.dbname;
  tablename = other776.tablename;
  partitionnames = other776.partitionnames;
  operationType = other776.operationType;
  __isset = other776.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other777) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  txnid = other777.txnid;
  writeid = other777.writeid;
  dbname = other777.dbname;
  tablename = other777.tablename;
  partitionnames = other777.partitionnames;
  operationType = other777.operationType;
  __isset = other777.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other778) {
  txnid = other778.txnid;
  writeid = other778.writeid;
  dbname = other778.dbname;
  tablename = other778.tablename;
  partitionnames = other778.partitionnames;
  operationType = other778.operationType;
  __isset = other778.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other752) {
  txnid = other752.txnid;
  writeid = other752.writeid;
  dbname = other752.dbname;
  tablename = other752.tablename;
  partitionnames = other752.partitionnames;
  operationType = other752.operationType;
  __isset = other752.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other753) {
  txnid = other753.txnid;
  writeid = other753.writeid;
  dbname = other753.dbname;
  tablename = other753.tablename;
  partitionnames = other753.partitionnames;
  operationType = other753.operationType;
  __isset = other753.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other710) {
  txnid = other710.txnid;
  dbname = other710.dbname;
  tablename = other710.tablename;
  partitionnames = other710.partitionnames;
  operationType = other710.operationType;
  __isset = other710.__isset;
=======
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other756) {
  txnid = other756.txnid;
  writeid = other756.writeid;
  dbname = other756.dbname;
  tablename = other756.tablename;
  partitionnames = other756.partitionnames;
  operationType = other756.operationType;
  __isset = other756.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other757) {
  txnid = other757.txnid;
  writeid = other757.writeid;
  dbname = other757.dbname;
  tablename = other757.tablename;
  partitionnames = other757.partitionnames;
  operationType = other757.operationType;
  __isset = other757.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other763) {
  txnid = other763.txnid;
  writeid = other763.writeid;
  dbname = other763.dbname;
  tablename = other763.tablename;
  partitionnames = other763.partitionnames;
  operationType = other763.operationType;
  __isset = other763.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other764) {
  txnid = other764.txnid;
  writeid = other764.writeid;
  dbname = other764.dbname;
  tablename = other764.tablename;
  partitionnames = other764.partitionnames;
  operationType = other764.operationType;
  __isset = other764.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void AddDynamicPartitions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddDynamicPartitions(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "writeid=" << to_string(writeid);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionnames=" << to_string(partitionnames);
  out << ", " << "operationType="; (__isset.operationType ? (out << to_string(operationType)) : (out << "<null>"));
  out << ")";
}


BasicTxnInfo::~BasicTxnInfo() throw() {
}


void BasicTxnInfo::__set_isnull(const bool val) {
  this->isnull = val;
}

void BasicTxnInfo::__set_time(const int64_t val) {
  this->time = val;
__isset.time = true;
}

void BasicTxnInfo::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void BasicTxnInfo::__set_dbname(const std::string& val) {
  this->dbname = val;
__isset.dbname = true;
}

void BasicTxnInfo::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void BasicTxnInfo::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

uint32_t BasicTxnInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isnull = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isnull);
          isset_isnull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          this->__isset.dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isnull)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BasicTxnInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BasicTxnInfo");

  xfer += oprot->writeFieldBegin("isnull", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isnull);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.time) {
    xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dbname) {
    xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->dbname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BasicTxnInfo &a, BasicTxnInfo &b) {
  using ::std::swap;
  swap(a.isnull, b.isnull);
  swap(a.time, b.time);
  swap(a.txnid, b.txnid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other797) {
  isnull = other797.isnull;
  time = other797.time;
  txnid = other797.txnid;
  dbname = other797.dbname;
  tablename = other797.tablename;
  partitionname = other797.partitionname;
  __isset = other797.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other798) {
  isnull = other798.isnull;
  time = other798.time;
  txnid = other798.txnid;
  dbname = other798.dbname;
  tablename = other798.tablename;
  partitionname = other798.partitionname;
  __isset = other798.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other779) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other759) {
  isnull = other759.isnull;
  time = other759.time;
  txnid = other759.txnid;
  dbname = other759.dbname;
  tablename = other759.tablename;
  partitionname = other759.partitionname;
  __isset = other759.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other760) {
  isnull = other760.isnull;
  time = other760.time;
  txnid = other760.txnid;
  dbname = other760.dbname;
  tablename = other760.tablename;
  partitionname = other760.partitionname;
  __isset = other760.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other778) {
  isnull = other778.isnull;
  time = other778.time;
  txnid = other778.txnid;
  dbname = other778.dbname;
  tablename = other778.tablename;
  partitionname = other778.partitionname;
  __isset = other778.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other779) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  isnull = other779.isnull;
  time = other779.time;
  txnid = other779.txnid;
  dbname = other779.dbname;
  tablename = other779.tablename;
  partitionname = other779.partitionname;
  __isset = other779.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other780) {
  isnull = other780.isnull;
  time = other780.time;
  txnid = other780.txnid;
  dbname = other780.dbname;
  tablename = other780.tablename;
  partitionname = other780.partitionname;
  __isset = other780.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other754) {
  isnull = other754.isnull;
  time = other754.time;
  txnid = other754.txnid;
  dbname = other754.dbname;
  tablename = other754.tablename;
  partitionname = other754.partitionname;
  __isset = other754.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other755) {
  isnull = other755.isnull;
  time = other755.time;
  txnid = other755.txnid;
  dbname = other755.dbname;
  tablename = other755.tablename;
  partitionname = other755.partitionname;
  __isset = other755.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other712) {
  isnull = other712.isnull;
  time = other712.time;
  txnid = other712.txnid;
  dbname = other712.dbname;
  tablename = other712.tablename;
  partitionname = other712.partitionname;
  __isset = other712.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other713) {
  isnull = other713.isnull;
  time = other713.time;
  txnid = other713.txnid;
  dbname = other713.dbname;
  tablename = other713.tablename;
  partitionname = other713.partitionname;
  __isset = other713.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other716) {
  isnull = other716.isnull;
  time = other716.time;
  txnid = other716.txnid;
  dbname = other716.dbname;
  tablename = other716.tablename;
  partitionname = other716.partitionname;
  __isset = other716.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other717) {
  isnull = other717.isnull;
  time = other717.time;
  txnid = other717.txnid;
  dbname = other717.dbname;
  tablename = other717.tablename;
  partitionname = other717.partitionname;
  __isset = other717.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other758) {
  isnull = other758.isnull;
  time = other758.time;
  txnid = other758.txnid;
  dbname = other758.dbname;
  tablename = other758.tablename;
  partitionname = other758.partitionname;
  __isset = other758.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other759) {
  isnull = other759.isnull;
  time = other759.time;
  txnid = other759.txnid;
  dbname = other759.dbname;
  tablename = other759.tablename;
  partitionname = other759.partitionname;
  __isset = other759.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other765) {
  isnull = other765.isnull;
  time = other765.time;
  txnid = other765.txnid;
  dbname = other765.dbname;
  tablename = other765.tablename;
  partitionname = other765.partitionname;
  __isset = other765.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other766) {
  isnull = other766.isnull;
  time = other766.time;
  txnid = other766.txnid;
  dbname = other766.dbname;
  tablename = other766.tablename;
  partitionname = other766.partitionname;
  __isset = other766.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void BasicTxnInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BasicTxnInfo(";
  out << "isnull=" << to_string(isnull);
  out << ", " << "time="; (__isset.time ? (out << to_string(time)) : (out << "<null>"));
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "dbname="; (__isset.dbname ? (out << to_string(dbname)) : (out << "<null>"));
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ")";
}


CreationMetadata::~CreationMetadata() throw() {
}


void CreationMetadata::__set_catName(const std::string& val) {
  this->catName = val;
}

void CreationMetadata::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void CreationMetadata::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void CreationMetadata::__set_tablesUsed(const std::set<std::string> & val) {
  this->tablesUsed = val;
}

void CreationMetadata::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
__isset.validTxnList = true;
}

uint32_t CreationMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_catName = false;
  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_tablesUsed = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          isset_catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tablesUsed.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size799;
            ::apache::thrift::protocol::TType _etype802;
            xfer += iprot->readSetBegin(_etype802, _size799);
            uint32_t _i803;
            for (_i803 = 0; _i803 < _size799; ++_i803)
            {
              std::string _elem804;
              xfer += iprot->readString(_elem804);
              this->tablesUsed.insert(_elem804);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size781;
            ::apache::thrift::protocol::TType _etype784;
            xfer += iprot->readSetBegin(_etype784, _size781);
            uint32_t _i785;
            for (_i785 = 0; _i785 < _size781; ++_i785)
            {
              std::string _elem786;
              xfer += iprot->readString(_elem786);
              this->tablesUsed.insert(_elem786);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size761;
            ::apache::thrift::protocol::TType _etype764;
            xfer += iprot->readSetBegin(_etype764, _size761);
            uint32_t _i765;
            for (_i765 = 0; _i765 < _size761; ++_i765)
            {
              std::string _elem766;
              xfer += iprot->readString(_elem766);
              this->tablesUsed.insert(_elem766);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size780;
            ::apache::thrift::protocol::TType _etype783;
            xfer += iprot->readSetBegin(_etype783, _size780);
            uint32_t _i784;
            for (_i784 = 0; _i784 < _size780; ++_i784)
            {
              std::string _elem785;
              xfer += iprot->readString(_elem785);
              this->tablesUsed.insert(_elem785);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size756;
            ::apache::thrift::protocol::TType _etype759;
            xfer += iprot->readSetBegin(_etype759, _size756);
            uint32_t _i760;
            for (_i760 = 0; _i760 < _size756; ++_i760)
            {
              std::string _elem761;
              xfer += iprot->readString(_elem761);
              this->tablesUsed.insert(_elem761);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size714;
            ::apache::thrift::protocol::TType _etype717;
            xfer += iprot->readSetBegin(_etype717, _size714);
            uint32_t _i718;
            for (_i718 = 0; _i718 < _size714; ++_i718)
            {
              std::string _elem719;
              xfer += iprot->readString(_elem719);
              this->tablesUsed.insert(_elem719);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size718;
            ::apache::thrift::protocol::TType _etype721;
            xfer += iprot->readSetBegin(_etype721, _size718);
            uint32_t _i722;
            for (_i722 = 0; _i722 < _size718; ++_i722)
            {
              std::string _elem723;
              xfer += iprot->readString(_elem723);
              this->tablesUsed.insert(_elem723);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size718;
            ::apache::thrift::protocol::TType _etype721;
            xfer += iprot->readSetBegin(_etype721, _size718);
            uint32_t _i722;
            for (_i722 = 0; _i722 < _size718; ++_i722)
            {
              std::string _elem723;
              xfer += iprot->readString(_elem723);
              this->tablesUsed.insert(_elem723);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size760;
            ::apache::thrift::protocol::TType _etype763;
            xfer += iprot->readSetBegin(_etype763, _size760);
            uint32_t _i764;
            for (_i764 = 0; _i764 < _size760; ++_i764)
            {
              std::string _elem765;
              xfer += iprot->readString(_elem765);
              this->tablesUsed.insert(_elem765);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size767;
            ::apache::thrift::protocol::TType _etype770;
            xfer += iprot->readSetBegin(_etype770, _size767);
            uint32_t _i771;
            for (_i771 = 0; _i771 < _size767; ++_i771)
            {
              std::string _elem772;
              xfer += iprot->readString(_elem772);
              this->tablesUsed.insert(_elem772);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readSetEnd();
          }
          isset_tablesUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->validTxnList);
          this->__isset.validTxnList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_catName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablesUsed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreationMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreationMetadata");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablesUsed", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tablesUsed.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter805;
    for (_iter805 = this->tablesUsed.begin(); _iter805 != this->tablesUsed.end(); ++_iter805)
    {
      xfer += oprot->writeString((*_iter805));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter787;
    for (_iter787 = this->tablesUsed.begin(); _iter787 != this->tablesUsed.end(); ++_iter787)
    {
      xfer += oprot->writeString((*_iter787));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter767;
    for (_iter767 = this->tablesUsed.begin(); _iter767 != this->tablesUsed.end(); ++_iter767)
    {
      xfer += oprot->writeString((*_iter767));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::set<std::string> ::const_iterator _iter786;
    for (_iter786 = this->tablesUsed.begin(); _iter786 != this->tablesUsed.end(); ++_iter786)
    {
      xfer += oprot->writeString((*_iter786));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter762;
    for (_iter762 = this->tablesUsed.begin(); _iter762 != this->tablesUsed.end(); ++_iter762)
    {
      xfer += oprot->writeString((*_iter762));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::set<std::string> ::const_iterator _iter720;
    for (_iter720 = this->tablesUsed.begin(); _iter720 != this->tablesUsed.end(); ++_iter720)
    {
      xfer += oprot->writeString((*_iter720));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter724;
    for (_iter724 = this->tablesUsed.begin(); _iter724 != this->tablesUsed.end(); ++_iter724)
    {
      xfer += oprot->writeString((*_iter724));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter724;
    for (_iter724 = this->tablesUsed.begin(); _iter724 != this->tablesUsed.end(); ++_iter724)
    {
      xfer += oprot->writeString((*_iter724));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::set<std::string> ::const_iterator _iter766;
    for (_iter766 = this->tablesUsed.begin(); _iter766 != this->tablesUsed.end(); ++_iter766)
    {
      xfer += oprot->writeString((*_iter766));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::set<std::string> ::const_iterator _iter773;
    for (_iter773 = this->tablesUsed.begin(); _iter773 != this->tablesUsed.end(); ++_iter773)
    {
      xfer += oprot->writeString((*_iter773));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.validTxnList) {
    xfer += oprot->writeFieldBegin("validTxnList", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->validTxnList);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreationMetadata &a, CreationMetadata &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.tablesUsed, b.tablesUsed);
  swap(a.validTxnList, b.validTxnList);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CreationMetadata::CreationMetadata(const CreationMetadata& other806) {
  catName = other806.catName;
  dbName = other806.dbName;
  tblName = other806.tblName;
  tablesUsed = other806.tablesUsed;
  validTxnList = other806.validTxnList;
  __isset = other806.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other807) {
  catName = other807.catName;
  dbName = other807.dbName;
  tblName = other807.tblName;
  tablesUsed = other807.tablesUsed;
  validTxnList = other807.validTxnList;
  __isset = other807.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CreationMetadata::CreationMetadata(const CreationMetadata& other788) {
  dbName = other788.dbName;
  tblName = other788.tblName;
  tablesUsed = other788.tablesUsed;
  validTxnList = other788.validTxnList;
  __isset = other788.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other789) {
  dbName = other789.dbName;
  tblName = other789.tblName;
  tablesUsed = other789.tablesUsed;
  validTxnList = other789.validTxnList;
  __isset = other789.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CreationMetadata::CreationMetadata(const CreationMetadata& other768) {
  dbName = other768.dbName;
  tblName = other768.tblName;
  tablesUsed = other768.tablesUsed;
  validTxnList = other768.validTxnList;
  __isset = other768.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other769) {
  dbName = other769.dbName;
  tblName = other769.tblName;
  tablesUsed = other769.tablesUsed;
  validTxnList = other769.validTxnList;
  __isset = other769.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CreationMetadata::CreationMetadata(const CreationMetadata& other787) {
  dbName = other787.dbName;
  tblName = other787.tblName;
  tablesUsed = other787.tablesUsed;
  validTxnList = other787.validTxnList;
  __isset = other787.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other788) {
  dbName = other788.dbName;
  tblName = other788.tblName;
  tablesUsed = other788.tablesUsed;
  validTxnList = other788.validTxnList;
  __isset = other788.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CreationMetadata::CreationMetadata(const CreationMetadata& other763) {
  dbName = other763.dbName;
  tblName = other763.tblName;
  tablesUsed = other763.tablesUsed;
  validTxnList = other763.validTxnList;
  __isset = other763.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other764) {
  dbName = other764.dbName;
  tblName = other764.tblName;
  tablesUsed = other764.tablesUsed;
  validTxnList = other764.validTxnList;
  __isset = other764.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CreationMetadata::CreationMetadata(const CreationMetadata& other721) {
  dbName = other721.dbName;
  tblName = other721.tblName;
  tablesUsed = other721.tablesUsed;
  validTxnList = other721.validTxnList;
  __isset = other721.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other722) {
  dbName = other722.dbName;
  tblName = other722.tblName;
  tablesUsed = other722.tablesUsed;
  validTxnList = other722.validTxnList;
  __isset = other722.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CreationMetadata::CreationMetadata(const CreationMetadata& other725) {
  dbName = other725.dbName;
  tblName = other725.tblName;
  tablesUsed = other725.tablesUsed;
  validTxnList = other725.validTxnList;
  __isset = other725.__isset;
}
=======
CreationMetadata::CreationMetadata(const CreationMetadata& other725) {
  dbName = other725.dbName;
  tblName = other725.tblName;
  tablesUsed = other725.tablesUsed;
  validTxnList = other725.validTxnList;
  __isset = other725.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other726) {
  dbName = other726.dbName;
  tblName = other726.tblName;
  tablesUsed = other726.tablesUsed;
  validTxnList = other726.validTxnList;
  __isset = other726.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CreationMetadata::CreationMetadata(const CreationMetadata& other767) {
  dbName = other767.dbName;
  tblName = other767.tblName;
  tablesUsed = other767.tablesUsed;
  validTxnList = other767.validTxnList;
  __isset = other767.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other768) {
  dbName = other768.dbName;
  tblName = other768.tblName;
  tablesUsed = other768.tablesUsed;
  validTxnList = other768.validTxnList;
  __isset = other768.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CreationMetadata::CreationMetadata(const CreationMetadata& other774) {
  dbName = other774.dbName;
  tblName = other774.tblName;
  tablesUsed = other774.tablesUsed;
  validTxnList = other774.validTxnList;
  __isset = other774.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other775) {
  dbName = other775.dbName;
  tblName = other775.tblName;
  tablesUsed = other775.tablesUsed;
  validTxnList = other775.validTxnList;
  __isset = other775.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CreationMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreationMetadata(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "tablesUsed=" << to_string(tablesUsed);
  out << ", " << "validTxnList="; (__isset.validTxnList ? (out << to_string(validTxnList)) : (out << "<null>"));
  out << ")";
}


NotificationEventRequest::~NotificationEventRequest() throw() {
}


void NotificationEventRequest::__set_lastEvent(const int64_t val) {
  this->lastEvent = val;
}

void NotificationEventRequest::__set_maxEvents(const int32_t val) {
  this->maxEvents = val;
__isset.maxEvents = true;
}

uint32_t NotificationEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lastEvent = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastEvent);
          isset_lastEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxEvents);
          this->__isset.maxEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lastEvent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventRequest");

  xfer += oprot->writeFieldBegin("lastEvent", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lastEvent);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.maxEvents) {
    xfer += oprot->writeFieldBegin("maxEvents", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->maxEvents);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventRequest &a, NotificationEventRequest &b) {
  using ::std::swap;
  swap(a.lastEvent, b.lastEvent);
  swap(a.maxEvents, b.maxEvents);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other808) {
  lastEvent = other808.lastEvent;
  maxEvents = other808.maxEvents;
  __isset = other808.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other809) {
  lastEvent = other809.lastEvent;
  maxEvents = other809.maxEvents;
  __isset = other809.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other790) {
  lastEvent = other790.lastEvent;
  maxEvents = other790.maxEvents;
  __isset = other790.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other791) {
  lastEvent = other791.lastEvent;
  maxEvents = other791.maxEvents;
  __isset = other791.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other770) {
  lastEvent = other770.lastEvent;
  maxEvents = other770.maxEvents;
  __isset = other770.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other771) {
  lastEvent = other771.lastEvent;
  maxEvents = other771.maxEvents;
  __isset = other771.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other789) {
  lastEvent = other789.lastEvent;
  maxEvents = other789.maxEvents;
  __isset = other789.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other790) {
  lastEvent = other790.lastEvent;
  maxEvents = other790.maxEvents;
  __isset = other790.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other765) {
  lastEvent = other765.lastEvent;
  maxEvents = other765.maxEvents;
  __isset = other765.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other766) {
  lastEvent = other766.lastEvent;
  maxEvents = other766.maxEvents;
  __isset = other766.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other723) {
  lastEvent = other723.lastEvent;
  maxEvents = other723.maxEvents;
  __isset = other723.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other724) {
  lastEvent = other724.lastEvent;
  maxEvents = other724.maxEvents;
  __isset = other724.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other727) {
  lastEvent = other727.lastEvent;
  maxEvents = other727.maxEvents;
  __isset = other727.__isset;
}
=======
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other727) {
  lastEvent = other727.lastEvent;
  maxEvents = other727.maxEvents;
  __isset = other727.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other728) {
  lastEvent = other728.lastEvent;
  maxEvents = other728.maxEvents;
  __isset = other728.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other769) {
  lastEvent = other769.lastEvent;
  maxEvents = other769.maxEvents;
  __isset = other769.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other770) {
  lastEvent = other770.lastEvent;
  maxEvents = other770.maxEvents;
  __isset = other770.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other776) {
  lastEvent = other776.lastEvent;
  maxEvents = other776.maxEvents;
  __isset = other776.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other777) {
  lastEvent = other777.lastEvent;
  maxEvents = other777.maxEvents;
  __isset = other777.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NotificationEventRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventRequest(";
  out << "lastEvent=" << to_string(lastEvent);
  out << ", " << "maxEvents="; (__isset.maxEvents ? (out << to_string(maxEvents)) : (out << "<null>"));
  out << ")";
}


NotificationEvent::~NotificationEvent() throw() {
}


void NotificationEvent::__set_eventId(const int64_t val) {
  this->eventId = val;
}

void NotificationEvent::__set_eventTime(const int32_t val) {
  this->eventTime = val;
}

void NotificationEvent::__set_eventType(const std::string& val) {
  this->eventType = val;
}

void NotificationEvent::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}

void NotificationEvent::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void NotificationEvent::__set_message(const std::string& val) {
  this->message = val;
}

void NotificationEvent::__set_messageFormat(const std::string& val) {
  this->messageFormat = val;
__isset.messageFormat = true;
}

void NotificationEvent::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t NotificationEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;
  bool isset_eventTime = false;
  bool isset_eventType = false;
  bool isset_message = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventTime);
          isset_eventTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventType);
          isset_eventType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          isset_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageFormat);
          this->__isset.messageFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEvent");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->eventTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->eventType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dbName) {
    xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->dbName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageFormat) {
    xfer += oprot->writeFieldBegin("messageFormat", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->messageFormat);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEvent &a, NotificationEvent &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.eventTime, b.eventTime);
  swap(a.eventType, b.eventType);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.message, b.message);
  swap(a.messageFormat, b.messageFormat);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEvent::NotificationEvent(const NotificationEvent& other810) {
  eventId = other810.eventId;
  eventTime = other810.eventTime;
  eventType = other810.eventType;
  dbName = other810.dbName;
  tableName = other810.tableName;
  message = other810.message;
  messageFormat = other810.messageFormat;
  catName = other810.catName;
  __isset = other810.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other811) {
  eventId = other811.eventId;
  eventTime = other811.eventTime;
  eventType = other811.eventType;
  dbName = other811.dbName;
  tableName = other811.tableName;
  message = other811.message;
  messageFormat = other811.messageFormat;
  catName = other811.catName;
  __isset = other811.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NotificationEvent::NotificationEvent(const NotificationEvent& other792) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NotificationEvent::NotificationEvent(const NotificationEvent& other772) {
  eventId = other772.eventId;
  eventTime = other772.eventTime;
  eventType = other772.eventType;
  dbName = other772.dbName;
  tableName = other772.tableName;
  message = other772.message;
  messageFormat = other772.messageFormat;
  __isset = other772.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other773) {
  eventId = other773.eventId;
  eventTime = other773.eventTime;
  eventType = other773.eventType;
  dbName = other773.dbName;
  tableName = other773.tableName;
  message = other773.message;
  messageFormat = other773.messageFormat;
  __isset = other773.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NotificationEvent::NotificationEvent(const NotificationEvent& other791) {
  eventId = other791.eventId;
  eventTime = other791.eventTime;
  eventType = other791.eventType;
  dbName = other791.dbName;
  tableName = other791.tableName;
  message = other791.message;
  messageFormat = other791.messageFormat;
  __isset = other791.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other792) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  eventId = other792.eventId;
  eventTime = other792.eventTime;
  eventType = other792.eventType;
  dbName = other792.dbName;
  tableName = other792.tableName;
  message = other792.message;
  messageFormat = other792.messageFormat;
  __isset = other792.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other793) {
  eventId = other793.eventId;
  eventTime = other793.eventTime;
  eventType = other793.eventType;
  dbName = other793.dbName;
  tableName = other793.tableName;
  message = other793.message;
  messageFormat = other793.messageFormat;
  __isset = other793.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEvent::NotificationEvent(const NotificationEvent& other767) {
  eventId = other767.eventId;
  eventTime = other767.eventTime;
  eventType = other767.eventType;
  dbName = other767.dbName;
  tableName = other767.tableName;
  message = other767.message;
  messageFormat = other767.messageFormat;
  __isset = other767.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other768) {
  eventId = other768.eventId;
  eventTime = other768.eventTime;
  eventType = other768.eventType;
  dbName = other768.dbName;
  tableName = other768.tableName;
  message = other768.message;
  messageFormat = other768.messageFormat;
  __isset = other768.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEvent::NotificationEvent(const NotificationEvent& other725) {
  eventId = other725.eventId;
  eventTime = other725.eventTime;
  eventType = other725.eventType;
  dbName = other725.dbName;
  tableName = other725.tableName;
  message = other725.message;
  messageFormat = other725.messageFormat;
  __isset = other725.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other726) {
  eventId = other726.eventId;
  eventTime = other726.eventTime;
  eventType = other726.eventType;
  dbName = other726.dbName;
  tableName = other726.tableName;
  message = other726.message;
  messageFormat = other726.messageFormat;
  __isset = other726.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
NotificationEvent::NotificationEvent(const NotificationEvent& other729) {
  eventId = other729.eventId;
  eventTime = other729.eventTime;
  eventType = other729.eventType;
  dbName = other729.dbName;
  tableName = other729.tableName;
  message = other729.message;
  messageFormat = other729.messageFormat;
  __isset = other729.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other730) {
  eventId = other730.eventId;
  eventTime = other730.eventTime;
  eventType = other730.eventType;
  dbName = other730.dbName;
  tableName = other730.tableName;
  message = other730.message;
  messageFormat = other730.messageFormat;
  __isset = other730.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
NotificationEvent::NotificationEvent(const NotificationEvent& other771) {
  eventId = other771.eventId;
  eventTime = other771.eventTime;
  eventType = other771.eventType;
  dbName = other771.dbName;
  tableName = other771.tableName;
  message = other771.message;
  messageFormat = other771.messageFormat;
  __isset = other771.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other772) {
  eventId = other772.eventId;
  eventTime = other772.eventTime;
  eventType = other772.eventType;
  dbName = other772.dbName;
  tableName = other772.tableName;
  message = other772.message;
  messageFormat = other772.messageFormat;
  __isset = other772.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NotificationEvent::NotificationEvent(const NotificationEvent& other778) {
  eventId = other778.eventId;
  eventTime = other778.eventTime;
  eventType = other778.eventType;
  dbName = other778.dbName;
  tableName = other778.tableName;
  message = other778.message;
  messageFormat = other778.messageFormat;
  __isset = other778.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other779) {
  eventId = other779.eventId;
  eventTime = other779.eventTime;
  eventType = other779.eventType;
  dbName = other779.dbName;
  tableName = other779.tableName;
  message = other779.message;
  messageFormat = other779.messageFormat;
  __isset = other779.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NotificationEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEvent(";
  out << "eventId=" << to_string(eventId);
  out << ", " << "eventTime=" << to_string(eventTime);
  out << ", " << "eventType=" << to_string(eventType);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "message=" << to_string(message);
  out << ", " << "messageFormat="; (__isset.messageFormat ? (out << to_string(messageFormat)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


NotificationEventResponse::~NotificationEventResponse() throw() {
}


void NotificationEventResponse::__set_events(const std::vector<NotificationEvent> & val) {
  this->events = val;
}

uint32_t NotificationEventResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_events = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size812;
            ::apache::thrift::protocol::TType _etype815;
            xfer += iprot->readListBegin(_etype815, _size812);
            this->events.resize(_size812);
            uint32_t _i816;
            for (_i816 = 0; _i816 < _size812; ++_i816)
            {
              xfer += this->events[_i816].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size794;
            ::apache::thrift::protocol::TType _etype797;
            xfer += iprot->readListBegin(_etype797, _size794);
            this->events.resize(_size794);
            uint32_t _i798;
            for (_i798 = 0; _i798 < _size794; ++_i798)
            {
              xfer += this->events[_i798].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size774;
            ::apache::thrift::protocol::TType _etype777;
            xfer += iprot->readListBegin(_etype777, _size774);
            this->events.resize(_size774);
            uint32_t _i778;
            for (_i778 = 0; _i778 < _size774; ++_i778)
            {
              xfer += this->events[_i778].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size793;
            ::apache::thrift::protocol::TType _etype796;
            xfer += iprot->readListBegin(_etype796, _size793);
            this->events.resize(_size793);
            uint32_t _i797;
            for (_i797 = 0; _i797 < _size793; ++_i797)
            {
              xfer += this->events[_i797].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size769;
            ::apache::thrift::protocol::TType _etype772;
            xfer += iprot->readListBegin(_etype772, _size769);
            this->events.resize(_size769);
            uint32_t _i773;
            for (_i773 = 0; _i773 < _size769; ++_i773)
            {
              xfer += this->events[_i773].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size727;
            ::apache::thrift::protocol::TType _etype730;
            xfer += iprot->readListBegin(_etype730, _size727);
            this->events.resize(_size727);
            uint32_t _i731;
            for (_i731 = 0; _i731 < _size727; ++_i731)
<<<<<<< HEAD
            {
              xfer += this->events[_i731].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size731;
            ::apache::thrift::protocol::TType _etype734;
            xfer += iprot->readListBegin(_etype734, _size731);
            this->events.resize(_size731);
            uint32_t _i735;
            for (_i735 = 0; _i735 < _size731; ++_i735)
<<<<<<< HEAD
            {
              xfer += this->events[_i735].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->events[_i731].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->events[_i735].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size773;
            ::apache::thrift::protocol::TType _etype776;
            xfer += iprot->readListBegin(_etype776, _size773);
            this->events.resize(_size773);
            uint32_t _i777;
            for (_i777 = 0; _i777 < _size773; ++_i777)
            {
              xfer += this->events[_i777].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size780;
            ::apache::thrift::protocol::TType _etype783;
            xfer += iprot->readListBegin(_etype783, _size780);
            this->events.resize(_size780);
            uint32_t _i784;
            for (_i784 = 0; _i784 < _size780; ++_i784)
            {
              xfer += this->events[_i784].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_events)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventResponse");

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<NotificationEvent> ::const_iterator _iter817;
    for (_iter817 = this->events.begin(); _iter817 != this->events.end(); ++_iter817)
    {
      xfer += (*_iter817).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<NotificationEvent> ::const_iterator _iter799;
    for (_iter799 = this->events.begin(); _iter799 != this->events.end(); ++_iter799)
    {
      xfer += (*_iter799).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<NotificationEvent> ::const_iterator _iter779;
    for (_iter779 = this->events.begin(); _iter779 != this->events.end(); ++_iter779)
    {
      xfer += (*_iter779).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<NotificationEvent> ::const_iterator _iter798;
    for (_iter798 = this->events.begin(); _iter798 != this->events.end(); ++_iter798)
    {
      xfer += (*_iter798).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<NotificationEvent> ::const_iterator _iter774;
    for (_iter774 = this->events.begin(); _iter774 != this->events.end(); ++_iter774)
    {
      xfer += (*_iter774).write(oprot);
=======
    std::vector<NotificationEvent> ::const_iterator _iter732;
    for (_iter732 = this->events.begin(); _iter732 != this->events.end(); ++_iter732)
    {
      xfer += (*_iter732).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<NotificationEvent> ::const_iterator _iter736;
    for (_iter736 = this->events.begin(); _iter736 != this->events.end(); ++_iter736)
    {
      xfer += (*_iter736).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<NotificationEvent> ::const_iterator _iter732;
    for (_iter732 = this->events.begin(); _iter732 != this->events.end(); ++_iter732)
    {
      xfer += (*_iter732).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<NotificationEvent> ::const_iterator _iter736;
    for (_iter736 = this->events.begin(); _iter736 != this->events.end(); ++_iter736)
    {
      xfer += (*_iter736).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<NotificationEvent> ::const_iterator _iter778;
    for (_iter778 = this->events.begin(); _iter778 != this->events.end(); ++_iter778)
    {
      xfer += (*_iter778).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<NotificationEvent> ::const_iterator _iter785;
    for (_iter785 = this->events.begin(); _iter785 != this->events.end(); ++_iter785)
    {
      xfer += (*_iter785).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventResponse &a, NotificationEventResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other818) {
  events = other818.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other819) {
  events = other819.events;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other800) {
  events = other800.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other801) {
  events = other801.events;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other780) {
  events = other780.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other781) {
  events = other781.events;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other799) {
  events = other799.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other800) {
  events = other800.events;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other775) {
  events = other775.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other776) {
  events = other776.events;
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other733) {
  events = other733.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other734) {
  events = other734.events;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other737) {
  events = other737.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other738) {
  events = other738.events;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other733) {
  events = other733.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other734) {
  events = other734.events;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other737) {
  events = other737.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other738) {
  events = other738.events;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other779) {
  events = other779.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other780) {
  events = other780.events;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other786) {
  events = other786.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other787) {
  events = other787.events;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NotificationEventResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


CurrentNotificationEventId::~CurrentNotificationEventId() throw() {
}


void CurrentNotificationEventId::__set_eventId(const int64_t val) {
  this->eventId = val;
}

uint32_t CurrentNotificationEventId::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CurrentNotificationEventId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CurrentNotificationEventId");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other820) {
  eventId = other820.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other821) {
  eventId = other821.eventId;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other802) {
  eventId = other802.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other803) {
  eventId = other803.eventId;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other782) {
  eventId = other782.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other783) {
  eventId = other783.eventId;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other801) {
  eventId = other801.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other802) {
  eventId = other802.eventId;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other777) {
  eventId = other777.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other778) {
  eventId = other778.eventId;
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other735) {
  eventId = other735.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other736) {
  eventId = other736.eventId;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other739) {
  eventId = other739.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other740) {
  eventId = other740.eventId;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other735) {
  eventId = other735.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other736) {
  eventId = other736.eventId;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other739) {
  eventId = other739.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other740) {
  eventId = other740.eventId;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other781) {
  eventId = other781.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other782) {
  eventId = other782.eventId;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other788) {
  eventId = other788.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other789) {
  eventId = other789.eventId;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CurrentNotificationEventId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CurrentNotificationEventId(";
  out << "eventId=" << to_string(eventId);
  out << ")";
}


NotificationEventsCountRequest::~NotificationEventsCountRequest() throw() {
}


void NotificationEventsCountRequest::__set_fromEventId(const int64_t val) {
  this->fromEventId = val;
}

void NotificationEventsCountRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void NotificationEventsCountRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t NotificationEventsCountRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fromEventId = false;
  bool isset_dbName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fromEventId);
          isset_fromEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fromEventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventsCountRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventsCountRequest");

  xfer += oprot->writeFieldBegin("fromEventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->fromEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventsCountRequest &a, NotificationEventsCountRequest &b) {
  using ::std::swap;
  swap(a.fromEventId, b.fromEventId);
  swap(a.dbName, b.dbName);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other822) {
  fromEventId = other822.fromEventId;
  dbName = other822.dbName;
  catName = other822.catName;
  __isset = other822.__isset;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other823) {
  fromEventId = other823.fromEventId;
  dbName = other823.dbName;
  catName = other823.catName;
  __isset = other823.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other804) {
  fromEventId = other804.fromEventId;
  dbName = other804.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other805) {
  fromEventId = other805.fromEventId;
  dbName = other805.dbName;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other784) {
  fromEventId = other784.fromEventId;
  dbName = other784.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other785) {
  fromEventId = other785.fromEventId;
  dbName = other785.dbName;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other803) {
  fromEventId = other803.fromEventId;
  dbName = other803.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other804) {
  fromEventId = other804.fromEventId;
  dbName = other804.dbName;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other779) {
  fromEventId = other779.fromEventId;
  dbName = other779.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other780) {
  fromEventId = other780.fromEventId;
  dbName = other780.dbName;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other737) {
  fromEventId = other737.fromEventId;
  dbName = other737.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other738) {
  fromEventId = other738.fromEventId;
  dbName = other738.dbName;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other741) {
  fromEventId = other741.fromEventId;
  dbName = other741.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other742) {
  fromEventId = other742.fromEventId;
  dbName = other742.dbName;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other741) {
  fromEventId = other741.fromEventId;
  dbName = other741.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other742) {
  fromEventId = other742.fromEventId;
  dbName = other742.dbName;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other783) {
  fromEventId = other783.fromEventId;
  dbName = other783.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other784) {
  fromEventId = other784.fromEventId;
  dbName = other784.dbName;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other790) {
  fromEventId = other790.fromEventId;
  dbName = other790.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other791) {
  fromEventId = other791.fromEventId;
  dbName = other791.dbName;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NotificationEventsCountRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventsCountRequest(";
  out << "fromEventId=" << to_string(fromEventId);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


NotificationEventsCountResponse::~NotificationEventsCountResponse() throw() {
}


void NotificationEventsCountResponse::__set_eventsCount(const int64_t val) {
  this->eventsCount = val;
}

uint32_t NotificationEventsCountResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventsCount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventsCount);
          isset_eventsCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventsCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventsCountResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventsCountResponse");

  xfer += oprot->writeFieldBegin("eventsCount", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->eventsCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventsCountResponse &a, NotificationEventsCountResponse &b) {
  using ::std::swap;
  swap(a.eventsCount, b.eventsCount);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other824) {
  eventsCount = other824.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other825) {
  eventsCount = other825.eventsCount;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other806) {
  eventsCount = other806.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other807) {
  eventsCount = other807.eventsCount;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other786) {
  eventsCount = other786.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other787) {
  eventsCount = other787.eventsCount;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other805) {
  eventsCount = other805.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other806) {
  eventsCount = other806.eventsCount;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other781) {
  eventsCount = other781.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other782) {
  eventsCount = other782.eventsCount;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other739) {
  eventsCount = other739.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other740) {
  eventsCount = other740.eventsCount;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other743) {
  eventsCount = other743.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other744) {
  eventsCount = other744.eventsCount;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other743) {
  eventsCount = other743.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other744) {
  eventsCount = other744.eventsCount;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other785) {
  eventsCount = other785.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other786) {
  eventsCount = other786.eventsCount;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other792) {
  eventsCount = other792.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other793) {
  eventsCount = other793.eventsCount;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NotificationEventsCountResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventsCountResponse(";
  out << "eventsCount=" << to_string(eventsCount);
  out << ")";
}


InsertEventRequestData::~InsertEventRequestData() throw() {
}


void InsertEventRequestData::__set_replace(const bool val) {
  this->replace = val;
__isset.replace = true;
}

void InsertEventRequestData::__set_filesAdded(const std::vector<std::string> & val) {
  this->filesAdded = val;
}

void InsertEventRequestData::__set_filesAddedChecksum(const std::vector<std::string> & val) {
  this->filesAddedChecksum = val;
__isset.filesAddedChecksum = true;
}

uint32_t InsertEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_filesAdded = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->replace);
          this->__isset.replace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->filesAdded.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size826;
            ::apache::thrift::protocol::TType _etype829;
            xfer += iprot->readListBegin(_etype829, _size826);
            this->filesAdded.resize(_size826);
            uint32_t _i830;
            for (_i830 = 0; _i830 < _size826; ++_i830)
            {
              xfer += iprot->readString(this->filesAdded[_i830]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size808;
            ::apache::thrift::protocol::TType _etype811;
            xfer += iprot->readListBegin(_etype811, _size808);
            this->filesAdded.resize(_size808);
            uint32_t _i812;
            for (_i812 = 0; _i812 < _size808; ++_i812)
            {
              xfer += iprot->readString(this->filesAdded[_i812]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size788;
            ::apache::thrift::protocol::TType _etype791;
            xfer += iprot->readListBegin(_etype791, _size788);
            this->filesAdded.resize(_size788);
            uint32_t _i792;
            for (_i792 = 0; _i792 < _size788; ++_i792)
            {
              xfer += iprot->readString(this->filesAdded[_i792]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size807;
            ::apache::thrift::protocol::TType _etype810;
            xfer += iprot->readListBegin(_etype810, _size807);
            this->filesAdded.resize(_size807);
            uint32_t _i811;
            for (_i811 = 0; _i811 < _size807; ++_i811)
            {
              xfer += iprot->readString(this->filesAdded[_i811]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->filesAdded.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += iprot->readString(this->filesAdded[_i787]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size741;
            ::apache::thrift::protocol::TType _etype744;
            xfer += iprot->readListBegin(_etype744, _size741);
            this->filesAdded.resize(_size741);
            uint32_t _i745;
            for (_i745 = 0; _i745 < _size741; ++_i745)
            {
              xfer += iprot->readString(this->filesAdded[_i745]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size745;
            ::apache::thrift::protocol::TType _etype748;
            xfer += iprot->readListBegin(_etype748, _size745);
            this->filesAdded.resize(_size745);
            uint32_t _i749;
            for (_i749 = 0; _i749 < _size745; ++_i749)
            {
              xfer += iprot->readString(this->filesAdded[_i749]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size745;
            ::apache::thrift::protocol::TType _etype748;
            xfer += iprot->readListBegin(_etype748, _size745);
            this->filesAdded.resize(_size745);
            uint32_t _i749;
            for (_i749 = 0; _i749 < _size745; ++_i749)
            {
              xfer += iprot->readString(this->filesAdded[_i749]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size787;
            ::apache::thrift::protocol::TType _etype790;
            xfer += iprot->readListBegin(_etype790, _size787);
            this->filesAdded.resize(_size787);
            uint32_t _i791;
            for (_i791 = 0; _i791 < _size787; ++_i791)
            {
              xfer += iprot->readString(this->filesAdded[_i791]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size794;
            ::apache::thrift::protocol::TType _etype797;
            xfer += iprot->readListBegin(_etype797, _size794);
            this->filesAdded.resize(_size794);
            uint32_t _i798;
            for (_i798 = 0; _i798 < _size794; ++_i798)
            {
              xfer += iprot->readString(this->filesAdded[_i798]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_filesAdded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->filesAddedChecksum.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size831;
            ::apache::thrift::protocol::TType _etype834;
            xfer += iprot->readListBegin(_etype834, _size831);
            this->filesAddedChecksum.resize(_size831);
            uint32_t _i835;
            for (_i835 = 0; _i835 < _size831; ++_i835)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i835]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size813;
            ::apache::thrift::protocol::TType _etype816;
            xfer += iprot->readListBegin(_etype816, _size813);
            this->filesAddedChecksum.resize(_size813);
            uint32_t _i817;
            for (_i817 = 0; _i817 < _size813; ++_i817)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i817]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size793;
            ::apache::thrift::protocol::TType _etype796;
            xfer += iprot->readListBegin(_etype796, _size793);
            this->filesAddedChecksum.resize(_size793);
            uint32_t _i797;
            for (_i797 = 0; _i797 < _size793; ++_i797)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i797]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size812;
            ::apache::thrift::protocol::TType _etype815;
            xfer += iprot->readListBegin(_etype815, _size812);
            this->filesAddedChecksum.resize(_size812);
            uint32_t _i816;
            for (_i816 = 0; _i816 < _size812; ++_i816)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i816]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size788;
            ::apache::thrift::protocol::TType _etype791;
            xfer += iprot->readListBegin(_etype791, _size788);
            this->filesAddedChecksum.resize(_size788);
            uint32_t _i792;
            for (_i792 = 0; _i792 < _size788; ++_i792)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i792]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size746;
            ::apache::thrift::protocol::TType _etype749;
            xfer += iprot->readListBegin(_etype749, _size746);
            this->filesAddedChecksum.resize(_size746);
            uint32_t _i750;
            for (_i750 = 0; _i750 < _size746; ++_i750)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i750]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size750;
            ::apache::thrift::protocol::TType _etype753;
            xfer += iprot->readListBegin(_etype753, _size750);
            this->filesAddedChecksum.resize(_size750);
            uint32_t _i754;
            for (_i754 = 0; _i754 < _size750; ++_i754)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i754]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size750;
            ::apache::thrift::protocol::TType _etype753;
            xfer += iprot->readListBegin(_etype753, _size750);
            this->filesAddedChecksum.resize(_size750);
            uint32_t _i754;
            for (_i754 = 0; _i754 < _size750; ++_i754)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i754]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size792;
            ::apache::thrift::protocol::TType _etype795;
            xfer += iprot->readListBegin(_etype795, _size792);
            this->filesAddedChecksum.resize(_size792);
            uint32_t _i796;
            for (_i796 = 0; _i796 < _size792; ++_i796)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i796]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size799;
            ::apache::thrift::protocol::TType _etype802;
            xfer += iprot->readListBegin(_etype802, _size799);
            this->filesAddedChecksum.resize(_size799);
            uint32_t _i803;
            for (_i803 = 0; _i803 < _size799; ++_i803)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i803]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.filesAddedChecksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_filesAdded)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InsertEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InsertEventRequestData");

  if (this->__isset.replace) {
    xfer += oprot->writeFieldBegin("replace", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->replace);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("filesAdded", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->filesAdded.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter836;
    for (_iter836 = this->filesAdded.begin(); _iter836 != this->filesAdded.end(); ++_iter836)
    {
      xfer += oprot->writeString((*_iter836));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter818;
    for (_iter818 = this->filesAdded.begin(); _iter818 != this->filesAdded.end(); ++_iter818)
    {
      xfer += oprot->writeString((*_iter818));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter798;
    for (_iter798 = this->filesAdded.begin(); _iter798 != this->filesAdded.end(); ++_iter798)
    {
      xfer += oprot->writeString((*_iter798));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<std::string> ::const_iterator _iter817;
    for (_iter817 = this->filesAdded.begin(); _iter817 != this->filesAdded.end(); ++_iter817)
    {
      xfer += oprot->writeString((*_iter817));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter793;
    for (_iter793 = this->filesAdded.begin(); _iter793 != this->filesAdded.end(); ++_iter793)
    {
      xfer += oprot->writeString((*_iter793));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<std::string> ::const_iterator _iter751;
    for (_iter751 = this->filesAdded.begin(); _iter751 != this->filesAdded.end(); ++_iter751)
    {
      xfer += oprot->writeString((*_iter751));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter755;
    for (_iter755 = this->filesAdded.begin(); _iter755 != this->filesAdded.end(); ++_iter755)
    {
      xfer += oprot->writeString((*_iter755));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter755;
    for (_iter755 = this->filesAdded.begin(); _iter755 != this->filesAdded.end(); ++_iter755)
    {
      xfer += oprot->writeString((*_iter755));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<std::string> ::const_iterator _iter797;
    for (_iter797 = this->filesAdded.begin(); _iter797 != this->filesAdded.end(); ++_iter797)
    {
      xfer += oprot->writeString((*_iter797));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<std::string> ::const_iterator _iter804;
    for (_iter804 = this->filesAdded.begin(); _iter804 != this->filesAdded.end(); ++_iter804)
    {
      xfer += oprot->writeString((*_iter804));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.filesAddedChecksum) {
    xfer += oprot->writeFieldBegin("filesAddedChecksum", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->filesAddedChecksum.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter837;
      for (_iter837 = this->filesAddedChecksum.begin(); _iter837 != this->filesAddedChecksum.end(); ++_iter837)
      {
        xfer += oprot->writeString((*_iter837));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter819;
      for (_iter819 = this->filesAddedChecksum.begin(); _iter819 != this->filesAddedChecksum.end(); ++_iter819)
      {
        xfer += oprot->writeString((*_iter819));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter799;
      for (_iter799 = this->filesAddedChecksum.begin(); _iter799 != this->filesAddedChecksum.end(); ++_iter799)
      {
        xfer += oprot->writeString((*_iter799));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<std::string> ::const_iterator _iter818;
      for (_iter818 = this->filesAddedChecksum.begin(); _iter818 != this->filesAddedChecksum.end(); ++_iter818)
      {
        xfer += oprot->writeString((*_iter818));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter794;
      for (_iter794 = this->filesAddedChecksum.begin(); _iter794 != this->filesAddedChecksum.end(); ++_iter794)
      {
        xfer += oprot->writeString((*_iter794));
=======
      std::vector<std::string> ::const_iterator _iter752;
      for (_iter752 = this->filesAddedChecksum.begin(); _iter752 != this->filesAddedChecksum.end(); ++_iter752)
      {
        xfer += oprot->writeString((*_iter752));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter756;
      for (_iter756 = this->filesAddedChecksum.begin(); _iter756 != this->filesAddedChecksum.end(); ++_iter756)
      {
        xfer += oprot->writeString((*_iter756));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter752;
      for (_iter752 = this->filesAddedChecksum.begin(); _iter752 != this->filesAddedChecksum.end(); ++_iter752)
      {
        xfer += oprot->writeString((*_iter752));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter756;
      for (_iter756 = this->filesAddedChecksum.begin(); _iter756 != this->filesAddedChecksum.end(); ++_iter756)
      {
        xfer += oprot->writeString((*_iter756));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<std::string> ::const_iterator _iter798;
      for (_iter798 = this->filesAddedChecksum.begin(); _iter798 != this->filesAddedChecksum.end(); ++_iter798)
      {
        xfer += oprot->writeString((*_iter798));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<std::string> ::const_iterator _iter805;
      for (_iter805 = this->filesAddedChecksum.begin(); _iter805 != this->filesAddedChecksum.end(); ++_iter805)
      {
        xfer += oprot->writeString((*_iter805));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InsertEventRequestData &a, InsertEventRequestData &b) {
  using ::std::swap;
  swap(a.replace, b.replace);
  swap(a.filesAdded, b.filesAdded);
  swap(a.filesAddedChecksum, b.filesAddedChecksum);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other838) {
  replace = other838.replace;
  filesAdded = other838.filesAdded;
  filesAddedChecksum = other838.filesAddedChecksum;
  __isset = other838.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other839) {
  replace = other839.replace;
  filesAdded = other839.filesAdded;
  filesAddedChecksum = other839.filesAddedChecksum;
  __isset = other839.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other820) {
  replace = other820.replace;
  filesAdded = other820.filesAdded;
  filesAddedChecksum = other820.filesAddedChecksum;
  __isset = other820.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other821) {
  replace = other821.replace;
  filesAdded = other821.filesAdded;
  filesAddedChecksum = other821.filesAddedChecksum;
  __isset = other821.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other800) {
  replace = other800.replace;
  filesAdded = other800.filesAdded;
  filesAddedChecksum = other800.filesAddedChecksum;
  __isset = other800.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other801) {
  replace = other801.replace;
  filesAdded = other801.filesAdded;
  filesAddedChecksum = other801.filesAddedChecksum;
  __isset = other801.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other819) {
  replace = other819.replace;
  filesAdded = other819.filesAdded;
  filesAddedChecksum = other819.filesAddedChecksum;
  __isset = other819.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other820) {
  replace = other820.replace;
  filesAdded = other820.filesAdded;
  filesAddedChecksum = other820.filesAddedChecksum;
  __isset = other820.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other795) {
  replace = other795.replace;
  filesAdded = other795.filesAdded;
  filesAddedChecksum = other795.filesAddedChecksum;
  __isset = other795.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other796) {
  replace = other796.replace;
  filesAdded = other796.filesAdded;
  filesAddedChecksum = other796.filesAddedChecksum;
  __isset = other796.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other753) {
  replace = other753.replace;
  filesAdded = other753.filesAdded;
  filesAddedChecksum = other753.filesAddedChecksum;
  __isset = other753.__isset;
<<<<<<< HEAD
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other754) {
  replace = other754.replace;
  filesAdded = other754.filesAdded;
  filesAddedChecksum = other754.filesAddedChecksum;
  __isset = other754.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other757) {
  replace = other757.replace;
  filesAdded = other757.filesAdded;
  filesAddedChecksum = other757.filesAddedChecksum;
  __isset = other757.__isset;
<<<<<<< HEAD
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other758) {
  replace = other758.replace;
  filesAdded = other758.filesAdded;
  filesAddedChecksum = other758.filesAddedChecksum;
  __isset = other758.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other754) {
  replace = other754.replace;
  filesAdded = other754.filesAdded;
  filesAddedChecksum = other754.filesAddedChecksum;
  __isset = other754.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other758) {
  replace = other758.replace;
  filesAdded = other758.filesAdded;
  filesAddedChecksum = other758.filesAddedChecksum;
  __isset = other758.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other799) {
  replace = other799.replace;
  filesAdded = other799.filesAdded;
  filesAddedChecksum = other799.filesAddedChecksum;
  __isset = other799.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other800) {
  replace = other800.replace;
  filesAdded = other800.filesAdded;
  filesAddedChecksum = other800.filesAddedChecksum;
  __isset = other800.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other806) {
  replace = other806.replace;
  filesAdded = other806.filesAdded;
  filesAddedChecksum = other806.filesAddedChecksum;
  __isset = other806.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other807) {
  replace = other807.replace;
  filesAdded = other807.filesAdded;
  filesAddedChecksum = other807.filesAddedChecksum;
  __isset = other807.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void InsertEventRequestData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InsertEventRequestData(";
  out << "replace="; (__isset.replace ? (out << to_string(replace)) : (out << "<null>"));
  out << ", " << "filesAdded=" << to_string(filesAdded);
  out << ", " << "filesAddedChecksum="; (__isset.filesAddedChecksum ? (out << to_string(filesAddedChecksum)) : (out << "<null>"));
  out << ")";
}


FireEventRequestData::~FireEventRequestData() throw() {
}


void FireEventRequestData::__set_insertData(const InsertEventRequestData& val) {
  this->insertData = val;
}

uint32_t FireEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->insertData.read(iprot);
          this->__isset.insertData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FireEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FireEventRequestData");

  xfer += oprot->writeFieldBegin("insertData", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->insertData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FireEventRequestData &a, FireEventRequestData &b) {
  using ::std::swap;
  swap(a.insertData, b.insertData);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other840) {
  insertData = other840.insertData;
  __isset = other840.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other841) {
  insertData = other841.insertData;
  __isset = other841.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other822) {
  insertData = other822.insertData;
  __isset = other822.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other823) {
  insertData = other823.insertData;
  __isset = other823.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other802) {
  insertData = other802.insertData;
  __isset = other802.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other803) {
  insertData = other803.insertData;
  __isset = other803.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other821) {
  insertData = other821.insertData;
  __isset = other821.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other822) {
  insertData = other822.insertData;
  __isset = other822.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other797) {
  insertData = other797.insertData;
  __isset = other797.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other798) {
  insertData = other798.insertData;
  __isset = other798.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other755) {
  insertData = other755.insertData;
  __isset = other755.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other756) {
  insertData = other756.insertData;
  __isset = other756.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other759) {
  insertData = other759.insertData;
  __isset = other759.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other760) {
  insertData = other760.insertData;
  __isset = other760.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other759) {
  insertData = other759.insertData;
  __isset = other759.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other760) {
  insertData = other760.insertData;
  __isset = other760.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other801) {
  insertData = other801.insertData;
  __isset = other801.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other802) {
  insertData = other802.insertData;
  __isset = other802.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other808) {
  insertData = other808.insertData;
  __isset = other808.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other809) {
  insertData = other809.insertData;
  __isset = other809.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void FireEventRequestData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventRequestData(";
  out << "insertData=" << to_string(insertData);
  out << ")";
}


FireEventRequest::~FireEventRequest() throw() {
}


void FireEventRequest::__set_successful(const bool val) {
  this->successful = val;
}

void FireEventRequest::__set_data(const FireEventRequestData& val) {
  this->data = val;
}

void FireEventRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}

void FireEventRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void FireEventRequest::__set_partitionVals(const std::vector<std::string> & val) {
  this->partitionVals = val;
__isset.partitionVals = true;
}

void FireEventRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_successful = false;
  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->successful);
          isset_successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionVals.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size842;
            ::apache::thrift::protocol::TType _etype845;
            xfer += iprot->readListBegin(_etype845, _size842);
            this->partitionVals.resize(_size842);
            uint32_t _i846;
            for (_i846 = 0; _i846 < _size842; ++_i846)
            {
              xfer += iprot->readString(this->partitionVals[_i846]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size824;
            ::apache::thrift::protocol::TType _etype827;
            xfer += iprot->readListBegin(_etype827, _size824);
            this->partitionVals.resize(_size824);
            uint32_t _i828;
            for (_i828 = 0; _i828 < _size824; ++_i828)
            {
              xfer += iprot->readString(this->partitionVals[_i828]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size804;
            ::apache::thrift::protocol::TType _etype807;
            xfer += iprot->readListBegin(_etype807, _size804);
            this->partitionVals.resize(_size804);
            uint32_t _i808;
            for (_i808 = 0; _i808 < _size804; ++_i808)
            {
              xfer += iprot->readString(this->partitionVals[_i808]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size823;
            ::apache::thrift::protocol::TType _etype826;
            xfer += iprot->readListBegin(_etype826, _size823);
            this->partitionVals.resize(_size823);
            uint32_t _i827;
            for (_i827 = 0; _i827 < _size823; ++_i827)
            {
              xfer += iprot->readString(this->partitionVals[_i827]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size799;
            ::apache::thrift::protocol::TType _etype802;
            xfer += iprot->readListBegin(_etype802, _size799);
            this->partitionVals.resize(_size799);
            uint32_t _i803;
            for (_i803 = 0; _i803 < _size799; ++_i803)
            {
              xfer += iprot->readString(this->partitionVals[_i803]);
=======
            uint32_t _size757;
            ::apache::thrift::protocol::TType _etype760;
            xfer += iprot->readListBegin(_etype760, _size757);
            this->partitionVals.resize(_size757);
            uint32_t _i761;
            for (_i761 = 0; _i761 < _size757; ++_i761)
            {
              xfer += iprot->readString(this->partitionVals[_i761]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size761;
            ::apache::thrift::protocol::TType _etype764;
            xfer += iprot->readListBegin(_etype764, _size761);
            this->partitionVals.resize(_size761);
            uint32_t _i765;
            for (_i765 = 0; _i765 < _size761; ++_i765)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->partitionVals[_i765]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size757;
            ::apache::thrift::protocol::TType _etype760;
            xfer += iprot->readListBegin(_etype760, _size757);
            this->partitionVals.resize(_size757);
            uint32_t _i761;
            for (_i761 = 0; _i761 < _size757; ++_i761)
            {
              xfer += iprot->readString(this->partitionVals[_i761]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readString(this->partitionVals[_i765]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size803;
            ::apache::thrift::protocol::TType _etype806;
            xfer += iprot->readListBegin(_etype806, _size803);
            this->partitionVals.resize(_size803);
            uint32_t _i807;
            for (_i807 = 0; _i807 < _size803; ++_i807)
            {
              xfer += iprot->readString(this->partitionVals[_i807]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size810;
            ::apache::thrift::protocol::TType _etype813;
            xfer += iprot->readListBegin(_etype813, _size810);
            this->partitionVals.resize(_size810);
            uint32_t _i814;
            for (_i814 = 0; _i814 < _size810; ++_i814)
            {
              xfer += iprot->readString(this->partitionVals[_i814]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitionVals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_successful)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FireEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FireEventRequest");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->successful);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dbName) {
    xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->dbName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionVals) {
    xfer += oprot->writeFieldBegin("partitionVals", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionVals.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter847;
      for (_iter847 = this->partitionVals.begin(); _iter847 != this->partitionVals.end(); ++_iter847)
      {
        xfer += oprot->writeString((*_iter847));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter829;
      for (_iter829 = this->partitionVals.begin(); _iter829 != this->partitionVals.end(); ++_iter829)
      {
        xfer += oprot->writeString((*_iter829));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter809;
      for (_iter809 = this->partitionVals.begin(); _iter809 != this->partitionVals.end(); ++_iter809)
      {
        xfer += oprot->writeString((*_iter809));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<std::string> ::const_iterator _iter828;
      for (_iter828 = this->partitionVals.begin(); _iter828 != this->partitionVals.end(); ++_iter828)
      {
        xfer += oprot->writeString((*_iter828));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter804;
      for (_iter804 = this->partitionVals.begin(); _iter804 != this->partitionVals.end(); ++_iter804)
      {
        xfer += oprot->writeString((*_iter804));
=======
      std::vector<std::string> ::const_iterator _iter762;
      for (_iter762 = this->partitionVals.begin(); _iter762 != this->partitionVals.end(); ++_iter762)
      {
        xfer += oprot->writeString((*_iter762));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter766;
      for (_iter766 = this->partitionVals.begin(); _iter766 != this->partitionVals.end(); ++_iter766)
      {
        xfer += oprot->writeString((*_iter766));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter762;
      for (_iter762 = this->partitionVals.begin(); _iter762 != this->partitionVals.end(); ++_iter762)
      {
        xfer += oprot->writeString((*_iter762));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter766;
      for (_iter766 = this->partitionVals.begin(); _iter766 != this->partitionVals.end(); ++_iter766)
      {
        xfer += oprot->writeString((*_iter766));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<std::string> ::const_iterator _iter808;
      for (_iter808 = this->partitionVals.begin(); _iter808 != this->partitionVals.end(); ++_iter808)
      {
        xfer += oprot->writeString((*_iter808));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<std::string> ::const_iterator _iter815;
      for (_iter815 = this->partitionVals.begin(); _iter815 != this->partitionVals.end(); ++_iter815)
      {
        xfer += oprot->writeString((*_iter815));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FireEventRequest &a, FireEventRequest &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.data, b.data);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partitionVals, b.partitionVals);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequest::FireEventRequest(const FireEventRequest& other848) {
  successful = other848.successful;
  data = other848.data;
  dbName = other848.dbName;
  tableName = other848.tableName;
  partitionVals = other848.partitionVals;
  catName = other848.catName;
  __isset = other848.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other849) {
  successful = other849.successful;
  data = other849.data;
  dbName = other849.dbName;
  tableName = other849.tableName;
  partitionVals = other849.partitionVals;
  catName = other849.catName;
  __isset = other849.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
FireEventRequest::FireEventRequest(const FireEventRequest& other830) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
FireEventRequest::FireEventRequest(const FireEventRequest& other810) {
  successful = other810.successful;
  data = other810.data;
  dbName = other810.dbName;
  tableName = other810.tableName;
  partitionVals = other810.partitionVals;
  __isset = other810.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other811) {
  successful = other811.successful;
  data = other811.data;
  dbName = other811.dbName;
  tableName = other811.tableName;
  partitionVals = other811.partitionVals;
  __isset = other811.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
FireEventRequest::FireEventRequest(const FireEventRequest& other829) {
  successful = other829.successful;
  data = other829.data;
  dbName = other829.dbName;
  tableName = other829.tableName;
  partitionVals = other829.partitionVals;
  __isset = other829.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other830) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  successful = other830.successful;
  data = other830.data;
  dbName = other830.dbName;
  tableName = other830.tableName;
  partitionVals = other830.partitionVals;
  __isset = other830.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other831) {
  successful = other831.successful;
  data = other831.data;
  dbName = other831.dbName;
  tableName = other831.tableName;
  partitionVals = other831.partitionVals;
  __isset = other831.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequest::FireEventRequest(const FireEventRequest& other805) {
  successful = other805.successful;
  data = other805.data;
  dbName = other805.dbName;
  tableName = other805.tableName;
  partitionVals = other805.partitionVals;
  __isset = other805.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other806) {
  successful = other806.successful;
  data = other806.data;
  dbName = other806.dbName;
  tableName = other806.tableName;
  partitionVals = other806.partitionVals;
  __isset = other806.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
FireEventRequest::FireEventRequest(const FireEventRequest& other763) {
  successful = other763.successful;
  data = other763.data;
  dbName = other763.dbName;
  tableName = other763.tableName;
  partitionVals = other763.partitionVals;
  __isset = other763.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other764) {
  successful = other764.successful;
  data = other764.data;
  dbName = other764.dbName;
  tableName = other764.tableName;
  partitionVals = other764.partitionVals;
  __isset = other764.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
FireEventRequest::FireEventRequest(const FireEventRequest& other767) {
  successful = other767.successful;
  data = other767.data;
  dbName = other767.dbName;
  tableName = other767.tableName;
  partitionVals = other767.partitionVals;
  __isset = other767.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other768) {
  successful = other768.successful;
  data = other768.data;
  dbName = other768.dbName;
  tableName = other768.tableName;
  partitionVals = other768.partitionVals;
  __isset = other768.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
FireEventRequest::FireEventRequest(const FireEventRequest& other809) {
  successful = other809.successful;
  data = other809.data;
  dbName = other809.dbName;
  tableName = other809.tableName;
  partitionVals = other809.partitionVals;
  __isset = other809.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other810) {
  successful = other810.successful;
  data = other810.data;
  dbName = other810.dbName;
  tableName = other810.tableName;
  partitionVals = other810.partitionVals;
  __isset = other810.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
FireEventRequest::FireEventRequest(const FireEventRequest& other816) {
  successful = other816.successful;
  data = other816.data;
  dbName = other816.dbName;
  tableName = other816.tableName;
  partitionVals = other816.partitionVals;
  __isset = other816.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other817) {
  successful = other817.successful;
  data = other817.data;
  dbName = other817.dbName;
  tableName = other817.tableName;
  partitionVals = other817.partitionVals;
  __isset = other817.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void FireEventRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventRequest(";
  out << "successful=" << to_string(successful);
  out << ", " << "data=" << to_string(data);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "partitionVals="; (__isset.partitionVals ? (out << to_string(partitionVals)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


FireEventResponse::~FireEventResponse() throw() {
}


uint32_t FireEventResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FireEventResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FireEventResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FireEventResponse &a, FireEventResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventResponse::FireEventResponse(const FireEventResponse& other850) {
  (void) other850;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other851) {
  (void) other851;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
FireEventResponse::FireEventResponse(const FireEventResponse& other832) {
  (void) other832;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other833) {
  (void) other833;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
FireEventResponse::FireEventResponse(const FireEventResponse& other812) {
  (void) other812;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other813) {
  (void) other813;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
FireEventResponse::FireEventResponse(const FireEventResponse& other831) {
  (void) other831;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other832) {
  (void) other832;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventResponse::FireEventResponse(const FireEventResponse& other807) {
  (void) other807;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other808) {
  (void) other808;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
FireEventResponse::FireEventResponse(const FireEventResponse& other765) {
  (void) other765;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other766) {
  (void) other766;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventResponse::FireEventResponse(const FireEventResponse& other769) {
  (void) other769;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other770) {
  (void) other770;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventResponse::FireEventResponse(const FireEventResponse& other769) {
  (void) other769;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other770) {
  (void) other770;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
FireEventResponse::FireEventResponse(const FireEventResponse& other811) {
  (void) other811;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other812) {
  (void) other812;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
FireEventResponse::FireEventResponse(const FireEventResponse& other818) {
  (void) other818;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other819) {
  (void) other819;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void FireEventResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventResponse(";
  out << ")";
}


MetadataPpdResult::~MetadataPpdResult() throw() {
}


void MetadataPpdResult::__set_metadata(const std::string& val) {
  this->metadata = val;
__isset.metadata = true;
}

void MetadataPpdResult::__set_includeBitset(const std::string& val) {
  this->includeBitset = val;
__isset.includeBitset = true;
}

uint32_t MetadataPpdResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->metadata);
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->includeBitset);
          this->__isset.includeBitset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataPpdResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataPpdResult");

  if (this->__isset.metadata) {
    xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->metadata);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.includeBitset) {
    xfer += oprot->writeFieldBegin("includeBitset", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->includeBitset);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MetadataPpdResult &a, MetadataPpdResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.includeBitset, b.includeBitset);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other852) {
  metadata = other852.metadata;
  includeBitset = other852.includeBitset;
  __isset = other852.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other853) {
  metadata = other853.metadata;
  includeBitset = other853.includeBitset;
  __isset = other853.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other834) {
  metadata = other834.metadata;
  includeBitset = other834.includeBitset;
  __isset = other834.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other835) {
  metadata = other835.metadata;
  includeBitset = other835.includeBitset;
  __isset = other835.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other814) {
  metadata = other814.metadata;
  includeBitset = other814.includeBitset;
  __isset = other814.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other815) {
  metadata = other815.metadata;
  includeBitset = other815.includeBitset;
  __isset = other815.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other833) {
  metadata = other833.metadata;
  includeBitset = other833.includeBitset;
  __isset = other833.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other834) {
  metadata = other834.metadata;
  includeBitset = other834.includeBitset;
  __isset = other834.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
  return *this;
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other809) {
  metadata = other809.metadata;
  includeBitset = other809.includeBitset;
  __isset = other809.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other810) {
  metadata = other810.metadata;
  includeBitset = other810.includeBitset;
  __isset = other810.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other767) {
  metadata = other767.metadata;
  includeBitset = other767.includeBitset;
  __isset = other767.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other768) {
  metadata = other768.metadata;
  includeBitset = other768.includeBitset;
  __isset = other768.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other771) {
  metadata = other771.metadata;
  includeBitset = other771.includeBitset;
  __isset = other771.__isset;
}
=======
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other771) {
  metadata = other771.metadata;
  includeBitset = other771.includeBitset;
  __isset = other771.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other772) {
  metadata = other772.metadata;
  includeBitset = other772.includeBitset;
  __isset = other772.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other768) {
  metadata = other768.metadata;
  includeBitset = other768.includeBitset;
  __isset = other768.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other813) {
  metadata = other813.metadata;
  includeBitset = other813.includeBitset;
  __isset = other813.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other814) {
  metadata = other814.metadata;
  includeBitset = other814.includeBitset;
  __isset = other814.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other820) {
  metadata = other820.metadata;
  includeBitset = other820.includeBitset;
  __isset = other820.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other821) {
  metadata = other821.metadata;
  includeBitset = other821.includeBitset;
  __isset = other821.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void MetadataPpdResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetadataPpdResult(";
  out << "metadata="; (__isset.metadata ? (out << to_string(metadata)) : (out << "<null>"));
  out << ", " << "includeBitset="; (__isset.includeBitset ? (out << to_string(includeBitset)) : (out << "<null>"));
  out << ")";
}


GetFileMetadataByExprResult::~GetFileMetadataByExprResult() throw() {
}


void GetFileMetadataByExprResult::__set_metadata(const std::map<int64_t, MetadataPpdResult> & val) {
  this->metadata = val;
}

void GetFileMetadataByExprResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}

uint32_t GetFileMetadataByExprResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_metadata = false;
  bool isset_isSupported = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metadata.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size854;
            ::apache::thrift::protocol::TType _ktype855;
            ::apache::thrift::protocol::TType _vtype856;
            xfer += iprot->readMapBegin(_ktype855, _vtype856, _size854);
            uint32_t _i858;
            for (_i858 = 0; _i858 < _size854; ++_i858)
            {
              int64_t _key859;
              xfer += iprot->readI64(_key859);
              MetadataPpdResult& _val860 = this->metadata[_key859];
              xfer += _val860.read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size836;
            ::apache::thrift::protocol::TType _ktype837;
            ::apache::thrift::protocol::TType _vtype838;
            xfer += iprot->readMapBegin(_ktype837, _vtype838, _size836);
            uint32_t _i840;
            for (_i840 = 0; _i840 < _size836; ++_i840)
            {
              int64_t _key841;
              xfer += iprot->readI64(_key841);
              MetadataPpdResult& _val842 = this->metadata[_key841];
              xfer += _val842.read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size816;
            ::apache::thrift::protocol::TType _ktype817;
            ::apache::thrift::protocol::TType _vtype818;
            xfer += iprot->readMapBegin(_ktype817, _vtype818, _size816);
            uint32_t _i820;
            for (_i820 = 0; _i820 < _size816; ++_i820)
            {
              int64_t _key821;
              xfer += iprot->readI64(_key821);
              MetadataPpdResult& _val822 = this->metadata[_key821];
              xfer += _val822.read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size835;
            ::apache::thrift::protocol::TType _ktype836;
            ::apache::thrift::protocol::TType _vtype837;
            xfer += iprot->readMapBegin(_ktype836, _vtype837, _size835);
            uint32_t _i839;
            for (_i839 = 0; _i839 < _size835; ++_i839)
            {
              int64_t _key840;
              xfer += iprot->readI64(_key840);
              MetadataPpdResult& _val841 = this->metadata[_key840];
              xfer += _val841.read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size811;
            ::apache::thrift::protocol::TType _ktype812;
            ::apache::thrift::protocol::TType _vtype813;
            xfer += iprot->readMapBegin(_ktype812, _vtype813, _size811);
            uint32_t _i815;
            for (_i815 = 0; _i815 < _size811; ++_i815)
            {
              int64_t _key816;
              xfer += iprot->readI64(_key816);
              MetadataPpdResult& _val817 = this->metadata[_key816];
              xfer += _val817.read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size769;
            ::apache::thrift::protocol::TType _ktype770;
            ::apache::thrift::protocol::TType _vtype771;
            xfer += iprot->readMapBegin(_ktype770, _vtype771, _size769);
            uint32_t _i773;
            for (_i773 = 0; _i773 < _size769; ++_i773)
<<<<<<< HEAD
            {
              int64_t _key774;
              xfer += iprot->readI64(_key774);
              MetadataPpdResult& _val775 = this->metadata[_key774];
              xfer += _val775.read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size773;
            ::apache::thrift::protocol::TType _ktype774;
            ::apache::thrift::protocol::TType _vtype775;
            xfer += iprot->readMapBegin(_ktype774, _vtype775, _size773);
            uint32_t _i777;
            for (_i777 = 0; _i777 < _size773; ++_i777)
<<<<<<< HEAD
            {
              int64_t _key778;
              xfer += iprot->readI64(_key778);
              MetadataPpdResult& _val779 = this->metadata[_key778];
              xfer += _val779.read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              int64_t _key774;
              xfer += iprot->readI64(_key774);
              MetadataPpdResult& _val775 = this->metadata[_key774];
              xfer += _val775.read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              int64_t _key778;
              xfer += iprot->readI64(_key778);
              MetadataPpdResult& _val779 = this->metadata[_key778];
              xfer += _val779.read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size815;
            ::apache::thrift::protocol::TType _ktype816;
            ::apache::thrift::protocol::TType _vtype817;
            xfer += iprot->readMapBegin(_ktype816, _vtype817, _size815);
            uint32_t _i819;
            for (_i819 = 0; _i819 < _size815; ++_i819)
            {
              int64_t _key820;
              xfer += iprot->readI64(_key820);
              MetadataPpdResult& _val821 = this->metadata[_key820];
              xfer += _val821.read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size822;
            ::apache::thrift::protocol::TType _ktype823;
            ::apache::thrift::protocol::TType _vtype824;
            xfer += iprot->readMapBegin(_ktype823, _vtype824, _size822);
            uint32_t _i826;
            for (_i826 = 0; _i826 < _size822; ++_i826)
            {
              int64_t _key827;
              xfer += iprot->readI64(_key827);
              MetadataPpdResult& _val828 = this->metadata[_key827];
              xfer += _val828.read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readMapEnd();
          }
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSupported);
          isset_isSupported = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isSupported)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataByExprResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataByExprResult");

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->metadata.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter861;
    for (_iter861 = this->metadata.begin(); _iter861 != this->metadata.end(); ++_iter861)
    {
      xfer += oprot->writeI64(_iter861->first);
      xfer += _iter861->second.write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter843;
    for (_iter843 = this->metadata.begin(); _iter843 != this->metadata.end(); ++_iter843)
    {
      xfer += oprot->writeI64(_iter843->first);
      xfer += _iter843->second.write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter823;
    for (_iter823 = this->metadata.begin(); _iter823 != this->metadata.end(); ++_iter823)
    {
      xfer += oprot->writeI64(_iter823->first);
      xfer += _iter823->second.write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter842;
    for (_iter842 = this->metadata.begin(); _iter842 != this->metadata.end(); ++_iter842)
    {
      xfer += oprot->writeI64(_iter842->first);
      xfer += _iter842->second.write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter818;
    for (_iter818 = this->metadata.begin(); _iter818 != this->metadata.end(); ++_iter818)
    {
      xfer += oprot->writeI64(_iter818->first);
      xfer += _iter818->second.write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter776;
    for (_iter776 = this->metadata.begin(); _iter776 != this->metadata.end(); ++_iter776)
    {
      xfer += oprot->writeI64(_iter776->first);
      xfer += _iter776->second.write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter780;
    for (_iter780 = this->metadata.begin(); _iter780 != this->metadata.end(); ++_iter780)
    {
      xfer += oprot->writeI64(_iter780->first);
      xfer += _iter780->second.write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter780;
    for (_iter780 = this->metadata.begin(); _iter780 != this->metadata.end(); ++_iter780)
    {
      xfer += oprot->writeI64(_iter780->first);
      xfer += _iter780->second.write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter822;
    for (_iter822 = this->metadata.begin(); _iter822 != this->metadata.end(); ++_iter822)
    {
      xfer += oprot->writeI64(_iter822->first);
      xfer += _iter822->second.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter829;
    for (_iter829 = this->metadata.begin(); _iter829 != this->metadata.end(); ++_iter829)
    {
      xfer += oprot->writeI64(_iter829->first);
      xfer += _iter829->second.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSupported", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isSupported);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataByExprResult &a, GetFileMetadataByExprResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.isSupported, b.isSupported);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other862) {
  metadata = other862.metadata;
  isSupported = other862.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other863) {
  metadata = other863.metadata;
  isSupported = other863.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other844) {
  metadata = other844.metadata;
  isSupported = other844.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other845) {
  metadata = other845.metadata;
  isSupported = other845.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other824) {
  metadata = other824.metadata;
  isSupported = other824.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other825) {
  metadata = other825.metadata;
  isSupported = other825.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other843) {
  metadata = other843.metadata;
  isSupported = other843.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other844) {
  metadata = other844.metadata;
  isSupported = other844.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other819) {
  metadata = other819.metadata;
  isSupported = other819.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other820) {
  metadata = other820.metadata;
  isSupported = other820.isSupported;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other777) {
  metadata = other777.metadata;
  isSupported = other777.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other778) {
  metadata = other778.metadata;
  isSupported = other778.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other781) {
  metadata = other781.metadata;
  isSupported = other781.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other782) {
  metadata = other782.metadata;
  isSupported = other782.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other781) {
  metadata = other781.metadata;
  isSupported = other781.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other782) {
  metadata = other782.metadata;
  isSupported = other782.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other823) {
  metadata = other823.metadata;
  isSupported = other823.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other824) {
  metadata = other824.metadata;
  isSupported = other824.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other830) {
  metadata = other830.metadata;
  isSupported = other830.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other831) {
  metadata = other831.metadata;
  isSupported = other831.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetFileMetadataByExprResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataByExprResult(";
  out << "metadata=" << to_string(metadata);
  out << ", " << "isSupported=" << to_string(isSupported);
  out << ")";
}


GetFileMetadataByExprRequest::~GetFileMetadataByExprRequest() throw() {
}


void GetFileMetadataByExprRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

void GetFileMetadataByExprRequest::__set_expr(const std::string& val) {
  this->expr = val;
}

void GetFileMetadataByExprRequest::__set_doGetFooters(const bool val) {
  this->doGetFooters = val;
__isset.doGetFooters = true;
}

void GetFileMetadataByExprRequest::__set_type(const FileMetadataExprType::type val) {
  this->type = val;
__isset.type = true;
}

uint32_t GetFileMetadataByExprRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;
  bool isset_expr = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size864;
            ::apache::thrift::protocol::TType _etype867;
            xfer += iprot->readListBegin(_etype867, _size864);
            this->fileIds.resize(_size864);
            uint32_t _i868;
            for (_i868 = 0; _i868 < _size864; ++_i868)
            {
              xfer += iprot->readI64(this->fileIds[_i868]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size846;
            ::apache::thrift::protocol::TType _etype849;
            xfer += iprot->readListBegin(_etype849, _size846);
            this->fileIds.resize(_size846);
            uint32_t _i850;
            for (_i850 = 0; _i850 < _size846; ++_i850)
            {
              xfer += iprot->readI64(this->fileIds[_i850]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size826;
            ::apache::thrift::protocol::TType _etype829;
            xfer += iprot->readListBegin(_etype829, _size826);
            this->fileIds.resize(_size826);
            uint32_t _i830;
            for (_i830 = 0; _i830 < _size826; ++_i830)
            {
              xfer += iprot->readI64(this->fileIds[_i830]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size845;
            ::apache::thrift::protocol::TType _etype848;
            xfer += iprot->readListBegin(_etype848, _size845);
            this->fileIds.resize(_size845);
            uint32_t _i849;
            for (_i849 = 0; _i849 < _size845; ++_i849)
            {
              xfer += iprot->readI64(this->fileIds[_i849]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size821;
            ::apache::thrift::protocol::TType _etype824;
            xfer += iprot->readListBegin(_etype824, _size821);
            this->fileIds.resize(_size821);
            uint32_t _i825;
            for (_i825 = 0; _i825 < _size821; ++_i825)
            {
              xfer += iprot->readI64(this->fileIds[_i825]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size779;
            ::apache::thrift::protocol::TType _etype782;
            xfer += iprot->readListBegin(_etype782, _size779);
            this->fileIds.resize(_size779);
            uint32_t _i783;
            for (_i783 = 0; _i783 < _size779; ++_i783)
            {
              xfer += iprot->readI64(this->fileIds[_i783]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->fileIds.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += iprot->readI64(this->fileIds[_i787]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->fileIds.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += iprot->readI64(this->fileIds[_i787]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size825;
            ::apache::thrift::protocol::TType _etype828;
            xfer += iprot->readListBegin(_etype828, _size825);
            this->fileIds.resize(_size825);
            uint32_t _i829;
            for (_i829 = 0; _i829 < _size825; ++_i829)
            {
              xfer += iprot->readI64(this->fileIds[_i829]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size832;
            ::apache::thrift::protocol::TType _etype835;
            xfer += iprot->readListBegin(_etype835, _size832);
            this->fileIds.resize(_size832);
            uint32_t _i836;
            for (_i836 = 0; _i836 < _size832; ++_i836)
            {
              xfer += iprot->readI64(this->fileIds[_i836]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->expr);
          isset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->doGetFooters);
          this->__isset.doGetFooters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast869;
          xfer += iprot->readI32(ecast869);
          this->type = (FileMetadataExprType::type)ecast869;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast851;
          xfer += iprot->readI32(ecast851);
          this->type = (FileMetadataExprType::type)ecast851;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast831;
          xfer += iprot->readI32(ecast831);
          this->type = (FileMetadataExprType::type)ecast831;
=======
          int32_t ecast850;
          xfer += iprot->readI32(ecast850);
          this->type = (FileMetadataExprType::type)ecast850;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast850;
          xfer += iprot->readI32(ecast850);
          this->type = (FileMetadataExprType::type)ecast850;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast826;
          xfer += iprot->readI32(ecast826);
          this->type = (FileMetadataExprType::type)ecast826;
=======
          int32_t ecast784;
          xfer += iprot->readI32(ecast784);
          this->type = (FileMetadataExprType::type)ecast784;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast788;
          xfer += iprot->readI32(ecast788);
          this->type = (FileMetadataExprType::type)ecast788;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast784;
          xfer += iprot->readI32(ecast784);
          this->type = (FileMetadataExprType::type)ecast784;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast788;
          xfer += iprot->readI32(ecast788);
          this->type = (FileMetadataExprType::type)ecast788;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast830;
          xfer += iprot->readI32(ecast830);
          this->type = (FileMetadataExprType::type)ecast830;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast837;
          xfer += iprot->readI32(ecast837);
          this->type = (FileMetadataExprType::type)ecast837;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataByExprRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataByExprRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter870;
    for (_iter870 = this->fileIds.begin(); _iter870 != this->fileIds.end(); ++_iter870)
    {
      xfer += oprot->writeI64((*_iter870));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter852;
    for (_iter852 = this->fileIds.begin(); _iter852 != this->fileIds.end(); ++_iter852)
    {
      xfer += oprot->writeI64((*_iter852));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter832;
    for (_iter832 = this->fileIds.begin(); _iter832 != this->fileIds.end(); ++_iter832)
    {
      xfer += oprot->writeI64((*_iter832));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<int64_t> ::const_iterator _iter851;
    for (_iter851 = this->fileIds.begin(); _iter851 != this->fileIds.end(); ++_iter851)
    {
      xfer += oprot->writeI64((*_iter851));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter827;
    for (_iter827 = this->fileIds.begin(); _iter827 != this->fileIds.end(); ++_iter827)
    {
      xfer += oprot->writeI64((*_iter827));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<int64_t> ::const_iterator _iter785;
    for (_iter785 = this->fileIds.begin(); _iter785 != this->fileIds.end(); ++_iter785)
    {
      xfer += oprot->writeI64((*_iter785));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter789;
    for (_iter789 = this->fileIds.begin(); _iter789 != this->fileIds.end(); ++_iter789)
    {
      xfer += oprot->writeI64((*_iter789));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter789;
    for (_iter789 = this->fileIds.begin(); _iter789 != this->fileIds.end(); ++_iter789)
    {
      xfer += oprot->writeI64((*_iter789));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<int64_t> ::const_iterator _iter831;
    for (_iter831 = this->fileIds.begin(); _iter831 != this->fileIds.end(); ++_iter831)
    {
      xfer += oprot->writeI64((*_iter831));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<int64_t> ::const_iterator _iter838;
    for (_iter838 = this->fileIds.begin(); _iter838 != this->fileIds.end(); ++_iter838)
    {
      xfer += oprot->writeI64((*_iter838));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->expr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.doGetFooters) {
    xfer += oprot->writeFieldBegin("doGetFooters", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->doGetFooters);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataByExprRequest &a, GetFileMetadataByExprRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
  swap(a.expr, b.expr);
  swap(a.doGetFooters, b.doGetFooters);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other871) {
  fileIds = other871.fileIds;
  expr = other871.expr;
  doGetFooters = other871.doGetFooters;
  type = other871.type;
  __isset = other871.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other872) {
  fileIds = other872.fileIds;
  expr = other872.expr;
  doGetFooters = other872.doGetFooters;
  type = other872.type;
  __isset = other872.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other853) {
  fileIds = other853.fileIds;
  expr = other853.expr;
  doGetFooters = other853.doGetFooters;
  type = other853.type;
  __isset = other853.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other854) {
  fileIds = other854.fileIds;
  expr = other854.expr;
  doGetFooters = other854.doGetFooters;
  type = other854.type;
  __isset = other854.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other833) {
  fileIds = other833.fileIds;
  expr = other833.expr;
  doGetFooters = other833.doGetFooters;
  type = other833.type;
  __isset = other833.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other834) {
  fileIds = other834.fileIds;
  expr = other834.expr;
  doGetFooters = other834.doGetFooters;
  type = other834.type;
  __isset = other834.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other852) {
  fileIds = other852.fileIds;
  expr = other852.expr;
  doGetFooters = other852.doGetFooters;
  type = other852.type;
  __isset = other852.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other853) {
  fileIds = other853.fileIds;
  expr = other853.expr;
  doGetFooters = other853.doGetFooters;
  type = other853.type;
  __isset = other853.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other828) {
  fileIds = other828.fileIds;
  expr = other828.expr;
  doGetFooters = other828.doGetFooters;
  type = other828.type;
  __isset = other828.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other829) {
  fileIds = other829.fileIds;
  expr = other829.expr;
  doGetFooters = other829.doGetFooters;
  type = other829.type;
  __isset = other829.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other786) {
  fileIds = other786.fileIds;
  expr = other786.expr;
  doGetFooters = other786.doGetFooters;
  type = other786.type;
  __isset = other786.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other787) {
  fileIds = other787.fileIds;
  expr = other787.expr;
  doGetFooters = other787.doGetFooters;
  type = other787.type;
  __isset = other787.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other790) {
  fileIds = other790.fileIds;
  expr = other790.expr;
  doGetFooters = other790.doGetFooters;
  type = other790.type;
  __isset = other790.__isset;
}
=======
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other790) {
  fileIds = other790.fileIds;
  expr = other790.expr;
  doGetFooters = other790.doGetFooters;
  type = other790.type;
  __isset = other790.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other791) {
  fileIds = other791.fileIds;
  expr = other791.expr;
  doGetFooters = other791.doGetFooters;
  type = other791.type;
  __isset = other791.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other832) {
  fileIds = other832.fileIds;
  expr = other832.expr;
  doGetFooters = other832.doGetFooters;
  type = other832.type;
  __isset = other832.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other833) {
  fileIds = other833.fileIds;
  expr = other833.expr;
  doGetFooters = other833.doGetFooters;
  type = other833.type;
  __isset = other833.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other839) {
  fileIds = other839.fileIds;
  expr = other839.expr;
  doGetFooters = other839.doGetFooters;
  type = other839.type;
  __isset = other839.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other840) {
  fileIds = other840.fileIds;
  expr = other840.expr;
  doGetFooters = other840.doGetFooters;
  type = other840.type;
  __isset = other840.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetFileMetadataByExprRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataByExprRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ", " << "expr=" << to_string(expr);
  out << ", " << "doGetFooters="; (__isset.doGetFooters ? (out << to_string(doGetFooters)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


GetFileMetadataResult::~GetFileMetadataResult() throw() {
}


void GetFileMetadataResult::__set_metadata(const std::map<int64_t, std::string> & val) {
  this->metadata = val;
}

void GetFileMetadataResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}

uint32_t GetFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_metadata = false;
  bool isset_isSupported = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metadata.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size873;
            ::apache::thrift::protocol::TType _ktype874;
            ::apache::thrift::protocol::TType _vtype875;
            xfer += iprot->readMapBegin(_ktype874, _vtype875, _size873);
            uint32_t _i877;
            for (_i877 = 0; _i877 < _size873; ++_i877)
            {
              int64_t _key878;
              xfer += iprot->readI64(_key878);
              std::string& _val879 = this->metadata[_key878];
              xfer += iprot->readBinary(_val879);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size855;
            ::apache::thrift::protocol::TType _ktype856;
            ::apache::thrift::protocol::TType _vtype857;
            xfer += iprot->readMapBegin(_ktype856, _vtype857, _size855);
            uint32_t _i859;
            for (_i859 = 0; _i859 < _size855; ++_i859)
            {
              int64_t _key860;
              xfer += iprot->readI64(_key860);
              std::string& _val861 = this->metadata[_key860];
              xfer += iprot->readBinary(_val861);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size835;
            ::apache::thrift::protocol::TType _ktype836;
            ::apache::thrift::protocol::TType _vtype837;
            xfer += iprot->readMapBegin(_ktype836, _vtype837, _size835);
            uint32_t _i839;
            for (_i839 = 0; _i839 < _size835; ++_i839)
            {
              int64_t _key840;
              xfer += iprot->readI64(_key840);
              std::string& _val841 = this->metadata[_key840];
              xfer += iprot->readBinary(_val841);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size854;
            ::apache::thrift::protocol::TType _ktype855;
            ::apache::thrift::protocol::TType _vtype856;
            xfer += iprot->readMapBegin(_ktype855, _vtype856, _size854);
            uint32_t _i858;
            for (_i858 = 0; _i858 < _size854; ++_i858)
            {
              int64_t _key859;
              xfer += iprot->readI64(_key859);
              std::string& _val860 = this->metadata[_key859];
              xfer += iprot->readBinary(_val860);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size830;
            ::apache::thrift::protocol::TType _ktype831;
            ::apache::thrift::protocol::TType _vtype832;
            xfer += iprot->readMapBegin(_ktype831, _vtype832, _size830);
            uint32_t _i834;
            for (_i834 = 0; _i834 < _size830; ++_i834)
            {
              int64_t _key835;
              xfer += iprot->readI64(_key835);
              std::string& _val836 = this->metadata[_key835];
              xfer += iprot->readBinary(_val836);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size788;
            ::apache::thrift::protocol::TType _ktype789;
            ::apache::thrift::protocol::TType _vtype790;
            xfer += iprot->readMapBegin(_ktype789, _vtype790, _size788);
            uint32_t _i792;
            for (_i792 = 0; _i792 < _size788; ++_i792)
            {
              int64_t _key793;
              xfer += iprot->readI64(_key793);
              std::string& _val794 = this->metadata[_key793];
              xfer += iprot->readBinary(_val794);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size792;
            ::apache::thrift::protocol::TType _ktype793;
            ::apache::thrift::protocol::TType _vtype794;
            xfer += iprot->readMapBegin(_ktype793, _vtype794, _size792);
            uint32_t _i796;
            for (_i796 = 0; _i796 < _size792; ++_i796)
            {
=======
            uint32_t _size792;
            ::apache::thrift::protocol::TType _ktype793;
            ::apache::thrift::protocol::TType _vtype794;
            xfer += iprot->readMapBegin(_ktype793, _vtype794, _size792);
            uint32_t _i796;
            for (_i796 = 0; _i796 < _size792; ++_i796)
            {
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
              int64_t _key797;
              xfer += iprot->readI64(_key797);
              std::string& _val798 = this->metadata[_key797];
              xfer += iprot->readBinary(_val798);
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size834;
            ::apache::thrift::protocol::TType _ktype835;
            ::apache::thrift::protocol::TType _vtype836;
            xfer += iprot->readMapBegin(_ktype835, _vtype836, _size834);
            uint32_t _i838;
            for (_i838 = 0; _i838 < _size834; ++_i838)
            {
              int64_t _key839;
              xfer += iprot->readI64(_key839);
              std::string& _val840 = this->metadata[_key839];
              xfer += iprot->readBinary(_val840);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size841;
            ::apache::thrift::protocol::TType _ktype842;
            ::apache::thrift::protocol::TType _vtype843;
            xfer += iprot->readMapBegin(_ktype842, _vtype843, _size841);
            uint32_t _i845;
            for (_i845 = 0; _i845 < _size841; ++_i845)
            {
              int64_t _key846;
              xfer += iprot->readI64(_key846);
              std::string& _val847 = this->metadata[_key846];
              xfer += iprot->readBinary(_val847);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readMapEnd();
          }
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSupported);
          isset_isSupported = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isSupported)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataResult");

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metadata.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, std::string> ::const_iterator _iter880;
    for (_iter880 = this->metadata.begin(); _iter880 != this->metadata.end(); ++_iter880)
    {
      xfer += oprot->writeI64(_iter880->first);
      xfer += oprot->writeBinary(_iter880->second);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::map<int64_t, std::string> ::const_iterator _iter862;
    for (_iter862 = this->metadata.begin(); _iter862 != this->metadata.end(); ++_iter862)
    {
      xfer += oprot->writeI64(_iter862->first);
      xfer += oprot->writeBinary(_iter862->second);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::map<int64_t, std::string> ::const_iterator _iter842;
    for (_iter842 = this->metadata.begin(); _iter842 != this->metadata.end(); ++_iter842)
    {
      xfer += oprot->writeI64(_iter842->first);
      xfer += oprot->writeBinary(_iter842->second);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::map<int64_t, std::string> ::const_iterator _iter861;
    for (_iter861 = this->metadata.begin(); _iter861 != this->metadata.end(); ++_iter861)
    {
      xfer += oprot->writeI64(_iter861->first);
      xfer += oprot->writeBinary(_iter861->second);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, std::string> ::const_iterator _iter837;
    for (_iter837 = this->metadata.begin(); _iter837 != this->metadata.end(); ++_iter837)
    {
      xfer += oprot->writeI64(_iter837->first);
      xfer += oprot->writeBinary(_iter837->second);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::map<int64_t, std::string> ::const_iterator _iter795;
    for (_iter795 = this->metadata.begin(); _iter795 != this->metadata.end(); ++_iter795)
    {
      xfer += oprot->writeI64(_iter795->first);
      xfer += oprot->writeBinary(_iter795->second);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, std::string> ::const_iterator _iter799;
    for (_iter799 = this->metadata.begin(); _iter799 != this->metadata.end(); ++_iter799)
    {
      xfer += oprot->writeI64(_iter799->first);
      xfer += oprot->writeBinary(_iter799->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, std::string> ::const_iterator _iter799;
    for (_iter799 = this->metadata.begin(); _iter799 != this->metadata.end(); ++_iter799)
    {
      xfer += oprot->writeI64(_iter799->first);
      xfer += oprot->writeBinary(_iter799->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::map<int64_t, std::string> ::const_iterator _iter841;
    for (_iter841 = this->metadata.begin(); _iter841 != this->metadata.end(); ++_iter841)
    {
      xfer += oprot->writeI64(_iter841->first);
      xfer += oprot->writeBinary(_iter841->second);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::map<int64_t, std::string> ::const_iterator _iter848;
    for (_iter848 = this->metadata.begin(); _iter848 != this->metadata.end(); ++_iter848)
    {
      xfer += oprot->writeI64(_iter848->first);
      xfer += oprot->writeBinary(_iter848->second);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSupported", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isSupported);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataResult &a, GetFileMetadataResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.isSupported, b.isSupported);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other881) {
  metadata = other881.metadata;
  isSupported = other881.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other882) {
  metadata = other882.metadata;
  isSupported = other882.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other863) {
  metadata = other863.metadata;
  isSupported = other863.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other864) {
  metadata = other864.metadata;
  isSupported = other864.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other843) {
  metadata = other843.metadata;
  isSupported = other843.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other844) {
  metadata = other844.metadata;
  isSupported = other844.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other862) {
  metadata = other862.metadata;
  isSupported = other862.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other863) {
  metadata = other863.metadata;
  isSupported = other863.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other838) {
  metadata = other838.metadata;
  isSupported = other838.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other839) {
  metadata = other839.metadata;
  isSupported = other839.isSupported;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other796) {
  metadata = other796.metadata;
  isSupported = other796.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other797) {
  metadata = other797.metadata;
  isSupported = other797.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other800) {
  metadata = other800.metadata;
  isSupported = other800.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other801) {
  metadata = other801.metadata;
  isSupported = other801.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other800) {
  metadata = other800.metadata;
  isSupported = other800.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other801) {
  metadata = other801.metadata;
  isSupported = other801.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other842) {
  metadata = other842.metadata;
  isSupported = other842.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other843) {
  metadata = other843.metadata;
  isSupported = other843.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other849) {
  metadata = other849.metadata;
  isSupported = other849.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other850) {
  metadata = other850.metadata;
  isSupported = other850.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataResult(";
  out << "metadata=" << to_string(metadata);
  out << ", " << "isSupported=" << to_string(isSupported);
  out << ")";
}


GetFileMetadataRequest::~GetFileMetadataRequest() throw() {
}


void GetFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

uint32_t GetFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size883;
            ::apache::thrift::protocol::TType _etype886;
            xfer += iprot->readListBegin(_etype886, _size883);
            this->fileIds.resize(_size883);
            uint32_t _i887;
            for (_i887 = 0; _i887 < _size883; ++_i887)
            {
              xfer += iprot->readI64(this->fileIds[_i887]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size865;
            ::apache::thrift::protocol::TType _etype868;
            xfer += iprot->readListBegin(_etype868, _size865);
            this->fileIds.resize(_size865);
            uint32_t _i869;
            for (_i869 = 0; _i869 < _size865; ++_i869)
            {
              xfer += iprot->readI64(this->fileIds[_i869]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size845;
            ::apache::thrift::protocol::TType _etype848;
            xfer += iprot->readListBegin(_etype848, _size845);
            this->fileIds.resize(_size845);
            uint32_t _i849;
            for (_i849 = 0; _i849 < _size845; ++_i849)
            {
              xfer += iprot->readI64(this->fileIds[_i849]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size864;
            ::apache::thrift::protocol::TType _etype867;
            xfer += iprot->readListBegin(_etype867, _size864);
            this->fileIds.resize(_size864);
            uint32_t _i868;
            for (_i868 = 0; _i868 < _size864; ++_i868)
            {
              xfer += iprot->readI64(this->fileIds[_i868]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size840;
            ::apache::thrift::protocol::TType _etype843;
            xfer += iprot->readListBegin(_etype843, _size840);
            this->fileIds.resize(_size840);
            uint32_t _i844;
            for (_i844 = 0; _i844 < _size840; ++_i844)
            {
              xfer += iprot->readI64(this->fileIds[_i844]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size798;
            ::apache::thrift::protocol::TType _etype801;
            xfer += iprot->readListBegin(_etype801, _size798);
            this->fileIds.resize(_size798);
            uint32_t _i802;
            for (_i802 = 0; _i802 < _size798; ++_i802)
<<<<<<< HEAD
            {
              xfer += iprot->readI64(this->fileIds[_i802]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size802;
            ::apache::thrift::protocol::TType _etype805;
            xfer += iprot->readListBegin(_etype805, _size802);
            this->fileIds.resize(_size802);
            uint32_t _i806;
            for (_i806 = 0; _i806 < _size802; ++_i806)
<<<<<<< HEAD
            {
              xfer += iprot->readI64(this->fileIds[_i806]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += iprot->readI64(this->fileIds[_i802]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readI64(this->fileIds[_i806]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size844;
            ::apache::thrift::protocol::TType _etype847;
            xfer += iprot->readListBegin(_etype847, _size844);
            this->fileIds.resize(_size844);
            uint32_t _i848;
            for (_i848 = 0; _i848 < _size844; ++_i848)
            {
              xfer += iprot->readI64(this->fileIds[_i848]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size851;
            ::apache::thrift::protocol::TType _etype854;
            xfer += iprot->readListBegin(_etype854, _size851);
            this->fileIds.resize(_size851);
            uint32_t _i855;
            for (_i855 = 0; _i855 < _size851; ++_i855)
            {
              xfer += iprot->readI64(this->fileIds[_i855]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter888;
    for (_iter888 = this->fileIds.begin(); _iter888 != this->fileIds.end(); ++_iter888)
    {
      xfer += oprot->writeI64((*_iter888));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter870;
    for (_iter870 = this->fileIds.begin(); _iter870 != this->fileIds.end(); ++_iter870)
    {
      xfer += oprot->writeI64((*_iter870));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter850;
    for (_iter850 = this->fileIds.begin(); _iter850 != this->fileIds.end(); ++_iter850)
    {
      xfer += oprot->writeI64((*_iter850));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<int64_t> ::const_iterator _iter869;
    for (_iter869 = this->fileIds.begin(); _iter869 != this->fileIds.end(); ++_iter869)
    {
      xfer += oprot->writeI64((*_iter869));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter845;
    for (_iter845 = this->fileIds.begin(); _iter845 != this->fileIds.end(); ++_iter845)
    {
      xfer += oprot->writeI64((*_iter845));
=======
    std::vector<int64_t> ::const_iterator _iter803;
    for (_iter803 = this->fileIds.begin(); _iter803 != this->fileIds.end(); ++_iter803)
    {
      xfer += oprot->writeI64((*_iter803));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter807;
    for (_iter807 = this->fileIds.begin(); _iter807 != this->fileIds.end(); ++_iter807)
    {
      xfer += oprot->writeI64((*_iter807));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<int64_t> ::const_iterator _iter803;
    for (_iter803 = this->fileIds.begin(); _iter803 != this->fileIds.end(); ++_iter803)
    {
      xfer += oprot->writeI64((*_iter803));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter807;
    for (_iter807 = this->fileIds.begin(); _iter807 != this->fileIds.end(); ++_iter807)
    {
      xfer += oprot->writeI64((*_iter807));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<int64_t> ::const_iterator _iter849;
    for (_iter849 = this->fileIds.begin(); _iter849 != this->fileIds.end(); ++_iter849)
    {
      xfer += oprot->writeI64((*_iter849));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<int64_t> ::const_iterator _iter856;
    for (_iter856 = this->fileIds.begin(); _iter856 != this->fileIds.end(); ++_iter856)
    {
      xfer += oprot->writeI64((*_iter856));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataRequest &a, GetFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other889) {
  fileIds = other889.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other890) {
  fileIds = other890.fileIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other871) {
  fileIds = other871.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other872) {
  fileIds = other872.fileIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other851) {
  fileIds = other851.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other852) {
  fileIds = other852.fileIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other870) {
  fileIds = other870.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other871) {
  fileIds = other871.fileIds;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other846) {
  fileIds = other846.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other847) {
  fileIds = other847.fileIds;
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other804) {
  fileIds = other804.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other805) {
  fileIds = other805.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other808) {
  fileIds = other808.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other809) {
  fileIds = other809.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other804) {
  fileIds = other804.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other805) {
  fileIds = other805.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other808) {
  fileIds = other808.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other809) {
  fileIds = other809.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other850) {
  fileIds = other850.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other851) {
  fileIds = other851.fileIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other857) {
  fileIds = other857.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other858) {
  fileIds = other858.fileIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ")";
}


PutFileMetadataResult::~PutFileMetadataResult() throw() {
}


uint32_t PutFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PutFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PutFileMetadataResult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PutFileMetadataResult &a, PutFileMetadataResult &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other891) {
  (void) other891;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other892) {
  (void) other892;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other873) {
  (void) other873;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other874) {
  (void) other874;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other853) {
  (void) other853;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other854) {
  (void) other854;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other872) {
  (void) other872;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other873) {
  (void) other873;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other848) {
  (void) other848;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other849) {
  (void) other849;
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other806) {
  (void) other806;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other807) {
  (void) other807;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other810) {
  (void) other810;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other811) {
  (void) other811;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other806) {
  (void) other806;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other807) {
  (void) other807;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other810) {
  (void) other810;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other811) {
  (void) other811;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other852) {
  (void) other852;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other853) {
  (void) other853;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other859) {
  (void) other859;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other860) {
  (void) other860;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void PutFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PutFileMetadataResult(";
  out << ")";
}


PutFileMetadataRequest::~PutFileMetadataRequest() throw() {
}


void PutFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

void PutFileMetadataRequest::__set_metadata(const std::vector<std::string> & val) {
  this->metadata = val;
}

void PutFileMetadataRequest::__set_type(const FileMetadataExprType::type val) {
  this->type = val;
__isset.type = true;
}

uint32_t PutFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;
  bool isset_metadata = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size893;
            ::apache::thrift::protocol::TType _etype896;
            xfer += iprot->readListBegin(_etype896, _size893);
            this->fileIds.resize(_size893);
            uint32_t _i897;
            for (_i897 = 0; _i897 < _size893; ++_i897)
            {
              xfer += iprot->readI64(this->fileIds[_i897]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size875;
            ::apache::thrift::protocol::TType _etype878;
            xfer += iprot->readListBegin(_etype878, _size875);
            this->fileIds.resize(_size875);
            uint32_t _i879;
            for (_i879 = 0; _i879 < _size875; ++_i879)
            {
              xfer += iprot->readI64(this->fileIds[_i879]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size855;
            ::apache::thrift::protocol::TType _etype858;
            xfer += iprot->readListBegin(_etype858, _size855);
            this->fileIds.resize(_size855);
            uint32_t _i859;
            for (_i859 = 0; _i859 < _size855; ++_i859)
            {
              xfer += iprot->readI64(this->fileIds[_i859]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size874;
            ::apache::thrift::protocol::TType _etype877;
            xfer += iprot->readListBegin(_etype877, _size874);
            this->fileIds.resize(_size874);
            uint32_t _i878;
            for (_i878 = 0; _i878 < _size874; ++_i878)
            {
              xfer += iprot->readI64(this->fileIds[_i878]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size850;
            ::apache::thrift::protocol::TType _etype853;
            xfer += iprot->readListBegin(_etype853, _size850);
            this->fileIds.resize(_size850);
            uint32_t _i854;
            for (_i854 = 0; _i854 < _size850; ++_i854)
            {
              xfer += iprot->readI64(this->fileIds[_i854]);
=======
            uint32_t _size808;
            ::apache::thrift::protocol::TType _etype811;
            xfer += iprot->readListBegin(_etype811, _size808);
            this->fileIds.resize(_size808);
            uint32_t _i812;
            for (_i812 = 0; _i812 < _size808; ++_i812)
            {
              xfer += iprot->readI64(this->fileIds[_i812]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size812;
            ::apache::thrift::protocol::TType _etype815;
            xfer += iprot->readListBegin(_etype815, _size812);
            this->fileIds.resize(_size812);
            uint32_t _i816;
            for (_i816 = 0; _i816 < _size812; ++_i816)
<<<<<<< HEAD
            {
              xfer += iprot->readI64(this->fileIds[_i816]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size808;
            ::apache::thrift::protocol::TType _etype811;
            xfer += iprot->readListBegin(_etype811, _size808);
            this->fileIds.resize(_size808);
            uint32_t _i812;
            for (_i812 = 0; _i812 < _size808; ++_i812)
            {
              xfer += iprot->readI64(this->fileIds[_i812]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readI64(this->fileIds[_i816]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size854;
            ::apache::thrift::protocol::TType _etype857;
            xfer += iprot->readListBegin(_etype857, _size854);
            this->fileIds.resize(_size854);
            uint32_t _i858;
            for (_i858 = 0; _i858 < _size854; ++_i858)
            {
              xfer += iprot->readI64(this->fileIds[_i858]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size861;
            ::apache::thrift::protocol::TType _etype864;
            xfer += iprot->readListBegin(_etype864, _size861);
            this->fileIds.resize(_size861);
            uint32_t _i865;
            for (_i865 = 0; _i865 < _size861; ++_i865)
            {
              xfer += iprot->readI64(this->fileIds[_i865]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->metadata.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size898;
            ::apache::thrift::protocol::TType _etype901;
            xfer += iprot->readListBegin(_etype901, _size898);
            this->metadata.resize(_size898);
            uint32_t _i902;
            for (_i902 = 0; _i902 < _size898; ++_i902)
            {
              xfer += iprot->readBinary(this->metadata[_i902]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size880;
            ::apache::thrift::protocol::TType _etype883;
            xfer += iprot->readListBegin(_etype883, _size880);
            this->metadata.resize(_size880);
            uint32_t _i884;
            for (_i884 = 0; _i884 < _size880; ++_i884)
            {
              xfer += iprot->readBinary(this->metadata[_i884]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size860;
            ::apache::thrift::protocol::TType _etype863;
            xfer += iprot->readListBegin(_etype863, _size860);
            this->metadata.resize(_size860);
            uint32_t _i864;
            for (_i864 = 0; _i864 < _size860; ++_i864)
            {
              xfer += iprot->readBinary(this->metadata[_i864]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size879;
            ::apache::thrift::protocol::TType _etype882;
            xfer += iprot->readListBegin(_etype882, _size879);
            this->metadata.resize(_size879);
            uint32_t _i883;
            for (_i883 = 0; _i883 < _size879; ++_i883)
            {
              xfer += iprot->readBinary(this->metadata[_i883]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size855;
            ::apache::thrift::protocol::TType _etype858;
            xfer += iprot->readListBegin(_etype858, _size855);
            this->metadata.resize(_size855);
            uint32_t _i859;
            for (_i859 = 0; _i859 < _size855; ++_i859)
            {
              xfer += iprot->readBinary(this->metadata[_i859]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size813;
            ::apache::thrift::protocol::TType _etype816;
            xfer += iprot->readListBegin(_etype816, _size813);
            this->metadata.resize(_size813);
            uint32_t _i817;
            for (_i817 = 0; _i817 < _size813; ++_i817)
            {
              xfer += iprot->readBinary(this->metadata[_i817]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size817;
            ::apache::thrift::protocol::TType _etype820;
            xfer += iprot->readListBegin(_etype820, _size817);
            this->metadata.resize(_size817);
            uint32_t _i821;
            for (_i821 = 0; _i821 < _size817; ++_i821)
            {
              xfer += iprot->readBinary(this->metadata[_i821]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size817;
            ::apache::thrift::protocol::TType _etype820;
            xfer += iprot->readListBegin(_etype820, _size817);
            this->metadata.resize(_size817);
            uint32_t _i821;
            for (_i821 = 0; _i821 < _size817; ++_i821)
            {
              xfer += iprot->readBinary(this->metadata[_i821]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size859;
            ::apache::thrift::protocol::TType _etype862;
            xfer += iprot->readListBegin(_etype862, _size859);
            this->metadata.resize(_size859);
            uint32_t _i863;
            for (_i863 = 0; _i863 < _size859; ++_i863)
            {
              xfer += iprot->readBinary(this->metadata[_i863]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size866;
            ::apache::thrift::protocol::TType _etype869;
            xfer += iprot->readListBegin(_etype869, _size866);
            this->metadata.resize(_size866);
            uint32_t _i870;
            for (_i870 = 0; _i870 < _size866; ++_i870)
            {
              xfer += iprot->readBinary(this->metadata[_i870]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast903;
          xfer += iprot->readI32(ecast903);
          this->type = (FileMetadataExprType::type)ecast903;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast885;
          xfer += iprot->readI32(ecast885);
          this->type = (FileMetadataExprType::type)ecast885;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast865;
          xfer += iprot->readI32(ecast865);
          this->type = (FileMetadataExprType::type)ecast865;
=======
          int32_t ecast884;
          xfer += iprot->readI32(ecast884);
          this->type = (FileMetadataExprType::type)ecast884;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast884;
          xfer += iprot->readI32(ecast884);
          this->type = (FileMetadataExprType::type)ecast884;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast860;
          xfer += iprot->readI32(ecast860);
          this->type = (FileMetadataExprType::type)ecast860;
=======
          int32_t ecast818;
          xfer += iprot->readI32(ecast818);
          this->type = (FileMetadataExprType::type)ecast818;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast822;
          xfer += iprot->readI32(ecast822);
          this->type = (FileMetadataExprType::type)ecast822;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast818;
          xfer += iprot->readI32(ecast818);
          this->type = (FileMetadataExprType::type)ecast818;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast822;
          xfer += iprot->readI32(ecast822);
          this->type = (FileMetadataExprType::type)ecast822;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast864;
          xfer += iprot->readI32(ecast864);
          this->type = (FileMetadataExprType::type)ecast864;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast871;
          xfer += iprot->readI32(ecast871);
          this->type = (FileMetadataExprType::type)ecast871;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PutFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PutFileMetadataRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter904;
    for (_iter904 = this->fileIds.begin(); _iter904 != this->fileIds.end(); ++_iter904)
    {
      xfer += oprot->writeI64((*_iter904));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter886;
    for (_iter886 = this->fileIds.begin(); _iter886 != this->fileIds.end(); ++_iter886)
    {
      xfer += oprot->writeI64((*_iter886));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter866;
    for (_iter866 = this->fileIds.begin(); _iter866 != this->fileIds.end(); ++_iter866)
    {
      xfer += oprot->writeI64((*_iter866));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<int64_t> ::const_iterator _iter885;
    for (_iter885 = this->fileIds.begin(); _iter885 != this->fileIds.end(); ++_iter885)
    {
      xfer += oprot->writeI64((*_iter885));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter861;
    for (_iter861 = this->fileIds.begin(); _iter861 != this->fileIds.end(); ++_iter861)
    {
      xfer += oprot->writeI64((*_iter861));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<int64_t> ::const_iterator _iter819;
    for (_iter819 = this->fileIds.begin(); _iter819 != this->fileIds.end(); ++_iter819)
    {
      xfer += oprot->writeI64((*_iter819));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter823;
    for (_iter823 = this->fileIds.begin(); _iter823 != this->fileIds.end(); ++_iter823)
    {
      xfer += oprot->writeI64((*_iter823));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter823;
    for (_iter823 = this->fileIds.begin(); _iter823 != this->fileIds.end(); ++_iter823)
    {
      xfer += oprot->writeI64((*_iter823));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<int64_t> ::const_iterator _iter865;
    for (_iter865 = this->fileIds.begin(); _iter865 != this->fileIds.end(); ++_iter865)
    {
      xfer += oprot->writeI64((*_iter865));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<int64_t> ::const_iterator _iter872;
    for (_iter872 = this->fileIds.begin(); _iter872 != this->fileIds.end(); ++_iter872)
    {
      xfer += oprot->writeI64((*_iter872));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metadata.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter905;
    for (_iter905 = this->metadata.begin(); _iter905 != this->metadata.end(); ++_iter905)
    {
      xfer += oprot->writeBinary((*_iter905));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter887;
    for (_iter887 = this->metadata.begin(); _iter887 != this->metadata.end(); ++_iter887)
    {
      xfer += oprot->writeBinary((*_iter887));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter867;
    for (_iter867 = this->metadata.begin(); _iter867 != this->metadata.end(); ++_iter867)
    {
      xfer += oprot->writeBinary((*_iter867));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<std::string> ::const_iterator _iter886;
    for (_iter886 = this->metadata.begin(); _iter886 != this->metadata.end(); ++_iter886)
    {
      xfer += oprot->writeBinary((*_iter886));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter862;
    for (_iter862 = this->metadata.begin(); _iter862 != this->metadata.end(); ++_iter862)
    {
      xfer += oprot->writeBinary((*_iter862));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<std::string> ::const_iterator _iter820;
    for (_iter820 = this->metadata.begin(); _iter820 != this->metadata.end(); ++_iter820)
    {
      xfer += oprot->writeBinary((*_iter820));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter824;
    for (_iter824 = this->metadata.begin(); _iter824 != this->metadata.end(); ++_iter824)
    {
      xfer += oprot->writeBinary((*_iter824));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter824;
    for (_iter824 = this->metadata.begin(); _iter824 != this->metadata.end(); ++_iter824)
    {
      xfer += oprot->writeBinary((*_iter824));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<std::string> ::const_iterator _iter866;
    for (_iter866 = this->metadata.begin(); _iter866 != this->metadata.end(); ++_iter866)
    {
      xfer += oprot->writeBinary((*_iter866));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<std::string> ::const_iterator _iter873;
    for (_iter873 = this->metadata.begin(); _iter873 != this->metadata.end(); ++_iter873)
    {
      xfer += oprot->writeBinary((*_iter873));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PutFileMetadataRequest &a, PutFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
  swap(a.metadata, b.metadata);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other906) {
  fileIds = other906.fileIds;
  metadata = other906.metadata;
  type = other906.type;
  __isset = other906.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other907) {
  fileIds = other907.fileIds;
  metadata = other907.metadata;
  type = other907.type;
  __isset = other907.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other888) {
  fileIds = other888.fileIds;
  metadata = other888.metadata;
  type = other888.type;
  __isset = other888.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other889) {
  fileIds = other889.fileIds;
  metadata = other889.metadata;
  type = other889.type;
  __isset = other889.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other868) {
  fileIds = other868.fileIds;
  metadata = other868.metadata;
  type = other868.type;
  __isset = other868.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other869) {
  fileIds = other869.fileIds;
  metadata = other869.metadata;
  type = other869.type;
  __isset = other869.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other887) {
  fileIds = other887.fileIds;
  metadata = other887.metadata;
  type = other887.type;
  __isset = other887.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other888) {
  fileIds = other888.fileIds;
  metadata = other888.metadata;
  type = other888.type;
  __isset = other888.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other863) {
  fileIds = other863.fileIds;
  metadata = other863.metadata;
  type = other863.type;
  __isset = other863.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other864) {
  fileIds = other864.fileIds;
  metadata = other864.metadata;
  type = other864.type;
  __isset = other864.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other821) {
  fileIds = other821.fileIds;
  metadata = other821.metadata;
  type = other821.type;
  __isset = other821.__isset;
<<<<<<< HEAD
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other822) {
  fileIds = other822.fileIds;
  metadata = other822.metadata;
  type = other822.type;
  __isset = other822.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other825) {
  fileIds = other825.fileIds;
  metadata = other825.metadata;
  type = other825.type;
  __isset = other825.__isset;
<<<<<<< HEAD
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other826) {
  fileIds = other826.fileIds;
  metadata = other826.metadata;
  type = other826.type;
  __isset = other826.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other822) {
  fileIds = other822.fileIds;
  metadata = other822.metadata;
  type = other822.type;
  __isset = other822.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other826) {
  fileIds = other826.fileIds;
  metadata = other826.metadata;
  type = other826.type;
  __isset = other826.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other867) {
  fileIds = other867.fileIds;
  metadata = other867.metadata;
  type = other867.type;
  __isset = other867.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other868) {
  fileIds = other868.fileIds;
  metadata = other868.metadata;
  type = other868.type;
  __isset = other868.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other874) {
  fileIds = other874.fileIds;
  metadata = other874.metadata;
  type = other874.type;
  __isset = other874.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other875) {
  fileIds = other875.fileIds;
  metadata = other875.metadata;
  type = other875.type;
  __isset = other875.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void PutFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PutFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ", " << "metadata=" << to_string(metadata);
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


ClearFileMetadataResult::~ClearFileMetadataResult() throw() {
}


uint32_t ClearFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClearFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClearFileMetadataResult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClearFileMetadataResult &a, ClearFileMetadataResult &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other908) {
  (void) other908;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other909) {
  (void) other909;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other890) {
  (void) other890;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other891) {
  (void) other891;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other870) {
  (void) other870;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other871) {
  (void) other871;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other889) {
  (void) other889;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other890) {
  (void) other890;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other865) {
  (void) other865;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other866) {
  (void) other866;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other823) {
  (void) other823;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other824) {
  (void) other824;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other827) {
  (void) other827;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other828) {
  (void) other828;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other827) {
  (void) other827;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other828) {
  (void) other828;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other869) {
  (void) other869;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other870) {
  (void) other870;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other876) {
  (void) other876;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other877) {
  (void) other877;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ClearFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClearFileMetadataResult(";
  out << ")";
}


ClearFileMetadataRequest::~ClearFileMetadataRequest() throw() {
}


void ClearFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

uint32_t ClearFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size910;
            ::apache::thrift::protocol::TType _etype913;
            xfer += iprot->readListBegin(_etype913, _size910);
            this->fileIds.resize(_size910);
            uint32_t _i914;
            for (_i914 = 0; _i914 < _size910; ++_i914)
            {
              xfer += iprot->readI64(this->fileIds[_i914]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size892;
            ::apache::thrift::protocol::TType _etype895;
            xfer += iprot->readListBegin(_etype895, _size892);
            this->fileIds.resize(_size892);
            uint32_t _i896;
            for (_i896 = 0; _i896 < _size892; ++_i896)
            {
              xfer += iprot->readI64(this->fileIds[_i896]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size872;
            ::apache::thrift::protocol::TType _etype875;
            xfer += iprot->readListBegin(_etype875, _size872);
            this->fileIds.resize(_size872);
            uint32_t _i876;
            for (_i876 = 0; _i876 < _size872; ++_i876)
            {
              xfer += iprot->readI64(this->fileIds[_i876]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size891;
            ::apache::thrift::protocol::TType _etype894;
            xfer += iprot->readListBegin(_etype894, _size891);
            this->fileIds.resize(_size891);
            uint32_t _i895;
            for (_i895 = 0; _i895 < _size891; ++_i895)
            {
              xfer += iprot->readI64(this->fileIds[_i895]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size867;
            ::apache::thrift::protocol::TType _etype870;
            xfer += iprot->readListBegin(_etype870, _size867);
            this->fileIds.resize(_size867);
            uint32_t _i871;
            for (_i871 = 0; _i871 < _size867; ++_i871)
            {
              xfer += iprot->readI64(this->fileIds[_i871]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size825;
            ::apache::thrift::protocol::TType _etype828;
            xfer += iprot->readListBegin(_etype828, _size825);
            this->fileIds.resize(_size825);
            uint32_t _i829;
            for (_i829 = 0; _i829 < _size825; ++_i829)
            {
              xfer += iprot->readI64(this->fileIds[_i829]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size829;
            ::apache::thrift::protocol::TType _etype832;
            xfer += iprot->readListBegin(_etype832, _size829);
            this->fileIds.resize(_size829);
            uint32_t _i833;
            for (_i833 = 0; _i833 < _size829; ++_i833)
            {
              xfer += iprot->readI64(this->fileIds[_i833]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size829;
            ::apache::thrift::protocol::TType _etype832;
            xfer += iprot->readListBegin(_etype832, _size829);
            this->fileIds.resize(_size829);
            uint32_t _i833;
            for (_i833 = 0; _i833 < _size829; ++_i833)
            {
              xfer += iprot->readI64(this->fileIds[_i833]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size871;
            ::apache::thrift::protocol::TType _etype874;
            xfer += iprot->readListBegin(_etype874, _size871);
            this->fileIds.resize(_size871);
            uint32_t _i875;
            for (_i875 = 0; _i875 < _size871; ++_i875)
            {
              xfer += iprot->readI64(this->fileIds[_i875]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size878;
            ::apache::thrift::protocol::TType _etype881;
            xfer += iprot->readListBegin(_etype881, _size878);
            this->fileIds.resize(_size878);
            uint32_t _i882;
            for (_i882 = 0; _i882 < _size878; ++_i882)
            {
              xfer += iprot->readI64(this->fileIds[_i882]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClearFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClearFileMetadataRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter915;
    for (_iter915 = this->fileIds.begin(); _iter915 != this->fileIds.end(); ++_iter915)
    {
      xfer += oprot->writeI64((*_iter915));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter897;
    for (_iter897 = this->fileIds.begin(); _iter897 != this->fileIds.end(); ++_iter897)
    {
      xfer += oprot->writeI64((*_iter897));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter877;
    for (_iter877 = this->fileIds.begin(); _iter877 != this->fileIds.end(); ++_iter877)
    {
      xfer += oprot->writeI64((*_iter877));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<int64_t> ::const_iterator _iter896;
    for (_iter896 = this->fileIds.begin(); _iter896 != this->fileIds.end(); ++_iter896)
    {
      xfer += oprot->writeI64((*_iter896));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter872;
    for (_iter872 = this->fileIds.begin(); _iter872 != this->fileIds.end(); ++_iter872)
    {
      xfer += oprot->writeI64((*_iter872));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<int64_t> ::const_iterator _iter830;
    for (_iter830 = this->fileIds.begin(); _iter830 != this->fileIds.end(); ++_iter830)
    {
      xfer += oprot->writeI64((*_iter830));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter834;
    for (_iter834 = this->fileIds.begin(); _iter834 != this->fileIds.end(); ++_iter834)
    {
      xfer += oprot->writeI64((*_iter834));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter834;
    for (_iter834 = this->fileIds.begin(); _iter834 != this->fileIds.end(); ++_iter834)
    {
      xfer += oprot->writeI64((*_iter834));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<int64_t> ::const_iterator _iter876;
    for (_iter876 = this->fileIds.begin(); _iter876 != this->fileIds.end(); ++_iter876)
    {
      xfer += oprot->writeI64((*_iter876));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<int64_t> ::const_iterator _iter883;
    for (_iter883 = this->fileIds.begin(); _iter883 != this->fileIds.end(); ++_iter883)
    {
      xfer += oprot->writeI64((*_iter883));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClearFileMetadataRequest &a, ClearFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other916) {
  fileIds = other916.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other917) {
  fileIds = other917.fileIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other898) {
  fileIds = other898.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other899) {
  fileIds = other899.fileIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other878) {
  fileIds = other878.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other879) {
  fileIds = other879.fileIds;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other897) {
  fileIds = other897.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other898) {
  fileIds = other898.fileIds;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other873) {
  fileIds = other873.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other874) {
  fileIds = other874.fileIds;
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other831) {
  fileIds = other831.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other832) {
  fileIds = other832.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other835) {
  fileIds = other835.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other836) {
  fileIds = other836.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other831) {
  fileIds = other831.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other832) {
  fileIds = other832.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other835) {
  fileIds = other835.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other836) {
  fileIds = other836.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other877) {
  fileIds = other877.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other878) {
  fileIds = other878.fileIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other884) {
  fileIds = other884.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other885) {
  fileIds = other885.fileIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ClearFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClearFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ")";
}


CacheFileMetadataResult::~CacheFileMetadataResult() throw() {
}


void CacheFileMetadataResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}

uint32_t CacheFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isSupported = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSupported);
          isset_isSupported = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isSupported)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CacheFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CacheFileMetadataResult");

  xfer += oprot->writeFieldBegin("isSupported", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isSupported);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CacheFileMetadataResult &a, CacheFileMetadataResult &b) {
  using ::std::swap;
  swap(a.isSupported, b.isSupported);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other918) {
  isSupported = other918.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other919) {
  isSupported = other919.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other900) {
  isSupported = other900.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other901) {
  isSupported = other901.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other880) {
  isSupported = other880.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other881) {
  isSupported = other881.isSupported;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other899) {
  isSupported = other899.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other900) {
  isSupported = other900.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other875) {
  isSupported = other875.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other876) {
  isSupported = other876.isSupported;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other833) {
  isSupported = other833.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other834) {
  isSupported = other834.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other837) {
  isSupported = other837.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other838) {
  isSupported = other838.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other837) {
  isSupported = other837.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other838) {
  isSupported = other838.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other879) {
  isSupported = other879.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other880) {
  isSupported = other880.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other886) {
  isSupported = other886.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other887) {
  isSupported = other887.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CacheFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CacheFileMetadataResult(";
  out << "isSupported=" << to_string(isSupported);
  out << ")";
}


CacheFileMetadataRequest::~CacheFileMetadataRequest() throw() {
}


void CacheFileMetadataRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void CacheFileMetadataRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void CacheFileMetadataRequest::__set_partName(const std::string& val) {
  this->partName = val;
__isset.partName = true;
}

void CacheFileMetadataRequest::__set_isAllParts(const bool val) {
  this->isAllParts = val;
__isset.isAllParts = true;
}

uint32_t CacheFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partName);
          this->__isset.partName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isAllParts);
          this->__isset.isAllParts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CacheFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CacheFileMetadataRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partName) {
    xfer += oprot->writeFieldBegin("partName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isAllParts) {
    xfer += oprot->writeFieldBegin("isAllParts", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isAllParts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CacheFileMetadataRequest &a, CacheFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partName, b.partName);
  swap(a.isAllParts, b.isAllParts);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other920) {
  dbName = other920.dbName;
  tblName = other920.tblName;
  partName = other920.partName;
  isAllParts = other920.isAllParts;
  __isset = other920.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other921) {
  dbName = other921.dbName;
  tblName = other921.tblName;
  partName = other921.partName;
  isAllParts = other921.isAllParts;
  __isset = other921.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other902) {
  dbName = other902.dbName;
  tblName = other902.tblName;
  partName = other902.partName;
  isAllParts = other902.isAllParts;
  __isset = other902.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other903) {
  dbName = other903.dbName;
  tblName = other903.tblName;
  partName = other903.partName;
  isAllParts = other903.isAllParts;
  __isset = other903.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other882) {
  dbName = other882.dbName;
  tblName = other882.tblName;
  partName = other882.partName;
  isAllParts = other882.isAllParts;
  __isset = other882.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other883) {
  dbName = other883.dbName;
  tblName = other883.tblName;
  partName = other883.partName;
  isAllParts = other883.isAllParts;
  __isset = other883.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other901) {
  dbName = other901.dbName;
  tblName = other901.tblName;
  partName = other901.partName;
  isAllParts = other901.isAllParts;
  __isset = other901.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other902) {
  dbName = other902.dbName;
  tblName = other902.tblName;
  partName = other902.partName;
  isAllParts = other902.isAllParts;
  __isset = other902.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other877) {
  dbName = other877.dbName;
  tblName = other877.tblName;
  partName = other877.partName;
  isAllParts = other877.isAllParts;
  __isset = other877.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other878) {
  dbName = other878.dbName;
  tblName = other878.tblName;
  partName = other878.partName;
  isAllParts = other878.isAllParts;
  __isset = other878.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other835) {
  dbName = other835.dbName;
  tblName = other835.tblName;
  partName = other835.partName;
  isAllParts = other835.isAllParts;
  __isset = other835.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other836) {
  dbName = other836.dbName;
  tblName = other836.tblName;
  partName = other836.partName;
  isAllParts = other836.isAllParts;
  __isset = other836.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other839) {
  dbName = other839.dbName;
  tblName = other839.tblName;
  partName = other839.partName;
  isAllParts = other839.isAllParts;
  __isset = other839.__isset;
}
=======
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other839) {
  dbName = other839.dbName;
  tblName = other839.tblName;
  partName = other839.partName;
  isAllParts = other839.isAllParts;
  __isset = other839.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other840) {
  dbName = other840.dbName;
  tblName = other840.tblName;
  partName = other840.partName;
  isAllParts = other840.isAllParts;
  __isset = other840.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other881) {
  dbName = other881.dbName;
  tblName = other881.tblName;
  partName = other881.partName;
  isAllParts = other881.isAllParts;
  __isset = other881.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other882) {
  dbName = other882.dbName;
  tblName = other882.tblName;
  partName = other882.partName;
  isAllParts = other882.isAllParts;
  __isset = other882.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other888) {
  dbName = other888.dbName;
  tblName = other888.tblName;
  partName = other888.partName;
  isAllParts = other888.isAllParts;
  __isset = other888.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other889) {
  dbName = other889.dbName;
  tblName = other889.tblName;
  partName = other889.partName;
  isAllParts = other889.isAllParts;
  __isset = other889.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CacheFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CacheFileMetadataRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partName="; (__isset.partName ? (out << to_string(partName)) : (out << "<null>"));
  out << ", " << "isAllParts="; (__isset.isAllParts ? (out << to_string(isAllParts)) : (out << "<null>"));
  out << ")";
}


GetAllFunctionsResponse::~GetAllFunctionsResponse() throw() {
}


void GetAllFunctionsResponse::__set_functions(const std::vector<Function> & val) {
  this->functions = val;
__isset.functions = true;
}

uint32_t GetAllFunctionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->functions.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size922;
            ::apache::thrift::protocol::TType _etype925;
            xfer += iprot->readListBegin(_etype925, _size922);
            this->functions.resize(_size922);
            uint32_t _i926;
            for (_i926 = 0; _i926 < _size922; ++_i926)
            {
              xfer += this->functions[_i926].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size904;
            ::apache::thrift::protocol::TType _etype907;
            xfer += iprot->readListBegin(_etype907, _size904);
            this->functions.resize(_size904);
            uint32_t _i908;
            for (_i908 = 0; _i908 < _size904; ++_i908)
            {
              xfer += this->functions[_i908].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size884;
            ::apache::thrift::protocol::TType _etype887;
            xfer += iprot->readListBegin(_etype887, _size884);
            this->functions.resize(_size884);
            uint32_t _i888;
            for (_i888 = 0; _i888 < _size884; ++_i888)
            {
              xfer += this->functions[_i888].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size903;
            ::apache::thrift::protocol::TType _etype906;
            xfer += iprot->readListBegin(_etype906, _size903);
            this->functions.resize(_size903);
            uint32_t _i907;
            for (_i907 = 0; _i907 < _size903; ++_i907)
            {
              xfer += this->functions[_i907].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size879;
            ::apache::thrift::protocol::TType _etype882;
            xfer += iprot->readListBegin(_etype882, _size879);
            this->functions.resize(_size879);
            uint32_t _i883;
            for (_i883 = 0; _i883 < _size879; ++_i883)
            {
              xfer += this->functions[_i883].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size837;
            ::apache::thrift::protocol::TType _etype840;
            xfer += iprot->readListBegin(_etype840, _size837);
            this->functions.resize(_size837);
            uint32_t _i841;
            for (_i841 = 0; _i841 < _size837; ++_i841)
            {
              xfer += this->functions[_i841].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size841;
            ::apache::thrift::protocol::TType _etype844;
            xfer += iprot->readListBegin(_etype844, _size841);
            this->functions.resize(_size841);
            uint32_t _i845;
            for (_i845 = 0; _i845 < _size841; ++_i845)
            {
              xfer += this->functions[_i845].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size841;
            ::apache::thrift::protocol::TType _etype844;
            xfer += iprot->readListBegin(_etype844, _size841);
            this->functions.resize(_size841);
            uint32_t _i845;
            for (_i845 = 0; _i845 < _size841; ++_i845)
            {
              xfer += this->functions[_i845].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size883;
            ::apache::thrift::protocol::TType _etype886;
            xfer += iprot->readListBegin(_etype886, _size883);
            this->functions.resize(_size883);
            uint32_t _i887;
            for (_i887 = 0; _i887 < _size883; ++_i887)
            {
              xfer += this->functions[_i887].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size890;
            ::apache::thrift::protocol::TType _etype893;
            xfer += iprot->readListBegin(_etype893, _size890);
            this->functions.resize(_size890);
            uint32_t _i894;
            for (_i894 = 0; _i894 < _size890; ++_i894)
            {
              xfer += this->functions[_i894].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.functions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetAllFunctionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetAllFunctionsResponse");

  if (this->__isset.functions) {
    xfer += oprot->writeFieldBegin("functions", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->functions.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<Function> ::const_iterator _iter927;
      for (_iter927 = this->functions.begin(); _iter927 != this->functions.end(); ++_iter927)
      {
        xfer += (*_iter927).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<Function> ::const_iterator _iter909;
      for (_iter909 = this->functions.begin(); _iter909 != this->functions.end(); ++_iter909)
      {
        xfer += (*_iter909).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<Function> ::const_iterator _iter889;
      for (_iter889 = this->functions.begin(); _iter889 != this->functions.end(); ++_iter889)
      {
        xfer += (*_iter889).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<Function> ::const_iterator _iter908;
      for (_iter908 = this->functions.begin(); _iter908 != this->functions.end(); ++_iter908)
      {
        xfer += (*_iter908).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<Function> ::const_iterator _iter884;
      for (_iter884 = this->functions.begin(); _iter884 != this->functions.end(); ++_iter884)
      {
        xfer += (*_iter884).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
      std::vector<Function> ::const_iterator _iter842;
      for (_iter842 = this->functions.begin(); _iter842 != this->functions.end(); ++_iter842)
      {
        xfer += (*_iter842).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<Function> ::const_iterator _iter846;
      for (_iter846 = this->functions.begin(); _iter846 != this->functions.end(); ++_iter846)
      {
        xfer += (*_iter846).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<Function> ::const_iterator _iter846;
      for (_iter846 = this->functions.begin(); _iter846 != this->functions.end(); ++_iter846)
      {
        xfer += (*_iter846).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<Function> ::const_iterator _iter888;
      for (_iter888 = this->functions.begin(); _iter888 != this->functions.end(); ++_iter888)
      {
        xfer += (*_iter888).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<Function> ::const_iterator _iter895;
      for (_iter895 = this->functions.begin(); _iter895 != this->functions.end(); ++_iter895)
      {
        xfer += (*_iter895).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b) {
  using ::std::swap;
  swap(a.functions, b.functions);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other928) {
  functions = other928.functions;
  __isset = other928.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other929) {
  functions = other929.functions;
  __isset = other929.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other910) {
  functions = other910.functions;
  __isset = other910.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other911) {
  functions = other911.functions;
  __isset = other911.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other890) {
  functions = other890.functions;
  __isset = other890.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other891) {
  functions = other891.functions;
  __isset = other891.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other909) {
  functions = other909.functions;
  __isset = other909.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other910) {
  functions = other910.functions;
  __isset = other910.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other885) {
  functions = other885.functions;
  __isset = other885.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other886) {
  functions = other886.functions;
  __isset = other886.__isset;
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other843) {
  functions = other843.functions;
  __isset = other843.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other844) {
  functions = other844.functions;
  __isset = other844.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other847) {
  functions = other847.functions;
  __isset = other847.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other848) {
  functions = other848.functions;
  __isset = other848.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other843) {
  functions = other843.functions;
  __isset = other843.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other844) {
  functions = other844.functions;
  __isset = other844.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other847) {
  functions = other847.functions;
  __isset = other847.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other848) {
  functions = other848.functions;
  __isset = other848.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other889) {
  functions = other889.functions;
  __isset = other889.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other890) {
  functions = other890.functions;
  __isset = other890.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other896) {
  functions = other896.functions;
  __isset = other896.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other897) {
  functions = other897.functions;
  __isset = other897.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetAllFunctionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetAllFunctionsResponse(";
  out << "functions="; (__isset.functions ? (out << to_string(functions)) : (out << "<null>"));
  out << ")";
}


ClientCapabilities::~ClientCapabilities() throw() {
}


void ClientCapabilities::__set_values(const std::vector<ClientCapability::type> & val) {
  this->values = val;
}

uint32_t ClientCapabilities::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size930;
            ::apache::thrift::protocol::TType _etype933;
            xfer += iprot->readListBegin(_etype933, _size930);
            this->values.resize(_size930);
            uint32_t _i934;
            for (_i934 = 0; _i934 < _size930; ++_i934)
            {
              int32_t ecast935;
              xfer += iprot->readI32(ecast935);
              this->values[_i934] = (ClientCapability::type)ecast935;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size912;
            ::apache::thrift::protocol::TType _etype915;
            xfer += iprot->readListBegin(_etype915, _size912);
            this->values.resize(_size912);
            uint32_t _i916;
            for (_i916 = 0; _i916 < _size912; ++_i916)
            {
              int32_t ecast917;
              xfer += iprot->readI32(ecast917);
              this->values[_i916] = (ClientCapability::type)ecast917;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size892;
            ::apache::thrift::protocol::TType _etype895;
            xfer += iprot->readListBegin(_etype895, _size892);
            this->values.resize(_size892);
            uint32_t _i896;
            for (_i896 = 0; _i896 < _size892; ++_i896)
            {
              int32_t ecast897;
              xfer += iprot->readI32(ecast897);
              this->values[_i896] = (ClientCapability::type)ecast897;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size911;
            ::apache::thrift::protocol::TType _etype914;
            xfer += iprot->readListBegin(_etype914, _size911);
            this->values.resize(_size911);
            uint32_t _i915;
            for (_i915 = 0; _i915 < _size911; ++_i915)
            {
              int32_t ecast916;
              xfer += iprot->readI32(ecast916);
              this->values[_i915] = (ClientCapability::type)ecast916;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size887;
            ::apache::thrift::protocol::TType _etype890;
            xfer += iprot->readListBegin(_etype890, _size887);
            this->values.resize(_size887);
            uint32_t _i891;
            for (_i891 = 0; _i891 < _size887; ++_i891)
            {
              int32_t ecast892;
              xfer += iprot->readI32(ecast892);
              this->values[_i891] = (ClientCapability::type)ecast892;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size845;
            ::apache::thrift::protocol::TType _etype848;
            xfer += iprot->readListBegin(_etype848, _size845);
            this->values.resize(_size845);
            uint32_t _i849;
            for (_i849 = 0; _i849 < _size845; ++_i849)
            {
              int32_t ecast850;
              xfer += iprot->readI32(ecast850);
              this->values[_i849] = (ClientCapability::type)ecast850;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size849;
            ::apache::thrift::protocol::TType _etype852;
            xfer += iprot->readListBegin(_etype852, _size849);
            this->values.resize(_size849);
            uint32_t _i853;
            for (_i853 = 0; _i853 < _size849; ++_i853)
            {
              int32_t ecast854;
              xfer += iprot->readI32(ecast854);
              this->values[_i853] = (ClientCapability::type)ecast854;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size849;
            ::apache::thrift::protocol::TType _etype852;
            xfer += iprot->readListBegin(_etype852, _size849);
            this->values.resize(_size849);
            uint32_t _i853;
            for (_i853 = 0; _i853 < _size849; ++_i853)
            {
              int32_t ecast854;
              xfer += iprot->readI32(ecast854);
              this->values[_i853] = (ClientCapability::type)ecast854;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size891;
            ::apache::thrift::protocol::TType _etype894;
            xfer += iprot->readListBegin(_etype894, _size891);
            this->values.resize(_size891);
            uint32_t _i895;
            for (_i895 = 0; _i895 < _size891; ++_i895)
            {
              int32_t ecast896;
              xfer += iprot->readI32(ecast896);
              this->values[_i895] = (ClientCapability::type)ecast896;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size898;
            ::apache::thrift::protocol::TType _etype901;
            xfer += iprot->readListBegin(_etype901, _size898);
            this->values.resize(_size898);
            uint32_t _i902;
            for (_i902 = 0; _i902 < _size898; ++_i902)
            {
              int32_t ecast903;
              xfer += iprot->readI32(ecast903);
              this->values[_i902] = (ClientCapability::type)ecast903;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClientCapabilities::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientCapabilities");

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->values.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ClientCapability::type> ::const_iterator _iter936;
    for (_iter936 = this->values.begin(); _iter936 != this->values.end(); ++_iter936)
    {
      xfer += oprot->writeI32((int32_t)(*_iter936));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<ClientCapability::type> ::const_iterator _iter918;
    for (_iter918 = this->values.begin(); _iter918 != this->values.end(); ++_iter918)
    {
      xfer += oprot->writeI32((int32_t)(*_iter918));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<ClientCapability::type> ::const_iterator _iter898;
    for (_iter898 = this->values.begin(); _iter898 != this->values.end(); ++_iter898)
    {
      xfer += oprot->writeI32((int32_t)(*_iter898));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<ClientCapability::type> ::const_iterator _iter917;
    for (_iter917 = this->values.begin(); _iter917 != this->values.end(); ++_iter917)
    {
      xfer += oprot->writeI32((int32_t)(*_iter917));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ClientCapability::type> ::const_iterator _iter893;
    for (_iter893 = this->values.begin(); _iter893 != this->values.end(); ++_iter893)
    {
      xfer += oprot->writeI32((int32_t)(*_iter893));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<ClientCapability::type> ::const_iterator _iter851;
    for (_iter851 = this->values.begin(); _iter851 != this->values.end(); ++_iter851)
    {
      xfer += oprot->writeI32((int32_t)(*_iter851));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ClientCapability::type> ::const_iterator _iter855;
    for (_iter855 = this->values.begin(); _iter855 != this->values.end(); ++_iter855)
    {
      xfer += oprot->writeI32((int32_t)(*_iter855));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ClientCapability::type> ::const_iterator _iter855;
    for (_iter855 = this->values.begin(); _iter855 != this->values.end(); ++_iter855)
    {
      xfer += oprot->writeI32((int32_t)(*_iter855));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<ClientCapability::type> ::const_iterator _iter897;
    for (_iter897 = this->values.begin(); _iter897 != this->values.end(); ++_iter897)
    {
      xfer += oprot->writeI32((int32_t)(*_iter897));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<ClientCapability::type> ::const_iterator _iter904;
    for (_iter904 = this->values.begin(); _iter904 != this->values.end(); ++_iter904)
    {
      xfer += oprot->writeI32((int32_t)(*_iter904));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientCapabilities &a, ClientCapabilities &b) {
  using ::std::swap;
  swap(a.values, b.values);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other937) {
  values = other937.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other938) {
  values = other938.values;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other919) {
  values = other919.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other920) {
  values = other920.values;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other899) {
  values = other899.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other900) {
  values = other900.values;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other918) {
  values = other918.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other919) {
  values = other919.values;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other894) {
  values = other894.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other895) {
  values = other895.values;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other852) {
  values = other852.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other853) {
  values = other853.values;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other856) {
  values = other856.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other857) {
  values = other857.values;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other856) {
  values = other856.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other857) {
  values = other857.values;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other898) {
  values = other898.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other899) {
  values = other899.values;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other905) {
  values = other905.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other906) {
  values = other906.values;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ClientCapabilities::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientCapabilities(";
  out << "values=" << to_string(values);
  out << ")";
}


GetTableRequest::~GetTableRequest() throw() {
}


void GetTableRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetTableRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetTableRequest::__set_capabilities(const ClientCapabilities& val) {
  this->capabilities = val;
__isset.capabilities = true;
}

void GetTableRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t GetTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->capabilities.read(iprot);
          this->__isset.capabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTableRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.capabilities) {
    xfer += oprot->writeFieldBegin("capabilities", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->capabilities.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTableRequest &a, GetTableRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.capabilities, b.capabilities);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTableRequest::GetTableRequest(const GetTableRequest& other939) {
  dbName = other939.dbName;
  tblName = other939.tblName;
  capabilities = other939.capabilities;
  catName = other939.catName;
  __isset = other939.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other940) {
  dbName = other940.dbName;
  tblName = other940.tblName;
  capabilities = other940.capabilities;
  catName = other940.catName;
  __isset = other940.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetTableRequest::GetTableRequest(const GetTableRequest& other921) {
  dbName = other921.dbName;
  tblName = other921.tblName;
  capabilities = other921.capabilities;
  __isset = other921.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other922) {
  dbName = other922.dbName;
  tblName = other922.tblName;
  capabilities = other922.capabilities;
  __isset = other922.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetTableRequest::GetTableRequest(const GetTableRequest& other901) {
  dbName = other901.dbName;
  tblName = other901.tblName;
  capabilities = other901.capabilities;
  __isset = other901.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other902) {
  dbName = other902.dbName;
  tblName = other902.tblName;
  capabilities = other902.capabilities;
  __isset = other902.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetTableRequest::GetTableRequest(const GetTableRequest& other920) {
  dbName = other920.dbName;
  tblName = other920.tblName;
  capabilities = other920.capabilities;
  __isset = other920.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other921) {
  dbName = other921.dbName;
  tblName = other921.tblName;
  capabilities = other921.capabilities;
  __isset = other921.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTableRequest::GetTableRequest(const GetTableRequest& other896) {
  dbName = other896.dbName;
  tblName = other896.tblName;
  capabilities = other896.capabilities;
  __isset = other896.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other897) {
  dbName = other897.dbName;
  tblName = other897.tblName;
  capabilities = other897.capabilities;
  __isset = other897.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetTableRequest::GetTableRequest(const GetTableRequest& other854) {
  dbName = other854.dbName;
  tblName = other854.tblName;
  capabilities = other854.capabilities;
  __isset = other854.__isset;
<<<<<<< HEAD
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other855) {
  dbName = other855.dbName;
  tblName = other855.tblName;
  capabilities = other855.capabilities;
  __isset = other855.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
GetTableRequest::GetTableRequest(const GetTableRequest& other858) {
  dbName = other858.dbName;
  tblName = other858.tblName;
  capabilities = other858.capabilities;
  __isset = other858.__isset;
<<<<<<< HEAD
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other859) {
  dbName = other859.dbName;
  tblName = other859.tblName;
  capabilities = other859.capabilities;
  __isset = other859.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other855) {
  dbName = other855.dbName;
  tblName = other855.tblName;
  capabilities = other855.capabilities;
  __isset = other855.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other859) {
  dbName = other859.dbName;
  tblName = other859.tblName;
  capabilities = other859.capabilities;
  __isset = other859.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetTableRequest::GetTableRequest(const GetTableRequest& other900) {
  dbName = other900.dbName;
  tblName = other900.tblName;
  capabilities = other900.capabilities;
  __isset = other900.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other901) {
  dbName = other901.dbName;
  tblName = other901.tblName;
  capabilities = other901.capabilities;
  __isset = other901.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetTableRequest::GetTableRequest(const GetTableRequest& other907) {
  dbName = other907.dbName;
  tblName = other907.tblName;
  capabilities = other907.capabilities;
  __isset = other907.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other908) {
  dbName = other908.dbName;
  tblName = other908.tblName;
  capabilities = other908.capabilities;
  __isset = other908.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "capabilities="; (__isset.capabilities ? (out << to_string(capabilities)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


GetTableResult::~GetTableResult() throw() {
}


void GetTableResult::__set_table(const Table& val) {
  this->table = val;
}

uint32_t GetTableResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_table = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->table.read(iprot);
          isset_table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_table)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTableResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTableResult");

  xfer += oprot->writeFieldBegin("table", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->table.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTableResult &a, GetTableResult &b) {
  using ::std::swap;
  swap(a.table, b.table);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTableResult::GetTableResult(const GetTableResult& other941) {
  table = other941.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other942) {
  table = other942.table;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetTableResult::GetTableResult(const GetTableResult& other923) {
  table = other923.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other924) {
  table = other924.table;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetTableResult::GetTableResult(const GetTableResult& other903) {
  table = other903.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other904) {
  table = other904.table;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetTableResult::GetTableResult(const GetTableResult& other922) {
  table = other922.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other923) {
  table = other923.table;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTableResult::GetTableResult(const GetTableResult& other898) {
  table = other898.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other899) {
  table = other899.table;
=======
GetTableResult::GetTableResult(const GetTableResult& other856) {
  table = other856.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other857) {
  table = other857.table;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTableResult::GetTableResult(const GetTableResult& other860) {
  table = other860.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other861) {
  table = other861.table;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetTableResult::GetTableResult(const GetTableResult& other856) {
  table = other856.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other857) {
  table = other857.table;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTableResult::GetTableResult(const GetTableResult& other860) {
  table = other860.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other861) {
  table = other861.table;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetTableResult::GetTableResult(const GetTableResult& other902) {
  table = other902.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other903) {
  table = other903.table;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetTableResult::GetTableResult(const GetTableResult& other909) {
  table = other909.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other910) {
  table = other910.table;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetTableResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableResult(";
  out << "table=" << to_string(table);
  out << ")";
}


GetTablesRequest::~GetTablesRequest() throw() {
}


void GetTablesRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetTablesRequest::__set_tblNames(const std::vector<std::string> & val) {
  this->tblNames = val;
__isset.tblNames = true;
}

void GetTablesRequest::__set_capabilities(const ClientCapabilities& val) {
  this->capabilities = val;
__isset.capabilities = true;
}

void GetTablesRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t GetTablesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tblNames.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size943;
            ::apache::thrift::protocol::TType _etype946;
            xfer += iprot->readListBegin(_etype946, _size943);
            this->tblNames.resize(_size943);
            uint32_t _i947;
            for (_i947 = 0; _i947 < _size943; ++_i947)
            {
              xfer += iprot->readString(this->tblNames[_i947]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size925;
            ::apache::thrift::protocol::TType _etype928;
            xfer += iprot->readListBegin(_etype928, _size925);
            this->tblNames.resize(_size925);
            uint32_t _i929;
            for (_i929 = 0; _i929 < _size925; ++_i929)
            {
              xfer += iprot->readString(this->tblNames[_i929]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size905;
            ::apache::thrift::protocol::TType _etype908;
            xfer += iprot->readListBegin(_etype908, _size905);
            this->tblNames.resize(_size905);
            uint32_t _i909;
            for (_i909 = 0; _i909 < _size905; ++_i909)
            {
              xfer += iprot->readString(this->tblNames[_i909]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size924;
            ::apache::thrift::protocol::TType _etype927;
            xfer += iprot->readListBegin(_etype927, _size924);
            this->tblNames.resize(_size924);
            uint32_t _i928;
            for (_i928 = 0; _i928 < _size924; ++_i928)
            {
              xfer += iprot->readString(this->tblNames[_i928]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size900;
            ::apache::thrift::protocol::TType _etype903;
            xfer += iprot->readListBegin(_etype903, _size900);
            this->tblNames.resize(_size900);
            uint32_t _i904;
            for (_i904 = 0; _i904 < _size900; ++_i904)
            {
              xfer += iprot->readString(this->tblNames[_i904]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size858;
            ::apache::thrift::protocol::TType _etype861;
            xfer += iprot->readListBegin(_etype861, _size858);
            this->tblNames.resize(_size858);
            uint32_t _i862;
            for (_i862 = 0; _i862 < _size858; ++_i862)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->tblNames[_i862]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size862;
            ::apache::thrift::protocol::TType _etype865;
            xfer += iprot->readListBegin(_etype865, _size862);
            this->tblNames.resize(_size862);
            uint32_t _i866;
            for (_i866 = 0; _i866 < _size862; ++_i866)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->tblNames[_i866]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += iprot->readString(this->tblNames[_i862]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readString(this->tblNames[_i866]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size904;
            ::apache::thrift::protocol::TType _etype907;
            xfer += iprot->readListBegin(_etype907, _size904);
            this->tblNames.resize(_size904);
            uint32_t _i908;
            for (_i908 = 0; _i908 < _size904; ++_i908)
            {
              xfer += iprot->readString(this->tblNames[_i908]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size911;
            ::apache::thrift::protocol::TType _etype914;
            xfer += iprot->readListBegin(_etype914, _size911);
            this->tblNames.resize(_size911);
            uint32_t _i915;
            for (_i915 = 0; _i915 < _size911; ++_i915)
            {
              xfer += iprot->readString(this->tblNames[_i915]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tblNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->capabilities.read(iprot);
          this->__isset.capabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTablesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTablesRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tblNames) {
    xfer += oprot->writeFieldBegin("tblNames", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tblNames.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter948;
      for (_iter948 = this->tblNames.begin(); _iter948 != this->tblNames.end(); ++_iter948)
      {
        xfer += oprot->writeString((*_iter948));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter930;
      for (_iter930 = this->tblNames.begin(); _iter930 != this->tblNames.end(); ++_iter930)
      {
        xfer += oprot->writeString((*_iter930));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter910;
      for (_iter910 = this->tblNames.begin(); _iter910 != this->tblNames.end(); ++_iter910)
      {
        xfer += oprot->writeString((*_iter910));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<std::string> ::const_iterator _iter929;
      for (_iter929 = this->tblNames.begin(); _iter929 != this->tblNames.end(); ++_iter929)
      {
        xfer += oprot->writeString((*_iter929));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter905;
      for (_iter905 = this->tblNames.begin(); _iter905 != this->tblNames.end(); ++_iter905)
      {
        xfer += oprot->writeString((*_iter905));
=======
      std::vector<std::string> ::const_iterator _iter863;
      for (_iter863 = this->tblNames.begin(); _iter863 != this->tblNames.end(); ++_iter863)
      {
        xfer += oprot->writeString((*_iter863));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter867;
      for (_iter867 = this->tblNames.begin(); _iter867 != this->tblNames.end(); ++_iter867)
      {
        xfer += oprot->writeString((*_iter867));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter863;
      for (_iter863 = this->tblNames.begin(); _iter863 != this->tblNames.end(); ++_iter863)
      {
        xfer += oprot->writeString((*_iter863));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter867;
      for (_iter867 = this->tblNames.begin(); _iter867 != this->tblNames.end(); ++_iter867)
      {
        xfer += oprot->writeString((*_iter867));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<std::string> ::const_iterator _iter909;
      for (_iter909 = this->tblNames.begin(); _iter909 != this->tblNames.end(); ++_iter909)
      {
        xfer += oprot->writeString((*_iter909));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<std::string> ::const_iterator _iter916;
      for (_iter916 = this->tblNames.begin(); _iter916 != this->tblNames.end(); ++_iter916)
      {
        xfer += oprot->writeString((*_iter916));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.capabilities) {
    xfer += oprot->writeFieldBegin("capabilities", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->capabilities.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTablesRequest &a, GetTablesRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblNames, b.tblNames);
  swap(a.capabilities, b.capabilities);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other949) {
  dbName = other949.dbName;
  tblNames = other949.tblNames;
  capabilities = other949.capabilities;
  catName = other949.catName;
  __isset = other949.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other950) {
  dbName = other950.dbName;
  tblNames = other950.tblNames;
  capabilities = other950.capabilities;
  catName = other950.catName;
  __isset = other950.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other931) {
  dbName = other931.dbName;
  tblNames = other931.tblNames;
  capabilities = other931.capabilities;
  __isset = other931.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other932) {
  dbName = other932.dbName;
  tblNames = other932.tblNames;
  capabilities = other932.capabilities;
  __isset = other932.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other911) {
  dbName = other911.dbName;
  tblNames = other911.tblNames;
  capabilities = other911.capabilities;
  __isset = other911.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other912) {
  dbName = other912.dbName;
  tblNames = other912.tblNames;
  capabilities = other912.capabilities;
  __isset = other912.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other930) {
  dbName = other930.dbName;
  tblNames = other930.tblNames;
  capabilities = other930.capabilities;
  __isset = other930.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other931) {
  dbName = other931.dbName;
  tblNames = other931.tblNames;
  capabilities = other931.capabilities;
  __isset = other931.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other906) {
  dbName = other906.dbName;
  tblNames = other906.tblNames;
  capabilities = other906.capabilities;
  __isset = other906.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other907) {
  dbName = other907.dbName;
  tblNames = other907.tblNames;
  capabilities = other907.capabilities;
  __isset = other907.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other864) {
  dbName = other864.dbName;
  tblNames = other864.tblNames;
  capabilities = other864.capabilities;
  __isset = other864.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other865) {
  dbName = other865.dbName;
  tblNames = other865.tblNames;
  capabilities = other865.capabilities;
  __isset = other865.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other868) {
  dbName = other868.dbName;
  tblNames = other868.tblNames;
  capabilities = other868.capabilities;
  __isset = other868.__isset;
}
=======
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other868) {
  dbName = other868.dbName;
  tblNames = other868.tblNames;
  capabilities = other868.capabilities;
  __isset = other868.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other869) {
  dbName = other869.dbName;
  tblNames = other869.tblNames;
  capabilities = other869.capabilities;
  __isset = other869.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other910) {
  dbName = other910.dbName;
  tblNames = other910.tblNames;
  capabilities = other910.capabilities;
  __isset = other910.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other911) {
  dbName = other911.dbName;
  tblNames = other911.tblNames;
  capabilities = other911.capabilities;
  __isset = other911.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other917) {
  dbName = other917.dbName;
  tblNames = other917.tblNames;
  capabilities = other917.capabilities;
  __isset = other917.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other918) {
  dbName = other918.dbName;
  tblNames = other918.tblNames;
  capabilities = other918.capabilities;
  __isset = other918.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetTablesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTablesRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblNames="; (__isset.tblNames ? (out << to_string(tblNames)) : (out << "<null>"));
  out << ", " << "capabilities="; (__isset.capabilities ? (out << to_string(capabilities)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


GetTablesResult::~GetTablesResult() throw() {
}


void GetTablesResult::__set_tables(const std::vector<Table> & val) {
  this->tables = val;
}

uint32_t GetTablesResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tables = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tables.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size951;
            ::apache::thrift::protocol::TType _etype954;
            xfer += iprot->readListBegin(_etype954, _size951);
            this->tables.resize(_size951);
            uint32_t _i955;
            for (_i955 = 0; _i955 < _size951; ++_i955)
            {
              xfer += this->tables[_i955].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size933;
            ::apache::thrift::protocol::TType _etype936;
            xfer += iprot->readListBegin(_etype936, _size933);
            this->tables.resize(_size933);
            uint32_t _i937;
            for (_i937 = 0; _i937 < _size933; ++_i937)
            {
              xfer += this->tables[_i937].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size913;
            ::apache::thrift::protocol::TType _etype916;
            xfer += iprot->readListBegin(_etype916, _size913);
            this->tables.resize(_size913);
            uint32_t _i917;
            for (_i917 = 0; _i917 < _size913; ++_i917)
            {
              xfer += this->tables[_i917].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size932;
            ::apache::thrift::protocol::TType _etype935;
            xfer += iprot->readListBegin(_etype935, _size932);
            this->tables.resize(_size932);
            uint32_t _i936;
            for (_i936 = 0; _i936 < _size932; ++_i936)
            {
              xfer += this->tables[_i936].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size908;
            ::apache::thrift::protocol::TType _etype911;
            xfer += iprot->readListBegin(_etype911, _size908);
            this->tables.resize(_size908);
            uint32_t _i912;
            for (_i912 = 0; _i912 < _size908; ++_i912)
            {
              xfer += this->tables[_i912].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size866;
            ::apache::thrift::protocol::TType _etype869;
            xfer += iprot->readListBegin(_etype869, _size866);
            this->tables.resize(_size866);
            uint32_t _i870;
            for (_i870 = 0; _i870 < _size866; ++_i870)
            {
              xfer += this->tables[_i870].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size870;
            ::apache::thrift::protocol::TType _etype873;
            xfer += iprot->readListBegin(_etype873, _size870);
            this->tables.resize(_size870);
            uint32_t _i874;
            for (_i874 = 0; _i874 < _size870; ++_i874)
            {
              xfer += this->tables[_i874].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size870;
            ::apache::thrift::protocol::TType _etype873;
            xfer += iprot->readListBegin(_etype873, _size870);
            this->tables.resize(_size870);
            uint32_t _i874;
            for (_i874 = 0; _i874 < _size870; ++_i874)
            {
              xfer += this->tables[_i874].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size912;
            ::apache::thrift::protocol::TType _etype915;
            xfer += iprot->readListBegin(_etype915, _size912);
            this->tables.resize(_size912);
            uint32_t _i916;
            for (_i916 = 0; _i916 < _size912; ++_i916)
            {
              xfer += this->tables[_i916].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size919;
            ::apache::thrift::protocol::TType _etype922;
            xfer += iprot->readListBegin(_etype922, _size919);
            this->tables.resize(_size919);
            uint32_t _i923;
            for (_i923 = 0; _i923 < _size919; ++_i923)
            {
              xfer += this->tables[_i923].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_tables = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tables)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTablesResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTablesResult");

  xfer += oprot->writeFieldBegin("tables", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tables.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<Table> ::const_iterator _iter956;
    for (_iter956 = this->tables.begin(); _iter956 != this->tables.end(); ++_iter956)
    {
      xfer += (*_iter956).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<Table> ::const_iterator _iter938;
    for (_iter938 = this->tables.begin(); _iter938 != this->tables.end(); ++_iter938)
    {
      xfer += (*_iter938).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<Table> ::const_iterator _iter918;
    for (_iter918 = this->tables.begin(); _iter918 != this->tables.end(); ++_iter918)
    {
      xfer += (*_iter918).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<Table> ::const_iterator _iter937;
    for (_iter937 = this->tables.begin(); _iter937 != this->tables.end(); ++_iter937)
    {
      xfer += (*_iter937).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<Table> ::const_iterator _iter913;
    for (_iter913 = this->tables.begin(); _iter913 != this->tables.end(); ++_iter913)
    {
      xfer += (*_iter913).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<Table> ::const_iterator _iter871;
    for (_iter871 = this->tables.begin(); _iter871 != this->tables.end(); ++_iter871)
    {
      xfer += (*_iter871).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<Table> ::const_iterator _iter875;
    for (_iter875 = this->tables.begin(); _iter875 != this->tables.end(); ++_iter875)
    {
      xfer += (*_iter875).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<Table> ::const_iterator _iter875;
    for (_iter875 = this->tables.begin(); _iter875 != this->tables.end(); ++_iter875)
    {
      xfer += (*_iter875).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<Table> ::const_iterator _iter917;
    for (_iter917 = this->tables.begin(); _iter917 != this->tables.end(); ++_iter917)
    {
      xfer += (*_iter917).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<Table> ::const_iterator _iter924;
    for (_iter924 = this->tables.begin(); _iter924 != this->tables.end(); ++_iter924)
    {
      xfer += (*_iter924).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTablesResult &a, GetTablesResult &b) {
  using ::std::swap;
  swap(a.tables, b.tables);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTablesResult::GetTablesResult(const GetTablesResult& other957) {
  tables = other957.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other958) {
  tables = other958.tables;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetTablesResult::GetTablesResult(const GetTablesResult& other939) {
  tables = other939.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other940) {
  tables = other940.tables;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
GetTablesResult::GetTablesResult(const GetTablesResult& other919) {
  tables = other919.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other920) {
  tables = other920.tables;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
GetTablesResult::GetTablesResult(const GetTablesResult& other938) {
  tables = other938.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other939) {
  tables = other939.tables;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTablesResult::GetTablesResult(const GetTablesResult& other914) {
  tables = other914.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other915) {
  tables = other915.tables;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetTablesResult::GetTablesResult(const GetTablesResult& other872) {
  tables = other872.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other873) {
  tables = other873.tables;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTablesResult::GetTablesResult(const GetTablesResult& other876) {
  tables = other876.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other877) {
  tables = other877.tables;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTablesResult::GetTablesResult(const GetTablesResult& other876) {
  tables = other876.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other877) {
  tables = other877.tables;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
GetTablesResult::GetTablesResult(const GetTablesResult& other918) {
  tables = other918.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other919) {
  tables = other919.tables;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
GetTablesResult::GetTablesResult(const GetTablesResult& other925) {
  tables = other925.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other926) {
  tables = other926.tables;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetTablesResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTablesResult(";
  out << "tables=" << to_string(tables);
  out << ")";
}


CmRecycleRequest::~CmRecycleRequest() throw() {
}


void CmRecycleRequest::__set_dataPath(const std::string& val) {
  this->dataPath = val;
}

void CmRecycleRequest::__set_purge(const bool val) {
  this->purge = val;
}

uint32_t CmRecycleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dataPath = false;
  bool isset_purge = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataPath);
          isset_dataPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->purge);
          isset_purge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dataPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purge)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CmRecycleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CmRecycleRequest");

  xfer += oprot->writeFieldBegin("dataPath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dataPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purge", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->purge);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CmRecycleRequest &a, CmRecycleRequest &b) {
  using ::std::swap;
  swap(a.dataPath, b.dataPath);
  swap(a.purge, b.purge);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other959) {
  dataPath = other959.dataPath;
  purge = other959.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other960) {
  dataPath = other960.dataPath;
  purge = other960.purge;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other941) {
  dataPath = other941.dataPath;
  purge = other941.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other942) {
  dataPath = other942.dataPath;
  purge = other942.purge;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other921) {
  dataPath = other921.dataPath;
  purge = other921.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other922) {
  dataPath = other922.dataPath;
  purge = other922.purge;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other940) {
  dataPath = other940.dataPath;
  purge = other940.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other941) {
  dataPath = other941.dataPath;
  purge = other941.purge;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other916) {
  dataPath = other916.dataPath;
  purge = other916.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other917) {
  dataPath = other917.dataPath;
  purge = other917.purge;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other874) {
  dataPath = other874.dataPath;
  purge = other874.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other875) {
  dataPath = other875.dataPath;
  purge = other875.purge;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other878) {
  dataPath = other878.dataPath;
  purge = other878.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other879) {
  dataPath = other879.dataPath;
  purge = other879.purge;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other878) {
  dataPath = other878.dataPath;
  purge = other878.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other879) {
  dataPath = other879.dataPath;
  purge = other879.purge;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other920) {
  dataPath = other920.dataPath;
  purge = other920.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other921) {
  dataPath = other921.dataPath;
  purge = other921.purge;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other927) {
  dataPath = other927.dataPath;
  purge = other927.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other928) {
  dataPath = other928.dataPath;
  purge = other928.purge;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CmRecycleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CmRecycleRequest(";
  out << "dataPath=" << to_string(dataPath);
  out << ", " << "purge=" << to_string(purge);
  out << ")";
}


CmRecycleResponse::~CmRecycleResponse() throw() {
}


uint32_t CmRecycleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CmRecycleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CmRecycleResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CmRecycleResponse &a, CmRecycleResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other961) {
  (void) other961;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other962) {
  (void) other962;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other943) {
  (void) other943;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other944) {
  (void) other944;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other923) {
  (void) other923;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other924) {
  (void) other924;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other942) {
  (void) other942;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other943) {
  (void) other943;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other918) {
  (void) other918;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other919) {
  (void) other919;
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other876) {
  (void) other876;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other877) {
  (void) other877;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other880) {
  (void) other880;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other881) {
  (void) other881;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other876) {
  (void) other876;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other877) {
  (void) other877;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other880) {
  (void) other880;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other881) {
  (void) other881;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other922) {
  (void) other922;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other923) {
  (void) other923;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other929) {
  (void) other929;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other930) {
  (void) other930;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void CmRecycleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CmRecycleResponse(";
  out << ")";
}


TableMeta::~TableMeta() throw() {
}


void TableMeta::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void TableMeta::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void TableMeta::__set_tableType(const std::string& val) {
  this->tableType = val;
}

void TableMeta::__set_comments(const std::string& val) {
  this->comments = val;
__isset.comments = true;
}

void TableMeta::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

uint32_t TableMeta::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tableName = false;
  bool isset_tableType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          isset_tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableType);
          isset_tableType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableMeta::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableMeta");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.comments) {
    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->comments);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catName) {
    xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->catName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableMeta &a, TableMeta &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.tableType, b.tableType);
  swap(a.comments, b.comments);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TableMeta::TableMeta(const TableMeta& other963) {
  dbName = other963.dbName;
  tableName = other963.tableName;
  tableType = other963.tableType;
  comments = other963.comments;
  catName = other963.catName;
  __isset = other963.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other964) {
  dbName = other964.dbName;
  tableName = other964.tableName;
  tableType = other964.tableType;
  comments = other964.comments;
  catName = other964.catName;
  __isset = other964.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
TableMeta::TableMeta(const TableMeta& other945) {
  dbName = other945.dbName;
  tableName = other945.tableName;
  tableType = other945.tableType;
  comments = other945.comments;
  __isset = other945.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other946) {
  dbName = other946.dbName;
  tableName = other946.tableName;
  tableType = other946.tableType;
  comments = other946.comments;
  __isset = other946.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
TableMeta::TableMeta(const TableMeta& other925) {
  dbName = other925.dbName;
  tableName = other925.tableName;
  tableType = other925.tableType;
  comments = other925.comments;
  __isset = other925.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other926) {
  dbName = other926.dbName;
  tableName = other926.tableName;
  tableType = other926.tableType;
  comments = other926.comments;
  __isset = other926.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
TableMeta::TableMeta(const TableMeta& other944) {
  dbName = other944.dbName;
  tableName = other944.tableName;
  tableType = other944.tableType;
  comments = other944.comments;
  __isset = other944.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other945) {
  dbName = other945.dbName;
  tableName = other945.tableName;
  tableType = other945.tableType;
  comments = other945.comments;
  __isset = other945.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TableMeta::TableMeta(const TableMeta& other920) {
  dbName = other920.dbName;
  tableName = other920.tableName;
  tableType = other920.tableType;
  comments = other920.comments;
  __isset = other920.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other921) {
  dbName = other921.dbName;
  tableName = other921.tableName;
  tableType = other921.tableType;
  comments = other921.comments;
  __isset = other921.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
TableMeta::TableMeta(const TableMeta& other878) {
  dbName = other878.dbName;
  tableName = other878.tableName;
  tableType = other878.tableType;
  comments = other878.comments;
  __isset = other878.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other879) {
  dbName = other879.dbName;
  tableName = other879.tableName;
  tableType = other879.tableType;
  comments = other879.comments;
  __isset = other879.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TableMeta::TableMeta(const TableMeta& other882) {
  dbName = other882.dbName;
  tableName = other882.tableName;
  tableType = other882.tableType;
  comments = other882.comments;
  __isset = other882.__isset;
}
=======
TableMeta::TableMeta(const TableMeta& other882) {
  dbName = other882.dbName;
  tableName = other882.tableName;
  tableType = other882.tableType;
  comments = other882.comments;
  __isset = other882.__isset;
}
<<<<<<< HEAD
TableMeta& TableMeta::operator=(const TableMeta& other945) {
  dbName = other945.dbName;
  tableName = other945.tableName;
  tableType = other945.tableType;
  comments = other945.comments;
  __isset = other945.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
TableMeta& TableMeta::operator=(const TableMeta& other883) {
  dbName = other883.dbName;
  tableName = other883.tableName;
  tableType = other883.tableType;
  comments = other883.comments;
  __isset = other883.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
TableMeta::TableMeta(const TableMeta& other924) {
  dbName = other924.dbName;
  tableName = other924.tableName;
  tableType = other924.tableType;
  comments = other924.comments;
  __isset = other924.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other925) {
  dbName = other925.dbName;
  tableName = other925.tableName;
  tableType = other925.tableType;
  comments = other925.comments;
  __isset = other925.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
TableMeta::TableMeta(const TableMeta& other931) {
  dbName = other931.dbName;
  tableName = other931.tableName;
  tableType = other931.tableType;
  comments = other931.comments;
  __isset = other931.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other932) {
  dbName = other932.dbName;
  tableName = other932.tableName;
  tableType = other932.tableType;
  comments = other932.comments;
  __isset = other932.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void TableMeta::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableMeta(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "tableType=" << to_string(tableType);
  out << ", " << "comments="; (__isset.comments ? (out << to_string(comments)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


Materialization::~Materialization() throw() {
}


void Materialization::__set_tablesUsed(const std::set<std::string> & val) {
  this->tablesUsed = val;
}

void Materialization::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
__isset.validTxnList = true;
}

void Materialization::__set_invalidationTime(const int64_t val) {
  this->invalidationTime = val;
}

uint32_t Materialization::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tablesUsed = false;
  bool isset_invalidationTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tablesUsed.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size965;
            ::apache::thrift::protocol::TType _etype968;
            xfer += iprot->readSetBegin(_etype968, _size965);
            uint32_t _i969;
            for (_i969 = 0; _i969 < _size965; ++_i969)
            {
              std::string _elem970;
              xfer += iprot->readString(_elem970);
              this->tablesUsed.insert(_elem970);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size947;
            ::apache::thrift::protocol::TType _etype950;
            xfer += iprot->readSetBegin(_etype950, _size947);
            uint32_t _i951;
            for (_i951 = 0; _i951 < _size947; ++_i951)
            {
              std::string _elem952;
              xfer += iprot->readString(_elem952);
              this->tablesUsed.insert(_elem952);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size927;
            ::apache::thrift::protocol::TType _etype930;
            xfer += iprot->readSetBegin(_etype930, _size927);
            uint32_t _i931;
            for (_i931 = 0; _i931 < _size927; ++_i931)
            {
              std::string _elem932;
              xfer += iprot->readString(_elem932);
              this->tablesUsed.insert(_elem932);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size946;
            ::apache::thrift::protocol::TType _etype949;
            xfer += iprot->readSetBegin(_etype949, _size946);
            uint32_t _i950;
            for (_i950 = 0; _i950 < _size946; ++_i950)
            {
              std::string _elem951;
              xfer += iprot->readString(_elem951);
              this->tablesUsed.insert(_elem951);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size922;
            ::apache::thrift::protocol::TType _etype925;
            xfer += iprot->readSetBegin(_etype925, _size922);
            uint32_t _i926;
            for (_i926 = 0; _i926 < _size922; ++_i926)
            {
              std::string _elem927;
              xfer += iprot->readString(_elem927);
              this->tablesUsed.insert(_elem927);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size880;
            ::apache::thrift::protocol::TType _etype883;
            xfer += iprot->readSetBegin(_etype883, _size880);
            uint32_t _i884;
            for (_i884 = 0; _i884 < _size880; ++_i884)
            {
              std::string _elem885;
              xfer += iprot->readString(_elem885);
              this->tablesUsed.insert(_elem885);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size884;
            ::apache::thrift::protocol::TType _etype887;
            xfer += iprot->readSetBegin(_etype887, _size884);
            uint32_t _i888;
            for (_i888 = 0; _i888 < _size884; ++_i888)
            {
              std::string _elem889;
              xfer += iprot->readString(_elem889);
              this->tablesUsed.insert(_elem889);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size884;
            ::apache::thrift::protocol::TType _etype887;
            xfer += iprot->readSetBegin(_etype887, _size884);
            uint32_t _i888;
            for (_i888 = 0; _i888 < _size884; ++_i888)
            {
              std::string _elem889;
              xfer += iprot->readString(_elem889);
              this->tablesUsed.insert(_elem889);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size926;
            ::apache::thrift::protocol::TType _etype929;
            xfer += iprot->readSetBegin(_etype929, _size926);
            uint32_t _i930;
            for (_i930 = 0; _i930 < _size926; ++_i930)
            {
              std::string _elem931;
              xfer += iprot->readString(_elem931);
              this->tablesUsed.insert(_elem931);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size933;
            ::apache::thrift::protocol::TType _etype936;
            xfer += iprot->readSetBegin(_etype936, _size933);
            uint32_t _i937;
            for (_i937 = 0; _i937 < _size933; ++_i937)
            {
              std::string _elem938;
              xfer += iprot->readString(_elem938);
              this->tablesUsed.insert(_elem938);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readSetEnd();
          }
          isset_tablesUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->validTxnList);
          this->__isset.validTxnList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->invalidationTime);
          isset_invalidationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tablesUsed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidationTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Materialization::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Materialization");

  xfer += oprot->writeFieldBegin("tablesUsed", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tablesUsed.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter971;
    for (_iter971 = this->tablesUsed.begin(); _iter971 != this->tablesUsed.end(); ++_iter971)
    {
      xfer += oprot->writeString((*_iter971));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter953;
    for (_iter953 = this->tablesUsed.begin(); _iter953 != this->tablesUsed.end(); ++_iter953)
    {
      xfer += oprot->writeString((*_iter953));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter933;
    for (_iter933 = this->tablesUsed.begin(); _iter933 != this->tablesUsed.end(); ++_iter933)
    {
      xfer += oprot->writeString((*_iter933));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::set<std::string> ::const_iterator _iter952;
    for (_iter952 = this->tablesUsed.begin(); _iter952 != this->tablesUsed.end(); ++_iter952)
    {
      xfer += oprot->writeString((*_iter952));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter928;
    for (_iter928 = this->tablesUsed.begin(); _iter928 != this->tablesUsed.end(); ++_iter928)
    {
      xfer += oprot->writeString((*_iter928));
=======
    std::set<std::string> ::const_iterator _iter886;
    for (_iter886 = this->tablesUsed.begin(); _iter886 != this->tablesUsed.end(); ++_iter886)
    {
      xfer += oprot->writeString((*_iter886));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter890;
    for (_iter890 = this->tablesUsed.begin(); _iter890 != this->tablesUsed.end(); ++_iter890)
    {
      xfer += oprot->writeString((*_iter890));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<std::string> ::const_iterator _iter886;
    for (_iter886 = this->tablesUsed.begin(); _iter886 != this->tablesUsed.end(); ++_iter886)
    {
      xfer += oprot->writeString((*_iter886));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter890;
    for (_iter890 = this->tablesUsed.begin(); _iter890 != this->tablesUsed.end(); ++_iter890)
    {
      xfer += oprot->writeString((*_iter890));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::set<std::string> ::const_iterator _iter932;
    for (_iter932 = this->tablesUsed.begin(); _iter932 != this->tablesUsed.end(); ++_iter932)
    {
      xfer += oprot->writeString((*_iter932));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::set<std::string> ::const_iterator _iter939;
    for (_iter939 = this->tablesUsed.begin(); _iter939 != this->tablesUsed.end(); ++_iter939)
    {
      xfer += oprot->writeString((*_iter939));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.validTxnList) {
    xfer += oprot->writeFieldBegin("validTxnList", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->validTxnList);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("invalidationTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->invalidationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Materialization &a, Materialization &b) {
  using ::std::swap;
  swap(a.tablesUsed, b.tablesUsed);
  swap(a.validTxnList, b.validTxnList);
  swap(a.invalidationTime, b.invalidationTime);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
Materialization::Materialization(const Materialization& other972) {
  tablesUsed = other972.tablesUsed;
  validTxnList = other972.validTxnList;
  invalidationTime = other972.invalidationTime;
  __isset = other972.__isset;
}
Materialization& Materialization::operator=(const Materialization& other973) {
  tablesUsed = other973.tablesUsed;
  validTxnList = other973.validTxnList;
  invalidationTime = other973.invalidationTime;
  __isset = other973.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
Materialization::Materialization(const Materialization& other954) {
  tablesUsed = other954.tablesUsed;
  validTxnList = other954.validTxnList;
  invalidationTime = other954.invalidationTime;
  __isset = other954.__isset;
}
Materialization& Materialization::operator=(const Materialization& other955) {
  tablesUsed = other955.tablesUsed;
  validTxnList = other955.validTxnList;
  invalidationTime = other955.invalidationTime;
  __isset = other955.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
Materialization::Materialization(const Materialization& other934) {
  tablesUsed = other934.tablesUsed;
  validTxnList = other934.validTxnList;
  invalidationTime = other934.invalidationTime;
  __isset = other934.__isset;
}
Materialization& Materialization::operator=(const Materialization& other935) {
  tablesUsed = other935.tablesUsed;
  validTxnList = other935.validTxnList;
  invalidationTime = other935.invalidationTime;
  __isset = other935.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
Materialization::Materialization(const Materialization& other953) {
  tablesUsed = other953.tablesUsed;
  validTxnList = other953.validTxnList;
  invalidationTime = other953.invalidationTime;
  __isset = other953.__isset;
}
Materialization& Materialization::operator=(const Materialization& other954) {
  tablesUsed = other954.tablesUsed;
  validTxnList = other954.validTxnList;
  invalidationTime = other954.invalidationTime;
  __isset = other954.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
Materialization::Materialization(const Materialization& other929) {
  tablesUsed = other929.tablesUsed;
  validTxnList = other929.validTxnList;
  invalidationTime = other929.invalidationTime;
  __isset = other929.__isset;
}
Materialization& Materialization::operator=(const Materialization& other930) {
  tablesUsed = other930.tablesUsed;
  validTxnList = other930.validTxnList;
  invalidationTime = other930.invalidationTime;
  __isset = other930.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
Materialization::Materialization(const Materialization& other887) {
  materializationTable = other887.materializationTable;
  tablesUsed = other887.tablesUsed;
  invalidationTime = other887.invalidationTime;
}
Materialization& Materialization::operator=(const Materialization& other888) {
  materializationTable = other888.materializationTable;
  tablesUsed = other888.tablesUsed;
  invalidationTime = other888.invalidationTime;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
Materialization::Materialization(const Materialization& other891) {
  materializationTable = other891.materializationTable;
  tablesUsed = other891.tablesUsed;
  invalidationTime = other891.invalidationTime;
}
=======
Materialization::Materialization(const Materialization& other891) {
  materializationTable = other891.materializationTable;
  tablesUsed = other891.tablesUsed;
  invalidationTime = other891.invalidationTime;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
Materialization& Materialization::operator=(const Materialization& other892) {
  materializationTable = other892.materializationTable;
  tablesUsed = other892.tablesUsed;
  invalidationTime = other892.invalidationTime;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
Materialization::Materialization(const Materialization& other933) {
  tablesUsed = other933.tablesUsed;
  validTxnList = other933.validTxnList;
  invalidationTime = other933.invalidationTime;
  __isset = other933.__isset;
}
Materialization& Materialization::operator=(const Materialization& other934) {
  tablesUsed = other934.tablesUsed;
  validTxnList = other934.validTxnList;
  invalidationTime = other934.invalidationTime;
  __isset = other934.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
Materialization::Materialization(const Materialization& other940) {
  tablesUsed = other940.tablesUsed;
  validTxnList = other940.validTxnList;
  invalidationTime = other940.invalidationTime;
  __isset = other940.__isset;
}
Materialization& Materialization::operator=(const Materialization& other941) {
  tablesUsed = other941.tablesUsed;
  validTxnList = other941.validTxnList;
  invalidationTime = other941.invalidationTime;
  __isset = other941.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void Materialization::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Materialization(";
  out << "tablesUsed=" << to_string(tablesUsed);
  out << ", " << "validTxnList="; (__isset.validTxnList ? (out << to_string(validTxnList)) : (out << "<null>"));
  out << ", " << "invalidationTime=" << to_string(invalidationTime);
  out << ")";
}


WMResourcePlan::~WMResourcePlan() throw() {
}


void WMResourcePlan::__set_name(const std::string& val) {
  this->name = val;
}

void WMResourcePlan::__set_status(const WMResourcePlanStatus::type val) {
  this->status = val;
__isset.status = true;
}

void WMResourcePlan::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMResourcePlan::__set_defaultPoolPath(const std::string& val) {
  this->defaultPoolPath = val;
__isset.defaultPoolPath = true;
}

uint32_t WMResourcePlan::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast974;
          xfer += iprot->readI32(ecast974);
          this->status = (WMResourcePlanStatus::type)ecast974;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast956;
          xfer += iprot->readI32(ecast956);
          this->status = (WMResourcePlanStatus::type)ecast956;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast936;
          xfer += iprot->readI32(ecast936);
          this->status = (WMResourcePlanStatus::type)ecast936;
=======
          int32_t ecast955;
          xfer += iprot->readI32(ecast955);
          this->status = (WMResourcePlanStatus::type)ecast955;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast955;
          xfer += iprot->readI32(ecast955);
          this->status = (WMResourcePlanStatus::type)ecast955;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast931;
          xfer += iprot->readI32(ecast931);
          this->status = (WMResourcePlanStatus::type)ecast931;
=======
          int32_t ecast889;
          xfer += iprot->readI32(ecast889);
          this->status = (WMResourcePlanStatus::type)ecast889;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast893;
          xfer += iprot->readI32(ecast893);
          this->status = (WMResourcePlanStatus::type)ecast893;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast889;
          xfer += iprot->readI32(ecast889);
          this->status = (WMResourcePlanStatus::type)ecast889;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast893;
          xfer += iprot->readI32(ecast893);
          this->status = (WMResourcePlanStatus::type)ecast893;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast935;
          xfer += iprot->readI32(ecast935);
          this->status = (WMResourcePlanStatus::type)ecast935;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast942;
          xfer += iprot->readI32(ecast942);
          this->status = (WMResourcePlanStatus::type)ecast942;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultPoolPath);
          this->__isset.defaultPoolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMResourcePlan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMResourcePlan");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultPoolPath) {
    xfer += oprot->writeFieldBegin("defaultPoolPath", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->defaultPoolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMResourcePlan &a, WMResourcePlan &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.status, b.status);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.defaultPoolPath, b.defaultPoolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other975) {
  name = other975.name;
  status = other975.status;
  queryParallelism = other975.queryParallelism;
  defaultPoolPath = other975.defaultPoolPath;
  __isset = other975.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other976) {
  name = other976.name;
  status = other976.status;
  queryParallelism = other976.queryParallelism;
  defaultPoolPath = other976.defaultPoolPath;
  __isset = other976.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other957) {
  name = other957.name;
  status = other957.status;
  queryParallelism = other957.queryParallelism;
  defaultPoolPath = other957.defaultPoolPath;
  __isset = other957.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other958) {
  name = other958.name;
  status = other958.status;
  queryParallelism = other958.queryParallelism;
  defaultPoolPath = other958.defaultPoolPath;
  __isset = other958.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other937) {
  name = other937.name;
  status = other937.status;
  queryParallelism = other937.queryParallelism;
  defaultPoolPath = other937.defaultPoolPath;
  __isset = other937.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other938) {
  name = other938.name;
  status = other938.status;
  queryParallelism = other938.queryParallelism;
  defaultPoolPath = other938.defaultPoolPath;
  __isset = other938.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other956) {
  name = other956.name;
  status = other956.status;
  queryParallelism = other956.queryParallelism;
  defaultPoolPath = other956.defaultPoolPath;
  __isset = other956.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other957) {
  name = other957.name;
  status = other957.status;
  queryParallelism = other957.queryParallelism;
  defaultPoolPath = other957.defaultPoolPath;
  __isset = other957.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other932) {
  name = other932.name;
  status = other932.status;
  queryParallelism = other932.queryParallelism;
  defaultPoolPath = other932.defaultPoolPath;
  __isset = other932.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other933) {
  name = other933.name;
  status = other933.status;
  queryParallelism = other933.queryParallelism;
  defaultPoolPath = other933.defaultPoolPath;
  __isset = other933.__isset;
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other890) {
  name = other890.name;
  status = other890.status;
  queryParallelism = other890.queryParallelism;
  defaultPoolPath = other890.defaultPoolPath;
  __isset = other890.__isset;
}
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other890) {
  name = other890.name;
  status = other890.status;
  queryParallelism = other890.queryParallelism;
  defaultPoolPath = other890.defaultPoolPath;
  __isset = other890.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other891) {
  name = other891.name;
  status = other891.status;
  queryParallelism = other891.queryParallelism;
  defaultPoolPath = other891.defaultPoolPath;
  __isset = other891.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other894) {
  name = other894.name;
  status = other894.status;
  queryParallelism = other894.queryParallelism;
  defaultPoolPath = other894.defaultPoolPath;
  __isset = other894.__isset;
}
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other894) {
  name = other894.name;
  status = other894.status;
  queryParallelism = other894.queryParallelism;
  defaultPoolPath = other894.defaultPoolPath;
  __isset = other894.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other895) {
  name = other895.name;
  status = other895.status;
  queryParallelism = other895.queryParallelism;
  defaultPoolPath = other895.defaultPoolPath;
  __isset = other895.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other936) {
  name = other936.name;
  status = other936.status;
  queryParallelism = other936.queryParallelism;
  defaultPoolPath = other936.defaultPoolPath;
  __isset = other936.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other937) {
  name = other937.name;
  status = other937.status;
  queryParallelism = other937.queryParallelism;
  defaultPoolPath = other937.defaultPoolPath;
  __isset = other937.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other943) {
  name = other943.name;
  status = other943.status;
  queryParallelism = other943.queryParallelism;
  defaultPoolPath = other943.defaultPoolPath;
  __isset = other943.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other944) {
  name = other944.name;
  status = other944.status;
  queryParallelism = other944.queryParallelism;
  defaultPoolPath = other944.defaultPoolPath;
  __isset = other944.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMResourcePlan(";
  out << "name=" << to_string(name);
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "defaultPoolPath="; (__isset.defaultPoolPath ? (out << to_string(defaultPoolPath)) : (out << "<null>"));
  out << ")";
}


WMNullableResourcePlan::~WMNullableResourcePlan() throw() {
}


void WMNullableResourcePlan::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void WMNullableResourcePlan::__set_status(const WMResourcePlanStatus::type val) {
  this->status = val;
__isset.status = true;
}

void WMNullableResourcePlan::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMNullableResourcePlan::__set_isSetQueryParallelism(const bool val) {
  this->isSetQueryParallelism = val;
__isset.isSetQueryParallelism = true;
}

void WMNullableResourcePlan::__set_defaultPoolPath(const std::string& val) {
  this->defaultPoolPath = val;
__isset.defaultPoolPath = true;
}

void WMNullableResourcePlan::__set_isSetDefaultPoolPath(const bool val) {
  this->isSetDefaultPoolPath = val;
__isset.isSetDefaultPoolPath = true;
}

uint32_t WMNullableResourcePlan::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast977;
          xfer += iprot->readI32(ecast977);
          this->status = (WMResourcePlanStatus::type)ecast977;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          int32_t ecast959;
          xfer += iprot->readI32(ecast959);
          this->status = (WMResourcePlanStatus::type)ecast959;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          int32_t ecast939;
          xfer += iprot->readI32(ecast939);
          this->status = (WMResourcePlanStatus::type)ecast939;
=======
          int32_t ecast958;
          xfer += iprot->readI32(ecast958);
          this->status = (WMResourcePlanStatus::type)ecast958;
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          int32_t ecast958;
          xfer += iprot->readI32(ecast958);
          this->status = (WMResourcePlanStatus::type)ecast958;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast934;
          xfer += iprot->readI32(ecast934);
          this->status = (WMResourcePlanStatus::type)ecast934;
=======
          int32_t ecast892;
          xfer += iprot->readI32(ecast892);
          this->status = (WMResourcePlanStatus::type)ecast892;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast896;
          xfer += iprot->readI32(ecast896);
          this->status = (WMResourcePlanStatus::type)ecast896;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast892;
          xfer += iprot->readI32(ecast892);
          this->status = (WMResourcePlanStatus::type)ecast892;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast896;
          xfer += iprot->readI32(ecast896);
          this->status = (WMResourcePlanStatus::type)ecast896;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
          int32_t ecast938;
          xfer += iprot->readI32(ecast938);
          this->status = (WMResourcePlanStatus::type)ecast938;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          int32_t ecast945;
          xfer += iprot->readI32(ecast945);
          this->status = (WMResourcePlanStatus::type)ecast945;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSetQueryParallelism);
          this->__isset.isSetQueryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultPoolPath);
          this->__isset.defaultPoolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSetDefaultPoolPath);
          this->__isset.isSetDefaultPoolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMNullableResourcePlan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMNullableResourcePlan");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isSetQueryParallelism) {
    xfer += oprot->writeFieldBegin("isSetQueryParallelism", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isSetQueryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultPoolPath) {
    xfer += oprot->writeFieldBegin("defaultPoolPath", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->defaultPoolPath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isSetDefaultPoolPath) {
    xfer += oprot->writeFieldBegin("isSetDefaultPoolPath", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->isSetDefaultPoolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMNullableResourcePlan &a, WMNullableResourcePlan &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.status, b.status);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.isSetQueryParallelism, b.isSetQueryParallelism);
  swap(a.defaultPoolPath, b.defaultPoolPath);
  swap(a.isSetDefaultPoolPath, b.isSetDefaultPoolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other978) {
  name = other978.name;
  status = other978.status;
  queryParallelism = other978.queryParallelism;
  isSetQueryParallelism = other978.isSetQueryParallelism;
  defaultPoolPath = other978.defaultPoolPath;
  isSetDefaultPoolPath = other978.isSetDefaultPoolPath;
  __isset = other978.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other979) {
  name = other979.name;
  status = other979.status;
  queryParallelism = other979.queryParallelism;
  isSetQueryParallelism = other979.isSetQueryParallelism;
  defaultPoolPath = other979.defaultPoolPath;
  isSetDefaultPoolPath = other979.isSetDefaultPoolPath;
  __isset = other979.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other960) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other940) {
  name = other940.name;
  status = other940.status;
  queryParallelism = other940.queryParallelism;
  isSetQueryParallelism = other940.isSetQueryParallelism;
  defaultPoolPath = other940.defaultPoolPath;
  isSetDefaultPoolPath = other940.isSetDefaultPoolPath;
  __isset = other940.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other941) {
  name = other941.name;
  status = other941.status;
  queryParallelism = other941.queryParallelism;
  isSetQueryParallelism = other941.isSetQueryParallelism;
  defaultPoolPath = other941.defaultPoolPath;
  isSetDefaultPoolPath = other941.isSetDefaultPoolPath;
  __isset = other941.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other959) {
  name = other959.name;
  status = other959.status;
  queryParallelism = other959.queryParallelism;
  isSetQueryParallelism = other959.isSetQueryParallelism;
  defaultPoolPath = other959.defaultPoolPath;
  isSetDefaultPoolPath = other959.isSetDefaultPoolPath;
  __isset = other959.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other960) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  name = other960.name;
  status = other960.status;
  queryParallelism = other960.queryParallelism;
  isSetQueryParallelism = other960.isSetQueryParallelism;
  defaultPoolPath = other960.defaultPoolPath;
  isSetDefaultPoolPath = other960.isSetDefaultPoolPath;
  __isset = other960.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other961) {
  name = other961.name;
  status = other961.status;
  queryParallelism = other961.queryParallelism;
  isSetQueryParallelism = other961.isSetQueryParallelism;
  defaultPoolPath = other961.defaultPoolPath;
  isSetDefaultPoolPath = other961.isSetDefaultPoolPath;
  __isset = other961.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other935) {
  name = other935.name;
  status = other935.status;
  queryParallelism = other935.queryParallelism;
  isSetQueryParallelism = other935.isSetQueryParallelism;
  defaultPoolPath = other935.defaultPoolPath;
  isSetDefaultPoolPath = other935.isSetDefaultPoolPath;
  __isset = other935.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other936) {
  name = other936.name;
  status = other936.status;
  queryParallelism = other936.queryParallelism;
  isSetQueryParallelism = other936.isSetQueryParallelism;
  defaultPoolPath = other936.defaultPoolPath;
  isSetDefaultPoolPath = other936.isSetDefaultPoolPath;
  __isset = other936.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other893) {
  name = other893.name;
  status = other893.status;
  queryParallelism = other893.queryParallelism;
  isSetQueryParallelism = other893.isSetQueryParallelism;
  defaultPoolPath = other893.defaultPoolPath;
  isSetDefaultPoolPath = other893.isSetDefaultPoolPath;
  __isset = other893.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other894) {
  name = other894.name;
  status = other894.status;
  queryParallelism = other894.queryParallelism;
  isSetQueryParallelism = other894.isSetQueryParallelism;
  defaultPoolPath = other894.defaultPoolPath;
  isSetDefaultPoolPath = other894.isSetDefaultPoolPath;
  __isset = other894.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other897) {
  name = other897.name;
  status = other897.status;
  queryParallelism = other897.queryParallelism;
  isSetQueryParallelism = other897.isSetQueryParallelism;
  defaultPoolPath = other897.defaultPoolPath;
  isSetDefaultPoolPath = other897.isSetDefaultPoolPath;
  __isset = other897.__isset;
}
=======
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other897) {
  name = other897.name;
  status = other897.status;
  queryParallelism = other897.queryParallelism;
  isSetQueryParallelism = other897.isSetQueryParallelism;
  defaultPoolPath = other897.defaultPoolPath;
  isSetDefaultPoolPath = other897.isSetDefaultPoolPath;
  __isset = other897.__isset;
=======
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other939) {
  name = other939.name;
  status = other939.status;
  queryParallelism = other939.queryParallelism;
  isSetQueryParallelism = other939.isSetQueryParallelism;
  defaultPoolPath = other939.defaultPoolPath;
  isSetDefaultPoolPath = other939.isSetDefaultPoolPath;
  __isset = other939.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other940) {
  name = other940.name;
  status = other940.status;
  queryParallelism = other940.queryParallelism;
  isSetQueryParallelism = other940.isSetQueryParallelism;
  defaultPoolPath = other940.defaultPoolPath;
  isSetDefaultPoolPath = other940.isSetDefaultPoolPath;
  __isset = other940.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other946) {
  name = other946.name;
  status = other946.status;
  queryParallelism = other946.queryParallelism;
  isSetQueryParallelism = other946.isSetQueryParallelism;
  defaultPoolPath = other946.defaultPoolPath;
  isSetDefaultPoolPath = other946.isSetDefaultPoolPath;
  __isset = other946.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other947) {
  name = other947.name;
  status = other947.status;
  queryParallelism = other947.queryParallelism;
  isSetQueryParallelism = other947.isSetQueryParallelism;
  defaultPoolPath = other947.defaultPoolPath;
  isSetDefaultPoolPath = other947.isSetDefaultPoolPath;
  __isset = other947.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMNullableResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMNullableResourcePlan(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "isSetQueryParallelism="; (__isset.isSetQueryParallelism ? (out << to_string(isSetQueryParallelism)) : (out << "<null>"));
  out << ", " << "defaultPoolPath="; (__isset.defaultPoolPath ? (out << to_string(defaultPoolPath)) : (out << "<null>"));
  out << ", " << "isSetDefaultPoolPath="; (__isset.isSetDefaultPoolPath ? (out << to_string(isSetDefaultPoolPath)) : (out << "<null>"));
  out << ")";
}


WMPool::~WMPool() throw() {
}


void WMPool::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMPool::__set_poolPath(const std::string& val) {
  this->poolPath = val;
}

void WMPool::__set_allocFraction(const double val) {
  this->allocFraction = val;
__isset.allocFraction = true;
}

void WMPool::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMPool::__set_schedulingPolicy(const std::string& val) {
  this->schedulingPolicy = val;
__isset.schedulingPolicy = true;
}

uint32_t WMPool::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_poolPath = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          isset_poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->allocFraction);
          this->__isset.allocFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schedulingPolicy);
          this->__isset.schedulingPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_poolPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMPool::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMPool");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->poolPath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.allocFraction) {
    xfer += oprot->writeFieldBegin("allocFraction", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->allocFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schedulingPolicy) {
    xfer += oprot->writeFieldBegin("schedulingPolicy", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->schedulingPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMPool &a, WMPool &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.allocFraction, b.allocFraction);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.schedulingPolicy, b.schedulingPolicy);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMPool::WMPool(const WMPool& other980) {
  resourcePlanName = other980.resourcePlanName;
  poolPath = other980.poolPath;
  allocFraction = other980.allocFraction;
  queryParallelism = other980.queryParallelism;
  schedulingPolicy = other980.schedulingPolicy;
  __isset = other980.__isset;
}
WMPool& WMPool::operator=(const WMPool& other981) {
  resourcePlanName = other981.resourcePlanName;
  poolPath = other981.poolPath;
  allocFraction = other981.allocFraction;
  queryParallelism = other981.queryParallelism;
  schedulingPolicy = other981.schedulingPolicy;
  __isset = other981.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMPool::WMPool(const WMPool& other962) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMPool::WMPool(const WMPool& other942) {
  resourcePlanName = other942.resourcePlanName;
  poolPath = other942.poolPath;
  allocFraction = other942.allocFraction;
  queryParallelism = other942.queryParallelism;
  schedulingPolicy = other942.schedulingPolicy;
  __isset = other942.__isset;
}
WMPool& WMPool::operator=(const WMPool& other943) {
  resourcePlanName = other943.resourcePlanName;
  poolPath = other943.poolPath;
  allocFraction = other943.allocFraction;
  queryParallelism = other943.queryParallelism;
  schedulingPolicy = other943.schedulingPolicy;
  __isset = other943.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMPool::WMPool(const WMPool& other961) {
  resourcePlanName = other961.resourcePlanName;
  poolPath = other961.poolPath;
  allocFraction = other961.allocFraction;
  queryParallelism = other961.queryParallelism;
  schedulingPolicy = other961.schedulingPolicy;
  __isset = other961.__isset;
}
WMPool& WMPool::operator=(const WMPool& other962) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  resourcePlanName = other962.resourcePlanName;
  poolPath = other962.poolPath;
  allocFraction = other962.allocFraction;
  queryParallelism = other962.queryParallelism;
  schedulingPolicy = other962.schedulingPolicy;
  __isset = other962.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
WMPool& WMPool::operator=(const WMPool& other963) {
  resourcePlanName = other963.resourcePlanName;
  poolPath = other963.poolPath;
  allocFraction = other963.allocFraction;
  queryParallelism = other963.queryParallelism;
  schedulingPolicy = other963.schedulingPolicy;
  __isset = other963.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMPool::WMPool(const WMPool& other937) {
  resourcePlanName = other937.resourcePlanName;
  poolPath = other937.poolPath;
  allocFraction = other937.allocFraction;
  queryParallelism = other937.queryParallelism;
  schedulingPolicy = other937.schedulingPolicy;
  __isset = other937.__isset;
}
WMPool& WMPool::operator=(const WMPool& other938) {
  resourcePlanName = other938.resourcePlanName;
  poolPath = other938.poolPath;
  allocFraction = other938.allocFraction;
  queryParallelism = other938.queryParallelism;
  schedulingPolicy = other938.schedulingPolicy;
  __isset = other938.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMPool::WMPool(const WMPool& other895) {
  resourcePlanName = other895.resourcePlanName;
  poolPath = other895.poolPath;
  allocFraction = other895.allocFraction;
  queryParallelism = other895.queryParallelism;
  schedulingPolicy = other895.schedulingPolicy;
  __isset = other895.__isset;
}
WMPool& WMPool::operator=(const WMPool& other896) {
  resourcePlanName = other896.resourcePlanName;
  poolPath = other896.poolPath;
  allocFraction = other896.allocFraction;
  queryParallelism = other896.queryParallelism;
  schedulingPolicy = other896.schedulingPolicy;
  __isset = other896.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMPool::WMPool(const WMPool& other899) {
  resourcePlanName = other899.resourcePlanName;
  poolPath = other899.poolPath;
  allocFraction = other899.allocFraction;
  queryParallelism = other899.queryParallelism;
  schedulingPolicy = other899.schedulingPolicy;
  __isset = other899.__isset;
}
=======
WMPool::WMPool(const WMPool& other899) {
  resourcePlanName = other899.resourcePlanName;
  poolPath = other899.poolPath;
  allocFraction = other899.allocFraction;
  queryParallelism = other899.queryParallelism;
  schedulingPolicy = other899.schedulingPolicy;
  __isset = other899.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMPool& WMPool::operator=(const WMPool& other900) {
  resourcePlanName = other900.resourcePlanName;
  poolPath = other900.poolPath;
  allocFraction = other900.allocFraction;
  queryParallelism = other900.queryParallelism;
  schedulingPolicy = other900.schedulingPolicy;
  __isset = other900.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMPool::WMPool(const WMPool& other941) {
  resourcePlanName = other941.resourcePlanName;
  poolPath = other941.poolPath;
  allocFraction = other941.allocFraction;
  queryParallelism = other941.queryParallelism;
  schedulingPolicy = other941.schedulingPolicy;
  __isset = other941.__isset;
=======
WMPool::WMPool(const WMPool& other948) {
  resourcePlanName = other948.resourcePlanName;
  poolPath = other948.poolPath;
  allocFraction = other948.allocFraction;
  queryParallelism = other948.queryParallelism;
  schedulingPolicy = other948.schedulingPolicy;
  __isset = other948.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
<<<<<<< HEAD
WMPool& WMPool::operator=(const WMPool& other942) {
  resourcePlanName = other942.resourcePlanName;
  poolPath = other942.poolPath;
  allocFraction = other942.allocFraction;
  queryParallelism = other942.queryParallelism;
  schedulingPolicy = other942.schedulingPolicy;
  __isset = other942.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
WMPool& WMPool::operator=(const WMPool& other949) {
  resourcePlanName = other949.resourcePlanName;
  poolPath = other949.poolPath;
  allocFraction = other949.allocFraction;
  queryParallelism = other949.queryParallelism;
  schedulingPolicy = other949.schedulingPolicy;
  __isset = other949.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMPool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMPool(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "poolPath=" << to_string(poolPath);
  out << ", " << "allocFraction="; (__isset.allocFraction ? (out << to_string(allocFraction)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "schedulingPolicy="; (__isset.schedulingPolicy ? (out << to_string(schedulingPolicy)) : (out << "<null>"));
  out << ")";
}


WMNullablePool::~WMNullablePool() throw() {
}


void WMNullablePool::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMNullablePool::__set_poolPath(const std::string& val) {
  this->poolPath = val;
}

void WMNullablePool::__set_allocFraction(const double val) {
  this->allocFraction = val;
__isset.allocFraction = true;
}

void WMNullablePool::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMNullablePool::__set_schedulingPolicy(const std::string& val) {
  this->schedulingPolicy = val;
__isset.schedulingPolicy = true;
}

void WMNullablePool::__set_isSetSchedulingPolicy(const bool val) {
  this->isSetSchedulingPolicy = val;
__isset.isSetSchedulingPolicy = true;
}

uint32_t WMNullablePool::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_poolPath = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          isset_poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->allocFraction);
          this->__isset.allocFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schedulingPolicy);
          this->__isset.schedulingPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSetSchedulingPolicy);
          this->__isset.isSetSchedulingPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_poolPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMNullablePool::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMNullablePool");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->poolPath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.allocFraction) {
    xfer += oprot->writeFieldBegin("allocFraction", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->allocFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schedulingPolicy) {
    xfer += oprot->writeFieldBegin("schedulingPolicy", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->schedulingPolicy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isSetSchedulingPolicy) {
    xfer += oprot->writeFieldBegin("isSetSchedulingPolicy", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->isSetSchedulingPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMNullablePool &a, WMNullablePool &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.allocFraction, b.allocFraction);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.schedulingPolicy, b.schedulingPolicy);
  swap(a.isSetSchedulingPolicy, b.isSetSchedulingPolicy);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMNullablePool::WMNullablePool(const WMNullablePool& other982) {
  resourcePlanName = other982.resourcePlanName;
  poolPath = other982.poolPath;
  allocFraction = other982.allocFraction;
  queryParallelism = other982.queryParallelism;
  schedulingPolicy = other982.schedulingPolicy;
  isSetSchedulingPolicy = other982.isSetSchedulingPolicy;
  __isset = other982.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other983) {
  resourcePlanName = other983.resourcePlanName;
  poolPath = other983.poolPath;
  allocFraction = other983.allocFraction;
  queryParallelism = other983.queryParallelism;
  schedulingPolicy = other983.schedulingPolicy;
  isSetSchedulingPolicy = other983.isSetSchedulingPolicy;
  __isset = other983.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMNullablePool::WMNullablePool(const WMNullablePool& other964) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMNullablePool::WMNullablePool(const WMNullablePool& other944) {
  resourcePlanName = other944.resourcePlanName;
  poolPath = other944.poolPath;
  allocFraction = other944.allocFraction;
  queryParallelism = other944.queryParallelism;
  schedulingPolicy = other944.schedulingPolicy;
  isSetSchedulingPolicy = other944.isSetSchedulingPolicy;
  __isset = other944.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other945) {
  resourcePlanName = other945.resourcePlanName;
  poolPath = other945.poolPath;
  allocFraction = other945.allocFraction;
  queryParallelism = other945.queryParallelism;
  schedulingPolicy = other945.schedulingPolicy;
  isSetSchedulingPolicy = other945.isSetSchedulingPolicy;
  __isset = other945.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMNullablePool::WMNullablePool(const WMNullablePool& other963) {
  resourcePlanName = other963.resourcePlanName;
  poolPath = other963.poolPath;
  allocFraction = other963.allocFraction;
  queryParallelism = other963.queryParallelism;
  schedulingPolicy = other963.schedulingPolicy;
  isSetSchedulingPolicy = other963.isSetSchedulingPolicy;
  __isset = other963.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other964) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  resourcePlanName = other964.resourcePlanName;
  poolPath = other964.poolPath;
  allocFraction = other964.allocFraction;
  queryParallelism = other964.queryParallelism;
  schedulingPolicy = other964.schedulingPolicy;
  isSetSchedulingPolicy = other964.isSetSchedulingPolicy;
  __isset = other964.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other965) {
  resourcePlanName = other965.resourcePlanName;
  poolPath = other965.poolPath;
  allocFraction = other965.allocFraction;
  queryParallelism = other965.queryParallelism;
  schedulingPolicy = other965.schedulingPolicy;
  isSetSchedulingPolicy = other965.isSetSchedulingPolicy;
  __isset = other965.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMNullablePool::WMNullablePool(const WMNullablePool& other939) {
  resourcePlanName = other939.resourcePlanName;
  poolPath = other939.poolPath;
  allocFraction = other939.allocFraction;
  queryParallelism = other939.queryParallelism;
  schedulingPolicy = other939.schedulingPolicy;
  isSetSchedulingPolicy = other939.isSetSchedulingPolicy;
  __isset = other939.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other940) {
  resourcePlanName = other940.resourcePlanName;
  poolPath = other940.poolPath;
  allocFraction = other940.allocFraction;
  queryParallelism = other940.queryParallelism;
  schedulingPolicy = other940.schedulingPolicy;
  isSetSchedulingPolicy = other940.isSetSchedulingPolicy;
  __isset = other940.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMNullablePool::WMNullablePool(const WMNullablePool& other897) {
  resourcePlanName = other897.resourcePlanName;
  poolPath = other897.poolPath;
  allocFraction = other897.allocFraction;
  queryParallelism = other897.queryParallelism;
  schedulingPolicy = other897.schedulingPolicy;
  isSetSchedulingPolicy = other897.isSetSchedulingPolicy;
  __isset = other897.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other898) {
  resourcePlanName = other898.resourcePlanName;
  poolPath = other898.poolPath;
  allocFraction = other898.allocFraction;
  queryParallelism = other898.queryParallelism;
  schedulingPolicy = other898.schedulingPolicy;
  isSetSchedulingPolicy = other898.isSetSchedulingPolicy;
  __isset = other898.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMNullablePool::WMNullablePool(const WMNullablePool& other901) {
  resourcePlanName = other901.resourcePlanName;
  poolPath = other901.poolPath;
  allocFraction = other901.allocFraction;
  queryParallelism = other901.queryParallelism;
  schedulingPolicy = other901.schedulingPolicy;
  isSetSchedulingPolicy = other901.isSetSchedulingPolicy;
  __isset = other901.__isset;
}
=======
WMNullablePool::WMNullablePool(const WMNullablePool& other901) {
  resourcePlanName = other901.resourcePlanName;
  poolPath = other901.poolPath;
  allocFraction = other901.allocFraction;
  queryParallelism = other901.queryParallelism;
  schedulingPolicy = other901.schedulingPolicy;
  isSetSchedulingPolicy = other901.isSetSchedulingPolicy;
  __isset = other901.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other902) {
  resourcePlanName = other902.resourcePlanName;
  poolPath = other902.poolPath;
  allocFraction = other902.allocFraction;
  queryParallelism = other902.queryParallelism;
  schedulingPolicy = other902.schedulingPolicy;
  isSetSchedulingPolicy = other902.isSetSchedulingPolicy;
  __isset = other902.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMNullablePool::WMNullablePool(const WMNullablePool& other943) {
  resourcePlanName = other943.resourcePlanName;
  poolPath = other943.poolPath;
  allocFraction = other943.allocFraction;
  queryParallelism = other943.queryParallelism;
  schedulingPolicy = other943.schedulingPolicy;
  isSetSchedulingPolicy = other943.isSetSchedulingPolicy;
  __isset = other943.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other944) {
  resourcePlanName = other944.resourcePlanName;
  poolPath = other944.poolPath;
  allocFraction = other944.allocFraction;
  queryParallelism = other944.queryParallelism;
  schedulingPolicy = other944.schedulingPolicy;
  isSetSchedulingPolicy = other944.isSetSchedulingPolicy;
  __isset = other944.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMNullablePool::WMNullablePool(const WMNullablePool& other950) {
  resourcePlanName = other950.resourcePlanName;
  poolPath = other950.poolPath;
  allocFraction = other950.allocFraction;
  queryParallelism = other950.queryParallelism;
  schedulingPolicy = other950.schedulingPolicy;
  isSetSchedulingPolicy = other950.isSetSchedulingPolicy;
  __isset = other950.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other951) {
  resourcePlanName = other951.resourcePlanName;
  poolPath = other951.poolPath;
  allocFraction = other951.allocFraction;
  queryParallelism = other951.queryParallelism;
  schedulingPolicy = other951.schedulingPolicy;
  isSetSchedulingPolicy = other951.isSetSchedulingPolicy;
  __isset = other951.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMNullablePool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMNullablePool(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "poolPath=" << to_string(poolPath);
  out << ", " << "allocFraction="; (__isset.allocFraction ? (out << to_string(allocFraction)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "schedulingPolicy="; (__isset.schedulingPolicy ? (out << to_string(schedulingPolicy)) : (out << "<null>"));
  out << ", " << "isSetSchedulingPolicy="; (__isset.isSetSchedulingPolicy ? (out << to_string(isSetSchedulingPolicy)) : (out << "<null>"));
  out << ")";
}


WMTrigger::~WMTrigger() throw() {
}


void WMTrigger::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMTrigger::__set_triggerName(const std::string& val) {
  this->triggerName = val;
}

void WMTrigger::__set_triggerExpression(const std::string& val) {
  this->triggerExpression = val;
__isset.triggerExpression = true;
}

void WMTrigger::__set_actionExpression(const std::string& val) {
  this->actionExpression = val;
__isset.actionExpression = true;
}

void WMTrigger::__set_isInUnmanaged(const bool val) {
  this->isInUnmanaged = val;
__isset.isInUnmanaged = true;
}

uint32_t WMTrigger::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_triggerName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerName);
          isset_triggerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerExpression);
          this->__isset.triggerExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actionExpression);
          this->__isset.actionExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isInUnmanaged);
          this->__isset.isInUnmanaged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_triggerName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMTrigger::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMTrigger");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("triggerName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->triggerName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.triggerExpression) {
    xfer += oprot->writeFieldBegin("triggerExpression", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->triggerExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actionExpression) {
    xfer += oprot->writeFieldBegin("actionExpression", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->actionExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isInUnmanaged) {
    xfer += oprot->writeFieldBegin("isInUnmanaged", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isInUnmanaged);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMTrigger &a, WMTrigger &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.triggerExpression, b.triggerExpression);
  swap(a.actionExpression, b.actionExpression);
  swap(a.isInUnmanaged, b.isInUnmanaged);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMTrigger::WMTrigger(const WMTrigger& other984) {
  resourcePlanName = other984.resourcePlanName;
  triggerName = other984.triggerName;
  triggerExpression = other984.triggerExpression;
  actionExpression = other984.actionExpression;
  isInUnmanaged = other984.isInUnmanaged;
  __isset = other984.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other985) {
  resourcePlanName = other985.resourcePlanName;
  triggerName = other985.triggerName;
  triggerExpression = other985.triggerExpression;
  actionExpression = other985.actionExpression;
  isInUnmanaged = other985.isInUnmanaged;
  __isset = other985.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMTrigger::WMTrigger(const WMTrigger& other966) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMTrigger::WMTrigger(const WMTrigger& other946) {
  resourcePlanName = other946.resourcePlanName;
  triggerName = other946.triggerName;
  triggerExpression = other946.triggerExpression;
  actionExpression = other946.actionExpression;
  isInUnmanaged = other946.isInUnmanaged;
  __isset = other946.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other947) {
  resourcePlanName = other947.resourcePlanName;
  triggerName = other947.triggerName;
  triggerExpression = other947.triggerExpression;
  actionExpression = other947.actionExpression;
  isInUnmanaged = other947.isInUnmanaged;
  __isset = other947.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMTrigger::WMTrigger(const WMTrigger& other965) {
  resourcePlanName = other965.resourcePlanName;
  triggerName = other965.triggerName;
  triggerExpression = other965.triggerExpression;
  actionExpression = other965.actionExpression;
  isInUnmanaged = other965.isInUnmanaged;
  __isset = other965.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other966) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  resourcePlanName = other966.resourcePlanName;
  triggerName = other966.triggerName;
  triggerExpression = other966.triggerExpression;
  actionExpression = other966.actionExpression;
  isInUnmanaged = other966.isInUnmanaged;
  __isset = other966.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other967) {
  resourcePlanName = other967.resourcePlanName;
  triggerName = other967.triggerName;
  triggerExpression = other967.triggerExpression;
  actionExpression = other967.actionExpression;
  isInUnmanaged = other967.isInUnmanaged;
  __isset = other967.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMTrigger::WMTrigger(const WMTrigger& other941) {
  resourcePlanName = other941.resourcePlanName;
  triggerName = other941.triggerName;
  triggerExpression = other941.triggerExpression;
  actionExpression = other941.actionExpression;
  isInUnmanaged = other941.isInUnmanaged;
  __isset = other941.__isset;
=======
<<<<<<< HEAD
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMTrigger::WMTrigger(const WMTrigger& other899) {
  resourcePlanName = other899.resourcePlanName;
  triggerName = other899.triggerName;
  triggerExpression = other899.triggerExpression;
  actionExpression = other899.actionExpression;
  isInUnmanaged = other899.isInUnmanaged;
  __isset = other899.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other900) {
  resourcePlanName = other900.resourcePlanName;
  triggerName = other900.triggerName;
  triggerExpression = other900.triggerExpression;
  actionExpression = other900.actionExpression;
  isInUnmanaged = other900.isInUnmanaged;
  __isset = other900.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMTrigger::WMTrigger(const WMTrigger& other903) {
  resourcePlanName = other903.resourcePlanName;
  triggerName = other903.triggerName;
  triggerExpression = other903.triggerExpression;
  actionExpression = other903.actionExpression;
  isInUnmanaged = other903.isInUnmanaged;
  __isset = other903.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other904) {
  resourcePlanName = other904.resourcePlanName;
  triggerName = other904.triggerName;
  triggerExpression = other904.triggerExpression;
  actionExpression = other904.actionExpression;
  isInUnmanaged = other904.isInUnmanaged;
  __isset = other904.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMTrigger::WMTrigger(const WMTrigger& other945) {
  resourcePlanName = other945.resourcePlanName;
  triggerName = other945.triggerName;
  triggerExpression = other945.triggerExpression;
  actionExpression = other945.actionExpression;
  isInUnmanaged = other945.isInUnmanaged;
  __isset = other945.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other946) {
  resourcePlanName = other946.resourcePlanName;
  triggerName = other946.triggerName;
  triggerExpression = other946.triggerExpression;
  actionExpression = other946.actionExpression;
  isInUnmanaged = other946.isInUnmanaged;
  __isset = other946.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
WMTrigger::WMTrigger(const WMTrigger& other952) {
  resourcePlanName = other952.resourcePlanName;
  triggerName = other952.triggerName;
  triggerExpression = other952.triggerExpression;
  actionExpression = other952.actionExpression;
  isInUnmanaged = other952.isInUnmanaged;
  __isset = other952.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other953) {
  resourcePlanName = other953.resourcePlanName;
  triggerName = other953.triggerName;
  triggerExpression = other953.triggerExpression;
  actionExpression = other953.actionExpression;
  isInUnmanaged = other953.isInUnmanaged;
  __isset = other953.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMTrigger::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMTrigger(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "triggerName=" << to_string(triggerName);
  out << ", " << "triggerExpression="; (__isset.triggerExpression ? (out << to_string(triggerExpression)) : (out << "<null>"));
  out << ", " << "actionExpression="; (__isset.actionExpression ? (out << to_string(actionExpression)) : (out << "<null>"));
  out << ", " << "isInUnmanaged="; (__isset.isInUnmanaged ? (out << to_string(isInUnmanaged)) : (out << "<null>"));
  out << ")";
}


WMMapping::~WMMapping() throw() {
}


void WMMapping::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMMapping::__set_entityType(const std::string& val) {
  this->entityType = val;
}

void WMMapping::__set_entityName(const std::string& val) {
  this->entityName = val;
}

void WMMapping::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

void WMMapping::__set_ordering(const int32_t val) {
  this->ordering = val;
__isset.ordering = true;
}

uint32_t WMMapping::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_entityType = false;
  bool isset_entityName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entityType);
          isset_entityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entityName);
          isset_entityName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ordering);
          this->__isset.ordering = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entityType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entityName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMMapping::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMMapping");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->entityType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->entityName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ordering) {
    xfer += oprot->writeFieldBegin("ordering", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->ordering);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMMapping &a, WMMapping &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.entityType, b.entityType);
  swap(a.entityName, b.entityName);
  swap(a.poolPath, b.poolPath);
  swap(a.ordering, b.ordering);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMMapping::WMMapping(const WMMapping& other986) {
  resourcePlanName = other986.resourcePlanName;
  entityType = other986.entityType;
  entityName = other986.entityName;
  poolPath = other986.poolPath;
  ordering = other986.ordering;
  __isset = other986.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other987) {
  resourcePlanName = other987.resourcePlanName;
  entityType = other987.entityType;
  entityName = other987.entityName;
  poolPath = other987.poolPath;
  ordering = other987.ordering;
  __isset = other987.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMMapping::WMMapping(const WMMapping& other968) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMMapping::WMMapping(const WMMapping& other948) {
  resourcePlanName = other948.resourcePlanName;
  entityType = other948.entityType;
  entityName = other948.entityName;
  poolPath = other948.poolPath;
  ordering = other948.ordering;
  __isset = other948.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other949) {
  resourcePlanName = other949.resourcePlanName;
  entityType = other949.entityType;
  entityName = other949.entityName;
  poolPath = other949.poolPath;
  ordering = other949.ordering;
  __isset = other949.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMMapping::WMMapping(const WMMapping& other967) {
  resourcePlanName = other967.resourcePlanName;
  entityType = other967.entityType;
  entityName = other967.entityName;
  poolPath = other967.poolPath;
  ordering = other967.ordering;
  __isset = other967.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other968) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  resourcePlanName = other968.resourcePlanName;
  entityType = other968.entityType;
  entityName = other968.entityName;
  poolPath = other968.poolPath;
  ordering = other968.ordering;
  __isset = other968.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
WMMapping& WMMapping::operator=(const WMMapping& other969) {
  resourcePlanName = other969.resourcePlanName;
  entityType = other969.entityType;
  entityName = other969.entityName;
  poolPath = other969.poolPath;
  ordering = other969.ordering;
  __isset = other969.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMMapping::WMMapping(const WMMapping& other943) {
  resourcePlanName = other943.resourcePlanName;
  entityType = other943.entityType;
  entityName = other943.entityName;
  poolPath = other943.poolPath;
  ordering = other943.ordering;
  __isset = other943.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other944) {
  resourcePlanName = other944.resourcePlanName;
  entityType = other944.entityType;
  entityName = other944.entityName;
  poolPath = other944.poolPath;
  ordering = other944.ordering;
  __isset = other944.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMMapping::WMMapping(const WMMapping& other901) {
  resourcePlanName = other901.resourcePlanName;
  entityType = other901.entityType;
  entityName = other901.entityName;
  poolPath = other901.poolPath;
  ordering = other901.ordering;
  __isset = other901.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other902) {
  resourcePlanName = other902.resourcePlanName;
  entityType = other902.entityType;
  entityName = other902.entityName;
  poolPath = other902.poolPath;
  ordering = other902.ordering;
  __isset = other902.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMMapping::WMMapping(const WMMapping& other905) {
  resourcePlanName = other905.resourcePlanName;
  entityType = other905.entityType;
  entityName = other905.entityName;
  poolPath = other905.poolPath;
  ordering = other905.ordering;
  __isset = other905.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other906) {
  resourcePlanName = other906.resourcePlanName;
  entityType = other906.entityType;
  entityName = other906.entityName;
  poolPath = other906.poolPath;
  ordering = other906.ordering;
  __isset = other906.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMMapping::WMMapping(const WMMapping& other947) {
  resourcePlanName = other947.resourcePlanName;
  entityType = other947.entityType;
  entityName = other947.entityName;
  poolPath = other947.poolPath;
  ordering = other947.ordering;
  __isset = other947.__isset;
<<<<<<< HEAD
}
WMMapping& WMMapping::operator=(const WMMapping& other948) {
  resourcePlanName = other948.resourcePlanName;
  entityType = other948.entityType;
  entityName = other948.entityName;
  poolPath = other948.poolPath;
  ordering = other948.ordering;
  __isset = other948.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMMapping::WMMapping(const WMMapping& other954) {
  resourcePlanName = other954.resourcePlanName;
  entityType = other954.entityType;
  entityName = other954.entityName;
  poolPath = other954.poolPath;
  ordering = other954.ordering;
  __isset = other954.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
WMMapping& WMMapping::operator=(const WMMapping& other955) {
  resourcePlanName = other955.resourcePlanName;
  entityType = other955.entityType;
  entityName = other955.entityName;
  poolPath = other955.poolPath;
  ordering = other955.ordering;
  __isset = other955.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMMapping::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMMapping(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "entityType=" << to_string(entityType);
  out << ", " << "entityName=" << to_string(entityName);
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ", " << "ordering="; (__isset.ordering ? (out << to_string(ordering)) : (out << "<null>"));
  out << ")";
}


WMPoolTrigger::~WMPoolTrigger() throw() {
}


void WMPoolTrigger::__set_pool(const std::string& val) {
  this->pool = val;
}

void WMPoolTrigger::__set_trigger(const std::string& val) {
  this->trigger = val;
}

uint32_t WMPoolTrigger::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_pool = false;
  bool isset_trigger = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pool);
          isset_pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trigger);
          isset_trigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_pool)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_trigger)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMPoolTrigger::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMPoolTrigger");

  xfer += oprot->writeFieldBegin("pool", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pool);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trigger", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->trigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMPoolTrigger &a, WMPoolTrigger &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.trigger, b.trigger);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other988) {
  pool = other988.pool;
  trigger = other988.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other989) {
  pool = other989.pool;
  trigger = other989.trigger;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other970) {
  pool = other970.pool;
  trigger = other970.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other971) {
  pool = other971.pool;
  trigger = other971.trigger;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other950) {
  pool = other950.pool;
  trigger = other950.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other951) {
  pool = other951.pool;
  trigger = other951.trigger;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other969) {
  pool = other969.pool;
  trigger = other969.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other970) {
  pool = other970.pool;
  trigger = other970.trigger;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other945) {
  pool = other945.pool;
  trigger = other945.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other946) {
  pool = other946.pool;
  trigger = other946.trigger;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other903) {
  pool = other903.pool;
  trigger = other903.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other904) {
  pool = other904.pool;
  trigger = other904.trigger;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other907) {
  pool = other907.pool;
  trigger = other907.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other908) {
  pool = other908.pool;
  trigger = other908.trigger;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other907) {
  pool = other907.pool;
  trigger = other907.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other908) {
  pool = other908.pool;
  trigger = other908.trigger;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other949) {
  pool = other949.pool;
  trigger = other949.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other950) {
  pool = other950.pool;
  trigger = other950.trigger;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other956) {
  pool = other956.pool;
  trigger = other956.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other957) {
  pool = other957.pool;
  trigger = other957.trigger;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMPoolTrigger::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMPoolTrigger(";
  out << "pool=" << to_string(pool);
  out << ", " << "trigger=" << to_string(trigger);
  out << ")";
}


WMFullResourcePlan::~WMFullResourcePlan() throw() {
}


void WMFullResourcePlan::__set_plan(const WMResourcePlan& val) {
  this->plan = val;
}

void WMFullResourcePlan::__set_pools(const std::vector<WMPool> & val) {
  this->pools = val;
}

void WMFullResourcePlan::__set_mappings(const std::vector<WMMapping> & val) {
  this->mappings = val;
__isset.mappings = true;
}

void WMFullResourcePlan::__set_triggers(const std::vector<WMTrigger> & val) {
  this->triggers = val;
__isset.triggers = true;
}

void WMFullResourcePlan::__set_poolTriggers(const std::vector<WMPoolTrigger> & val) {
  this->poolTriggers = val;
__isset.poolTriggers = true;
}

uint32_t WMFullResourcePlan::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_plan = false;
  bool isset_pools = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->plan.read(iprot);
          isset_plan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pools.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size990;
            ::apache::thrift::protocol::TType _etype993;
            xfer += iprot->readListBegin(_etype993, _size990);
            this->pools.resize(_size990);
            uint32_t _i994;
            for (_i994 = 0; _i994 < _size990; ++_i994)
            {
              xfer += this->pools[_i994].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size972;
            ::apache::thrift::protocol::TType _etype975;
            xfer += iprot->readListBegin(_etype975, _size972);
            this->pools.resize(_size972);
            uint32_t _i976;
            for (_i976 = 0; _i976 < _size972; ++_i976)
            {
              xfer += this->pools[_i976].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size952;
            ::apache::thrift::protocol::TType _etype955;
            xfer += iprot->readListBegin(_etype955, _size952);
            this->pools.resize(_size952);
            uint32_t _i956;
            for (_i956 = 0; _i956 < _size952; ++_i956)
            {
              xfer += this->pools[_i956].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size971;
            ::apache::thrift::protocol::TType _etype974;
            xfer += iprot->readListBegin(_etype974, _size971);
            this->pools.resize(_size971);
            uint32_t _i975;
            for (_i975 = 0; _i975 < _size971; ++_i975)
            {
              xfer += this->pools[_i975].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size947;
            ::apache::thrift::protocol::TType _etype950;
            xfer += iprot->readListBegin(_etype950, _size947);
            this->pools.resize(_size947);
            uint32_t _i951;
            for (_i951 = 0; _i951 < _size947; ++_i951)
            {
              xfer += this->pools[_i951].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size905;
            ::apache::thrift::protocol::TType _etype908;
            xfer += iprot->readListBegin(_etype908, _size905);
            this->pools.resize(_size905);
            uint32_t _i909;
            for (_i909 = 0; _i909 < _size905; ++_i909)
<<<<<<< HEAD
            {
              xfer += this->pools[_i909].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size909;
            ::apache::thrift::protocol::TType _etype912;
            xfer += iprot->readListBegin(_etype912, _size909);
            this->pools.resize(_size909);
            uint32_t _i913;
            for (_i913 = 0; _i913 < _size909; ++_i913)
<<<<<<< HEAD
            {
              xfer += this->pools[_i913].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->pools[_i909].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->pools[_i913].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size951;
            ::apache::thrift::protocol::TType _etype954;
            xfer += iprot->readListBegin(_etype954, _size951);
            this->pools.resize(_size951);
            uint32_t _i955;
            for (_i955 = 0; _i955 < _size951; ++_i955)
            {
              xfer += this->pools[_i955].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size958;
            ::apache::thrift::protocol::TType _etype961;
            xfer += iprot->readListBegin(_etype961, _size958);
            this->pools.resize(_size958);
            uint32_t _i962;
            for (_i962 = 0; _i962 < _size958; ++_i962)
            {
              xfer += this->pools[_i962].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          isset_pools = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->mappings.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size995;
            ::apache::thrift::protocol::TType _etype998;
            xfer += iprot->readListBegin(_etype998, _size995);
            this->mappings.resize(_size995);
            uint32_t _i999;
            for (_i999 = 0; _i999 < _size995; ++_i999)
            {
              xfer += this->mappings[_i999].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size977;
            ::apache::thrift::protocol::TType _etype980;
            xfer += iprot->readListBegin(_etype980, _size977);
            this->mappings.resize(_size977);
            uint32_t _i981;
            for (_i981 = 0; _i981 < _size977; ++_i981)
            {
              xfer += this->mappings[_i981].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size957;
            ::apache::thrift::protocol::TType _etype960;
            xfer += iprot->readListBegin(_etype960, _size957);
            this->mappings.resize(_size957);
            uint32_t _i961;
            for (_i961 = 0; _i961 < _size957; ++_i961)
            {
              xfer += this->mappings[_i961].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size976;
            ::apache::thrift::protocol::TType _etype979;
            xfer += iprot->readListBegin(_etype979, _size976);
            this->mappings.resize(_size976);
            uint32_t _i980;
            for (_i980 = 0; _i980 < _size976; ++_i980)
            {
              xfer += this->mappings[_i980].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size952;
            ::apache::thrift::protocol::TType _etype955;
            xfer += iprot->readListBegin(_etype955, _size952);
            this->mappings.resize(_size952);
            uint32_t _i956;
            for (_i956 = 0; _i956 < _size952; ++_i956)
            {
              xfer += this->mappings[_i956].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size910;
            ::apache::thrift::protocol::TType _etype913;
            xfer += iprot->readListBegin(_etype913, _size910);
            this->mappings.resize(_size910);
            uint32_t _i914;
            for (_i914 = 0; _i914 < _size910; ++_i914)
<<<<<<< HEAD
            {
              xfer += this->mappings[_i914].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size914;
            ::apache::thrift::protocol::TType _etype917;
            xfer += iprot->readListBegin(_etype917, _size914);
            this->mappings.resize(_size914);
            uint32_t _i918;
            for (_i918 = 0; _i918 < _size914; ++_i918)
<<<<<<< HEAD
            {
              xfer += this->mappings[_i918].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->mappings[_i914].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->mappings[_i918].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size956;
            ::apache::thrift::protocol::TType _etype959;
            xfer += iprot->readListBegin(_etype959, _size956);
            this->mappings.resize(_size956);
            uint32_t _i960;
            for (_i960 = 0; _i960 < _size956; ++_i960)
            {
              xfer += this->mappings[_i960].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size963;
            ::apache::thrift::protocol::TType _etype966;
            xfer += iprot->readListBegin(_etype966, _size963);
            this->mappings.resize(_size963);
            uint32_t _i967;
            for (_i967 = 0; _i967 < _size963; ++_i967)
            {
              xfer += this->mappings[_i967].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.mappings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->triggers.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1000;
            ::apache::thrift::protocol::TType _etype1003;
            xfer += iprot->readListBegin(_etype1003, _size1000);
            this->triggers.resize(_size1000);
            uint32_t _i1004;
            for (_i1004 = 0; _i1004 < _size1000; ++_i1004)
            {
              xfer += this->triggers[_i1004].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size982;
            ::apache::thrift::protocol::TType _etype985;
            xfer += iprot->readListBegin(_etype985, _size982);
            this->triggers.resize(_size982);
            uint32_t _i986;
            for (_i986 = 0; _i986 < _size982; ++_i986)
            {
              xfer += this->triggers[_i986].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size962;
            ::apache::thrift::protocol::TType _etype965;
            xfer += iprot->readListBegin(_etype965, _size962);
            this->triggers.resize(_size962);
            uint32_t _i966;
            for (_i966 = 0; _i966 < _size962; ++_i966)
            {
              xfer += this->triggers[_i966].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size981;
            ::apache::thrift::protocol::TType _etype984;
            xfer += iprot->readListBegin(_etype984, _size981);
            this->triggers.resize(_size981);
            uint32_t _i985;
            for (_i985 = 0; _i985 < _size981; ++_i985)
            {
              xfer += this->triggers[_i985].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size957;
            ::apache::thrift::protocol::TType _etype960;
            xfer += iprot->readListBegin(_etype960, _size957);
            this->triggers.resize(_size957);
            uint32_t _i961;
            for (_i961 = 0; _i961 < _size957; ++_i961)
            {
              xfer += this->triggers[_i961].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size915;
            ::apache::thrift::protocol::TType _etype918;
            xfer += iprot->readListBegin(_etype918, _size915);
            this->triggers.resize(_size915);
            uint32_t _i919;
            for (_i919 = 0; _i919 < _size915; ++_i919)
            {
              xfer += this->triggers[_i919].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size919;
            ::apache::thrift::protocol::TType _etype922;
            xfer += iprot->readListBegin(_etype922, _size919);
            this->triggers.resize(_size919);
            uint32_t _i923;
            for (_i923 = 0; _i923 < _size919; ++_i923)
            {
              xfer += this->triggers[_i923].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size919;
            ::apache::thrift::protocol::TType _etype922;
            xfer += iprot->readListBegin(_etype922, _size919);
            this->triggers.resize(_size919);
            uint32_t _i923;
            for (_i923 = 0; _i923 < _size919; ++_i923)
            {
              xfer += this->triggers[_i923].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size961;
            ::apache::thrift::protocol::TType _etype964;
            xfer += iprot->readListBegin(_etype964, _size961);
            this->triggers.resize(_size961);
            uint32_t _i965;
            for (_i965 = 0; _i965 < _size961; ++_i965)
            {
              xfer += this->triggers[_i965].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size968;
            ::apache::thrift::protocol::TType _etype971;
            xfer += iprot->readListBegin(_etype971, _size968);
            this->triggers.resize(_size968);
            uint32_t _i972;
            for (_i972 = 0; _i972 < _size968; ++_i972)
            {
              xfer += this->triggers[_i972].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.triggers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->poolTriggers.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1005;
            ::apache::thrift::protocol::TType _etype1008;
            xfer += iprot->readListBegin(_etype1008, _size1005);
            this->poolTriggers.resize(_size1005);
            uint32_t _i1009;
            for (_i1009 = 0; _i1009 < _size1005; ++_i1009)
            {
              xfer += this->poolTriggers[_i1009].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size987;
            ::apache::thrift::protocol::TType _etype990;
            xfer += iprot->readListBegin(_etype990, _size987);
            this->poolTriggers.resize(_size987);
            uint32_t _i991;
            for (_i991 = 0; _i991 < _size987; ++_i991)
            {
              xfer += this->poolTriggers[_i991].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size967;
            ::apache::thrift::protocol::TType _etype970;
            xfer += iprot->readListBegin(_etype970, _size967);
            this->poolTriggers.resize(_size967);
            uint32_t _i971;
            for (_i971 = 0; _i971 < _size967; ++_i971)
            {
              xfer += this->poolTriggers[_i971].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size986;
            ::apache::thrift::protocol::TType _etype989;
            xfer += iprot->readListBegin(_etype989, _size986);
            this->poolTriggers.resize(_size986);
            uint32_t _i990;
            for (_i990 = 0; _i990 < _size986; ++_i990)
            {
              xfer += this->poolTriggers[_i990].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size962;
            ::apache::thrift::protocol::TType _etype965;
            xfer += iprot->readListBegin(_etype965, _size962);
            this->poolTriggers.resize(_size962);
            uint32_t _i966;
            for (_i966 = 0; _i966 < _size962; ++_i966)
            {
              xfer += this->poolTriggers[_i966].read(iprot);
=======
            uint32_t _size920;
            ::apache::thrift::protocol::TType _etype923;
            xfer += iprot->readListBegin(_etype923, _size920);
            this->poolTriggers.resize(_size920);
            uint32_t _i924;
            for (_i924 = 0; _i924 < _size920; ++_i924)
            {
              xfer += this->poolTriggers[_i924].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size924;
            ::apache::thrift::protocol::TType _etype927;
            xfer += iprot->readListBegin(_etype927, _size924);
            this->poolTriggers.resize(_size924);
            uint32_t _i928;
            for (_i928 = 0; _i928 < _size924; ++_i928)
<<<<<<< HEAD
            {
              xfer += this->poolTriggers[_i928].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size920;
            ::apache::thrift::protocol::TType _etype923;
            xfer += iprot->readListBegin(_etype923, _size920);
            this->poolTriggers.resize(_size920);
            uint32_t _i924;
            for (_i924 = 0; _i924 < _size920; ++_i924)
            {
              xfer += this->poolTriggers[_i924].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->poolTriggers[_i928].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size966;
            ::apache::thrift::protocol::TType _etype969;
            xfer += iprot->readListBegin(_etype969, _size966);
            this->poolTriggers.resize(_size966);
            uint32_t _i970;
            for (_i970 = 0; _i970 < _size966; ++_i970)
            {
              xfer += this->poolTriggers[_i970].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size973;
            ::apache::thrift::protocol::TType _etype976;
            xfer += iprot->readListBegin(_etype976, _size973);
            this->poolTriggers.resize(_size973);
            uint32_t _i977;
            for (_i977 = 0; _i977 < _size973; ++_i977)
            {
              xfer += this->poolTriggers[_i977].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.poolTriggers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_plan)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pools)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMFullResourcePlan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMFullResourcePlan");

  xfer += oprot->writeFieldBegin("plan", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->plan.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pools", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pools.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<WMPool> ::const_iterator _iter1010;
    for (_iter1010 = this->pools.begin(); _iter1010 != this->pools.end(); ++_iter1010)
    {
      xfer += (*_iter1010).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
    std::vector<WMPool> ::const_iterator _iter992;
    for (_iter992 = this->pools.begin(); _iter992 != this->pools.end(); ++_iter992)
    {
      xfer += (*_iter992).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
    std::vector<WMPool> ::const_iterator _iter972;
    for (_iter972 = this->pools.begin(); _iter972 != this->pools.end(); ++_iter972)
    {
      xfer += (*_iter972).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    std::vector<WMPool> ::const_iterator _iter991;
    for (_iter991 = this->pools.begin(); _iter991 != this->pools.end(); ++_iter991)
    {
      xfer += (*_iter991).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<WMPool> ::const_iterator _iter967;
    for (_iter967 = this->pools.begin(); _iter967 != this->pools.end(); ++_iter967)
    {
      xfer += (*_iter967).write(oprot);
=======
    std::vector<WMPool> ::const_iterator _iter925;
    for (_iter925 = this->pools.begin(); _iter925 != this->pools.end(); ++_iter925)
    {
      xfer += (*_iter925).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<WMPool> ::const_iterator _iter929;
    for (_iter929 = this->pools.begin(); _iter929 != this->pools.end(); ++_iter929)
    {
      xfer += (*_iter929).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<WMPool> ::const_iterator _iter925;
    for (_iter925 = this->pools.begin(); _iter925 != this->pools.end(); ++_iter925)
    {
      xfer += (*_iter925).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<WMPool> ::const_iterator _iter929;
    for (_iter929 = this->pools.begin(); _iter929 != this->pools.end(); ++_iter929)
    {
      xfer += (*_iter929).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
    std::vector<WMPool> ::const_iterator _iter971;
    for (_iter971 = this->pools.begin(); _iter971 != this->pools.end(); ++_iter971)
    {
      xfer += (*_iter971).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
    std::vector<WMPool> ::const_iterator _iter978;
    for (_iter978 = this->pools.begin(); _iter978 != this->pools.end(); ++_iter978)
    {
      xfer += (*_iter978).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.mappings) {
    xfer += oprot->writeFieldBegin("mappings", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->mappings.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMMapping> ::const_iterator _iter1011;
      for (_iter1011 = this->mappings.begin(); _iter1011 != this->mappings.end(); ++_iter1011)
      {
        xfer += (*_iter1011).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<WMMapping> ::const_iterator _iter993;
      for (_iter993 = this->mappings.begin(); _iter993 != this->mappings.end(); ++_iter993)
      {
        xfer += (*_iter993).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<WMMapping> ::const_iterator _iter973;
      for (_iter973 = this->mappings.begin(); _iter973 != this->mappings.end(); ++_iter973)
      {
        xfer += (*_iter973).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<WMMapping> ::const_iterator _iter992;
      for (_iter992 = this->mappings.begin(); _iter992 != this->mappings.end(); ++_iter992)
      {
        xfer += (*_iter992).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMMapping> ::const_iterator _iter968;
      for (_iter968 = this->mappings.begin(); _iter968 != this->mappings.end(); ++_iter968)
      {
        xfer += (*_iter968).write(oprot);
=======
      std::vector<WMMapping> ::const_iterator _iter926;
      for (_iter926 = this->mappings.begin(); _iter926 != this->mappings.end(); ++_iter926)
      {
        xfer += (*_iter926).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMMapping> ::const_iterator _iter930;
      for (_iter930 = this->mappings.begin(); _iter930 != this->mappings.end(); ++_iter930)
      {
        xfer += (*_iter930).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMMapping> ::const_iterator _iter926;
      for (_iter926 = this->mappings.begin(); _iter926 != this->mappings.end(); ++_iter926)
      {
        xfer += (*_iter926).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMMapping> ::const_iterator _iter930;
      for (_iter930 = this->mappings.begin(); _iter930 != this->mappings.end(); ++_iter930)
      {
        xfer += (*_iter930).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<WMMapping> ::const_iterator _iter972;
      for (_iter972 = this->mappings.begin(); _iter972 != this->mappings.end(); ++_iter972)
      {
        xfer += (*_iter972).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<WMMapping> ::const_iterator _iter979;
      for (_iter979 = this->mappings.begin(); _iter979 != this->mappings.end(); ++_iter979)
      {
        xfer += (*_iter979).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggers) {
    xfer += oprot->writeFieldBegin("triggers", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->triggers.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter1012;
      for (_iter1012 = this->triggers.begin(); _iter1012 != this->triggers.end(); ++_iter1012)
      {
        xfer += (*_iter1012).write(oprot);
=======
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter994;
      for (_iter994 = this->triggers.begin(); _iter994 != this->triggers.end(); ++_iter994)
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter994;
      for (_iter994 = this->triggers.begin(); _iter994 != this->triggers.end(); ++_iter994)
      {
        xfer += (*_iter994).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter974;
      for (_iter974 = this->triggers.begin(); _iter974 != this->triggers.end(); ++_iter974)
      {
        xfer += (*_iter974).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<WMTrigger> ::const_iterator _iter993;
      for (_iter993 = this->triggers.begin(); _iter993 != this->triggers.end(); ++_iter993)
      {
        xfer += (*_iter993).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter969;
      for (_iter969 = this->triggers.begin(); _iter969 != this->triggers.end(); ++_iter969)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
      {
        xfer += (*_iter969).write(oprot);
=======
      std::vector<WMTrigger> ::const_iterator _iter927;
      for (_iter927 = this->triggers.begin(); _iter927 != this->triggers.end(); ++_iter927)
      {
        xfer += (*_iter927).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter931;
      for (_iter931 = this->triggers.begin(); _iter931 != this->triggers.end(); ++_iter931)
      {
<<<<<<< HEAD
        xfer += (*_iter993).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
        xfer += (*_iter931).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMTrigger> ::const_iterator _iter927;
      for (_iter927 = this->triggers.begin(); _iter927 != this->triggers.end(); ++_iter927)
      {
        xfer += (*_iter927).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter931;
      for (_iter931 = this->triggers.begin(); _iter931 != this->triggers.end(); ++_iter931)
      {
        xfer += (*_iter931).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<WMTrigger> ::const_iterator _iter973;
      for (_iter973 = this->triggers.begin(); _iter973 != this->triggers.end(); ++_iter973)
      {
        xfer += (*_iter973).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<WMTrigger> ::const_iterator _iter980;
      for (_iter980 = this->triggers.begin(); _iter980 != this->triggers.end(); ++_iter980)
      {
        xfer += (*_iter980).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolTriggers) {
    xfer += oprot->writeFieldBegin("poolTriggers", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->poolTriggers.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMPoolTrigger> ::const_iterator _iter1013;
      for (_iter1013 = this->poolTriggers.begin(); _iter1013 != this->poolTriggers.end(); ++_iter1013)
      {
        xfer += (*_iter1013).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<WMPoolTrigger> ::const_iterator _iter995;
      for (_iter995 = this->poolTriggers.begin(); _iter995 != this->poolTriggers.end(); ++_iter995)
      {
        xfer += (*_iter995).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<WMPoolTrigger> ::const_iterator _iter975;
      for (_iter975 = this->poolTriggers.begin(); _iter975 != this->poolTriggers.end(); ++_iter975)
      {
        xfer += (*_iter975).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<WMPoolTrigger> ::const_iterator _iter994;
      for (_iter994 = this->poolTriggers.begin(); _iter994 != this->poolTriggers.end(); ++_iter994)
      {
        xfer += (*_iter994).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMPoolTrigger> ::const_iterator _iter970;
      for (_iter970 = this->poolTriggers.begin(); _iter970 != this->poolTriggers.end(); ++_iter970)
      {
        xfer += (*_iter970).write(oprot);
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter928;
      for (_iter928 = this->poolTriggers.begin(); _iter928 != this->poolTriggers.end(); ++_iter928)
      {
        xfer += (*_iter928).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter932;
      for (_iter932 = this->poolTriggers.begin(); _iter932 != this->poolTriggers.end(); ++_iter932)
      {
        xfer += (*_iter932).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter928;
      for (_iter928 = this->poolTriggers.begin(); _iter928 != this->poolTriggers.end(); ++_iter928)
      {
        xfer += (*_iter928).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter932;
      for (_iter932 = this->poolTriggers.begin(); _iter932 != this->poolTriggers.end(); ++_iter932)
      {
        xfer += (*_iter932).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter974;
      for (_iter974 = this->poolTriggers.begin(); _iter974 != this->poolTriggers.end(); ++_iter974)
      {
        xfer += (*_iter974).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter981;
      for (_iter981 = this->poolTriggers.begin(); _iter981 != this->poolTriggers.end(); ++_iter981)
      {
        xfer += (*_iter981).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMFullResourcePlan &a, WMFullResourcePlan &b) {
  using ::std::swap;
  swap(a.plan, b.plan);
  swap(a.pools, b.pools);
  swap(a.mappings, b.mappings);
  swap(a.triggers, b.triggers);
  swap(a.poolTriggers, b.poolTriggers);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other1014) {
  plan = other1014.plan;
  pools = other1014.pools;
  mappings = other1014.mappings;
  triggers = other1014.triggers;
  poolTriggers = other1014.poolTriggers;
  __isset = other1014.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other1015) {
  plan = other1015.plan;
  pools = other1015.pools;
  mappings = other1015.mappings;
  triggers = other1015.triggers;
  poolTriggers = other1015.poolTriggers;
  __isset = other1015.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other996) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other976) {
  plan = other976.plan;
  pools = other976.pools;
  mappings = other976.mappings;
  triggers = other976.triggers;
  poolTriggers = other976.poolTriggers;
  __isset = other976.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other977) {
  plan = other977.plan;
  pools = other977.pools;
  mappings = other977.mappings;
  triggers = other977.triggers;
  poolTriggers = other977.poolTriggers;
  __isset = other977.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other995) {
  plan = other995.plan;
  pools = other995.pools;
  mappings = other995.mappings;
  triggers = other995.triggers;
  poolTriggers = other995.poolTriggers;
  __isset = other995.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other996) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  plan = other996.plan;
  pools = other996.pools;
  mappings = other996.mappings;
  triggers = other996.triggers;
  poolTriggers = other996.poolTriggers;
  __isset = other996.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other997) {
  plan = other997.plan;
  pools = other997.pools;
  mappings = other997.mappings;
  triggers = other997.triggers;
  poolTriggers = other997.poolTriggers;
  __isset = other997.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other971) {
  plan = other971.plan;
  pools = other971.pools;
  mappings = other971.mappings;
  triggers = other971.triggers;
  poolTriggers = other971.poolTriggers;
  __isset = other971.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other972) {
  plan = other972.plan;
  pools = other972.pools;
  mappings = other972.mappings;
  triggers = other972.triggers;
  poolTriggers = other972.poolTriggers;
  __isset = other972.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other929) {
  plan = other929.plan;
  pools = other929.pools;
  mappings = other929.mappings;
  triggers = other929.triggers;
  poolTriggers = other929.poolTriggers;
  __isset = other929.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other930) {
  plan = other930.plan;
  pools = other930.pools;
  mappings = other930.mappings;
  triggers = other930.triggers;
  poolTriggers = other930.poolTriggers;
  __isset = other930.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other933) {
  plan = other933.plan;
  pools = other933.pools;
  mappings = other933.mappings;
  triggers = other933.triggers;
  poolTriggers = other933.poolTriggers;
  __isset = other933.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other934) {
  plan = other934.plan;
  pools = other934.pools;
  mappings = other934.mappings;
  triggers = other934.triggers;
  poolTriggers = other934.poolTriggers;
  __isset = other934.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other975) {
  plan = other975.plan;
  pools = other975.pools;
  mappings = other975.mappings;
  triggers = other975.triggers;
  poolTriggers = other975.poolTriggers;
  __isset = other975.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other976) {
  plan = other976.plan;
  pools = other976.pools;
  mappings = other976.mappings;
  triggers = other976.triggers;
  poolTriggers = other976.poolTriggers;
  __isset = other976.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other982) {
  plan = other982.plan;
  pools = other982.pools;
  mappings = other982.mappings;
  triggers = other982.triggers;
  poolTriggers = other982.poolTriggers;
  __isset = other982.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other983) {
  plan = other983.plan;
  pools = other983.pools;
  mappings = other983.mappings;
  triggers = other983.triggers;
  poolTriggers = other983.poolTriggers;
  __isset = other983.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMFullResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMFullResourcePlan(";
  out << "plan=" << to_string(plan);
  out << ", " << "pools=" << to_string(pools);
  out << ", " << "mappings="; (__isset.mappings ? (out << to_string(mappings)) : (out << "<null>"));
  out << ", " << "triggers="; (__isset.triggers ? (out << to_string(triggers)) : (out << "<null>"));
  out << ", " << "poolTriggers="; (__isset.poolTriggers ? (out << to_string(poolTriggers)) : (out << "<null>"));
  out << ")";
}


WMCreateResourcePlanRequest::~WMCreateResourcePlanRequest() throw() {
}


void WMCreateResourcePlanRequest::__set_resourcePlan(const WMResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

void WMCreateResourcePlanRequest::__set_copyFrom(const std::string& val) {
  this->copyFrom = val;
__isset.copyFrom = true;
}

uint32_t WMCreateResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->copyFrom);
          this->__isset.copyFrom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateResourcePlanRequest");

  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.copyFrom) {
    xfer += oprot->writeFieldBegin("copyFrom", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->copyFrom);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateResourcePlanRequest &a, WMCreateResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.copyFrom, b.copyFrom);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other1016) {
  resourcePlan = other1016.resourcePlan;
  copyFrom = other1016.copyFrom;
  __isset = other1016.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other1017) {
  resourcePlan = other1017.resourcePlan;
  copyFrom = other1017.copyFrom;
  __isset = other1017.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other998) {
  resourcePlan = other998.resourcePlan;
  copyFrom = other998.copyFrom;
  __isset = other998.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other999) {
  resourcePlan = other999.resourcePlan;
  copyFrom = other999.copyFrom;
  __isset = other999.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other978) {
  resourcePlan = other978.resourcePlan;
  copyFrom = other978.copyFrom;
  __isset = other978.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other979) {
  resourcePlan = other979.resourcePlan;
  copyFrom = other979.copyFrom;
  __isset = other979.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other997) {
  resourcePlan = other997.resourcePlan;
  copyFrom = other997.copyFrom;
  __isset = other997.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other998) {
  resourcePlan = other998.resourcePlan;
  copyFrom = other998.copyFrom;
  __isset = other998.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other973) {
  resourcePlan = other973.resourcePlan;
  copyFrom = other973.copyFrom;
  __isset = other973.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other974) {
  resourcePlan = other974.resourcePlan;
  copyFrom = other974.copyFrom;
  __isset = other974.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other931) {
  resourcePlan = other931.resourcePlan;
  copyFrom = other931.copyFrom;
  __isset = other931.__isset;
<<<<<<< HEAD
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other932) {
  resourcePlan = other932.resourcePlan;
  copyFrom = other932.copyFrom;
  __isset = other932.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other935) {
  resourcePlan = other935.resourcePlan;
  copyFrom = other935.copyFrom;
  __isset = other935.__isset;
<<<<<<< HEAD
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other936) {
  resourcePlan = other936.resourcePlan;
  copyFrom = other936.copyFrom;
  __isset = other936.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other932) {
  resourcePlan = other932.resourcePlan;
  copyFrom = other932.copyFrom;
  __isset = other932.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other936) {
  resourcePlan = other936.resourcePlan;
  copyFrom = other936.copyFrom;
  __isset = other936.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other977) {
  resourcePlan = other977.resourcePlan;
  copyFrom = other977.copyFrom;
  __isset = other977.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other978) {
  resourcePlan = other978.resourcePlan;
  copyFrom = other978.copyFrom;
  __isset = other978.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other984) {
  resourcePlan = other984.resourcePlan;
  copyFrom = other984.copyFrom;
  __isset = other984.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other985) {
  resourcePlan = other985.resourcePlan;
  copyFrom = other985.copyFrom;
  __isset = other985.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateResourcePlanRequest(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ", " << "copyFrom="; (__isset.copyFrom ? (out << to_string(copyFrom)) : (out << "<null>"));
  out << ")";
}


WMCreateResourcePlanResponse::~WMCreateResourcePlanResponse() throw() {
}


uint32_t WMCreateResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateResourcePlanResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateResourcePlanResponse &a, WMCreateResourcePlanResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other1018) {
  (void) other1018;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other1019) {
  (void) other1019;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other1000) {
  (void) other1000;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other1001) {
  (void) other1001;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other980) {
  (void) other980;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other981) {
  (void) other981;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other999) {
  (void) other999;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other1000) {
  (void) other1000;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other975) {
  (void) other975;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other976) {
  (void) other976;
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other933) {
  (void) other933;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other934) {
  (void) other934;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other937) {
  (void) other937;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other938) {
  (void) other938;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other933) {
  (void) other933;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other934) {
  (void) other934;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other937) {
  (void) other937;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other938) {
  (void) other938;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other979) {
  (void) other979;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other980) {
  (void) other980;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other986) {
  (void) other986;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other987) {
  (void) other987;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateResourcePlanResponse(";
  out << ")";
}


WMGetActiveResourcePlanRequest::~WMGetActiveResourcePlanRequest() throw() {
}


uint32_t WMGetActiveResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetActiveResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetActiveResourcePlanRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetActiveResourcePlanRequest &a, WMGetActiveResourcePlanRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other1020) {
  (void) other1020;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other1021) {
  (void) other1021;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other1002) {
  (void) other1002;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other1003) {
  (void) other1003;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other982) {
  (void) other982;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other983) {
  (void) other983;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other1001) {
  (void) other1001;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other1002) {
  (void) other1002;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other977) {
  (void) other977;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other978) {
  (void) other978;
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other935) {
  (void) other935;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other936) {
  (void) other936;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other939) {
  (void) other939;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other940) {
  (void) other940;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other935) {
  (void) other935;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other936) {
  (void) other936;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other939) {
  (void) other939;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other940) {
  (void) other940;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other981) {
  (void) other981;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other982) {
  (void) other982;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other988) {
  (void) other988;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other989) {
  (void) other989;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetActiveResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetActiveResourcePlanRequest(";
  out << ")";
}


WMGetActiveResourcePlanResponse::~WMGetActiveResourcePlanResponse() throw() {
}


void WMGetActiveResourcePlanResponse::__set_resourcePlan(const WMFullResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

uint32_t WMGetActiveResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetActiveResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetActiveResourcePlanResponse");

  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetActiveResourcePlanResponse &a, WMGetActiveResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other1022) {
  resourcePlan = other1022.resourcePlan;
  __isset = other1022.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other1023) {
  resourcePlan = other1023.resourcePlan;
  __isset = other1023.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other1004) {
  resourcePlan = other1004.resourcePlan;
  __isset = other1004.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other1005) {
  resourcePlan = other1005.resourcePlan;
  __isset = other1005.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other984) {
  resourcePlan = other984.resourcePlan;
  __isset = other984.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other985) {
  resourcePlan = other985.resourcePlan;
  __isset = other985.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other1003) {
  resourcePlan = other1003.resourcePlan;
  __isset = other1003.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other1004) {
  resourcePlan = other1004.resourcePlan;
  __isset = other1004.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other979) {
  resourcePlan = other979.resourcePlan;
  __isset = other979.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other980) {
  resourcePlan = other980.resourcePlan;
  __isset = other980.__isset;
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other937) {
  resourcePlan = other937.resourcePlan;
  __isset = other937.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other938) {
  resourcePlan = other938.resourcePlan;
  __isset = other938.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other937) {
  resourcePlan = other937.resourcePlan;
  __isset = other937.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other938) {
  resourcePlan = other938.resourcePlan;
  __isset = other938.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other983) {
  resourcePlan = other983.resourcePlan;
  __isset = other983.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other984) {
  resourcePlan = other984.resourcePlan;
  __isset = other984.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other990) {
  resourcePlan = other990.resourcePlan;
  __isset = other990.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other991) {
  resourcePlan = other991.resourcePlan;
  __isset = other991.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetActiveResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetActiveResourcePlanResponse(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ")";
}


WMGetResourcePlanRequest::~WMGetResourcePlanRequest() throw() {
}


void WMGetResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMGetResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetResourcePlanRequest &a, WMGetResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other1024) {
  resourcePlanName = other1024.resourcePlanName;
  __isset = other1024.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other1025) {
  resourcePlanName = other1025.resourcePlanName;
  __isset = other1025.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other1006) {
  resourcePlanName = other1006.resourcePlanName;
  __isset = other1006.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other1007) {
  resourcePlanName = other1007.resourcePlanName;
  __isset = other1007.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other986) {
  resourcePlanName = other986.resourcePlanName;
  __isset = other986.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other987) {
  resourcePlanName = other987.resourcePlanName;
  __isset = other987.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other1005) {
  resourcePlanName = other1005.resourcePlanName;
  __isset = other1005.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other1006) {
  resourcePlanName = other1006.resourcePlanName;
  __isset = other1006.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other981) {
  resourcePlanName = other981.resourcePlanName;
  __isset = other981.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other982) {
  resourcePlanName = other982.resourcePlanName;
  __isset = other982.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other939) {
  resourcePlanName = other939.resourcePlanName;
  __isset = other939.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other940) {
  resourcePlanName = other940.resourcePlanName;
  __isset = other940.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other943) {
  resourcePlanName = other943.resourcePlanName;
  __isset = other943.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other944) {
  resourcePlanName = other944.resourcePlanName;
  __isset = other944.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other943) {
  resourcePlanName = other943.resourcePlanName;
  __isset = other943.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other944) {
  resourcePlanName = other944.resourcePlanName;
  __isset = other944.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other985) {
  resourcePlanName = other985.resourcePlanName;
  __isset = other985.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other986) {
  resourcePlanName = other986.resourcePlanName;
  __isset = other986.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other992) {
  resourcePlanName = other992.resourcePlanName;
  __isset = other992.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other993) {
  resourcePlanName = other993.resourcePlanName;
  __isset = other993.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMGetResourcePlanResponse::~WMGetResourcePlanResponse() throw() {
}


void WMGetResourcePlanResponse::__set_resourcePlan(const WMFullResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

uint32_t WMGetResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetResourcePlanResponse");

  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetResourcePlanResponse &a, WMGetResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other1026) {
  resourcePlan = other1026.resourcePlan;
  __isset = other1026.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other1027) {
  resourcePlan = other1027.resourcePlan;
  __isset = other1027.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other1008) {
  resourcePlan = other1008.resourcePlan;
  __isset = other1008.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other1009) {
  resourcePlan = other1009.resourcePlan;
  __isset = other1009.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other988) {
  resourcePlan = other988.resourcePlan;
  __isset = other988.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other989) {
  resourcePlan = other989.resourcePlan;
  __isset = other989.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other1007) {
  resourcePlan = other1007.resourcePlan;
  __isset = other1007.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other1008) {
  resourcePlan = other1008.resourcePlan;
  __isset = other1008.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other983) {
  resourcePlan = other983.resourcePlan;
  __isset = other983.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other984) {
  resourcePlan = other984.resourcePlan;
  __isset = other984.__isset;
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other945) {
  resourcePlan = other945.resourcePlan;
  __isset = other945.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other946) {
  resourcePlan = other946.resourcePlan;
  __isset = other946.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other945) {
  resourcePlan = other945.resourcePlan;
  __isset = other945.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other946) {
  resourcePlan = other946.resourcePlan;
  __isset = other946.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other987) {
  resourcePlan = other987.resourcePlan;
  __isset = other987.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other988) {
  resourcePlan = other988.resourcePlan;
  __isset = other988.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other994) {
  resourcePlan = other994.resourcePlan;
  __isset = other994.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other995) {
  resourcePlan = other995.resourcePlan;
  __isset = other995.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetResourcePlanResponse(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ")";
}


WMGetAllResourcePlanRequest::~WMGetAllResourcePlanRequest() throw() {
}


uint32_t WMGetAllResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetAllResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetAllResourcePlanRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetAllResourcePlanRequest &a, WMGetAllResourcePlanRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other1028) {
  (void) other1028;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other1029) {
  (void) other1029;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other1010) {
  (void) other1010;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other1011) {
  (void) other1011;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other990) {
  (void) other990;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other991) {
  (void) other991;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other1009) {
  (void) other1009;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other1010) {
  (void) other1010;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other985) {
  (void) other985;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other986) {
  (void) other986;
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other943) {
  (void) other943;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other944) {
  (void) other944;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other947) {
  (void) other947;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other948) {
  (void) other948;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other943) {
  (void) other943;
}
<<<<<<< HEAD
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other1010) {
  (void) other1010;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other944) {
  (void) other944;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other947) {
  (void) other947;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other948) {
  (void) other948;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other989) {
  (void) other989;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other990) {
  (void) other990;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other996) {
  (void) other996;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other997) {
  (void) other997;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetAllResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetAllResourcePlanRequest(";
  out << ")";
}


WMGetAllResourcePlanResponse::~WMGetAllResourcePlanResponse() throw() {
}


void WMGetAllResourcePlanResponse::__set_resourcePlans(const std::vector<WMResourcePlan> & val) {
  this->resourcePlans = val;
__isset.resourcePlans = true;
}

uint32_t WMGetAllResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resourcePlans.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1030;
            ::apache::thrift::protocol::TType _etype1033;
            xfer += iprot->readListBegin(_etype1033, _size1030);
            this->resourcePlans.resize(_size1030);
            uint32_t _i1034;
            for (_i1034 = 0; _i1034 < _size1030; ++_i1034)
            {
              xfer += this->resourcePlans[_i1034].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size1012;
            ::apache::thrift::protocol::TType _etype1015;
            xfer += iprot->readListBegin(_etype1015, _size1012);
            this->resourcePlans.resize(_size1012);
            uint32_t _i1016;
            for (_i1016 = 0; _i1016 < _size1012; ++_i1016)
            {
              xfer += this->resourcePlans[_i1016].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size992;
            ::apache::thrift::protocol::TType _etype995;
            xfer += iprot->readListBegin(_etype995, _size992);
            this->resourcePlans.resize(_size992);
            uint32_t _i996;
            for (_i996 = 0; _i996 < _size992; ++_i996)
            {
              xfer += this->resourcePlans[_i996].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size1011;
            ::apache::thrift::protocol::TType _etype1014;
            xfer += iprot->readListBegin(_etype1014, _size1011);
            this->resourcePlans.resize(_size1011);
            uint32_t _i1015;
            for (_i1015 = 0; _i1015 < _size1011; ++_i1015)
            {
              xfer += this->resourcePlans[_i1015].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size987;
            ::apache::thrift::protocol::TType _etype990;
            xfer += iprot->readListBegin(_etype990, _size987);
            this->resourcePlans.resize(_size987);
            uint32_t _i991;
            for (_i991 = 0; _i991 < _size987; ++_i991)
            {
              xfer += this->resourcePlans[_i991].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size945;
            ::apache::thrift::protocol::TType _etype948;
            xfer += iprot->readListBegin(_etype948, _size945);
            this->resourcePlans.resize(_size945);
            uint32_t _i949;
            for (_i949 = 0; _i949 < _size945; ++_i949)
<<<<<<< HEAD
            {
              xfer += this->resourcePlans[_i949].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size949;
            ::apache::thrift::protocol::TType _etype952;
            xfer += iprot->readListBegin(_etype952, _size949);
            this->resourcePlans.resize(_size949);
            uint32_t _i953;
            for (_i953 = 0; _i953 < _size949; ++_i953)
<<<<<<< HEAD
            {
              xfer += this->resourcePlans[_i953].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->resourcePlans[_i949].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->resourcePlans[_i953].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size991;
            ::apache::thrift::protocol::TType _etype994;
            xfer += iprot->readListBegin(_etype994, _size991);
            this->resourcePlans.resize(_size991);
            uint32_t _i995;
            for (_i995 = 0; _i995 < _size991; ++_i995)
            {
              xfer += this->resourcePlans[_i995].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size998;
            ::apache::thrift::protocol::TType _etype1001;
            xfer += iprot->readListBegin(_etype1001, _size998);
            this->resourcePlans.resize(_size998);
            uint32_t _i1002;
            for (_i1002 = 0; _i1002 < _size998; ++_i1002)
            {
              xfer += this->resourcePlans[_i1002].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resourcePlans = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetAllResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetAllResourcePlanResponse");

  if (this->__isset.resourcePlans) {
    xfer += oprot->writeFieldBegin("resourcePlans", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resourcePlans.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMResourcePlan> ::const_iterator _iter1035;
      for (_iter1035 = this->resourcePlans.begin(); _iter1035 != this->resourcePlans.end(); ++_iter1035)
      {
        xfer += (*_iter1035).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<WMResourcePlan> ::const_iterator _iter1017;
      for (_iter1017 = this->resourcePlans.begin(); _iter1017 != this->resourcePlans.end(); ++_iter1017)
      {
        xfer += (*_iter1017).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<WMResourcePlan> ::const_iterator _iter997;
      for (_iter997 = this->resourcePlans.begin(); _iter997 != this->resourcePlans.end(); ++_iter997)
      {
        xfer += (*_iter997).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<WMResourcePlan> ::const_iterator _iter1016;
      for (_iter1016 = this->resourcePlans.begin(); _iter1016 != this->resourcePlans.end(); ++_iter1016)
      {
        xfer += (*_iter1016).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMResourcePlan> ::const_iterator _iter992;
      for (_iter992 = this->resourcePlans.begin(); _iter992 != this->resourcePlans.end(); ++_iter992)
      {
        xfer += (*_iter992).write(oprot);
=======
      std::vector<WMResourcePlan> ::const_iterator _iter950;
      for (_iter950 = this->resourcePlans.begin(); _iter950 != this->resourcePlans.end(); ++_iter950)
      {
        xfer += (*_iter950).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMResourcePlan> ::const_iterator _iter954;
      for (_iter954 = this->resourcePlans.begin(); _iter954 != this->resourcePlans.end(); ++_iter954)
      {
        xfer += (*_iter954).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMResourcePlan> ::const_iterator _iter950;
      for (_iter950 = this->resourcePlans.begin(); _iter950 != this->resourcePlans.end(); ++_iter950)
      {
        xfer += (*_iter950).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMResourcePlan> ::const_iterator _iter954;
      for (_iter954 = this->resourcePlans.begin(); _iter954 != this->resourcePlans.end(); ++_iter954)
      {
        xfer += (*_iter954).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<WMResourcePlan> ::const_iterator _iter996;
      for (_iter996 = this->resourcePlans.begin(); _iter996 != this->resourcePlans.end(); ++_iter996)
      {
        xfer += (*_iter996).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<WMResourcePlan> ::const_iterator _iter1003;
      for (_iter1003 = this->resourcePlans.begin(); _iter1003 != this->resourcePlans.end(); ++_iter1003)
      {
        xfer += (*_iter1003).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetAllResourcePlanResponse &a, WMGetAllResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlans, b.resourcePlans);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other1036) {
  resourcePlans = other1036.resourcePlans;
  __isset = other1036.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other1037) {
  resourcePlans = other1037.resourcePlans;
  __isset = other1037.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other1018) {
  resourcePlans = other1018.resourcePlans;
  __isset = other1018.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other1019) {
  resourcePlans = other1019.resourcePlans;
  __isset = other1019.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other998) {
  resourcePlans = other998.resourcePlans;
  __isset = other998.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other999) {
  resourcePlans = other999.resourcePlans;
  __isset = other999.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other1017) {
  resourcePlans = other1017.resourcePlans;
  __isset = other1017.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other1018) {
  resourcePlans = other1018.resourcePlans;
  __isset = other1018.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other993) {
  resourcePlans = other993.resourcePlans;
  __isset = other993.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other994) {
  resourcePlans = other994.resourcePlans;
  __isset = other994.__isset;
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other951) {
  resourcePlans = other951.resourcePlans;
  __isset = other951.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other952) {
  resourcePlans = other952.resourcePlans;
  __isset = other952.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other955) {
  resourcePlans = other955.resourcePlans;
  __isset = other955.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other956) {
  resourcePlans = other956.resourcePlans;
  __isset = other956.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other951) {
  resourcePlans = other951.resourcePlans;
  __isset = other951.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other952) {
  resourcePlans = other952.resourcePlans;
  __isset = other952.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other955) {
  resourcePlans = other955.resourcePlans;
  __isset = other955.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other956) {
  resourcePlans = other956.resourcePlans;
  __isset = other956.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other997) {
  resourcePlans = other997.resourcePlans;
  __isset = other997.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other998) {
  resourcePlans = other998.resourcePlans;
  __isset = other998.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other1004) {
  resourcePlans = other1004.resourcePlans;
  __isset = other1004.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other1005) {
  resourcePlans = other1005.resourcePlans;
  __isset = other1005.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetAllResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetAllResourcePlanResponse(";
  out << "resourcePlans="; (__isset.resourcePlans ? (out << to_string(resourcePlans)) : (out << "<null>"));
  out << ")";
}


WMAlterResourcePlanRequest::~WMAlterResourcePlanRequest() throw() {
}


void WMAlterResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMAlterResourcePlanRequest::__set_resourcePlan(const WMNullableResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

void WMAlterResourcePlanRequest::__set_isEnableAndActivate(const bool val) {
  this->isEnableAndActivate = val;
__isset.isEnableAndActivate = true;
}

void WMAlterResourcePlanRequest::__set_isForceDeactivate(const bool val) {
  this->isForceDeactivate = val;
__isset.isForceDeactivate = true;
}

void WMAlterResourcePlanRequest::__set_isReplace(const bool val) {
  this->isReplace = val;
__isset.isReplace = true;
}

uint32_t WMAlterResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isEnableAndActivate);
          this->__isset.isEnableAndActivate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isForceDeactivate);
          this->__isset.isForceDeactivate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isReplace);
          this->__isset.isReplace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isEnableAndActivate) {
    xfer += oprot->writeFieldBegin("isEnableAndActivate", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->isEnableAndActivate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isForceDeactivate) {
    xfer += oprot->writeFieldBegin("isForceDeactivate", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isForceDeactivate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isReplace) {
    xfer += oprot->writeFieldBegin("isReplace", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isReplace);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterResourcePlanRequest &a, WMAlterResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.isEnableAndActivate, b.isEnableAndActivate);
  swap(a.isForceDeactivate, b.isForceDeactivate);
  swap(a.isReplace, b.isReplace);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other1038) {
  resourcePlanName = other1038.resourcePlanName;
  resourcePlan = other1038.resourcePlan;
  isEnableAndActivate = other1038.isEnableAndActivate;
  isForceDeactivate = other1038.isForceDeactivate;
  isReplace = other1038.isReplace;
  __isset = other1038.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1039) {
  resourcePlanName = other1039.resourcePlanName;
  resourcePlan = other1039.resourcePlan;
  isEnableAndActivate = other1039.isEnableAndActivate;
  isForceDeactivate = other1039.isForceDeactivate;
  isReplace = other1039.isReplace;
  __isset = other1039.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other1020) {
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other1000) {
  resourcePlanName = other1000.resourcePlanName;
  resourcePlan = other1000.resourcePlan;
  isEnableAndActivate = other1000.isEnableAndActivate;
  isForceDeactivate = other1000.isForceDeactivate;
  isReplace = other1000.isReplace;
  __isset = other1000.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1001) {
  resourcePlanName = other1001.resourcePlanName;
  resourcePlan = other1001.resourcePlan;
  isEnableAndActivate = other1001.isEnableAndActivate;
  isForceDeactivate = other1001.isForceDeactivate;
  isReplace = other1001.isReplace;
  __isset = other1001.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other1019) {
  resourcePlanName = other1019.resourcePlanName;
  resourcePlan = other1019.resourcePlan;
  isEnableAndActivate = other1019.isEnableAndActivate;
  isForceDeactivate = other1019.isForceDeactivate;
  isReplace = other1019.isReplace;
  __isset = other1019.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1020) {
>>>>>>> HIVE-18679 : create/replicate open transaction event
  resourcePlanName = other1020.resourcePlanName;
  resourcePlan = other1020.resourcePlan;
  isEnableAndActivate = other1020.isEnableAndActivate;
  isForceDeactivate = other1020.isForceDeactivate;
  isReplace = other1020.isReplace;
  __isset = other1020.__isset;
<<<<<<< HEAD
<<<<<<< HEAD
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1021) {
  resourcePlanName = other1021.resourcePlanName;
  resourcePlan = other1021.resourcePlan;
  isEnableAndActivate = other1021.isEnableAndActivate;
  isForceDeactivate = other1021.isForceDeactivate;
  isReplace = other1021.isReplace;
  __isset = other1021.__isset;
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other995) {
  resourcePlanName = other995.resourcePlanName;
  resourcePlan = other995.resourcePlan;
  isEnableAndActivate = other995.isEnableAndActivate;
  isForceDeactivate = other995.isForceDeactivate;
  isReplace = other995.isReplace;
  __isset = other995.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other996) {
  resourcePlanName = other996.resourcePlanName;
  resourcePlan = other996.resourcePlan;
  isEnableAndActivate = other996.isEnableAndActivate;
  isForceDeactivate = other996.isForceDeactivate;
  isReplace = other996.isReplace;
  __isset = other996.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other953) {
  resourcePlanName = other953.resourcePlanName;
  resourcePlan = other953.resourcePlan;
  isEnableAndActivate = other953.isEnableAndActivate;
  isForceDeactivate = other953.isForceDeactivate;
  isReplace = other953.isReplace;
  __isset = other953.__isset;
=======
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other999) {
  resourcePlanName = other999.resourcePlanName;
  resourcePlan = other999.resourcePlan;
  isEnableAndActivate = other999.isEnableAndActivate;
  isForceDeactivate = other999.isForceDeactivate;
  isReplace = other999.isReplace;
  __isset = other999.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1000) {
  resourcePlanName = other1000.resourcePlanName;
  resourcePlan = other1000.resourcePlan;
  isEnableAndActivate = other1000.isEnableAndActivate;
  isForceDeactivate = other1000.isForceDeactivate;
  isReplace = other1000.isReplace;
  __isset = other1000.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other1006) {
  resourcePlanName = other1006.resourcePlanName;
  resourcePlan = other1006.resourcePlan;
  isEnableAndActivate = other1006.isEnableAndActivate;
  isForceDeactivate = other1006.isForceDeactivate;
  isReplace = other1006.isReplace;
  __isset = other1006.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1007) {
  resourcePlanName = other1007.resourcePlanName;
  resourcePlan = other1007.resourcePlan;
  isEnableAndActivate = other1007.isEnableAndActivate;
  isForceDeactivate = other1007.isForceDeactivate;
  isReplace = other1007.isReplace;
  __isset = other1007.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMAlterResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ", " << "isEnableAndActivate="; (__isset.isEnableAndActivate ? (out << to_string(isEnableAndActivate)) : (out << "<null>"));
  out << ", " << "isForceDeactivate="; (__isset.isForceDeactivate ? (out << to_string(isForceDeactivate)) : (out << "<null>"));
  out << ", " << "isReplace="; (__isset.isReplace ? (out << to_string(isReplace)) : (out << "<null>"));
  out << ")";
}


WMAlterResourcePlanResponse::~WMAlterResourcePlanResponse() throw() {
}


void WMAlterResourcePlanResponse::__set_fullResourcePlan(const WMFullResourcePlan& val) {
  this->fullResourcePlan = val;
__isset.fullResourcePlan = true;
}

uint32_t WMAlterResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fullResourcePlan.read(iprot);
          this->__isset.fullResourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterResourcePlanResponse");

  if (this->__isset.fullResourcePlan) {
    xfer += oprot->writeFieldBegin("fullResourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->fullResourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterResourcePlanResponse &a, WMAlterResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.fullResourcePlan, b.fullResourcePlan);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1040) {
  fullResourcePlan = other1040.fullResourcePlan;
  __isset = other1040.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1041) {
  fullResourcePlan = other1041.fullResourcePlan;
  __isset = other1041.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1022) {
  fullResourcePlan = other1022.fullResourcePlan;
  __isset = other1022.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1023) {
  fullResourcePlan = other1023.fullResourcePlan;
  __isset = other1023.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1002) {
  fullResourcePlan = other1002.fullResourcePlan;
  __isset = other1002.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1003) {
  fullResourcePlan = other1003.fullResourcePlan;
  __isset = other1003.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1021) {
  fullResourcePlan = other1021.fullResourcePlan;
  __isset = other1021.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1022) {
  fullResourcePlan = other1022.fullResourcePlan;
  __isset = other1022.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other997) {
  fullResourcePlan = other997.fullResourcePlan;
  __isset = other997.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other998) {
  fullResourcePlan = other998.fullResourcePlan;
  __isset = other998.__isset;
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other955) {
  fullResourcePlan = other955.fullResourcePlan;
  __isset = other955.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other956) {
  fullResourcePlan = other956.fullResourcePlan;
  __isset = other956.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other959) {
  fullResourcePlan = other959.fullResourcePlan;
  __isset = other959.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other960) {
  fullResourcePlan = other960.fullResourcePlan;
  __isset = other960.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other955) {
  fullResourcePlan = other955.fullResourcePlan;
  __isset = other955.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other956) {
  fullResourcePlan = other956.fullResourcePlan;
  __isset = other956.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other959) {
  fullResourcePlan = other959.fullResourcePlan;
  __isset = other959.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other960) {
  fullResourcePlan = other960.fullResourcePlan;
  __isset = other960.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1001) {
  fullResourcePlan = other1001.fullResourcePlan;
  __isset = other1001.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1002) {
  fullResourcePlan = other1002.fullResourcePlan;
  __isset = other1002.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1008) {
  fullResourcePlan = other1008.fullResourcePlan;
  __isset = other1008.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1009) {
  fullResourcePlan = other1009.fullResourcePlan;
  __isset = other1009.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMAlterResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterResourcePlanResponse(";
  out << "fullResourcePlan="; (__isset.fullResourcePlan ? (out << to_string(fullResourcePlan)) : (out << "<null>"));
  out << ")";
}


WMValidateResourcePlanRequest::~WMValidateResourcePlanRequest() throw() {
}


void WMValidateResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMValidateResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMValidateResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMValidateResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMValidateResourcePlanRequest &a, WMValidateResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1042) {
  resourcePlanName = other1042.resourcePlanName;
  __isset = other1042.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1043) {
  resourcePlanName = other1043.resourcePlanName;
  __isset = other1043.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1024) {
  resourcePlanName = other1024.resourcePlanName;
  __isset = other1024.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1025) {
  resourcePlanName = other1025.resourcePlanName;
  __isset = other1025.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1004) {
  resourcePlanName = other1004.resourcePlanName;
  __isset = other1004.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1005) {
  resourcePlanName = other1005.resourcePlanName;
  __isset = other1005.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1023) {
  resourcePlanName = other1023.resourcePlanName;
  __isset = other1023.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1024) {
  resourcePlanName = other1024.resourcePlanName;
  __isset = other1024.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other999) {
  resourcePlanName = other999.resourcePlanName;
  __isset = other999.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1000) {
  resourcePlanName = other1000.resourcePlanName;
  __isset = other1000.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other957) {
  resourcePlanName = other957.resourcePlanName;
  __isset = other957.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other958) {
  resourcePlanName = other958.resourcePlanName;
  __isset = other958.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other961) {
  resourcePlanName = other961.resourcePlanName;
  __isset = other961.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other962) {
  resourcePlanName = other962.resourcePlanName;
  __isset = other962.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other961) {
  resourcePlanName = other961.resourcePlanName;
  __isset = other961.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other962) {
  resourcePlanName = other962.resourcePlanName;
  __isset = other962.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1003) {
  resourcePlanName = other1003.resourcePlanName;
  __isset = other1003.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1004) {
  resourcePlanName = other1004.resourcePlanName;
  __isset = other1004.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1010) {
  resourcePlanName = other1010.resourcePlanName;
  __isset = other1010.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1011) {
  resourcePlanName = other1011.resourcePlanName;
  __isset = other1011.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMValidateResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMValidateResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMValidateResourcePlanResponse::~WMValidateResourcePlanResponse() throw() {
}


void WMValidateResourcePlanResponse::__set_errors(const std::vector<std::string> & val) {
  this->errors = val;
__isset.errors = true;
}

void WMValidateResourcePlanResponse::__set_warnings(const std::vector<std::string> & val) {
  this->warnings = val;
__isset.warnings = true;
}

uint32_t WMValidateResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->errors.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1044;
            ::apache::thrift::protocol::TType _etype1047;
            xfer += iprot->readListBegin(_etype1047, _size1044);
            this->errors.resize(_size1044);
            uint32_t _i1048;
            for (_i1048 = 0; _i1048 < _size1044; ++_i1048)
            {
              xfer += iprot->readString(this->errors[_i1048]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size1026;
            ::apache::thrift::protocol::TType _etype1029;
            xfer += iprot->readListBegin(_etype1029, _size1026);
            this->errors.resize(_size1026);
            uint32_t _i1030;
            for (_i1030 = 0; _i1030 < _size1026; ++_i1030)
            {
              xfer += iprot->readString(this->errors[_i1030]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size1006;
            ::apache::thrift::protocol::TType _etype1009;
            xfer += iprot->readListBegin(_etype1009, _size1006);
            this->errors.resize(_size1006);
            uint32_t _i1010;
            for (_i1010 = 0; _i1010 < _size1006; ++_i1010)
            {
              xfer += iprot->readString(this->errors[_i1010]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size1025;
            ::apache::thrift::protocol::TType _etype1028;
            xfer += iprot->readListBegin(_etype1028, _size1025);
            this->errors.resize(_size1025);
            uint32_t _i1029;
            for (_i1029 = 0; _i1029 < _size1025; ++_i1029)
            {
              xfer += iprot->readString(this->errors[_i1029]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1001;
            ::apache::thrift::protocol::TType _etype1004;
            xfer += iprot->readListBegin(_etype1004, _size1001);
            this->errors.resize(_size1001);
            uint32_t _i1005;
            for (_i1005 = 0; _i1005 < _size1001; ++_i1005)
            {
              xfer += iprot->readString(this->errors[_i1005]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size959;
            ::apache::thrift::protocol::TType _etype962;
            xfer += iprot->readListBegin(_etype962, _size959);
            this->errors.resize(_size959);
            uint32_t _i963;
            for (_i963 = 0; _i963 < _size959; ++_i963)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->errors[_i963]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size963;
            ::apache::thrift::protocol::TType _etype966;
            xfer += iprot->readListBegin(_etype966, _size963);
            this->errors.resize(_size963);
            uint32_t _i967;
            for (_i967 = 0; _i967 < _size963; ++_i967)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->errors[_i967]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += iprot->readString(this->errors[_i963]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readString(this->errors[_i967]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size1005;
            ::apache::thrift::protocol::TType _etype1008;
            xfer += iprot->readListBegin(_etype1008, _size1005);
            this->errors.resize(_size1005);
            uint32_t _i1009;
            for (_i1009 = 0; _i1009 < _size1005; ++_i1009)
            {
              xfer += iprot->readString(this->errors[_i1009]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size1012;
            ::apache::thrift::protocol::TType _etype1015;
            xfer += iprot->readListBegin(_etype1015, _size1012);
            this->errors.resize(_size1012);
            uint32_t _i1016;
            for (_i1016 = 0; _i1016 < _size1012; ++_i1016)
            {
              xfer += iprot->readString(this->errors[_i1016]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->warnings.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1049;
            ::apache::thrift::protocol::TType _etype1052;
            xfer += iprot->readListBegin(_etype1052, _size1049);
            this->warnings.resize(_size1049);
            uint32_t _i1053;
            for (_i1053 = 0; _i1053 < _size1049; ++_i1053)
            {
              xfer += iprot->readString(this->warnings[_i1053]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size1031;
            ::apache::thrift::protocol::TType _etype1034;
            xfer += iprot->readListBegin(_etype1034, _size1031);
            this->warnings.resize(_size1031);
            uint32_t _i1035;
            for (_i1035 = 0; _i1035 < _size1031; ++_i1035)
            {
              xfer += iprot->readString(this->warnings[_i1035]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size1011;
            ::apache::thrift::protocol::TType _etype1014;
            xfer += iprot->readListBegin(_etype1014, _size1011);
            this->warnings.resize(_size1011);
            uint32_t _i1015;
            for (_i1015 = 0; _i1015 < _size1011; ++_i1015)
            {
              xfer += iprot->readString(this->warnings[_i1015]);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size1030;
            ::apache::thrift::protocol::TType _etype1033;
            xfer += iprot->readListBegin(_etype1033, _size1030);
            this->warnings.resize(_size1030);
            uint32_t _i1034;
            for (_i1034 = 0; _i1034 < _size1030; ++_i1034)
            {
              xfer += iprot->readString(this->warnings[_i1034]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1006;
            ::apache::thrift::protocol::TType _etype1009;
            xfer += iprot->readListBegin(_etype1009, _size1006);
            this->warnings.resize(_size1006);
            uint32_t _i1010;
            for (_i1010 = 0; _i1010 < _size1006; ++_i1010)
            {
              xfer += iprot->readString(this->warnings[_i1010]);
=======
            uint32_t _size964;
            ::apache::thrift::protocol::TType _etype967;
            xfer += iprot->readListBegin(_etype967, _size964);
            this->warnings.resize(_size964);
            uint32_t _i968;
            for (_i968 = 0; _i968 < _size964; ++_i968)
            {
              xfer += iprot->readString(this->warnings[_i968]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size968;
            ::apache::thrift::protocol::TType _etype971;
            xfer += iprot->readListBegin(_etype971, _size968);
            this->warnings.resize(_size968);
            uint32_t _i972;
            for (_i972 = 0; _i972 < _size968; ++_i972)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->warnings[_i972]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size964;
            ::apache::thrift::protocol::TType _etype967;
            xfer += iprot->readListBegin(_etype967, _size964);
            this->warnings.resize(_size964);
            uint32_t _i968;
            for (_i968 = 0; _i968 < _size964; ++_i968)
            {
              xfer += iprot->readString(this->warnings[_i968]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
<<<<<<< HEAD
              xfer += iprot->readString(this->warnings[_i1034]);
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
              xfer += iprot->readString(this->warnings[_i972]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size1010;
            ::apache::thrift::protocol::TType _etype1013;
            xfer += iprot->readListBegin(_etype1013, _size1010);
            this->warnings.resize(_size1010);
            uint32_t _i1014;
            for (_i1014 = 0; _i1014 < _size1010; ++_i1014)
            {
              xfer += iprot->readString(this->warnings[_i1014]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size1017;
            ::apache::thrift::protocol::TType _etype1020;
            xfer += iprot->readListBegin(_etype1020, _size1017);
            this->warnings.resize(_size1017);
            uint32_t _i1021;
            for (_i1021 = 0; _i1021 < _size1017; ++_i1021)
            {
              xfer += iprot->readString(this->warnings[_i1021]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.warnings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMValidateResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMValidateResourcePlanResponse");

  if (this->__isset.errors) {
    xfer += oprot->writeFieldBegin("errors", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->errors.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1054;
      for (_iter1054 = this->errors.begin(); _iter1054 != this->errors.end(); ++_iter1054)
      {
        xfer += oprot->writeString((*_iter1054));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1036;
      for (_iter1036 = this->errors.begin(); _iter1036 != this->errors.end(); ++_iter1036)
      {
        xfer += oprot->writeString((*_iter1036));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1016;
      for (_iter1016 = this->errors.begin(); _iter1016 != this->errors.end(); ++_iter1016)
      {
        xfer += oprot->writeString((*_iter1016));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<std::string> ::const_iterator _iter1035;
      for (_iter1035 = this->errors.begin(); _iter1035 != this->errors.end(); ++_iter1035)
      {
        xfer += oprot->writeString((*_iter1035));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1011;
      for (_iter1011 = this->errors.begin(); _iter1011 != this->errors.end(); ++_iter1011)
      {
        xfer += oprot->writeString((*_iter1011));
=======
      std::vector<std::string> ::const_iterator _iter969;
      for (_iter969 = this->errors.begin(); _iter969 != this->errors.end(); ++_iter969)
      {
        xfer += oprot->writeString((*_iter969));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter973;
      for (_iter973 = this->errors.begin(); _iter973 != this->errors.end(); ++_iter973)
      {
        xfer += oprot->writeString((*_iter973));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter969;
      for (_iter969 = this->errors.begin(); _iter969 != this->errors.end(); ++_iter969)
      {
        xfer += oprot->writeString((*_iter969));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter973;
      for (_iter973 = this->errors.begin(); _iter973 != this->errors.end(); ++_iter973)
      {
        xfer += oprot->writeString((*_iter973));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<std::string> ::const_iterator _iter1015;
      for (_iter1015 = this->errors.begin(); _iter1015 != this->errors.end(); ++_iter1015)
      {
        xfer += oprot->writeString((*_iter1015));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<std::string> ::const_iterator _iter1022;
      for (_iter1022 = this->errors.begin(); _iter1022 != this->errors.end(); ++_iter1022)
      {
        xfer += oprot->writeString((*_iter1022));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.warnings) {
    xfer += oprot->writeFieldBegin("warnings", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->warnings.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1055;
      for (_iter1055 = this->warnings.begin(); _iter1055 != this->warnings.end(); ++_iter1055)
      {
        xfer += oprot->writeString((*_iter1055));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1037;
      for (_iter1037 = this->warnings.begin(); _iter1037 != this->warnings.end(); ++_iter1037)
      {
        xfer += oprot->writeString((*_iter1037));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1017;
      for (_iter1017 = this->warnings.begin(); _iter1017 != this->warnings.end(); ++_iter1017)
      {
        xfer += oprot->writeString((*_iter1017));
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<std::string> ::const_iterator _iter1036;
      for (_iter1036 = this->warnings.begin(); _iter1036 != this->warnings.end(); ++_iter1036)
      {
        xfer += oprot->writeString((*_iter1036));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1012;
      for (_iter1012 = this->warnings.begin(); _iter1012 != this->warnings.end(); ++_iter1012)
      {
        xfer += oprot->writeString((*_iter1012));
=======
      std::vector<std::string> ::const_iterator _iter970;
      for (_iter970 = this->warnings.begin(); _iter970 != this->warnings.end(); ++_iter970)
      {
        xfer += oprot->writeString((*_iter970));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter974;
      for (_iter974 = this->warnings.begin(); _iter974 != this->warnings.end(); ++_iter974)
      {
        xfer += oprot->writeString((*_iter974));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter970;
      for (_iter970 = this->warnings.begin(); _iter970 != this->warnings.end(); ++_iter970)
      {
        xfer += oprot->writeString((*_iter970));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter974;
      for (_iter974 = this->warnings.begin(); _iter974 != this->warnings.end(); ++_iter974)
      {
        xfer += oprot->writeString((*_iter974));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<std::string> ::const_iterator _iter1016;
      for (_iter1016 = this->warnings.begin(); _iter1016 != this->warnings.end(); ++_iter1016)
      {
        xfer += oprot->writeString((*_iter1016));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<std::string> ::const_iterator _iter1023;
      for (_iter1023 = this->warnings.begin(); _iter1023 != this->warnings.end(); ++_iter1023)
      {
        xfer += oprot->writeString((*_iter1023));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMValidateResourcePlanResponse &a, WMValidateResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.errors, b.errors);
  swap(a.warnings, b.warnings);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1056) {
  errors = other1056.errors;
  warnings = other1056.warnings;
  __isset = other1056.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1057) {
  errors = other1057.errors;
  warnings = other1057.warnings;
  __isset = other1057.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1038) {
  errors = other1038.errors;
  warnings = other1038.warnings;
  __isset = other1038.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1039) {
  errors = other1039.errors;
  warnings = other1039.warnings;
  __isset = other1039.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1018) {
  errors = other1018.errors;
  warnings = other1018.warnings;
  __isset = other1018.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1019) {
  errors = other1019.errors;
  warnings = other1019.warnings;
  __isset = other1019.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1037) {
  errors = other1037.errors;
  warnings = other1037.warnings;
  __isset = other1037.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1038) {
  errors = other1038.errors;
  warnings = other1038.warnings;
  __isset = other1038.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1013) {
  errors = other1013.errors;
  warnings = other1013.warnings;
  __isset = other1013.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1014) {
  errors = other1014.errors;
  warnings = other1014.warnings;
  __isset = other1014.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other971) {
  errors = other971.errors;
  warnings = other971.warnings;
  __isset = other971.__isset;
<<<<<<< HEAD
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other972) {
  errors = other972.errors;
  warnings = other972.warnings;
  __isset = other972.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other975) {
  errors = other975.errors;
  warnings = other975.warnings;
  __isset = other975.__isset;
<<<<<<< HEAD
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other976) {
  errors = other976.errors;
  warnings = other976.warnings;
  __isset = other976.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other972) {
  errors = other972.errors;
  warnings = other972.warnings;
  __isset = other972.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
<<<<<<< HEAD
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1038) {
  errors = other1038.errors;
  warnings = other1038.warnings;
  __isset = other1038.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other976) {
  errors = other976.errors;
  warnings = other976.warnings;
  __isset = other976.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1017) {
  errors = other1017.errors;
  warnings = other1017.warnings;
  __isset = other1017.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1018) {
  errors = other1018.errors;
  warnings = other1018.warnings;
  __isset = other1018.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1024) {
  errors = other1024.errors;
  warnings = other1024.warnings;
  __isset = other1024.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1025) {
  errors = other1025.errors;
  warnings = other1025.warnings;
  __isset = other1025.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMValidateResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMValidateResourcePlanResponse(";
  out << "errors="; (__isset.errors ? (out << to_string(errors)) : (out << "<null>"));
  out << ", " << "warnings="; (__isset.warnings ? (out << to_string(warnings)) : (out << "<null>"));
  out << ")";
}


WMDropResourcePlanRequest::~WMDropResourcePlanRequest() throw() {
}


void WMDropResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMDropResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropResourcePlanRequest &a, WMDropResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1058) {
  resourcePlanName = other1058.resourcePlanName;
  __isset = other1058.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1059) {
  resourcePlanName = other1059.resourcePlanName;
  __isset = other1059.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1040) {
  resourcePlanName = other1040.resourcePlanName;
  __isset = other1040.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1041) {
  resourcePlanName = other1041.resourcePlanName;
  __isset = other1041.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1020) {
  resourcePlanName = other1020.resourcePlanName;
  __isset = other1020.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1021) {
  resourcePlanName = other1021.resourcePlanName;
  __isset = other1021.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1039) {
  resourcePlanName = other1039.resourcePlanName;
  __isset = other1039.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1040) {
  resourcePlanName = other1040.resourcePlanName;
  __isset = other1040.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1015) {
  resourcePlanName = other1015.resourcePlanName;
  __isset = other1015.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1016) {
  resourcePlanName = other1016.resourcePlanName;
  __isset = other1016.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other973) {
  resourcePlanName = other973.resourcePlanName;
  __isset = other973.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other974) {
  resourcePlanName = other974.resourcePlanName;
  __isset = other974.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other977) {
  resourcePlanName = other977.resourcePlanName;
  __isset = other977.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other978) {
  resourcePlanName = other978.resourcePlanName;
  __isset = other978.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other977) {
  resourcePlanName = other977.resourcePlanName;
  __isset = other977.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other978) {
  resourcePlanName = other978.resourcePlanName;
  __isset = other978.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1019) {
  resourcePlanName = other1019.resourcePlanName;
  __isset = other1019.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1020) {
  resourcePlanName = other1020.resourcePlanName;
  __isset = other1020.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1026) {
  resourcePlanName = other1026.resourcePlanName;
  __isset = other1026.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1027) {
  resourcePlanName = other1027.resourcePlanName;
  __isset = other1027.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMDropResourcePlanResponse::~WMDropResourcePlanResponse() throw() {
}


uint32_t WMDropResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropResourcePlanResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropResourcePlanResponse &a, WMDropResourcePlanResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1060) {
  (void) other1060;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1061) {
  (void) other1061;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1042) {
  (void) other1042;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1043) {
  (void) other1043;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1022) {
  (void) other1022;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1023) {
  (void) other1023;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1041) {
  (void) other1041;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1042) {
  (void) other1042;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1017) {
  (void) other1017;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1018) {
  (void) other1018;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other975) {
  (void) other975;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other976) {
  (void) other976;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other979) {
  (void) other979;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other980) {
  (void) other980;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other979) {
  (void) other979;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other980) {
  (void) other980;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1021) {
  (void) other1021;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1022) {
  (void) other1022;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1028) {
  (void) other1028;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1029) {
  (void) other1029;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropResourcePlanResponse(";
  out << ")";
}


WMCreateTriggerRequest::~WMCreateTriggerRequest() throw() {
}


void WMCreateTriggerRequest::__set_trigger(const WMTrigger& val) {
  this->trigger = val;
__isset.trigger = true;
}

uint32_t WMCreateTriggerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trigger.read(iprot);
          this->__isset.trigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateTriggerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateTriggerRequest");

  if (this->__isset.trigger) {
    xfer += oprot->writeFieldBegin("trigger", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->trigger.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateTriggerRequest &a, WMCreateTriggerRequest &b) {
  using ::std::swap;
  swap(a.trigger, b.trigger);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1062) {
  trigger = other1062.trigger;
  __isset = other1062.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1063) {
  trigger = other1063.trigger;
  __isset = other1063.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1044) {
  trigger = other1044.trigger;
  __isset = other1044.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1045) {
  trigger = other1045.trigger;
  __isset = other1045.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1024) {
  trigger = other1024.trigger;
  __isset = other1024.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1025) {
  trigger = other1025.trigger;
  __isset = other1025.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1043) {
  trigger = other1043.trigger;
  __isset = other1043.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1044) {
  trigger = other1044.trigger;
  __isset = other1044.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1019) {
  trigger = other1019.trigger;
  __isset = other1019.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1020) {
  trigger = other1020.trigger;
  __isset = other1020.__isset;
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other977) {
  trigger = other977.trigger;
  __isset = other977.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other978) {
  trigger = other978.trigger;
  __isset = other978.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other977) {
  trigger = other977.trigger;
  __isset = other977.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other978) {
  trigger = other978.trigger;
  __isset = other978.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1023) {
  trigger = other1023.trigger;
  __isset = other1023.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1024) {
  trigger = other1024.trigger;
  __isset = other1024.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1030) {
  trigger = other1030.trigger;
  __isset = other1030.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1031) {
  trigger = other1031.trigger;
  __isset = other1031.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateTriggerRequest(";
  out << "trigger="; (__isset.trigger ? (out << to_string(trigger)) : (out << "<null>"));
  out << ")";
}


WMCreateTriggerResponse::~WMCreateTriggerResponse() throw() {
}


uint32_t WMCreateTriggerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateTriggerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateTriggerResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateTriggerResponse &a, WMCreateTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1064) {
  (void) other1064;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1065) {
  (void) other1065;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1046) {
  (void) other1046;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1047) {
  (void) other1047;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1026) {
  (void) other1026;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1027) {
  (void) other1027;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1045) {
  (void) other1045;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1046) {
  (void) other1046;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1021) {
  (void) other1021;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1022) {
  (void) other1022;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other979) {
  (void) other979;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other980) {
  (void) other980;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other983) {
  (void) other983;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other983) {
  (void) other983;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1025) {
  (void) other1025;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1026) {
  (void) other1026;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1032) {
  (void) other1032;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1033) {
  (void) other1033;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateTriggerResponse(";
  out << ")";
}


WMAlterTriggerRequest::~WMAlterTriggerRequest() throw() {
}


void WMAlterTriggerRequest::__set_trigger(const WMTrigger& val) {
  this->trigger = val;
__isset.trigger = true;
}

uint32_t WMAlterTriggerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trigger.read(iprot);
          this->__isset.trigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterTriggerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterTriggerRequest");

  if (this->__isset.trigger) {
    xfer += oprot->writeFieldBegin("trigger", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->trigger.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterTriggerRequest &a, WMAlterTriggerRequest &b) {
  using ::std::swap;
  swap(a.trigger, b.trigger);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1066) {
  trigger = other1066.trigger;
  __isset = other1066.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1067) {
  trigger = other1067.trigger;
  __isset = other1067.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1048) {
  trigger = other1048.trigger;
  __isset = other1048.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1049) {
  trigger = other1049.trigger;
  __isset = other1049.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1028) {
  trigger = other1028.trigger;
  __isset = other1028.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1029) {
  trigger = other1029.trigger;
  __isset = other1029.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1047) {
  trigger = other1047.trigger;
  __isset = other1047.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1048) {
  trigger = other1048.trigger;
  __isset = other1048.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1023) {
  trigger = other1023.trigger;
  __isset = other1023.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1024) {
  trigger = other1024.trigger;
  __isset = other1024.__isset;
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other985) {
  trigger = other985.trigger;
  __isset = other985.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other986) {
  trigger = other986.trigger;
  __isset = other986.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other985) {
  trigger = other985.trigger;
  __isset = other985.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other986) {
  trigger = other986.trigger;
  __isset = other986.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1027) {
  trigger = other1027.trigger;
  __isset = other1027.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1028) {
  trigger = other1028.trigger;
  __isset = other1028.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1034) {
  trigger = other1034.trigger;
  __isset = other1034.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1035) {
  trigger = other1035.trigger;
  __isset = other1035.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMAlterTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterTriggerRequest(";
  out << "trigger="; (__isset.trigger ? (out << to_string(trigger)) : (out << "<null>"));
  out << ")";
}


WMAlterTriggerResponse::~WMAlterTriggerResponse() throw() {
}


uint32_t WMAlterTriggerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterTriggerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterTriggerResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterTriggerResponse &a, WMAlterTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1068) {
  (void) other1068;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1069) {
  (void) other1069;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1050) {
  (void) other1050;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1051) {
  (void) other1051;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1030) {
  (void) other1030;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1031) {
  (void) other1031;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1049) {
  (void) other1049;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1050) {
  (void) other1050;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1025) {
  (void) other1025;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1026) {
  (void) other1026;
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other983) {
  (void) other983;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other987) {
  (void) other987;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other988) {
  (void) other988;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other983) {
  (void) other983;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other987) {
  (void) other987;
}
<<<<<<< HEAD
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1050) {
  (void) other1050;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other988) {
  (void) other988;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1029) {
  (void) other1029;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1030) {
  (void) other1030;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1036) {
  (void) other1036;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1037) {
  (void) other1037;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMAlterTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterTriggerResponse(";
  out << ")";
}


WMDropTriggerRequest::~WMDropTriggerRequest() throw() {
}


void WMDropTriggerRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMDropTriggerRequest::__set_triggerName(const std::string& val) {
  this->triggerName = val;
__isset.triggerName = true;
}

uint32_t WMDropTriggerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerName);
          this->__isset.triggerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropTriggerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropTriggerRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggerName) {
    xfer += oprot->writeFieldBegin("triggerName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->triggerName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropTriggerRequest &a, WMDropTriggerRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1070) {
  resourcePlanName = other1070.resourcePlanName;
  triggerName = other1070.triggerName;
  __isset = other1070.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1071) {
  resourcePlanName = other1071.resourcePlanName;
  triggerName = other1071.triggerName;
  __isset = other1071.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1052) {
  resourcePlanName = other1052.resourcePlanName;
  triggerName = other1052.triggerName;
  __isset = other1052.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1053) {
  resourcePlanName = other1053.resourcePlanName;
  triggerName = other1053.triggerName;
  __isset = other1053.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1032) {
  resourcePlanName = other1032.resourcePlanName;
  triggerName = other1032.triggerName;
  __isset = other1032.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1033) {
  resourcePlanName = other1033.resourcePlanName;
  triggerName = other1033.triggerName;
  __isset = other1033.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1051) {
  resourcePlanName = other1051.resourcePlanName;
  triggerName = other1051.triggerName;
  __isset = other1051.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1052) {
  resourcePlanName = other1052.resourcePlanName;
  triggerName = other1052.triggerName;
  __isset = other1052.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1027) {
  resourcePlanName = other1027.resourcePlanName;
  triggerName = other1027.triggerName;
  __isset = other1027.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1028) {
  resourcePlanName = other1028.resourcePlanName;
  triggerName = other1028.triggerName;
  __isset = other1028.__isset;
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other985) {
  resourcePlanName = other985.resourcePlanName;
  triggerName = other985.triggerName;
  __isset = other985.__isset;
}
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other985) {
  resourcePlanName = other985.resourcePlanName;
  triggerName = other985.triggerName;
  __isset = other985.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other986) {
  resourcePlanName = other986.resourcePlanName;
  triggerName = other986.triggerName;
  __isset = other986.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  triggerName = other989.triggerName;
  __isset = other989.__isset;
}
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  triggerName = other989.triggerName;
  __isset = other989.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other990) {
  resourcePlanName = other990.resourcePlanName;
  triggerName = other990.triggerName;
  __isset = other990.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1031) {
  resourcePlanName = other1031.resourcePlanName;
  triggerName = other1031.triggerName;
  __isset = other1031.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1032) {
  resourcePlanName = other1032.resourcePlanName;
  triggerName = other1032.triggerName;
  __isset = other1032.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1038) {
  resourcePlanName = other1038.resourcePlanName;
  triggerName = other1038.triggerName;
  __isset = other1038.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1039) {
  resourcePlanName = other1039.resourcePlanName;
  triggerName = other1039.triggerName;
  __isset = other1039.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropTriggerRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "triggerName="; (__isset.triggerName ? (out << to_string(triggerName)) : (out << "<null>"));
  out << ")";
}


WMDropTriggerResponse::~WMDropTriggerResponse() throw() {
}


uint32_t WMDropTriggerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropTriggerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropTriggerResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropTriggerResponse &a, WMDropTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1072) {
  (void) other1072;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1073) {
  (void) other1073;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1054) {
  (void) other1054;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1055) {
  (void) other1055;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1034) {
  (void) other1034;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1035) {
  (void) other1035;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1053) {
  (void) other1053;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1054) {
  (void) other1054;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1029) {
  (void) other1029;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1030) {
  (void) other1030;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other987) {
  (void) other987;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other988) {
  (void) other988;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other991) {
  (void) other991;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other992) {
  (void) other992;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other991) {
  (void) other991;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other992) {
  (void) other992;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1033) {
  (void) other1033;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1034) {
  (void) other1034;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1040) {
  (void) other1040;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1041) {
  (void) other1041;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropTriggerResponse(";
  out << ")";
}


WMGetTriggersForResourePlanRequest::~WMGetTriggersForResourePlanRequest() throw() {
}


void WMGetTriggersForResourePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMGetTriggersForResourePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetTriggersForResourePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetTriggersForResourePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetTriggersForResourePlanRequest &a, WMGetTriggersForResourePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1074) {
  resourcePlanName = other1074.resourcePlanName;
  __isset = other1074.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1075) {
  resourcePlanName = other1075.resourcePlanName;
  __isset = other1075.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1056) {
  resourcePlanName = other1056.resourcePlanName;
  __isset = other1056.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1057) {
  resourcePlanName = other1057.resourcePlanName;
  __isset = other1057.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1036) {
  resourcePlanName = other1036.resourcePlanName;
  __isset = other1036.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1037) {
  resourcePlanName = other1037.resourcePlanName;
  __isset = other1037.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1055) {
  resourcePlanName = other1055.resourcePlanName;
  __isset = other1055.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1056) {
  resourcePlanName = other1056.resourcePlanName;
  __isset = other1056.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1031) {
  resourcePlanName = other1031.resourcePlanName;
  __isset = other1031.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1032) {
  resourcePlanName = other1032.resourcePlanName;
  __isset = other1032.__isset;
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  __isset = other989.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other990) {
  resourcePlanName = other990.resourcePlanName;
  __isset = other990.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other993) {
  resourcePlanName = other993.resourcePlanName;
  __isset = other993.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other994) {
  resourcePlanName = other994.resourcePlanName;
  __isset = other994.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  __isset = other989.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other990) {
  resourcePlanName = other990.resourcePlanName;
  __isset = other990.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other993) {
  resourcePlanName = other993.resourcePlanName;
  __isset = other993.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other994) {
  resourcePlanName = other994.resourcePlanName;
  __isset = other994.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1035) {
  resourcePlanName = other1035.resourcePlanName;
  __isset = other1035.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1036) {
  resourcePlanName = other1036.resourcePlanName;
  __isset = other1036.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1042) {
  resourcePlanName = other1042.resourcePlanName;
  __isset = other1042.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1043) {
  resourcePlanName = other1043.resourcePlanName;
  __isset = other1043.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetTriggersForResourePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetTriggersForResourePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMGetTriggersForResourePlanResponse::~WMGetTriggersForResourePlanResponse() throw() {
}


void WMGetTriggersForResourePlanResponse::__set_triggers(const std::vector<WMTrigger> & val) {
  this->triggers = val;
__isset.triggers = true;
}

uint32_t WMGetTriggersForResourePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->triggers.clear();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1076;
            ::apache::thrift::protocol::TType _etype1079;
            xfer += iprot->readListBegin(_etype1079, _size1076);
            this->triggers.resize(_size1076);
            uint32_t _i1080;
            for (_i1080 = 0; _i1080 < _size1076; ++_i1080)
            {
              xfer += this->triggers[_i1080].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
            uint32_t _size1058;
            ::apache::thrift::protocol::TType _etype1061;
            xfer += iprot->readListBegin(_etype1061, _size1058);
            this->triggers.resize(_size1058);
            uint32_t _i1062;
            for (_i1062 = 0; _i1062 < _size1058; ++_i1062)
            {
              xfer += this->triggers[_i1062].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
            uint32_t _size1038;
            ::apache::thrift::protocol::TType _etype1041;
            xfer += iprot->readListBegin(_etype1041, _size1038);
            this->triggers.resize(_size1038);
            uint32_t _i1042;
            for (_i1042 = 0; _i1042 < _size1038; ++_i1042)
            {
              xfer += this->triggers[_i1042].read(iprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            uint32_t _size1057;
            ::apache::thrift::protocol::TType _etype1060;
            xfer += iprot->readListBegin(_etype1060, _size1057);
            this->triggers.resize(_size1057);
            uint32_t _i1061;
            for (_i1061 = 0; _i1061 < _size1057; ++_i1061)
            {
              xfer += this->triggers[_i1061].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1033;
            ::apache::thrift::protocol::TType _etype1036;
            xfer += iprot->readListBegin(_etype1036, _size1033);
            this->triggers.resize(_size1033);
            uint32_t _i1037;
            for (_i1037 = 0; _i1037 < _size1033; ++_i1037)
            {
              xfer += this->triggers[_i1037].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size991;
            ::apache::thrift::protocol::TType _etype994;
            xfer += iprot->readListBegin(_etype994, _size991);
            this->triggers.resize(_size991);
            uint32_t _i995;
            for (_i995 = 0; _i995 < _size991; ++_i995)
<<<<<<< HEAD
            {
              xfer += this->triggers[_i995].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size995;
            ::apache::thrift::protocol::TType _etype998;
            xfer += iprot->readListBegin(_etype998, _size995);
            this->triggers.resize(_size995);
            uint32_t _i999;
            for (_i999 = 0; _i999 < _size995; ++_i999)
            {
              xfer += this->triggers[_i999].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->triggers[_i995].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size995;
            ::apache::thrift::protocol::TType _etype998;
            xfer += iprot->readListBegin(_etype998, _size995);
            this->triggers.resize(_size995);
            uint32_t _i999;
            for (_i999 = 0; _i999 < _size995; ++_i999)
            {
              xfer += this->triggers[_i999].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
            uint32_t _size1037;
            ::apache::thrift::protocol::TType _etype1040;
            xfer += iprot->readListBegin(_etype1040, _size1037);
            this->triggers.resize(_size1037);
            uint32_t _i1041;
            for (_i1041 = 0; _i1041 < _size1037; ++_i1041)
            {
              xfer += this->triggers[_i1041].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
            uint32_t _size1044;
            ::apache::thrift::protocol::TType _etype1047;
            xfer += iprot->readListBegin(_etype1047, _size1044);
            this->triggers.resize(_size1044);
            uint32_t _i1048;
            for (_i1048 = 0; _i1048 < _size1044; ++_i1048)
            {
              xfer += this->triggers[_i1048].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.triggers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetTriggersForResourePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetTriggersForResourePlanResponse");

  if (this->__isset.triggers) {
    xfer += oprot->writeFieldBegin("triggers", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->triggers.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter1081;
      for (_iter1081 = this->triggers.begin(); _iter1081 != this->triggers.end(); ++_iter1081)
      {
        xfer += (*_iter1081).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter1063;
      for (_iter1063 = this->triggers.begin(); _iter1063 != this->triggers.end(); ++_iter1063)
      {
        xfer += (*_iter1063).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter1043;
      for (_iter1043 = this->triggers.begin(); _iter1043 != this->triggers.end(); ++_iter1043)
      {
        xfer += (*_iter1043).write(oprot);
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      std::vector<WMTrigger> ::const_iterator _iter1062;
      for (_iter1062 = this->triggers.begin(); _iter1062 != this->triggers.end(); ++_iter1062)
      {
        xfer += (*_iter1062).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter1038;
      for (_iter1038 = this->triggers.begin(); _iter1038 != this->triggers.end(); ++_iter1038)
      {
        xfer += (*_iter1038).write(oprot);
=======
      std::vector<WMTrigger> ::const_iterator _iter996;
      for (_iter996 = this->triggers.begin(); _iter996 != this->triggers.end(); ++_iter996)
      {
        xfer += (*_iter996).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter1000;
      for (_iter1000 = this->triggers.begin(); _iter1000 != this->triggers.end(); ++_iter1000)
      {
        xfer += (*_iter1000).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMTrigger> ::const_iterator _iter996;
      for (_iter996 = this->triggers.begin(); _iter996 != this->triggers.end(); ++_iter996)
      {
        xfer += (*_iter996).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter1000;
      for (_iter1000 = this->triggers.begin(); _iter1000 != this->triggers.end(); ++_iter1000)
      {
        xfer += (*_iter1000).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
      std::vector<WMTrigger> ::const_iterator _iter1042;
      for (_iter1042 = this->triggers.begin(); _iter1042 != this->triggers.end(); ++_iter1042)
      {
        xfer += (*_iter1042).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
      std::vector<WMTrigger> ::const_iterator _iter1049;
      for (_iter1049 = this->triggers.begin(); _iter1049 != this->triggers.end(); ++_iter1049)
      {
        xfer += (*_iter1049).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetTriggersForResourePlanResponse &a, WMGetTriggersForResourePlanResponse &b) {
  using ::std::swap;
  swap(a.triggers, b.triggers);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1082) {
  triggers = other1082.triggers;
  __isset = other1082.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1083) {
  triggers = other1083.triggers;
  __isset = other1083.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1064) {
  triggers = other1064.triggers;
  __isset = other1064.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1065) {
  triggers = other1065.triggers;
  __isset = other1065.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1044) {
  triggers = other1044.triggers;
  __isset = other1044.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1045) {
  triggers = other1045.triggers;
  __isset = other1045.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1063) {
  triggers = other1063.triggers;
  __isset = other1063.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1064) {
  triggers = other1064.triggers;
  __isset = other1064.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1039) {
  triggers = other1039.triggers;
  __isset = other1039.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1040) {
  triggers = other1040.triggers;
  __isset = other1040.__isset;
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other997) {
  triggers = other997.triggers;
  __isset = other997.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other998) {
  triggers = other998.triggers;
  __isset = other998.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1001) {
  triggers = other1001.triggers;
  __isset = other1001.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1002) {
  triggers = other1002.triggers;
  __isset = other1002.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other997) {
  triggers = other997.triggers;
  __isset = other997.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other998) {
  triggers = other998.triggers;
  __isset = other998.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1001) {
  triggers = other1001.triggers;
  __isset = other1001.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1002) {
  triggers = other1002.triggers;
  __isset = other1002.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1043) {
  triggers = other1043.triggers;
  __isset = other1043.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1044) {
  triggers = other1044.triggers;
  __isset = other1044.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1050) {
  triggers = other1050.triggers;
  __isset = other1050.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1051) {
  triggers = other1051.triggers;
  __isset = other1051.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMGetTriggersForResourePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetTriggersForResourePlanResponse(";
  out << "triggers="; (__isset.triggers ? (out << to_string(triggers)) : (out << "<null>"));
  out << ")";
}


WMCreatePoolRequest::~WMCreatePoolRequest() throw() {
}


void WMCreatePoolRequest::__set_pool(const WMPool& val) {
  this->pool = val;
__isset.pool = true;
}

uint32_t WMCreatePoolRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pool.read(iprot);
          this->__isset.pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreatePoolRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreatePoolRequest");

  if (this->__isset.pool) {
    xfer += oprot->writeFieldBegin("pool", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pool.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreatePoolRequest &a, WMCreatePoolRequest &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1084) {
  pool = other1084.pool;
  __isset = other1084.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1085) {
  pool = other1085.pool;
  __isset = other1085.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1066) {
  pool = other1066.pool;
  __isset = other1066.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1067) {
  pool = other1067.pool;
  __isset = other1067.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1046) {
  pool = other1046.pool;
  __isset = other1046.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1047) {
  pool = other1047.pool;
  __isset = other1047.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1065) {
  pool = other1065.pool;
  __isset = other1065.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1066) {
  pool = other1066.pool;
  __isset = other1066.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1041) {
  pool = other1041.pool;
  __isset = other1041.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1042) {
  pool = other1042.pool;
  __isset = other1042.__isset;
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other999) {
  pool = other999.pool;
  __isset = other999.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1000) {
  pool = other1000.pool;
  __isset = other1000.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1003) {
  pool = other1003.pool;
  __isset = other1003.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1004) {
  pool = other1004.pool;
  __isset = other1004.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other999) {
  pool = other999.pool;
  __isset = other999.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1000) {
  pool = other1000.pool;
  __isset = other1000.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1003) {
  pool = other1003.pool;
  __isset = other1003.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1004) {
  pool = other1004.pool;
  __isset = other1004.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1045) {
  pool = other1045.pool;
  __isset = other1045.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1046) {
  pool = other1046.pool;
  __isset = other1046.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1052) {
  pool = other1052.pool;
  __isset = other1052.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1053) {
  pool = other1053.pool;
  __isset = other1053.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreatePoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreatePoolRequest(";
  out << "pool="; (__isset.pool ? (out << to_string(pool)) : (out << "<null>"));
  out << ")";
}


WMCreatePoolResponse::~WMCreatePoolResponse() throw() {
}


uint32_t WMCreatePoolResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreatePoolResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreatePoolResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreatePoolResponse &a, WMCreatePoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1086) {
  (void) other1086;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1087) {
  (void) other1087;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1068) {
  (void) other1068;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1069) {
  (void) other1069;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1048) {
  (void) other1048;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1049) {
  (void) other1049;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1067) {
  (void) other1067;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1068) {
  (void) other1068;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1043) {
  (void) other1043;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1044) {
  (void) other1044;
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1001) {
  (void) other1001;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1002) {
  (void) other1002;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1005) {
  (void) other1005;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1001) {
  (void) other1001;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1002) {
  (void) other1002;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1005) {
  (void) other1005;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1047) {
  (void) other1047;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1048) {
  (void) other1048;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1054) {
  (void) other1054;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1055) {
  (void) other1055;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreatePoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreatePoolResponse(";
  out << ")";
}


WMAlterPoolRequest::~WMAlterPoolRequest() throw() {
}


void WMAlterPoolRequest::__set_pool(const WMNullablePool& val) {
  this->pool = val;
__isset.pool = true;
}

void WMAlterPoolRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

uint32_t WMAlterPoolRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pool.read(iprot);
          this->__isset.pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterPoolRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterPoolRequest");

  if (this->__isset.pool) {
    xfer += oprot->writeFieldBegin("pool", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pool.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterPoolRequest &a, WMAlterPoolRequest &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.poolPath, b.poolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1088) {
  pool = other1088.pool;
  poolPath = other1088.poolPath;
  __isset = other1088.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1089) {
  pool = other1089.pool;
  poolPath = other1089.poolPath;
  __isset = other1089.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1070) {
  pool = other1070.pool;
  poolPath = other1070.poolPath;
  __isset = other1070.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1071) {
  pool = other1071.pool;
  poolPath = other1071.poolPath;
  __isset = other1071.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1050) {
  pool = other1050.pool;
  poolPath = other1050.poolPath;
  __isset = other1050.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1051) {
  pool = other1051.pool;
  poolPath = other1051.poolPath;
  __isset = other1051.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1069) {
  pool = other1069.pool;
  poolPath = other1069.poolPath;
  __isset = other1069.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1070) {
  pool = other1070.pool;
  poolPath = other1070.poolPath;
  __isset = other1070.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1045) {
  pool = other1045.pool;
  poolPath = other1045.poolPath;
  __isset = other1045.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1046) {
  pool = other1046.pool;
  poolPath = other1046.poolPath;
  __isset = other1046.__isset;
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1003) {
  pool = other1003.pool;
  poolPath = other1003.poolPath;
  __isset = other1003.__isset;
}
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1003) {
  pool = other1003.pool;
  poolPath = other1003.poolPath;
  __isset = other1003.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1004) {
  pool = other1004.pool;
  poolPath = other1004.poolPath;
  __isset = other1004.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1007) {
  pool = other1007.pool;
  poolPath = other1007.poolPath;
  __isset = other1007.__isset;
}
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1007) {
  pool = other1007.pool;
  poolPath = other1007.poolPath;
  __isset = other1007.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1008) {
  pool = other1008.pool;
  poolPath = other1008.poolPath;
  __isset = other1008.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1049) {
  pool = other1049.pool;
  poolPath = other1049.poolPath;
  __isset = other1049.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1050) {
  pool = other1050.pool;
  poolPath = other1050.poolPath;
  __isset = other1050.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1056) {
  pool = other1056.pool;
  poolPath = other1056.poolPath;
  __isset = other1056.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1057) {
  pool = other1057.pool;
  poolPath = other1057.poolPath;
  __isset = other1057.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMAlterPoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterPoolRequest(";
  out << "pool="; (__isset.pool ? (out << to_string(pool)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ")";
}


WMAlterPoolResponse::~WMAlterPoolResponse() throw() {
}


uint32_t WMAlterPoolResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterPoolResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterPoolResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterPoolResponse &a, WMAlterPoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1090) {
  (void) other1090;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1091) {
  (void) other1091;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1072) {
  (void) other1072;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1073) {
  (void) other1073;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1052) {
  (void) other1052;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1053) {
  (void) other1053;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1071) {
  (void) other1071;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1072) {
  (void) other1072;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1047) {
  (void) other1047;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1048) {
  (void) other1048;
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1005) {
  (void) other1005;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1009) {
  (void) other1009;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1010) {
  (void) other1010;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1005) {
  (void) other1005;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1009) {
  (void) other1009;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1010) {
  (void) other1010;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1051) {
  (void) other1051;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1052) {
  (void) other1052;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1058) {
  (void) other1058;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1059) {
  (void) other1059;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMAlterPoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterPoolResponse(";
  out << ")";
}


WMDropPoolRequest::~WMDropPoolRequest() throw() {
}


void WMDropPoolRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMDropPoolRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

uint32_t WMDropPoolRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropPoolRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropPoolRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropPoolRequest &a, WMDropPoolRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1092) {
  resourcePlanName = other1092.resourcePlanName;
  poolPath = other1092.poolPath;
  __isset = other1092.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1093) {
  resourcePlanName = other1093.resourcePlanName;
  poolPath = other1093.poolPath;
  __isset = other1093.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1074) {
  resourcePlanName = other1074.resourcePlanName;
  poolPath = other1074.poolPath;
  __isset = other1074.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1075) {
  resourcePlanName = other1075.resourcePlanName;
  poolPath = other1075.poolPath;
  __isset = other1075.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1054) {
  resourcePlanName = other1054.resourcePlanName;
  poolPath = other1054.poolPath;
  __isset = other1054.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1055) {
  resourcePlanName = other1055.resourcePlanName;
  poolPath = other1055.poolPath;
  __isset = other1055.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1073) {
  resourcePlanName = other1073.resourcePlanName;
  poolPath = other1073.poolPath;
  __isset = other1073.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1074) {
  resourcePlanName = other1074.resourcePlanName;
  poolPath = other1074.poolPath;
  __isset = other1074.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1049) {
  resourcePlanName = other1049.resourcePlanName;
  poolPath = other1049.poolPath;
  __isset = other1049.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1050) {
  resourcePlanName = other1050.resourcePlanName;
  poolPath = other1050.poolPath;
  __isset = other1050.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1007) {
  resourcePlanName = other1007.resourcePlanName;
  poolPath = other1007.poolPath;
  __isset = other1007.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1008) {
  resourcePlanName = other1008.resourcePlanName;
  poolPath = other1008.poolPath;
  __isset = other1008.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1011) {
  resourcePlanName = other1011.resourcePlanName;
  poolPath = other1011.poolPath;
  __isset = other1011.__isset;
}
=======
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1011) {
  resourcePlanName = other1011.resourcePlanName;
  poolPath = other1011.poolPath;
  __isset = other1011.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1012) {
  resourcePlanName = other1012.resourcePlanName;
  poolPath = other1012.poolPath;
  __isset = other1012.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1053) {
  resourcePlanName = other1053.resourcePlanName;
  poolPath = other1053.poolPath;
  __isset = other1053.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1054) {
  resourcePlanName = other1054.resourcePlanName;
  poolPath = other1054.poolPath;
  __isset = other1054.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1060) {
  resourcePlanName = other1060.resourcePlanName;
  poolPath = other1060.poolPath;
  __isset = other1060.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1061) {
  resourcePlanName = other1061.resourcePlanName;
  poolPath = other1061.poolPath;
  __isset = other1061.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropPoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropPoolRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ")";
}


WMDropPoolResponse::~WMDropPoolResponse() throw() {
}


uint32_t WMDropPoolResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropPoolResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropPoolResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropPoolResponse &a, WMDropPoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1094) {
  (void) other1094;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1095) {
  (void) other1095;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1076) {
  (void) other1076;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1077) {
  (void) other1077;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1056) {
  (void) other1056;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1057) {
  (void) other1057;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1075) {
  (void) other1075;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1076) {
  (void) other1076;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1051) {
  (void) other1051;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1052) {
  (void) other1052;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1009) {
  (void) other1009;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1010) {
  (void) other1010;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1013) {
  (void) other1013;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1013) {
  (void) other1013;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1055) {
  (void) other1055;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1056) {
  (void) other1056;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1062) {
  (void) other1062;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1063) {
  (void) other1063;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropPoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropPoolResponse(";
  out << ")";
}


WMCreateOrUpdateMappingRequest::~WMCreateOrUpdateMappingRequest() throw() {
}


void WMCreateOrUpdateMappingRequest::__set_mapping(const WMMapping& val) {
  this->mapping = val;
__isset.mapping = true;
}

void WMCreateOrUpdateMappingRequest::__set_update(const bool val) {
  this->update = val;
__isset.update = true;
}

uint32_t WMCreateOrUpdateMappingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mapping.read(iprot);
          this->__isset.mapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->update);
          this->__isset.update = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrUpdateMappingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrUpdateMappingRequest");

  if (this->__isset.mapping) {
    xfer += oprot->writeFieldBegin("mapping", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->mapping.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.update) {
    xfer += oprot->writeFieldBegin("update", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->update);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrUpdateMappingRequest &a, WMCreateOrUpdateMappingRequest &b) {
  using ::std::swap;
  swap(a.mapping, b.mapping);
  swap(a.update, b.update);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1096) {
  mapping = other1096.mapping;
  update = other1096.update;
  __isset = other1096.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1097) {
  mapping = other1097.mapping;
  update = other1097.update;
  __isset = other1097.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1078) {
  mapping = other1078.mapping;
  update = other1078.update;
  __isset = other1078.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1079) {
  mapping = other1079.mapping;
  update = other1079.update;
  __isset = other1079.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1058) {
  mapping = other1058.mapping;
  update = other1058.update;
  __isset = other1058.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1059) {
  mapping = other1059.mapping;
  update = other1059.update;
  __isset = other1059.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1077) {
  mapping = other1077.mapping;
  update = other1077.update;
  __isset = other1077.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1078) {
  mapping = other1078.mapping;
  update = other1078.update;
  __isset = other1078.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1053) {
  mapping = other1053.mapping;
  update = other1053.update;
  __isset = other1053.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1054) {
  mapping = other1054.mapping;
  update = other1054.update;
  __isset = other1054.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1011) {
  mapping = other1011.mapping;
  update = other1011.update;
  __isset = other1011.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1012) {
  mapping = other1012.mapping;
  update = other1012.update;
  __isset = other1012.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1015) {
  mapping = other1015.mapping;
  update = other1015.update;
  __isset = other1015.__isset;
}
=======
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1015) {
  mapping = other1015.mapping;
  update = other1015.update;
  __isset = other1015.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1016) {
  mapping = other1016.mapping;
  update = other1016.update;
  __isset = other1016.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1057) {
  mapping = other1057.mapping;
  update = other1057.update;
  __isset = other1057.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1058) {
  mapping = other1058.mapping;
  update = other1058.update;
  __isset = other1058.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1064) {
  mapping = other1064.mapping;
  update = other1064.update;
  __isset = other1064.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1065) {
  mapping = other1065.mapping;
  update = other1065.update;
  __isset = other1065.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateOrUpdateMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrUpdateMappingRequest(";
  out << "mapping="; (__isset.mapping ? (out << to_string(mapping)) : (out << "<null>"));
  out << ", " << "update="; (__isset.update ? (out << to_string(update)) : (out << "<null>"));
  out << ")";
}


WMCreateOrUpdateMappingResponse::~WMCreateOrUpdateMappingResponse() throw() {
}


uint32_t WMCreateOrUpdateMappingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrUpdateMappingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrUpdateMappingResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrUpdateMappingResponse &a, WMCreateOrUpdateMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1098) {
  (void) other1098;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1099) {
  (void) other1099;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1080) {
  (void) other1080;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1081) {
  (void) other1081;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1060) {
  (void) other1060;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1061) {
  (void) other1061;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1079) {
  (void) other1079;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1080) {
  (void) other1080;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1055) {
  (void) other1055;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1056) {
  (void) other1056;
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1013) {
  (void) other1013;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1017) {
  (void) other1017;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1013) {
  (void) other1013;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1017) {
  (void) other1017;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1059) {
  (void) other1059;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1060) {
  (void) other1060;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1066) {
  (void) other1066;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1067) {
  (void) other1067;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateOrUpdateMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrUpdateMappingResponse(";
  out << ")";
}


WMDropMappingRequest::~WMDropMappingRequest() throw() {
}


void WMDropMappingRequest::__set_mapping(const WMMapping& val) {
  this->mapping = val;
__isset.mapping = true;
}

uint32_t WMDropMappingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mapping.read(iprot);
          this->__isset.mapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropMappingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropMappingRequest");

  if (this->__isset.mapping) {
    xfer += oprot->writeFieldBegin("mapping", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->mapping.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropMappingRequest &a, WMDropMappingRequest &b) {
  using ::std::swap;
  swap(a.mapping, b.mapping);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1100) {
  mapping = other1100.mapping;
  __isset = other1100.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1101) {
  mapping = other1101.mapping;
  __isset = other1101.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1082) {
  mapping = other1082.mapping;
  __isset = other1082.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1083) {
  mapping = other1083.mapping;
  __isset = other1083.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1062) {
  mapping = other1062.mapping;
  __isset = other1062.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1063) {
  mapping = other1063.mapping;
  __isset = other1063.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1081) {
  mapping = other1081.mapping;
  __isset = other1081.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1082) {
  mapping = other1082.mapping;
  __isset = other1082.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1057) {
  mapping = other1057.mapping;
  __isset = other1057.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1058) {
  mapping = other1058.mapping;
  __isset = other1058.__isset;
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1015) {
  mapping = other1015.mapping;
  __isset = other1015.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1016) {
  mapping = other1016.mapping;
  __isset = other1016.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1019) {
  mapping = other1019.mapping;
  __isset = other1019.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1020) {
  mapping = other1020.mapping;
  __isset = other1020.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1015) {
  mapping = other1015.mapping;
  __isset = other1015.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1016) {
  mapping = other1016.mapping;
  __isset = other1016.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1019) {
  mapping = other1019.mapping;
  __isset = other1019.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1020) {
  mapping = other1020.mapping;
  __isset = other1020.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1061) {
  mapping = other1061.mapping;
  __isset = other1061.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1062) {
  mapping = other1062.mapping;
  __isset = other1062.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1068) {
  mapping = other1068.mapping;
  __isset = other1068.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1069) {
  mapping = other1069.mapping;
  __isset = other1069.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropMappingRequest(";
  out << "mapping="; (__isset.mapping ? (out << to_string(mapping)) : (out << "<null>"));
  out << ")";
}


WMDropMappingResponse::~WMDropMappingResponse() throw() {
}


uint32_t WMDropMappingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropMappingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropMappingResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropMappingResponse &a, WMDropMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1102) {
  (void) other1102;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1103) {
  (void) other1103;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1084) {
  (void) other1084;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1085) {
  (void) other1085;
=======
<<<<<<< HEAD
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1064) {
  (void) other1064;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1064) {
  (void) other1064;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1065) {
  (void) other1065;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1083) {
  (void) other1083;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1084) {
  (void) other1084;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1059) {
  (void) other1059;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1060) {
  (void) other1060;
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1017) {
  (void) other1017;
}
<<<<<<< HEAD
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1084) {
  (void) other1084;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1021) {
  (void) other1021;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1022) {
  (void) other1022;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1017) {
  (void) other1017;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1021) {
  (void) other1021;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1022) {
  (void) other1022;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1063) {
  (void) other1063;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1064) {
  (void) other1064;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1070) {
  (void) other1070;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1071) {
  (void) other1071;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMDropMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropMappingResponse(";
  out << ")";
}


WMCreateOrDropTriggerToPoolMappingRequest::~WMCreateOrDropTriggerToPoolMappingRequest() throw() {
}


void WMCreateOrDropTriggerToPoolMappingRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_triggerName(const std::string& val) {
  this->triggerName = val;
__isset.triggerName = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_drop(const bool val) {
  this->drop = val;
__isset.drop = true;
}

uint32_t WMCreateOrDropTriggerToPoolMappingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerName);
          this->__isset.triggerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->drop);
          this->__isset.drop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrDropTriggerToPoolMappingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrDropTriggerToPoolMappingRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggerName) {
    xfer += oprot->writeFieldBegin("triggerName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->triggerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.drop) {
    xfer += oprot->writeFieldBegin("drop", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->drop);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrDropTriggerToPoolMappingRequest &a, WMCreateOrDropTriggerToPoolMappingRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.poolPath, b.poolPath);
  swap(a.drop, b.drop);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1104) {
  resourcePlanName = other1104.resourcePlanName;
  triggerName = other1104.triggerName;
  poolPath = other1104.poolPath;
  drop = other1104.drop;
  __isset = other1104.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1105) {
  resourcePlanName = other1105.resourcePlanName;
  triggerName = other1105.triggerName;
  poolPath = other1105.poolPath;
  drop = other1105.drop;
  __isset = other1105.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1086) {
  resourcePlanName = other1086.resourcePlanName;
  triggerName = other1086.triggerName;
  poolPath = other1086.poolPath;
  drop = other1086.drop;
  __isset = other1086.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1087) {
  resourcePlanName = other1087.resourcePlanName;
  triggerName = other1087.triggerName;
  poolPath = other1087.poolPath;
  drop = other1087.drop;
  __isset = other1087.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1066) {
  resourcePlanName = other1066.resourcePlanName;
  triggerName = other1066.triggerName;
  poolPath = other1066.poolPath;
  drop = other1066.drop;
  __isset = other1066.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1067) {
  resourcePlanName = other1067.resourcePlanName;
  triggerName = other1067.triggerName;
  poolPath = other1067.poolPath;
  drop = other1067.drop;
  __isset = other1067.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1085) {
  resourcePlanName = other1085.resourcePlanName;
  triggerName = other1085.triggerName;
  poolPath = other1085.poolPath;
  drop = other1085.drop;
  __isset = other1085.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1086) {
  resourcePlanName = other1086.resourcePlanName;
  triggerName = other1086.triggerName;
  poolPath = other1086.poolPath;
  drop = other1086.drop;
  __isset = other1086.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1061) {
  resourcePlanName = other1061.resourcePlanName;
  triggerName = other1061.triggerName;
  poolPath = other1061.poolPath;
  drop = other1061.drop;
  __isset = other1061.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1062) {
  resourcePlanName = other1062.resourcePlanName;
  triggerName = other1062.triggerName;
  poolPath = other1062.poolPath;
  drop = other1062.drop;
  __isset = other1062.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1019) {
  resourcePlanName = other1019.resourcePlanName;
  triggerName = other1019.triggerName;
  poolPath = other1019.poolPath;
  drop = other1019.drop;
  __isset = other1019.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1020) {
  resourcePlanName = other1020.resourcePlanName;
  triggerName = other1020.triggerName;
  poolPath = other1020.poolPath;
  drop = other1020.drop;
  __isset = other1020.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1023) {
  resourcePlanName = other1023.resourcePlanName;
  triggerName = other1023.triggerName;
  poolPath = other1023.poolPath;
  drop = other1023.drop;
  __isset = other1023.__isset;
}
=======
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1023) {
  resourcePlanName = other1023.resourcePlanName;
  triggerName = other1023.triggerName;
  poolPath = other1023.poolPath;
  drop = other1023.drop;
  __isset = other1023.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1024) {
  resourcePlanName = other1024.resourcePlanName;
  triggerName = other1024.triggerName;
  poolPath = other1024.poolPath;
  drop = other1024.drop;
  __isset = other1024.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1065) {
  resourcePlanName = other1065.resourcePlanName;
  triggerName = other1065.triggerName;
  poolPath = other1065.poolPath;
  drop = other1065.drop;
  __isset = other1065.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1066) {
  resourcePlanName = other1066.resourcePlanName;
  triggerName = other1066.triggerName;
  poolPath = other1066.poolPath;
  drop = other1066.drop;
  __isset = other1066.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1072) {
  resourcePlanName = other1072.resourcePlanName;
  triggerName = other1072.triggerName;
  poolPath = other1072.poolPath;
  drop = other1072.drop;
  __isset = other1072.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1073) {
  resourcePlanName = other1073.resourcePlanName;
  triggerName = other1073.triggerName;
  poolPath = other1073.poolPath;
  drop = other1073.drop;
  __isset = other1073.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateOrDropTriggerToPoolMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrDropTriggerToPoolMappingRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "triggerName="; (__isset.triggerName ? (out << to_string(triggerName)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ", " << "drop="; (__isset.drop ? (out << to_string(drop)) : (out << "<null>"));
  out << ")";
}


WMCreateOrDropTriggerToPoolMappingResponse::~WMCreateOrDropTriggerToPoolMappingResponse() throw() {
}


uint32_t WMCreateOrDropTriggerToPoolMappingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrDropTriggerToPoolMappingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrDropTriggerToPoolMappingResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrDropTriggerToPoolMappingResponse &a, WMCreateOrDropTriggerToPoolMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1106) {
  (void) other1106;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1107) {
  (void) other1107;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1088) {
  (void) other1088;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1089) {
  (void) other1089;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1068) {
  (void) other1068;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1069) {
  (void) other1069;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1087) {
  (void) other1087;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1088) {
  (void) other1088;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1063) {
  (void) other1063;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1064) {
  (void) other1064;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1021) {
  (void) other1021;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1022) {
  (void) other1022;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1025) {
  (void) other1025;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1026) {
  (void) other1026;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1025) {
  (void) other1025;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1026) {
  (void) other1026;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1067) {
  (void) other1067;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1068) {
  (void) other1068;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1074) {
  (void) other1074;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1075) {
  (void) other1075;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void WMCreateOrDropTriggerToPoolMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrDropTriggerToPoolMappingResponse(";
  out << ")";
}


ISchema::~ISchema() throw() {
}


void ISchema::__set_schemaType(const SchemaType::type val) {
  this->schemaType = val;
}

void ISchema::__set_name(const std::string& val) {
  this->name = val;
}

void ISchema::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ISchema::__set_compatibility(const SchemaCompatibility::type val) {
  this->compatibility = val;
}

void ISchema::__set_validationLevel(const SchemaValidation::type val) {
  this->validationLevel = val;
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1065) : TException() {
  message = other1065.message;
  __isset = other1065.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1066) {
  message = other1066.message;
  __isset = other1066.__isset;
=======
MetaException::MetaException(const MetaException& other1023) : TException() {
  message = other1023.message;
  __isset = other1023.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1024) {
  message = other1024.message;
  __isset = other1024.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetaException::MetaException(const MetaException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
MetaException::MetaException(const MetaException& other1023) : TException() {
  message = other1023.message;
  __isset = other1023.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1024) {
  message = other1024.message;
  __isset = other1024.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetaException::MetaException(const MetaException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1088) {
  (void) other1088;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1026) {
  (void) other1026;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
MetaException& MetaException::operator=(const MetaException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
MetaException::MetaException(const MetaException& other1069) : TException() {
  message = other1069.message;
  __isset = other1069.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1070) {
  message = other1070.message;
  __isset = other1070.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void MetaException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetaException(";
  out << "message=" << to_string(message);
  out << ")";
<<<<<<< HEAD
}


ISchema::~ISchema() throw() {
}


void ISchema::__set_schemaType(const SchemaType::type val) {
  this->schemaType = val;
}

void ISchema::__set_name(const std::string& val) {
  this->name = val;
}

void ISchema::__set_catName(const std::string& val) {
  this->catName = val;
}

void ISchema::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ISchema::__set_compatibility(const SchemaCompatibility::type val) {
  this->compatibility = val;
}

void ISchema::__set_validationLevel(const SchemaValidation::type val) {
  this->validationLevel = val;
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
}

void ISchema::__set_canEvolve(const bool val) {
  this->canEvolve = val;
}

void ISchema::__set_schemaGroup(const std::string& val) {
  this->schemaGroup = val;
__isset.schemaGroup = true;
}

void ISchema::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

uint32_t ISchema::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
          int32_t ecast1108;
          xfer += iprot->readI32(ecast1108);
          this->schemaType = (SchemaType::type)ecast1108;
=======
<<<<<<< HEAD
          int32_t ecast1090;
          xfer += iprot->readI32(ecast1090);
          this->schemaType = (SchemaType::type)ecast1090;
=======
          int32_t ecast1076;
          xfer += iprot->readI32(ecast1076);
          this->schemaType = (SchemaType::type)ecast1076;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.schemaType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
<<<<<<< HEAD
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1109;
          xfer += iprot->readI32(ecast1109);
          this->compatibility = (SchemaCompatibility::type)ecast1109;
          this->__isset.compatibility = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1110;
          xfer += iprot->readI32(ecast1110);
          this->validationLevel = (SchemaValidation::type)ecast1110;
          this->__isset.validationLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->canEvolve);
          this->__isset.canEvolve = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schemaGroup);
          this->__isset.schemaGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ISchema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ISchema");

  xfer += oprot->writeFieldBegin("schemaType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->schemaType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compatibility", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->compatibility);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validationLevel", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->validationLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canEvolve", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->canEvolve);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.schemaGroup) {
    xfer += oprot->writeFieldBegin("schemaGroup", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->schemaGroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ISchema &a, ISchema &b) {
  using ::std::swap;
  swap(a.schemaType, b.schemaType);
  swap(a.name, b.name);
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.compatibility, b.compatibility);
  swap(a.validationLevel, b.validationLevel);
  swap(a.canEvolve, b.canEvolve);
  swap(a.schemaGroup, b.schemaGroup);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
ISchema::ISchema(const ISchema& other1111) {
  schemaType = other1111.schemaType;
  name = other1111.name;
  catName = other1111.catName;
  dbName = other1111.dbName;
  compatibility = other1111.compatibility;
  validationLevel = other1111.validationLevel;
  canEvolve = other1111.canEvolve;
  schemaGroup = other1111.schemaGroup;
  description = other1111.description;
  __isset = other1111.__isset;
}
ISchema& ISchema::operator=(const ISchema& other1112) {
  schemaType = other1112.schemaType;
  name = other1112.name;
  catName = other1112.catName;
  dbName = other1112.dbName;
  compatibility = other1112.compatibility;
  validationLevel = other1112.validationLevel;
  canEvolve = other1112.canEvolve;
  schemaGroup = other1112.schemaGroup;
  description = other1112.description;
  __isset = other1112.__isset;
=======
<<<<<<< HEAD
ISchema::ISchema(const ISchema& other1093) {
  schemaType = other1093.schemaType;
  name = other1093.name;
  dbName = other1093.dbName;
  compatibility = other1093.compatibility;
  validationLevel = other1093.validationLevel;
  canEvolve = other1093.canEvolve;
  schemaGroup = other1093.schemaGroup;
  description = other1093.description;
  __isset = other1093.__isset;
}
ISchema& ISchema::operator=(const ISchema& other1094) {
  schemaType = other1094.schemaType;
  name = other1094.name;
  dbName = other1094.dbName;
  compatibility = other1094.compatibility;
  validationLevel = other1094.validationLevel;
  canEvolve = other1094.canEvolve;
  schemaGroup = other1094.schemaGroup;
  description = other1094.description;
  __isset = other1094.__isset;
=======
<<<<<<< HEAD
ISchema::ISchema(const ISchema& other1073) {
  schemaType = other1073.schemaType;
  name = other1073.name;
  dbName = other1073.dbName;
  compatibility = other1073.compatibility;
  validationLevel = other1073.validationLevel;
  canEvolve = other1073.canEvolve;
  schemaGroup = other1073.schemaGroup;
  description = other1073.description;
  __isset = other1073.__isset;
}
ISchema& ISchema::operator=(const ISchema& other1074) {
  schemaType = other1074.schemaType;
  name = other1074.name;
  dbName = other1074.dbName;
  compatibility = other1074.compatibility;
  validationLevel = other1074.validationLevel;
  canEvolve = other1074.canEvolve;
  schemaGroup = other1074.schemaGroup;
  description = other1074.description;
  __isset = other1074.__isset;
=======
MetaException::MetaException(const MetaException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
  return *this;
}
void ISchema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISchema(";
  out << "schemaType=" << to_string(schemaType);
  out << ", " << "name=" << to_string(name);
  out << ", " << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "compatibility=" << to_string(compatibility);
  out << ", " << "validationLevel=" << to_string(validationLevel);
  out << ", " << "canEvolve=" << to_string(canEvolve);
  out << ", " << "schemaGroup="; (__isset.schemaGroup ? (out << to_string(schemaGroup)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ")";
}


ISchemaName::~ISchemaName() throw() {
}


void ISchemaName::__set_catName(const std::string& val) {
  this->catName = val;
}

void ISchemaName::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ISchemaName::__set_schemaName(const std::string& val) {
  this->schemaName = val;
}

uint32_t ISchemaName::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catName);
          this->__isset.catName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
<<<<<<< HEAD
      case 2:
=======
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
          int32_t ecast1091;
          xfer += iprot->readI32(ecast1091);
          this->compatibility = (SchemaCompatibility::type)ecast1091;
=======
          int32_t ecast1077;
          xfer += iprot->readI32(ecast1077);
          this->compatibility = (SchemaCompatibility::type)ecast1077;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.compatibility = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
          int32_t ecast1092;
          xfer += iprot->readI32(ecast1092);
          this->validationLevel = (SchemaValidation::type)ecast1092;
=======
          int32_t ecast1078;
          xfer += iprot->readI32(ecast1078);
          this->validationLevel = (SchemaValidation::type)ecast1078;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.validationLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->canEvolve);
          this->__isset.canEvolve = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schemaGroup);
          this->__isset.schemaGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ISchema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ISchema");

  xfer += oprot->writeFieldBegin("schemaType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->schemaType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compatibility", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->compatibility);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validationLevel", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->validationLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canEvolve", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->canEvolve);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.schemaGroup) {
    xfer += oprot->writeFieldBegin("schemaGroup", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->schemaGroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ISchema &a, ISchema &b) {
  using ::std::swap;
  swap(a.schemaType, b.schemaType);
  swap(a.name, b.name);
  swap(a.dbName, b.dbName);
  swap(a.compatibility, b.compatibility);
  swap(a.validationLevel, b.validationLevel);
  swap(a.canEvolve, b.canEvolve);
  swap(a.schemaGroup, b.schemaGroup);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
ISchema::ISchema(const ISchema& other1093) {
  schemaType = other1093.schemaType;
  name = other1093.name;
  dbName = other1093.dbName;
  compatibility = other1093.compatibility;
  validationLevel = other1093.validationLevel;
  canEvolve = other1093.canEvolve;
  schemaGroup = other1093.schemaGroup;
  description = other1093.description;
  __isset = other1093.__isset;
}
ISchema& ISchema::operator=(const ISchema& other1094) {
  schemaType = other1094.schemaType;
  name = other1094.name;
  dbName = other1094.dbName;
  compatibility = other1094.compatibility;
  validationLevel = other1094.validationLevel;
  canEvolve = other1094.canEvolve;
  schemaGroup = other1094.schemaGroup;
  description = other1094.description;
  __isset = other1094.__isset;
=======
<<<<<<< HEAD
ISchema::ISchema(const ISchema& other1073) {
  schemaType = other1073.schemaType;
  name = other1073.name;
  dbName = other1073.dbName;
  compatibility = other1073.compatibility;
  validationLevel = other1073.validationLevel;
  canEvolve = other1073.canEvolve;
  schemaGroup = other1073.schemaGroup;
  description = other1073.description;
  __isset = other1073.__isset;
}
ISchema& ISchema::operator=(const ISchema& other1074) {
  schemaType = other1074.schemaType;
  name = other1074.name;
  dbName = other1074.dbName;
  compatibility = other1074.compatibility;
  validationLevel = other1074.validationLevel;
  canEvolve = other1074.canEvolve;
  schemaGroup = other1074.schemaGroup;
  description = other1074.description;
  __isset = other1074.__isset;
=======
MetaException::MetaException(const MetaException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
ISchema::ISchema(const ISchema& other1079) {
  schemaType = other1079.schemaType;
  name = other1079.name;
  dbName = other1079.dbName;
  compatibility = other1079.compatibility;
  validationLevel = other1079.validationLevel;
  canEvolve = other1079.canEvolve;
  schemaGroup = other1079.schemaGroup;
  description = other1079.description;
  __isset = other1079.__isset;
}
ISchema& ISchema::operator=(const ISchema& other1080) {
  schemaType = other1080.schemaType;
  name = other1080.name;
  dbName = other1080.dbName;
  compatibility = other1080.compatibility;
  validationLevel = other1080.validationLevel;
  canEvolve = other1080.canEvolve;
  schemaGroup = other1080.schemaGroup;
  description = other1080.description;
  __isset = other1080.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ISchema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISchema(";
  out << "schemaType=" << to_string(schemaType);
  out << ", " << "name=" << to_string(name);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "compatibility=" << to_string(compatibility);
  out << ", " << "validationLevel=" << to_string(validationLevel);
  out << ", " << "canEvolve=" << to_string(canEvolve);
  out << ", " << "schemaGroup="; (__isset.schemaGroup ? (out << to_string(schemaGroup)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ")";
}


ISchemaName::~ISchemaName() throw() {
}


void ISchemaName::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ISchemaName::__set_schemaName(const std::string& val) {
  this->schemaName = val;
}

uint32_t ISchemaName::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schemaName);
          this->__isset.schemaName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ISchemaName::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ISchemaName");

  xfer += oprot->writeFieldBegin("catName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->catName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("schemaName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->schemaName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ISchemaName &a, ISchemaName &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.schemaName, b.schemaName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
ISchemaName::ISchemaName(const ISchemaName& other1113) {
  catName = other1113.catName;
  dbName = other1113.dbName;
  schemaName = other1113.schemaName;
  __isset = other1113.__isset;
}
ISchemaName& ISchemaName::operator=(const ISchemaName& other1114) {
  catName = other1114.catName;
  dbName = other1114.dbName;
  schemaName = other1114.schemaName;
  __isset = other1114.__isset;
=======
<<<<<<< HEAD
ISchemaName::ISchemaName(const ISchemaName& other1095) {
  dbName = other1095.dbName;
  schemaName = other1095.schemaName;
  __isset = other1095.__isset;
}
ISchemaName& ISchemaName::operator=(const ISchemaName& other1096) {
  dbName = other1096.dbName;
  schemaName = other1096.schemaName;
  __isset = other1096.__isset;
=======
ISchemaName::ISchemaName(const ISchemaName& other1081) {
  dbName = other1081.dbName;
  schemaName = other1081.schemaName;
  __isset = other1081.__isset;
}
ISchemaName& ISchemaName::operator=(const ISchemaName& other1082) {
  dbName = other1082.dbName;
  schemaName = other1082.schemaName;
  __isset = other1082.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ISchemaName::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISchemaName(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "schemaName=" << to_string(schemaName);
  out << ")";
}


AlterISchemaRequest::~AlterISchemaRequest() throw() {
}


void AlterISchemaRequest::__set_name(const ISchemaName& val) {
  this->name = val;
}

void AlterISchemaRequest::__set_newSchema(const ISchema& val) {
  this->newSchema = val;
}

uint32_t AlterISchemaRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->name.read(iprot);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newSchema.read(iprot);
          this->__isset.newSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AlterISchemaRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AlterISchemaRequest");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->name.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newSchema", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->newSchema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AlterISchemaRequest &a, AlterISchemaRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.newSchema, b.newSchema);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
AlterISchemaRequest::AlterISchemaRequest(const AlterISchemaRequest& other1115) {
  name = other1115.name;
  newSchema = other1115.newSchema;
  __isset = other1115.__isset;
}
AlterISchemaRequest& AlterISchemaRequest::operator=(const AlterISchemaRequest& other1116) {
  name = other1116.name;
  newSchema = other1116.newSchema;
  __isset = other1116.__isset;
=======
<<<<<<< HEAD
AlterISchemaRequest::AlterISchemaRequest(const AlterISchemaRequest& other1097) {
  name = other1097.name;
  newSchema = other1097.newSchema;
  __isset = other1097.__isset;
}
AlterISchemaRequest& AlterISchemaRequest::operator=(const AlterISchemaRequest& other1098) {
  name = other1098.name;
  newSchema = other1098.newSchema;
  __isset = other1098.__isset;
=======
AlterISchemaRequest::AlterISchemaRequest(const AlterISchemaRequest& other1083) {
  name = other1083.name;
  newSchema = other1083.newSchema;
  __isset = other1083.__isset;
}
AlterISchemaRequest& AlterISchemaRequest::operator=(const AlterISchemaRequest& other1084) {
  name = other1084.name;
  newSchema = other1084.newSchema;
  __isset = other1084.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void AlterISchemaRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlterISchemaRequest(";
  out << "name=" << to_string(name);
  out << ", " << "newSchema=" << to_string(newSchema);
  out << ")";
}


SchemaVersion::~SchemaVersion() throw() {
}


void SchemaVersion::__set_schema(const ISchemaName& val) {
  this->schema = val;
}

void SchemaVersion::__set_version(const int32_t val) {
  this->version = val;
}

void SchemaVersion::__set_createdAt(const int64_t val) {
  this->createdAt = val;
}

void SchemaVersion::__set_cols(const std::vector<FieldSchema> & val) {
  this->cols = val;
}

void SchemaVersion::__set_state(const SchemaVersionState::type val) {
  this->state = val;
__isset.state = true;
}

void SchemaVersion::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void SchemaVersion::__set_schemaText(const std::string& val) {
  this->schemaText = val;
__isset.schemaText = true;
}

void SchemaVersion::__set_fingerprint(const std::string& val) {
  this->fingerprint = val;
__isset.fingerprint = true;
}

void SchemaVersion::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void SchemaVersion::__set_serDe(const SerDeInfo& val) {
  this->serDe = val;
__isset.serDe = true;
}

uint32_t SchemaVersion::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schema.read(iprot);
          this->__isset.schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdAt);
          this->__isset.createdAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cols.clear();
<<<<<<< HEAD
            uint32_t _size1117;
            ::apache::thrift::protocol::TType _etype1120;
            xfer += iprot->readListBegin(_etype1120, _size1117);
            this->cols.resize(_size1117);
            uint32_t _i1121;
            for (_i1121 = 0; _i1121 < _size1117; ++_i1121)
            {
              xfer += this->cols[_i1121].read(iprot);
=======
<<<<<<< HEAD
            uint32_t _size1099;
            ::apache::thrift::protocol::TType _etype1102;
            xfer += iprot->readListBegin(_etype1102, _size1099);
            this->cols.resize(_size1099);
            uint32_t _i1103;
            for (_i1103 = 0; _i1103 < _size1099; ++_i1103)
            {
              xfer += this->cols[_i1103].read(iprot);
=======
            uint32_t _size1085;
            ::apache::thrift::protocol::TType _etype1088;
            xfer += iprot->readListBegin(_etype1088, _size1085);
            this->cols.resize(_size1085);
            uint32_t _i1089;
            for (_i1089 = 0; _i1089 < _size1085; ++_i1089)
            {
              xfer += this->cols[_i1089].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
          int32_t ecast1122;
          xfer += iprot->readI32(ecast1122);
          this->state = (SchemaVersionState::type)ecast1122;
=======
<<<<<<< HEAD
          int32_t ecast1104;
          xfer += iprot->readI32(ecast1104);
          this->state = (SchemaVersionState::type)ecast1104;
=======
          int32_t ecast1090;
          xfer += iprot->readI32(ecast1090);
          this->state = (SchemaVersionState::type)ecast1090;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schemaText);
          this->__isset.schemaText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fingerprint);
          this->__isset.fingerprint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serDe.read(iprot);
          this->__isset.serDe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SchemaVersion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SchemaVersion");

  xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->schema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdAt", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->createdAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cols", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cols.size()));
<<<<<<< HEAD
    std::vector<FieldSchema> ::const_iterator _iter1123;
    for (_iter1123 = this->cols.begin(); _iter1123 != this->cols.end(); ++_iter1123)
    {
      xfer += (*_iter1123).write(oprot);
=======
<<<<<<< HEAD
    std::vector<FieldSchema> ::const_iterator _iter1105;
    for (_iter1105 = this->cols.begin(); _iter1105 != this->cols.end(); ++_iter1105)
    {
      xfer += (*_iter1105).write(oprot);
=======
    std::vector<FieldSchema> ::const_iterator _iter1091;
    for (_iter1091 = this->cols.begin(); _iter1091 != this->cols.end(); ++_iter1091)
    {
      xfer += (*_iter1091).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.state) {
    xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->state);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schemaText) {
    xfer += oprot->writeFieldBegin("schemaText", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->schemaText);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fingerprint) {
    xfer += oprot->writeFieldBegin("fingerprint", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->fingerprint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serDe) {
    xfer += oprot->writeFieldBegin("serDe", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->serDe.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SchemaVersion &a, SchemaVersion &b) {
  using ::std::swap;
  swap(a.schema, b.schema);
  swap(a.version, b.version);
  swap(a.createdAt, b.createdAt);
  swap(a.cols, b.cols);
  swap(a.state, b.state);
  swap(a.description, b.description);
  swap(a.schemaText, b.schemaText);
  swap(a.fingerprint, b.fingerprint);
  swap(a.name, b.name);
  swap(a.serDe, b.serDe);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
SchemaVersion::SchemaVersion(const SchemaVersion& other1124) {
  schema = other1124.schema;
  version = other1124.version;
  createdAt = other1124.createdAt;
  cols = other1124.cols;
  state = other1124.state;
  description = other1124.description;
  schemaText = other1124.schemaText;
  fingerprint = other1124.fingerprint;
  name = other1124.name;
  serDe = other1124.serDe;
  __isset = other1124.__isset;
}
SchemaVersion& SchemaVersion::operator=(const SchemaVersion& other1125) {
  schema = other1125.schema;
  version = other1125.version;
  createdAt = other1125.createdAt;
  cols = other1125.cols;
  state = other1125.state;
  description = other1125.description;
  schemaText = other1125.schemaText;
  fingerprint = other1125.fingerprint;
  name = other1125.name;
  serDe = other1125.serDe;
  __isset = other1125.__isset;
=======
<<<<<<< HEAD
SchemaVersion::SchemaVersion(const SchemaVersion& other1106) {
  schema = other1106.schema;
  version = other1106.version;
  createdAt = other1106.createdAt;
  cols = other1106.cols;
  state = other1106.state;
  description = other1106.description;
  schemaText = other1106.schemaText;
  fingerprint = other1106.fingerprint;
  name = other1106.name;
  serDe = other1106.serDe;
  __isset = other1106.__isset;
}
SchemaVersion& SchemaVersion::operator=(const SchemaVersion& other1107) {
  schema = other1107.schema;
  version = other1107.version;
  createdAt = other1107.createdAt;
  cols = other1107.cols;
  state = other1107.state;
  description = other1107.description;
  schemaText = other1107.schemaText;
  fingerprint = other1107.fingerprint;
  name = other1107.name;
  serDe = other1107.serDe;
  __isset = other1107.__isset;
=======
SchemaVersion::SchemaVersion(const SchemaVersion& other1092) {
  schema = other1092.schema;
  version = other1092.version;
  createdAt = other1092.createdAt;
  cols = other1092.cols;
  state = other1092.state;
  description = other1092.description;
  schemaText = other1092.schemaText;
  fingerprint = other1092.fingerprint;
  name = other1092.name;
  serDe = other1092.serDe;
  __isset = other1092.__isset;
}
SchemaVersion& SchemaVersion::operator=(const SchemaVersion& other1093) {
  schema = other1093.schema;
  version = other1093.version;
  createdAt = other1093.createdAt;
  cols = other1093.cols;
  state = other1093.state;
  description = other1093.description;
  schemaText = other1093.schemaText;
  fingerprint = other1093.fingerprint;
  name = other1093.name;
  serDe = other1093.serDe;
  __isset = other1093.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void SchemaVersion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SchemaVersion(";
  out << "schema=" << to_string(schema);
  out << ", " << "version=" << to_string(version);
  out << ", " << "createdAt=" << to_string(createdAt);
  out << ", " << "cols=" << to_string(cols);
  out << ", " << "state="; (__isset.state ? (out << to_string(state)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "schemaText="; (__isset.schemaText ? (out << to_string(schemaText)) : (out << "<null>"));
  out << ", " << "fingerprint="; (__isset.fingerprint ? (out << to_string(fingerprint)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "serDe="; (__isset.serDe ? (out << to_string(serDe)) : (out << "<null>"));
  out << ")";
}


SchemaVersionDescriptor::~SchemaVersionDescriptor() throw() {
}


void SchemaVersionDescriptor::__set_schema(const ISchemaName& val) {
  this->schema = val;
}

void SchemaVersionDescriptor::__set_version(const int32_t val) {
  this->version = val;
}

uint32_t SchemaVersionDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schema.read(iprot);
          this->__isset.schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SchemaVersionDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SchemaVersionDescriptor");

  xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->schema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SchemaVersionDescriptor &a, SchemaVersionDescriptor &b) {
  using ::std::swap;
  swap(a.schema, b.schema);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
SchemaVersionDescriptor::SchemaVersionDescriptor(const SchemaVersionDescriptor& other1126) {
  schema = other1126.schema;
  version = other1126.version;
  __isset = other1126.__isset;
}
SchemaVersionDescriptor& SchemaVersionDescriptor::operator=(const SchemaVersionDescriptor& other1127) {
  schema = other1127.schema;
  version = other1127.version;
  __isset = other1127.__isset;
=======
<<<<<<< HEAD
SchemaVersionDescriptor::SchemaVersionDescriptor(const SchemaVersionDescriptor& other1108) {
  schema = other1108.schema;
  version = other1108.version;
  __isset = other1108.__isset;
}
SchemaVersionDescriptor& SchemaVersionDescriptor::operator=(const SchemaVersionDescriptor& other1109) {
  schema = other1109.schema;
  version = other1109.version;
  __isset = other1109.__isset;
=======
SchemaVersionDescriptor::SchemaVersionDescriptor(const SchemaVersionDescriptor& other1094) {
  schema = other1094.schema;
  version = other1094.version;
  __isset = other1094.__isset;
}
SchemaVersionDescriptor& SchemaVersionDescriptor::operator=(const SchemaVersionDescriptor& other1095) {
  schema = other1095.schema;
  version = other1095.version;
  __isset = other1095.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void SchemaVersionDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SchemaVersionDescriptor(";
  out << "schema=" << to_string(schema);
  out << ", " << "version=" << to_string(version);
  out << ")";
}


FindSchemasByColsRqst::~FindSchemasByColsRqst() throw() {
}


void FindSchemasByColsRqst::__set_colName(const std::string& val) {
  this->colName = val;
__isset.colName = true;
}

void FindSchemasByColsRqst::__set_colNamespace(const std::string& val) {
  this->colNamespace = val;
__isset.colNamespace = true;
}

void FindSchemasByColsRqst::__set_type(const std::string& val) {
  this->type = val;
__isset.type = true;
}

uint32_t FindSchemasByColsRqst::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colName);
          this->__isset.colName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colNamespace);
          this->__isset.colNamespace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindSchemasByColsRqst::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FindSchemasByColsRqst");

  if (this->__isset.colName) {
    xfer += oprot->writeFieldBegin("colName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->colName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.colNamespace) {
    xfer += oprot->writeFieldBegin("colNamespace", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->colNamespace);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FindSchemasByColsRqst &a, FindSchemasByColsRqst &b) {
  using ::std::swap;
  swap(a.colName, b.colName);
  swap(a.colNamespace, b.colNamespace);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
FindSchemasByColsRqst::FindSchemasByColsRqst(const FindSchemasByColsRqst& other1128) {
  colName = other1128.colName;
  colNamespace = other1128.colNamespace;
  type = other1128.type;
  __isset = other1128.__isset;
}
FindSchemasByColsRqst& FindSchemasByColsRqst::operator=(const FindSchemasByColsRqst& other1129) {
  colName = other1129.colName;
  colNamespace = other1129.colNamespace;
  type = other1129.type;
  __isset = other1129.__isset;
=======
<<<<<<< HEAD
FindSchemasByColsRqst::FindSchemasByColsRqst(const FindSchemasByColsRqst& other1110) {
  colName = other1110.colName;
  colNamespace = other1110.colNamespace;
  type = other1110.type;
  __isset = other1110.__isset;
}
FindSchemasByColsRqst& FindSchemasByColsRqst::operator=(const FindSchemasByColsRqst& other1111) {
  colName = other1111.colName;
  colNamespace = other1111.colNamespace;
  type = other1111.type;
  __isset = other1111.__isset;
=======
FindSchemasByColsRqst::FindSchemasByColsRqst(const FindSchemasByColsRqst& other1096) {
  colName = other1096.colName;
  colNamespace = other1096.colNamespace;
  type = other1096.type;
  __isset = other1096.__isset;
}
FindSchemasByColsRqst& FindSchemasByColsRqst::operator=(const FindSchemasByColsRqst& other1097) {
  colName = other1097.colName;
  colNamespace = other1097.colNamespace;
  type = other1097.type;
  __isset = other1097.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void FindSchemasByColsRqst::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindSchemasByColsRqst(";
  out << "colName="; (__isset.colName ? (out << to_string(colName)) : (out << "<null>"));
  out << ", " << "colNamespace="; (__isset.colNamespace ? (out << to_string(colNamespace)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


FindSchemasByColsResp::~FindSchemasByColsResp() throw() {
}


void FindSchemasByColsResp::__set_schemaVersions(const std::vector<SchemaVersionDescriptor> & val) {
  this->schemaVersions = val;
}

uint32_t FindSchemasByColsResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->schemaVersions.clear();
<<<<<<< HEAD
            uint32_t _size1130;
            ::apache::thrift::protocol::TType _etype1133;
            xfer += iprot->readListBegin(_etype1133, _size1130);
            this->schemaVersions.resize(_size1130);
            uint32_t _i1134;
            for (_i1134 = 0; _i1134 < _size1130; ++_i1134)
            {
              xfer += this->schemaVersions[_i1134].read(iprot);
=======
<<<<<<< HEAD
            uint32_t _size1112;
            ::apache::thrift::protocol::TType _etype1115;
            xfer += iprot->readListBegin(_etype1115, _size1112);
            this->schemaVersions.resize(_size1112);
            uint32_t _i1116;
            for (_i1116 = 0; _i1116 < _size1112; ++_i1116)
            {
              xfer += this->schemaVersions[_i1116].read(iprot);
=======
            uint32_t _size1098;
            ::apache::thrift::protocol::TType _etype1101;
            xfer += iprot->readListBegin(_etype1101, _size1098);
            this->schemaVersions.resize(_size1098);
            uint32_t _i1102;
            for (_i1102 = 0; _i1102 < _size1098; ++_i1102)
            {
              xfer += this->schemaVersions[_i1102].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.schemaVersions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindSchemasByColsResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FindSchemasByColsResp");

  xfer += oprot->writeFieldBegin("schemaVersions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->schemaVersions.size()));
<<<<<<< HEAD
    std::vector<SchemaVersionDescriptor> ::const_iterator _iter1135;
    for (_iter1135 = this->schemaVersions.begin(); _iter1135 != this->schemaVersions.end(); ++_iter1135)
    {
      xfer += (*_iter1135).write(oprot);
=======
<<<<<<< HEAD
    std::vector<SchemaVersionDescriptor> ::const_iterator _iter1117;
    for (_iter1117 = this->schemaVersions.begin(); _iter1117 != this->schemaVersions.end(); ++_iter1117)
    {
      xfer += (*_iter1117).write(oprot);
=======
    std::vector<SchemaVersionDescriptor> ::const_iterator _iter1103;
    for (_iter1103 = this->schemaVersions.begin(); _iter1103 != this->schemaVersions.end(); ++_iter1103)
    {
      xfer += (*_iter1103).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FindSchemasByColsResp &a, FindSchemasByColsResp &b) {
  using ::std::swap;
  swap(a.schemaVersions, b.schemaVersions);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
FindSchemasByColsResp::FindSchemasByColsResp(const FindSchemasByColsResp& other1136) {
  schemaVersions = other1136.schemaVersions;
  __isset = other1136.__isset;
}
FindSchemasByColsResp& FindSchemasByColsResp::operator=(const FindSchemasByColsResp& other1137) {
  schemaVersions = other1137.schemaVersions;
  __isset = other1137.__isset;
=======
<<<<<<< HEAD
FindSchemasByColsResp::FindSchemasByColsResp(const FindSchemasByColsResp& other1118) {
  schemaVersions = other1118.schemaVersions;
  __isset = other1118.__isset;
}
FindSchemasByColsResp& FindSchemasByColsResp::operator=(const FindSchemasByColsResp& other1119) {
  schemaVersions = other1119.schemaVersions;
  __isset = other1119.__isset;
=======
FindSchemasByColsResp::FindSchemasByColsResp(const FindSchemasByColsResp& other1104) {
  schemaVersions = other1104.schemaVersions;
  __isset = other1104.__isset;
}
FindSchemasByColsResp& FindSchemasByColsResp::operator=(const FindSchemasByColsResp& other1105) {
  schemaVersions = other1105.schemaVersions;
  __isset = other1105.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void FindSchemasByColsResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindSchemasByColsResp(";
  out << "schemaVersions=" << to_string(schemaVersions);
  out << ")";
}


MapSchemaVersionToSerdeRequest::~MapSchemaVersionToSerdeRequest() throw() {
}


void MapSchemaVersionToSerdeRequest::__set_schemaVersion(const SchemaVersionDescriptor& val) {
  this->schemaVersion = val;
}

void MapSchemaVersionToSerdeRequest::__set_serdeName(const std::string& val) {
  this->serdeName = val;
}

uint32_t MapSchemaVersionToSerdeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schemaVersion.read(iprot);
          this->__isset.schemaVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serdeName);
          this->__isset.serdeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MapSchemaVersionToSerdeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MapSchemaVersionToSerdeRequest");

  xfer += oprot->writeFieldBegin("schemaVersion", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->schemaVersion.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serdeName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serdeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MapSchemaVersionToSerdeRequest &a, MapSchemaVersionToSerdeRequest &b) {
  using ::std::swap;
  swap(a.schemaVersion, b.schemaVersion);
  swap(a.serdeName, b.serdeName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
MapSchemaVersionToSerdeRequest::MapSchemaVersionToSerdeRequest(const MapSchemaVersionToSerdeRequest& other1138) {
  schemaVersion = other1138.schemaVersion;
  serdeName = other1138.serdeName;
  __isset = other1138.__isset;
}
MapSchemaVersionToSerdeRequest& MapSchemaVersionToSerdeRequest::operator=(const MapSchemaVersionToSerdeRequest& other1139) {
  schemaVersion = other1139.schemaVersion;
  serdeName = other1139.serdeName;
  __isset = other1139.__isset;
=======
<<<<<<< HEAD
MapSchemaVersionToSerdeRequest::MapSchemaVersionToSerdeRequest(const MapSchemaVersionToSerdeRequest& other1120) {
  schemaVersion = other1120.schemaVersion;
  serdeName = other1120.serdeName;
  __isset = other1120.__isset;
}
MapSchemaVersionToSerdeRequest& MapSchemaVersionToSerdeRequest::operator=(const MapSchemaVersionToSerdeRequest& other1121) {
  schemaVersion = other1121.schemaVersion;
  serdeName = other1121.serdeName;
  __isset = other1121.__isset;
=======
MapSchemaVersionToSerdeRequest::MapSchemaVersionToSerdeRequest(const MapSchemaVersionToSerdeRequest& other1106) {
  schemaVersion = other1106.schemaVersion;
  serdeName = other1106.serdeName;
  __isset = other1106.__isset;
}
MapSchemaVersionToSerdeRequest& MapSchemaVersionToSerdeRequest::operator=(const MapSchemaVersionToSerdeRequest& other1107) {
  schemaVersion = other1107.schemaVersion;
  serdeName = other1107.serdeName;
  __isset = other1107.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void MapSchemaVersionToSerdeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MapSchemaVersionToSerdeRequest(";
  out << "schemaVersion=" << to_string(schemaVersion);
  out << ", " << "serdeName=" << to_string(serdeName);
  out << ")";
}


SetSchemaVersionStateRequest::~SetSchemaVersionStateRequest() throw() {
}


void SetSchemaVersionStateRequest::__set_schemaVersion(const SchemaVersionDescriptor& val) {
  this->schemaVersion = val;
}

void SetSchemaVersionStateRequest::__set_state(const SchemaVersionState::type val) {
  this->state = val;
}

uint32_t SetSchemaVersionStateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schemaVersion.read(iprot);
          this->__isset.schemaVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
          int32_t ecast1140;
          xfer += iprot->readI32(ecast1140);
          this->state = (SchemaVersionState::type)ecast1140;
=======
<<<<<<< HEAD
          int32_t ecast1122;
          xfer += iprot->readI32(ecast1122);
          this->state = (SchemaVersionState::type)ecast1122;
=======
          int32_t ecast1108;
          xfer += iprot->readI32(ecast1108);
          this->state = (SchemaVersionState::type)ecast1108;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetSchemaVersionStateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SetSchemaVersionStateRequest");

  xfer += oprot->writeFieldBegin("schemaVersion", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->schemaVersion.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetSchemaVersionStateRequest &a, SetSchemaVersionStateRequest &b) {
  using ::std::swap;
  swap(a.schemaVersion, b.schemaVersion);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
SetSchemaVersionStateRequest::SetSchemaVersionStateRequest(const SetSchemaVersionStateRequest& other1141) {
  schemaVersion = other1141.schemaVersion;
  state = other1141.state;
  __isset = other1141.__isset;
}
SetSchemaVersionStateRequest& SetSchemaVersionStateRequest::operator=(const SetSchemaVersionStateRequest& other1142) {
  schemaVersion = other1142.schemaVersion;
  state = other1142.state;
  __isset = other1142.__isset;
=======
<<<<<<< HEAD
SetSchemaVersionStateRequest::SetSchemaVersionStateRequest(const SetSchemaVersionStateRequest& other1123) {
  schemaVersion = other1123.schemaVersion;
  state = other1123.state;
  __isset = other1123.__isset;
}
SetSchemaVersionStateRequest& SetSchemaVersionStateRequest::operator=(const SetSchemaVersionStateRequest& other1124) {
  schemaVersion = other1124.schemaVersion;
  state = other1124.state;
  __isset = other1124.__isset;
=======
SetSchemaVersionStateRequest::SetSchemaVersionStateRequest(const SetSchemaVersionStateRequest& other1109) {
  schemaVersion = other1109.schemaVersion;
  state = other1109.state;
  __isset = other1109.__isset;
}
SetSchemaVersionStateRequest& SetSchemaVersionStateRequest::operator=(const SetSchemaVersionStateRequest& other1110) {
  schemaVersion = other1110.schemaVersion;
  state = other1110.state;
  __isset = other1110.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void SetSchemaVersionStateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetSchemaVersionStateRequest(";
  out << "schemaVersion=" << to_string(schemaVersion);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


GetSerdeRequest::~GetSerdeRequest() throw() {
}


void GetSerdeRequest::__set_serdeName(const std::string& val) {
  this->serdeName = val;
}

uint32_t GetSerdeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serdeName);
          this->__isset.serdeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSerdeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSerdeRequest");

  xfer += oprot->writeFieldBegin("serdeName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serdeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSerdeRequest &a, GetSerdeRequest &b) {
  using ::std::swap;
  swap(a.serdeName, b.serdeName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetSerdeRequest::GetSerdeRequest(const GetSerdeRequest& other1143) {
  serdeName = other1143.serdeName;
  __isset = other1143.__isset;
}
GetSerdeRequest& GetSerdeRequest::operator=(const GetSerdeRequest& other1144) {
  serdeName = other1144.serdeName;
  __isset = other1144.__isset;
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
GetSerdeRequest::GetSerdeRequest(const GetSerdeRequest& other1125) {
  serdeName = other1125.serdeName;
  __isset = other1125.__isset;
}
GetSerdeRequest& GetSerdeRequest::operator=(const GetSerdeRequest& other1126) {
  serdeName = other1126.serdeName;
  __isset = other1126.__isset;
=======
<<<<<<< HEAD
GetSerdeRequest::GetSerdeRequest(const GetSerdeRequest& other1105) {
  serdeName = other1105.serdeName;
  __isset = other1105.__isset;
}
GetSerdeRequest& GetSerdeRequest::operator=(const GetSerdeRequest& other1106) {
  serdeName = other1106.serdeName;
  __isset = other1106.__isset;
=======
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1065) : TException() {
  message = other1065.message;
  __isset = other1065.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1066) {
  message = other1066.message;
  __isset = other1066.__isset;
=======
MetaException::MetaException(const MetaException& other1023) : TException() {
  message = other1023.message;
  __isset = other1023.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1024) {
  message = other1024.message;
  __isset = other1024.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetaException::MetaException(const MetaException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
MetaException::MetaException(const MetaException& other1023) : TException() {
  message = other1023.message;
  __isset = other1023.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1024) {
  message = other1024.message;
  __isset = other1024.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetaException::MetaException(const MetaException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
GetSerdeRequest::GetSerdeRequest(const GetSerdeRequest& other1111) {
  serdeName = other1111.serdeName;
  __isset = other1111.__isset;
}
GetSerdeRequest& GetSerdeRequest::operator=(const GetSerdeRequest& other1112) {
  serdeName = other1112.serdeName;
  __isset = other1112.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void GetSerdeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSerdeRequest(";
  out << "serdeName=" << to_string(serdeName);
  out << ")";
}


MetaException::~MetaException() throw() {
}


void MetaException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t MetaException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetaException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetaException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MetaException &a, MetaException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1145) : TException() {
  message = other1145.message;
  __isset = other1145.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1146) {
  message = other1146.message;
  __isset = other1146.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1127) : TException() {
  message = other1127.message;
  __isset = other1127.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1128) {
  message = other1128.message;
  __isset = other1128.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1107) : TException() {
  message = other1107.message;
  __isset = other1107.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1108) {
  message = other1108.message;
  __isset = other1108.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
UnknownTableException::UnknownTableException(const UnknownTableException& other1091) : TException() {
  message = other1091.message;
  __isset = other1091.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1092) {
  message = other1092.message;
  __isset = other1092.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownTableException::UnknownTableException(const UnknownTableException& other1067) : TException() {
  message = other1067.message;
  __isset = other1067.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1068) {
  message = other1068.message;
  __isset = other1068.__isset;
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1025) : TException() {
  message = other1025.message;
  __isset = other1025.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1026) {
  message = other1026.message;
  __isset = other1026.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1025) : TException() {
  message = other1025.message;
  __isset = other1025.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1026) {
  message = other1026.message;
  __isset = other1026.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1071) : TException() {
  message = other1071.message;
  __isset = other1071.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1072) {
  message = other1072.message;
  __isset = other1072.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
MetaException::MetaException(const MetaException& other1113) : TException() {
  message = other1113.message;
  __isset = other1113.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1114) {
  message = other1114.message;
  __isset = other1114.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void MetaException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetaException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* MetaException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: MetaException";
  }
}


UnknownTableException::~UnknownTableException() throw() {
}


void UnknownTableException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t UnknownTableException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnknownTableException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnknownTableException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnknownTableException &a, UnknownTableException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownTableException::UnknownTableException(const UnknownTableException& other1147) : TException() {
  message = other1147.message;
  __isset = other1147.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1148) {
  message = other1148.message;
  __isset = other1148.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
UnknownTableException::UnknownTableException(const UnknownTableException& other1129) : TException() {
  message = other1129.message;
  __isset = other1129.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1130) {
  message = other1130.message;
  __isset = other1130.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
UnknownTableException::UnknownTableException(const UnknownTableException& other1109) : TException() {
  message = other1109.message;
  __isset = other1109.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1110) {
  message = other1110.message;
  __isset = other1110.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
UnknownDBException::UnknownDBException(const UnknownDBException& other1093) : TException() {
  message = other1093.message;
  __isset = other1093.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1094) {
  message = other1094.message;
  __isset = other1094.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownDBException::UnknownDBException(const UnknownDBException& other1069) : TException() {
  message = other1069.message;
  __isset = other1069.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1070) {
  message = other1070.message;
  __isset = other1070.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
UnknownDBException::UnknownDBException(const UnknownDBException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownDBException::UnknownDBException(const UnknownDBException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownDBException::UnknownDBException(const UnknownDBException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
UnknownDBException::UnknownDBException(const UnknownDBException& other1073) : TException() {
  message = other1073.message;
  __isset = other1073.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1074) {
  message = other1074.message;
  __isset = other1074.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1115) : TException() {
  message = other1115.message;
  __isset = other1115.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1116) {
  message = other1116.message;
  __isset = other1116.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void UnknownTableException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownTableException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownTableException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownTableException";
  }
}


UnknownDBException::~UnknownDBException() throw() {
}


void UnknownDBException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t UnknownDBException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnknownDBException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnknownDBException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnknownDBException &a, UnknownDBException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownDBException::UnknownDBException(const UnknownDBException& other1149) : TException() {
  message = other1149.message;
  __isset = other1149.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1150) {
  message = other1150.message;
  __isset = other1150.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
UnknownDBException::UnknownDBException(const UnknownDBException& other1131) : TException() {
  message = other1131.message;
  __isset = other1131.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1132) {
  message = other1132.message;
  __isset = other1132.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
UnknownDBException::UnknownDBException(const UnknownDBException& other1111) : TException() {
  message = other1111.message;
  __isset = other1111.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1112) {
  message = other1112.message;
  __isset = other1112.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1095) : TException() {
  message = other1095.message;
  __isset = other1095.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1096) {
  message = other1096.message;
  __isset = other1096.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1071) : TException() {
  message = other1071.message;
  __isset = other1071.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1072) {
  message = other1072.message;
  __isset = other1072.__isset;
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1075) : TException() {
  message = other1075.message;
  __isset = other1075.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1076) {
  message = other1076.message;
  __isset = other1076.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
UnknownDBException::UnknownDBException(const UnknownDBException& other1117) : TException() {
  message = other1117.message;
  __isset = other1117.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1118) {
  message = other1118.message;
  __isset = other1118.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void UnknownDBException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownDBException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownDBException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownDBException";
  }
}


AlreadyExistsException::~AlreadyExistsException() throw() {
}


void AlreadyExistsException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t AlreadyExistsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AlreadyExistsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AlreadyExistsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AlreadyExistsException &a, AlreadyExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1151) : TException() {
  message = other1151.message;
  __isset = other1151.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1152) {
  message = other1152.message;
  __isset = other1152.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1133) : TException() {
  message = other1133.message;
  __isset = other1133.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1134) {
  message = other1134.message;
  __isset = other1134.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1113) : TException() {
  message = other1113.message;
  __isset = other1113.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1114) {
  message = other1114.message;
  __isset = other1114.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1097) : TException() {
  message = other1097.message;
  __isset = other1097.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1098) {
  message = other1098.message;
  __isset = other1098.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1073) : TException() {
  message = other1073.message;
  __isset = other1073.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1074) {
  message = other1074.message;
  __isset = other1074.__isset;
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1077) : TException() {
  message = other1077.message;
  __isset = other1077.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1078) {
  message = other1078.message;
  __isset = other1078.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1119) : TException() {
  message = other1119.message;
  __isset = other1119.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1120) {
  message = other1120.message;
  __isset = other1120.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void AlreadyExistsException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlreadyExistsException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* AlreadyExistsException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: AlreadyExistsException";
  }
}


InvalidPartitionException::~InvalidPartitionException() throw() {
}


void InvalidPartitionException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidPartitionException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidPartitionException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidPartitionException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidPartitionException &a, InvalidPartitionException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1153) : TException() {
  message = other1153.message;
  __isset = other1153.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1154) {
  message = other1154.message;
  __isset = other1154.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1135) : TException() {
  message = other1135.message;
  __isset = other1135.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1136) {
  message = other1136.message;
  __isset = other1136.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1115) : TException() {
  message = other1115.message;
  __isset = other1115.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1116) {
  message = other1116.message;
  __isset = other1116.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1099) : TException() {
  message = other1099.message;
  __isset = other1099.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1100) {
  message = other1100.message;
  __isset = other1100.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1075) : TException() {
  message = other1075.message;
  __isset = other1075.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1076) {
  message = other1076.message;
  __isset = other1076.__isset;
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1079) : TException() {
  message = other1079.message;
  __isset = other1079.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1080) {
  message = other1080.message;
  __isset = other1080.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1121) : TException() {
  message = other1121.message;
  __isset = other1121.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1122) {
  message = other1122.message;
  __isset = other1122.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void InvalidPartitionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidPartitionException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidPartitionException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidPartitionException";
  }
}


UnknownPartitionException::~UnknownPartitionException() throw() {
}


void UnknownPartitionException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t UnknownPartitionException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnknownPartitionException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnknownPartitionException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnknownPartitionException &a, UnknownPartitionException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1155) : TException() {
  message = other1155.message;
  __isset = other1155.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1156) {
  message = other1156.message;
  __isset = other1156.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1137) : TException() {
  message = other1137.message;
  __isset = other1137.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1138) {
  message = other1138.message;
  __isset = other1138.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1117) : TException() {
  message = other1117.message;
  __isset = other1117.__isset;
<<<<<<< HEAD
=======
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1118) {
  message = other1118.message;
  __isset = other1118.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1101) : TException() {
  message = other1101.message;
  __isset = other1101.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1102) {
  message = other1102.message;
  __isset = other1102.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1077) : TException() {
  message = other1077.message;
  __isset = other1077.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1078) {
  message = other1078.message;
  __isset = other1078.__isset;
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
<<<<<<< HEAD
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1102) {
  message = other1102.message;
  __isset = other1102.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1081) : TException() {
  message = other1081.message;
  __isset = other1081.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1082) {
  message = other1082.message;
  __isset = other1082.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1123) : TException() {
  message = other1123.message;
  __isset = other1123.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1124) {
  message = other1124.message;
  __isset = other1124.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void UnknownPartitionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownPartitionException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownPartitionException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownPartitionException";
  }
}


InvalidObjectException::~InvalidObjectException() throw() {
}


void InvalidObjectException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidObjectException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidObjectException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidObjectException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidObjectException &a, InvalidObjectException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1157) : TException() {
  message = other1157.message;
  __isset = other1157.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1158) {
  message = other1158.message;
  __isset = other1158.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1139) : TException() {
  message = other1139.message;
  __isset = other1139.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1140) {
  message = other1140.message;
  __isset = other1140.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1119) : TException() {
  message = other1119.message;
  __isset = other1119.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1120) {
  message = other1120.message;
  __isset = other1120.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1103) : TException() {
  message = other1103.message;
  __isset = other1103.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1104) {
  message = other1104.message;
  __isset = other1104.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1079) : TException() {
  message = other1079.message;
  __isset = other1079.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1080) {
  message = other1080.message;
  __isset = other1080.__isset;
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1083) : TException() {
  message = other1083.message;
  __isset = other1083.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1084) {
  message = other1084.message;
  __isset = other1084.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1125) : TException() {
  message = other1125.message;
  __isset = other1125.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1126) {
  message = other1126.message;
  __isset = other1126.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void InvalidObjectException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidObjectException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidObjectException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidObjectException";
  }
}


NoSuchObjectException::~NoSuchObjectException() throw() {
}


void NoSuchObjectException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t NoSuchObjectException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoSuchObjectException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoSuchObjectException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoSuchObjectException &a, NoSuchObjectException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1159) : TException() {
  message = other1159.message;
  __isset = other1159.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1160) {
  message = other1160.message;
  __isset = other1160.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1141) : TException() {
  message = other1141.message;
  __isset = other1141.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1142) {
  message = other1142.message;
  __isset = other1142.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1121) : TException() {
  message = other1121.message;
  __isset = other1121.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1122) {
  message = other1122.message;
  __isset = other1122.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1105) : TException() {
  message = other1105.message;
  __isset = other1105.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1106) {
  message = other1106.message;
  __isset = other1106.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1081) : TException() {
  message = other1081.message;
  __isset = other1081.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1082) {
  message = other1082.message;
  __isset = other1082.__isset;
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1085) : TException() {
  message = other1085.message;
  __isset = other1085.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1086) {
  message = other1086.message;
  __isset = other1086.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1127) : TException() {
  message = other1127.message;
  __isset = other1127.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1128) {
  message = other1128.message;
  __isset = other1128.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NoSuchObjectException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchObjectException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchObjectException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchObjectException";
  }
}


InvalidOperationException::~InvalidOperationException() throw() {
}


void InvalidOperationException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidOperationException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperationException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidOperationException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidOperationException &a, InvalidOperationException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1161) : TException() {
  message = other1161.message;
  __isset = other1161.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1162) {
  message = other1162.message;
  __isset = other1162.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1143) : TException() {
  message = other1143.message;
  __isset = other1143.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1144) {
  message = other1144.message;
  __isset = other1144.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1123) : TException() {
  message = other1123.message;
  __isset = other1123.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1124) {
  message = other1124.message;
  __isset = other1124.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1107) : TException() {
  message = other1107.message;
  __isset = other1107.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1108) {
  message = other1108.message;
  __isset = other1108.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1083) : TException() {
  message = other1083.message;
  __isset = other1083.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1084) {
  message = other1084.message;
  __isset = other1084.__isset;
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1087) : TException() {
  message = other1087.message;
  __isset = other1087.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1088) {
  message = other1088.message;
  __isset = other1088.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1129) : TException() {
  message = other1129.message;
  __isset = other1129.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1130) {
  message = other1130.message;
  __isset = other1130.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void InvalidOperationException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidOperationException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidOperationException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidOperationException";
  }
}


ConfigValSecurityException::~ConfigValSecurityException() throw() {
}


void ConfigValSecurityException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t ConfigValSecurityException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfigValSecurityException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConfigValSecurityException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConfigValSecurityException &a, ConfigValSecurityException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1163) : TException() {
  message = other1163.message;
  __isset = other1163.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1164) {
  message = other1164.message;
  __isset = other1164.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1145) : TException() {
  message = other1145.message;
  __isset = other1145.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1146) {
  message = other1146.message;
  __isset = other1146.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1125) : TException() {
  message = other1125.message;
  __isset = other1125.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1126) {
  message = other1126.message;
  __isset = other1126.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1109) : TException() {
  message = other1109.message;
  __isset = other1109.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1110) {
  message = other1110.message;
  __isset = other1110.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1085) : TException() {
  message = other1085.message;
  __isset = other1085.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1086) {
  message = other1086.message;
  __isset = other1086.__isset;
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1131) : TException() {
  message = other1131.message;
  __isset = other1131.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1132) {
  message = other1132.message;
  __isset = other1132.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void ConfigValSecurityException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfigValSecurityException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* ConfigValSecurityException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ConfigValSecurityException";
  }
}


InvalidInputException::~InvalidInputException() throw() {
}


void InvalidInputException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidInputException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidInputException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidInputException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidInputException &a, InvalidInputException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidInputException::InvalidInputException(const InvalidInputException& other1165) : TException() {
  message = other1165.message;
  __isset = other1165.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1166) {
  message = other1166.message;
  __isset = other1166.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
InvalidInputException::InvalidInputException(const InvalidInputException& other1147) : TException() {
  message = other1147.message;
  __isset = other1147.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1148) {
  message = other1148.message;
  __isset = other1148.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
InvalidInputException::InvalidInputException(const InvalidInputException& other1127) : TException() {
  message = other1127.message;
  __isset = other1127.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1128) {
  message = other1128.message;
  __isset = other1128.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
InvalidInputException::InvalidInputException(const InvalidInputException& other1111) : TException() {
  message = other1111.message;
  __isset = other1111.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1112) {
  message = other1112.message;
  __isset = other1112.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidInputException::InvalidInputException(const InvalidInputException& other1087) : TException() {
  message = other1087.message;
  __isset = other1087.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1088) {
  message = other1088.message;
  __isset = other1088.__isset;
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1049) : TException() {
  message = other1049.message;
  __isset = other1049.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1050) {
  message = other1050.message;
  __isset = other1050.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1049) : TException() {
  message = other1049.message;
  __isset = other1049.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1050) {
  message = other1050.message;
  __isset = other1050.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1091) : TException() {
  message = other1091.message;
  __isset = other1091.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1092) {
  message = other1092.message;
  __isset = other1092.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1133) : TException() {
  message = other1133.message;
  __isset = other1133.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1134) {
  message = other1134.message;
  __isset = other1134.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void InvalidInputException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidInputException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidInputException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidInputException";
  }
}


NoSuchTxnException::~NoSuchTxnException() throw() {
}


void NoSuchTxnException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t NoSuchTxnException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoSuchTxnException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoSuchTxnException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoSuchTxnException &a, NoSuchTxnException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1167) : TException() {
  message = other1167.message;
  __isset = other1167.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1168) {
  message = other1168.message;
  __isset = other1168.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1149) : TException() {
  message = other1149.message;
  __isset = other1149.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1150) {
  message = other1150.message;
  __isset = other1150.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1129) : TException() {
  message = other1129.message;
  __isset = other1129.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1130) {
  message = other1130.message;
  __isset = other1130.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1113) : TException() {
  message = other1113.message;
  __isset = other1113.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1114) {
  message = other1114.message;
  __isset = other1114.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1051) : TException() {
  message = other1051.message;
  __isset = other1051.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1052) {
  message = other1052.message;
  __isset = other1052.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1051) : TException() {
  message = other1051.message;
  __isset = other1051.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1052) {
  message = other1052.message;
  __isset = other1052.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1093) : TException() {
  message = other1093.message;
  __isset = other1093.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1094) {
  message = other1094.message;
  __isset = other1094.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1135) : TException() {
  message = other1135.message;
  __isset = other1135.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1136) {
  message = other1136.message;
  __isset = other1136.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NoSuchTxnException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchTxnException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchTxnException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchTxnException";
  }
}


TxnAbortedException::~TxnAbortedException() throw() {
}


void TxnAbortedException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t TxnAbortedException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TxnAbortedException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnAbortedException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnAbortedException &a, TxnAbortedException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1169) : TException() {
  message = other1169.message;
  __isset = other1169.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1170) {
  message = other1170.message;
  __isset = other1170.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1151) : TException() {
  message = other1151.message;
  __isset = other1151.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1152) {
  message = other1152.message;
  __isset = other1152.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1131) : TException() {
  message = other1131.message;
  __isset = other1131.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1132) {
  message = other1132.message;
  __isset = other1132.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1115) : TException() {
  message = other1115.message;
  __isset = other1115.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1116) {
  message = other1116.message;
  __isset = other1116.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1091) : TException() {
  message = other1091.message;
  __isset = other1091.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1092) {
  message = other1092.message;
  __isset = other1092.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1049) : TException() {
  message = other1049.message;
  __isset = other1049.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1050) {
  message = other1050.message;
  __isset = other1050.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1053) : TException() {
  message = other1053.message;
  __isset = other1053.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1054) {
  message = other1054.message;
  __isset = other1054.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1053) : TException() {
  message = other1053.message;
  __isset = other1053.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1054) {
  message = other1054.message;
  __isset = other1054.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1095) : TException() {
  message = other1095.message;
  __isset = other1095.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1096) {
  message = other1096.message;
  __isset = other1096.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1137) : TException() {
  message = other1137.message;
  __isset = other1137.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1138) {
  message = other1138.message;
  __isset = other1138.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void TxnAbortedException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnAbortedException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* TxnAbortedException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TxnAbortedException";
  }
}


TxnOpenException::~TxnOpenException() throw() {
}


void TxnOpenException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t TxnOpenException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TxnOpenException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnOpenException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnOpenException &a, TxnOpenException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TxnOpenException::TxnOpenException(const TxnOpenException& other1171) : TException() {
  message = other1171.message;
  __isset = other1171.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1172) {
  message = other1172.message;
  __isset = other1172.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
TxnOpenException::TxnOpenException(const TxnOpenException& other1153) : TException() {
  message = other1153.message;
  __isset = other1153.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1154) {
  message = other1154.message;
  __isset = other1154.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
TxnOpenException::TxnOpenException(const TxnOpenException& other1133) : TException() {
  message = other1133.message;
  __isset = other1133.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1134) {
  message = other1134.message;
  __isset = other1134.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
TxnOpenException::TxnOpenException(const TxnOpenException& other1117) : TException() {
  message = other1117.message;
  __isset = other1117.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1118) {
  message = other1118.message;
  __isset = other1118.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TxnOpenException::TxnOpenException(const TxnOpenException& other1093) : TException() {
  message = other1093.message;
  __isset = other1093.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1094) {
  message = other1094.message;
  __isset = other1094.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
TxnOpenException::TxnOpenException(const TxnOpenException& other1051) : TException() {
  message = other1051.message;
  __isset = other1051.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1052) {
  message = other1052.message;
  __isset = other1052.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnOpenException::TxnOpenException(const TxnOpenException& other1055) : TException() {
  message = other1055.message;
  __isset = other1055.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1056) {
  message = other1056.message;
  __isset = other1056.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnOpenException::TxnOpenException(const TxnOpenException& other1055) : TException() {
  message = other1055.message;
  __isset = other1055.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1056) {
  message = other1056.message;
  __isset = other1056.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
TxnOpenException::TxnOpenException(const TxnOpenException& other1097) : TException() {
  message = other1097.message;
  __isset = other1097.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1098) {
  message = other1098.message;
  __isset = other1098.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
TxnOpenException::TxnOpenException(const TxnOpenException& other1139) : TException() {
  message = other1139.message;
  __isset = other1139.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1140) {
  message = other1140.message;
  __isset = other1140.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void TxnOpenException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnOpenException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* TxnOpenException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TxnOpenException";
  }
}


NoSuchLockException::~NoSuchLockException() throw() {
}


void NoSuchLockException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t NoSuchLockException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoSuchLockException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoSuchLockException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoSuchLockException &a, NoSuchLockException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1173) : TException() {
  message = other1173.message;
  __isset = other1173.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1174) {
  message = other1174.message;
  __isset = other1174.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1155) : TException() {
  message = other1155.message;
  __isset = other1155.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1156) {
  message = other1156.message;
  __isset = other1156.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1135) : TException() {
  message = other1135.message;
  __isset = other1135.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1136) {
  message = other1136.message;
  __isset = other1136.__isset;
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1119) : TException() {
  message = other1119.message;
  __isset = other1119.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1120) {
  message = other1120.message;
  __isset = other1120.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1095) : TException() {
  message = other1095.message;
  __isset = other1095.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1096) {
  message = other1096.message;
  __isset = other1096.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1053) : TException() {
  message = other1053.message;
  __isset = other1053.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1054) {
  message = other1054.message;
  __isset = other1054.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1057) : TException() {
  message = other1057.message;
  __isset = other1057.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1058) {
  message = other1058.message;
  __isset = other1058.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1057) : TException() {
  message = other1057.message;
  __isset = other1057.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1058) {
  message = other1058.message;
  __isset = other1058.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
=======
=======
=======
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1099) : TException() {
  message = other1099.message;
  __isset = other1099.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1100) {
  message = other1100.message;
  __isset = other1100.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1141) : TException() {
  message = other1141.message;
  __isset = other1141.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1142) {
  message = other1142.message;
  __isset = other1142.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
  return *this;
}
void NoSuchLockException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchLockException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchLockException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchLockException";
  }
}

}}} // namespace
