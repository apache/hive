/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class DefaultConstraintsResponse implements org.apache.thrift.TBase<DefaultConstraintsResponse, DefaultConstraintsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<DefaultConstraintsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DefaultConstraintsResponse");

  private static final org.apache.thrift.protocol.TField DEFAULT_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultConstraints", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DefaultConstraintsResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DefaultConstraintsResponseTupleSchemeFactory());
  }

  private List<SQLDefaultConstraint> defaultConstraints; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEFAULT_CONSTRAINTS((short)1, "defaultConstraints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEFAULT_CONSTRAINTS
          return DEFAULT_CONSTRAINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEFAULT_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("defaultConstraints", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLDefaultConstraint.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DefaultConstraintsResponse.class, metaDataMap);
  }

  public DefaultConstraintsResponse() {
  }

  public DefaultConstraintsResponse(
    List<SQLDefaultConstraint> defaultConstraints)
  {
    this();
    this.defaultConstraints = defaultConstraints;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DefaultConstraintsResponse(DefaultConstraintsResponse other) {
    if (other.isSetDefaultConstraints()) {
      List<SQLDefaultConstraint> __this__defaultConstraints = new ArrayList<SQLDefaultConstraint>(other.defaultConstraints.size());
      for (SQLDefaultConstraint other_element : other.defaultConstraints) {
        __this__defaultConstraints.add(new SQLDefaultConstraint(other_element));
      }
      this.defaultConstraints = __this__defaultConstraints;
    }
  }

  public DefaultConstraintsResponse deepCopy() {
    return new DefaultConstraintsResponse(this);
  }

  @Override
  public void clear() {
    this.defaultConstraints = null;
  }

  public int getDefaultConstraintsSize() {
    return (this.defaultConstraints == null) ? 0 : this.defaultConstraints.size();
  }

  public java.util.Iterator<SQLDefaultConstraint> getDefaultConstraintsIterator() {
    return (this.defaultConstraints == null) ? null : this.defaultConstraints.iterator();
  }

  public void addToDefaultConstraints(SQLDefaultConstraint elem) {
    if (this.defaultConstraints == null) {
      this.defaultConstraints = new ArrayList<SQLDefaultConstraint>();
    }
    this.defaultConstraints.add(elem);
  }

  public List<SQLDefaultConstraint> getDefaultConstraints() {
    return this.defaultConstraints;
  }

  public void setDefaultConstraints(List<SQLDefaultConstraint> defaultConstraints) {
    this.defaultConstraints = defaultConstraints;
  }

  public void unsetDefaultConstraints() {
    this.defaultConstraints = null;
  }

  /** Returns true if field defaultConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultConstraints() {
    return this.defaultConstraints != null;
  }

  public void setDefaultConstraintsIsSet(boolean value) {
    if (!value) {
      this.defaultConstraints = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEFAULT_CONSTRAINTS:
      if (value == null) {
        unsetDefaultConstraints();
      } else {
        setDefaultConstraints((List<SQLDefaultConstraint>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEFAULT_CONSTRAINTS:
      return getDefaultConstraints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEFAULT_CONSTRAINTS:
      return isSetDefaultConstraints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DefaultConstraintsResponse)
      return this.equals((DefaultConstraintsResponse)that);
    return false;
  }

  public boolean equals(DefaultConstraintsResponse that) {
    if (that == null)
      return false;

    boolean this_present_defaultConstraints = true && this.isSetDefaultConstraints();
    boolean that_present_defaultConstraints = true && that.isSetDefaultConstraints();
    if (this_present_defaultConstraints || that_present_defaultConstraints) {
      if (!(this_present_defaultConstraints && that_present_defaultConstraints))
        return false;
      if (!this.defaultConstraints.equals(that.defaultConstraints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_defaultConstraints = true && (isSetDefaultConstraints());
    list.add(present_defaultConstraints);
    if (present_defaultConstraints)
      list.add(defaultConstraints);

    return list.hashCode();
  }

  @Override
  public int compareTo(DefaultConstraintsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDefaultConstraints()).compareTo(other.isSetDefaultConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultConstraints, other.defaultConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DefaultConstraintsResponse(");
    boolean first = true;

    sb.append("defaultConstraints:");
    if (this.defaultConstraints == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultConstraints);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetDefaultConstraints()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultConstraints' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DefaultConstraintsResponseStandardSchemeFactory implements SchemeFactory {
    public DefaultConstraintsResponseStandardScheme getScheme() {
      return new DefaultConstraintsResponseStandardScheme();
    }
  }

  private static class DefaultConstraintsResponseStandardScheme extends StandardScheme<DefaultConstraintsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DefaultConstraintsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEFAULT_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list352 = iprot.readListBegin();
                struct.defaultConstraints = new ArrayList<SQLDefaultConstraint>(_list352.size);
                SQLDefaultConstraint _elem353;
                for (int _i354 = 0; _i354 < _list352.size; ++_i354)
                {
                  _elem353 = new SQLDefaultConstraint();
                  _elem353.read(iprot);
                  struct.defaultConstraints.add(_elem353);
                }
                iprot.readListEnd();
              }
              struct.setDefaultConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DefaultConstraintsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.defaultConstraints != null) {
        oprot.writeFieldBegin(DEFAULT_CONSTRAINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.defaultConstraints.size()));
          for (SQLDefaultConstraint _iter355 : struct.defaultConstraints)
          {
            _iter355.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DefaultConstraintsResponseTupleSchemeFactory implements SchemeFactory {
    public DefaultConstraintsResponseTupleScheme getScheme() {
      return new DefaultConstraintsResponseTupleScheme();
    }
  }

  private static class DefaultConstraintsResponseTupleScheme extends TupleScheme<DefaultConstraintsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DefaultConstraintsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.defaultConstraints.size());
        for (SQLDefaultConstraint _iter356 : struct.defaultConstraints)
        {
          _iter356.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DefaultConstraintsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list357 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.defaultConstraints = new ArrayList<SQLDefaultConstraint>(_list357.size);
        SQLDefaultConstraint _elem358;
        for (int _i359 = 0; _i359 < _list357.size; ++_i359)
        {
          _elem358 = new SQLDefaultConstraint();
          _elem358.read(iprot);
          struct.defaultConstraints.add(_elem358);
        }
      }
      struct.setDefaultConstraintsIsSet(true);
    }
  }

}

