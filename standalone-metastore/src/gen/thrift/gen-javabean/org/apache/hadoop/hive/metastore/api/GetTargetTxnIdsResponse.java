/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetTargetTxnIdsResponse implements org.apache.thrift.TBase<GetTargetTxnIdsResponse, GetTargetTxnIdsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetTargetTxnIdsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTargetTxnIdsResponse");

  private static final org.apache.thrift.protocol.TField TARGET_TXN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetTxnIds", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetTargetTxnIdsResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetTargetTxnIdsResponseTupleSchemeFactory());
  }

  private List<Long> targetTxnIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TARGET_TXN_IDS((short)1, "targetTxnIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET_TXN_IDS
          return TARGET_TXN_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET_TXN_IDS, new org.apache.thrift.meta_data.FieldMetaData("targetTxnIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTargetTxnIdsResponse.class, metaDataMap);
  }

  public GetTargetTxnIdsResponse() {
  }

  public GetTargetTxnIdsResponse(
    List<Long> targetTxnIds)
  {
    this();
    this.targetTxnIds = targetTxnIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTargetTxnIdsResponse(GetTargetTxnIdsResponse other) {
    if (other.isSetTargetTxnIds()) {
      List<Long> __this__targetTxnIds = new ArrayList<Long>(other.targetTxnIds);
      this.targetTxnIds = __this__targetTxnIds;
    }
  }

  public GetTargetTxnIdsResponse deepCopy() {
    return new GetTargetTxnIdsResponse(this);
  }

  @Override
  public void clear() {
    this.targetTxnIds = null;
  }

  public int getTargetTxnIdsSize() {
    return (this.targetTxnIds == null) ? 0 : this.targetTxnIds.size();
  }

  public java.util.Iterator<Long> getTargetTxnIdsIterator() {
    return (this.targetTxnIds == null) ? null : this.targetTxnIds.iterator();
  }

  public void addToTargetTxnIds(long elem) {
    if (this.targetTxnIds == null) {
      this.targetTxnIds = new ArrayList<Long>();
    }
    this.targetTxnIds.add(elem);
  }

  public List<Long> getTargetTxnIds() {
    return this.targetTxnIds;
  }

  public void setTargetTxnIds(List<Long> targetTxnIds) {
    this.targetTxnIds = targetTxnIds;
  }

  public void unsetTargetTxnIds() {
    this.targetTxnIds = null;
  }

  /** Returns true if field targetTxnIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetTxnIds() {
    return this.targetTxnIds != null;
  }

  public void setTargetTxnIdsIsSet(boolean value) {
    if (!value) {
      this.targetTxnIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET_TXN_IDS:
      if (value == null) {
        unsetTargetTxnIds();
      } else {
        setTargetTxnIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET_TXN_IDS:
      return getTargetTxnIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TARGET_TXN_IDS:
      return isSetTargetTxnIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetTargetTxnIdsResponse)
      return this.equals((GetTargetTxnIdsResponse)that);
    return false;
  }

  public boolean equals(GetTargetTxnIdsResponse that) {
    if (that == null)
      return false;

    boolean this_present_targetTxnIds = true && this.isSetTargetTxnIds();
    boolean that_present_targetTxnIds = true && that.isSetTargetTxnIds();
    if (this_present_targetTxnIds || that_present_targetTxnIds) {
      if (!(this_present_targetTxnIds && that_present_targetTxnIds))
        return false;
      if (!this.targetTxnIds.equals(that.targetTxnIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_targetTxnIds = true && (isSetTargetTxnIds());
    list.add(present_targetTxnIds);
    if (present_targetTxnIds)
      list.add(targetTxnIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetTargetTxnIdsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTargetTxnIds()).compareTo(other.isSetTargetTxnIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetTxnIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetTxnIds, other.targetTxnIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetTargetTxnIdsResponse(");
    boolean first = true;

    sb.append("targetTxnIds:");
    if (this.targetTxnIds == null) {
      sb.append("null");
    } else {
      sb.append(this.targetTxnIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTargetTxnIds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'targetTxnIds' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetTargetTxnIdsResponseStandardSchemeFactory implements SchemeFactory {
    public GetTargetTxnIdsResponseStandardScheme getScheme() {
      return new GetTargetTxnIdsResponseStandardScheme();
    }
  }

  private static class GetTargetTxnIdsResponseStandardScheme extends StandardScheme<GetTargetTxnIdsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetTargetTxnIdsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET_TXN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list602 = iprot.readListBegin();
                struct.targetTxnIds = new ArrayList<Long>(_list602.size);
                long _elem603;
                for (int _i604 = 0; _i604 < _list602.size; ++_i604)
                {
                  _elem603 = iprot.readI64();
                  struct.targetTxnIds.add(_elem603);
                }
                iprot.readListEnd();
              }
              struct.setTargetTxnIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetTargetTxnIdsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.targetTxnIds != null) {
        oprot.writeFieldBegin(TARGET_TXN_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.targetTxnIds.size()));
          for (long _iter605 : struct.targetTxnIds)
          {
            oprot.writeI64(_iter605);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetTargetTxnIdsResponseTupleSchemeFactory implements SchemeFactory {
    public GetTargetTxnIdsResponseTupleScheme getScheme() {
      return new GetTargetTxnIdsResponseTupleScheme();
    }
  }

  private static class GetTargetTxnIdsResponseTupleScheme extends TupleScheme<GetTargetTxnIdsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetTargetTxnIdsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.targetTxnIds.size());
        for (long _iter606 : struct.targetTxnIds)
        {
          oprot.writeI64(_iter606);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetTargetTxnIdsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list607 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.targetTxnIds = new ArrayList<Long>(_list607.size);
        long _elem608;
        for (int _i609 = 0; _i609 < _list607.size; ++_i609)
        {
          _elem608 = iprot.readI64();
          struct.targetTxnIds.add(_elem608);
        }
      }
      struct.setTargetTxnIdsIsSet(true);
    }
  }

}

