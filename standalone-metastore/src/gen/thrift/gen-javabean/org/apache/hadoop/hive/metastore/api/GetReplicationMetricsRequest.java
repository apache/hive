/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetReplicationMetricsRequest implements org.apache.thrift.TBase<GetReplicationMetricsRequest, GetReplicationMetricsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetReplicationMetricsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetReplicationMetricsRequest");

  private static final org.apache.thrift.protocol.TField SCHEDULED_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduledExecutionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("policy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DUMP_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dumpExecutionId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetReplicationMetricsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetReplicationMetricsRequestTupleSchemeFactory());
  }

  private long scheduledExecutionId; // optional
  private String policy; // optional
  private long dumpExecutionId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEDULED_EXECUTION_ID((short)1, "scheduledExecutionId"),
    POLICY((short)2, "policy"),
    DUMP_EXECUTION_ID((short)3, "dumpExecutionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEDULED_EXECUTION_ID
          return SCHEDULED_EXECUTION_ID;
        case 2: // POLICY
          return POLICY;
        case 3: // DUMP_EXECUTION_ID
          return DUMP_EXECUTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCHEDULEDEXECUTIONID_ISSET_ID = 0;
  private static final int __DUMPEXECUTIONID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SCHEDULED_EXECUTION_ID,_Fields.POLICY,_Fields.DUMP_EXECUTION_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEDULED_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("scheduledExecutionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POLICY, new org.apache.thrift.meta_data.FieldMetaData("policy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUMP_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("dumpExecutionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetReplicationMetricsRequest.class, metaDataMap);
  }

  public GetReplicationMetricsRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetReplicationMetricsRequest(GetReplicationMetricsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scheduledExecutionId = other.scheduledExecutionId;
    if (other.isSetPolicy()) {
      this.policy = other.policy;
    }
    this.dumpExecutionId = other.dumpExecutionId;
  }

  public GetReplicationMetricsRequest deepCopy() {
    return new GetReplicationMetricsRequest(this);
  }

  @Override
  public void clear() {
    setScheduledExecutionIdIsSet(false);
    this.scheduledExecutionId = 0;
    this.policy = null;
    setDumpExecutionIdIsSet(false);
    this.dumpExecutionId = 0;
  }

  public long getScheduledExecutionId() {
    return this.scheduledExecutionId;
  }

  public void setScheduledExecutionId(long scheduledExecutionId) {
    this.scheduledExecutionId = scheduledExecutionId;
    setScheduledExecutionIdIsSet(true);
  }

  public void unsetScheduledExecutionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULEDEXECUTIONID_ISSET_ID);
  }

  /** Returns true if field scheduledExecutionId is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduledExecutionId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULEDEXECUTIONID_ISSET_ID);
  }

  public void setScheduledExecutionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULEDEXECUTIONID_ISSET_ID, value);
  }

  public String getPolicy() {
    return this.policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }

  public void unsetPolicy() {
    this.policy = null;
  }

  /** Returns true if field policy is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicy() {
    return this.policy != null;
  }

  public void setPolicyIsSet(boolean value) {
    if (!value) {
      this.policy = null;
    }
  }

  public long getDumpExecutionId() {
    return this.dumpExecutionId;
  }

  public void setDumpExecutionId(long dumpExecutionId) {
    this.dumpExecutionId = dumpExecutionId;
    setDumpExecutionIdIsSet(true);
  }

  public void unsetDumpExecutionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUMPEXECUTIONID_ISSET_ID);
  }

  /** Returns true if field dumpExecutionId is set (has been assigned a value) and false otherwise */
  public boolean isSetDumpExecutionId() {
    return EncodingUtils.testBit(__isset_bitfield, __DUMPEXECUTIONID_ISSET_ID);
  }

  public void setDumpExecutionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUMPEXECUTIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEDULED_EXECUTION_ID:
      if (value == null) {
        unsetScheduledExecutionId();
      } else {
        setScheduledExecutionId((Long)value);
      }
      break;

    case POLICY:
      if (value == null) {
        unsetPolicy();
      } else {
        setPolicy((String)value);
      }
      break;

    case DUMP_EXECUTION_ID:
      if (value == null) {
        unsetDumpExecutionId();
      } else {
        setDumpExecutionId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEDULED_EXECUTION_ID:
      return getScheduledExecutionId();

    case POLICY:
      return getPolicy();

    case DUMP_EXECUTION_ID:
      return getDumpExecutionId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEDULED_EXECUTION_ID:
      return isSetScheduledExecutionId();
    case POLICY:
      return isSetPolicy();
    case DUMP_EXECUTION_ID:
      return isSetDumpExecutionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetReplicationMetricsRequest)
      return this.equals((GetReplicationMetricsRequest)that);
    return false;
  }

  public boolean equals(GetReplicationMetricsRequest that) {
    if (that == null)
      return false;

    boolean this_present_scheduledExecutionId = true && this.isSetScheduledExecutionId();
    boolean that_present_scheduledExecutionId = true && that.isSetScheduledExecutionId();
    if (this_present_scheduledExecutionId || that_present_scheduledExecutionId) {
      if (!(this_present_scheduledExecutionId && that_present_scheduledExecutionId))
        return false;
      if (this.scheduledExecutionId != that.scheduledExecutionId)
        return false;
    }

    boolean this_present_policy = true && this.isSetPolicy();
    boolean that_present_policy = true && that.isSetPolicy();
    if (this_present_policy || that_present_policy) {
      if (!(this_present_policy && that_present_policy))
        return false;
      if (!this.policy.equals(that.policy))
        return false;
    }

    boolean this_present_dumpExecutionId = true && this.isSetDumpExecutionId();
    boolean that_present_dumpExecutionId = true && that.isSetDumpExecutionId();
    if (this_present_dumpExecutionId || that_present_dumpExecutionId) {
      if (!(this_present_dumpExecutionId && that_present_dumpExecutionId))
        return false;
      if (this.dumpExecutionId != that.dumpExecutionId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_scheduledExecutionId = true && (isSetScheduledExecutionId());
    list.add(present_scheduledExecutionId);
    if (present_scheduledExecutionId)
      list.add(scheduledExecutionId);

    boolean present_policy = true && (isSetPolicy());
    list.add(present_policy);
    if (present_policy)
      list.add(policy);

    boolean present_dumpExecutionId = true && (isSetDumpExecutionId());
    list.add(present_dumpExecutionId);
    if (present_dumpExecutionId)
      list.add(dumpExecutionId);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetReplicationMetricsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScheduledExecutionId()).compareTo(other.isSetScheduledExecutionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduledExecutionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduledExecutionId, other.scheduledExecutionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicy()).compareTo(other.isSetPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policy, other.policy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDumpExecutionId()).compareTo(other.isSetDumpExecutionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDumpExecutionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dumpExecutionId, other.dumpExecutionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetReplicationMetricsRequest(");
    boolean first = true;

    if (isSetScheduledExecutionId()) {
      sb.append("scheduledExecutionId:");
      sb.append(this.scheduledExecutionId);
      first = false;
    }
    if (isSetPolicy()) {
      if (!first) sb.append(", ");
      sb.append("policy:");
      if (this.policy == null) {
        sb.append("null");
      } else {
        sb.append(this.policy);
      }
      first = false;
    }
    if (isSetDumpExecutionId()) {
      if (!first) sb.append(", ");
      sb.append("dumpExecutionId:");
      sb.append(this.dumpExecutionId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetReplicationMetricsRequestStandardSchemeFactory implements SchemeFactory {
    public GetReplicationMetricsRequestStandardScheme getScheme() {
      return new GetReplicationMetricsRequestStandardScheme();
    }
  }

  private static class GetReplicationMetricsRequestStandardScheme extends StandardScheme<GetReplicationMetricsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetReplicationMetricsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEDULED_EXECUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scheduledExecutionId = iprot.readI64();
              struct.setScheduledExecutionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policy = iprot.readString();
              struct.setPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DUMP_EXECUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dumpExecutionId = iprot.readI64();
              struct.setDumpExecutionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetReplicationMetricsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetScheduledExecutionId()) {
        oprot.writeFieldBegin(SCHEDULED_EXECUTION_ID_FIELD_DESC);
        oprot.writeI64(struct.scheduledExecutionId);
        oprot.writeFieldEnd();
      }
      if (struct.policy != null) {
        if (struct.isSetPolicy()) {
          oprot.writeFieldBegin(POLICY_FIELD_DESC);
          oprot.writeString(struct.policy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDumpExecutionId()) {
        oprot.writeFieldBegin(DUMP_EXECUTION_ID_FIELD_DESC);
        oprot.writeI64(struct.dumpExecutionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetReplicationMetricsRequestTupleSchemeFactory implements SchemeFactory {
    public GetReplicationMetricsRequestTupleScheme getScheme() {
      return new GetReplicationMetricsRequestTupleScheme();
    }
  }

  private static class GetReplicationMetricsRequestTupleScheme extends TupleScheme<GetReplicationMetricsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetReplicationMetricsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetScheduledExecutionId()) {
        optionals.set(0);
      }
      if (struct.isSetPolicy()) {
        optionals.set(1);
      }
      if (struct.isSetDumpExecutionId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetScheduledExecutionId()) {
        oprot.writeI64(struct.scheduledExecutionId);
      }
      if (struct.isSetPolicy()) {
        oprot.writeString(struct.policy);
      }
      if (struct.isSetDumpExecutionId()) {
        oprot.writeI64(struct.dumpExecutionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetReplicationMetricsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.scheduledExecutionId = iprot.readI64();
        struct.setScheduledExecutionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.policy = iprot.readString();
        struct.setPolicyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dumpExecutionId = iprot.readI64();
        struct.setDumpExecutionIdIsSet(true);
      }
    }
  }

}

