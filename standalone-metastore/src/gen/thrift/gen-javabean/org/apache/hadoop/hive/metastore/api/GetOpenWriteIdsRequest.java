/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetOpenWriteIdsRequest implements org.apache.thrift.TBase<GetOpenWriteIdsRequest, GetOpenWriteIdsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetOpenWriteIdsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetOpenWriteIdsRequest");

  private static final org.apache.thrift.protocol.TField CURRENT_TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentTxnId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetOpenWriteIdsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetOpenWriteIdsRequestTupleSchemeFactory());
  }

  private long currentTxnId; // required
  private List<String> tableNames; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENT_TXN_ID((short)1, "currentTxnId"),
    TABLE_NAMES((short)2, "tableNames");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_TXN_ID
          return CURRENT_TXN_ID;
        case 2: // TABLE_NAMES
          return TABLE_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENTTXNID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("currentTxnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetOpenWriteIdsRequest.class, metaDataMap);
  }

  public GetOpenWriteIdsRequest() {
  }

  public GetOpenWriteIdsRequest(
    long currentTxnId,
    List<String> tableNames)
  {
    this();
    this.currentTxnId = currentTxnId;
    setCurrentTxnIdIsSet(true);
    this.tableNames = tableNames;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetOpenWriteIdsRequest(GetOpenWriteIdsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.currentTxnId = other.currentTxnId;
    if (other.isSetTableNames()) {
      List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
      this.tableNames = __this__tableNames;
    }
  }

  public GetOpenWriteIdsRequest deepCopy() {
    return new GetOpenWriteIdsRequest(this);
  }

  @Override
  public void clear() {
    setCurrentTxnIdIsSet(false);
    this.currentTxnId = 0;
    this.tableNames = null;
  }

  public long getCurrentTxnId() {
    return this.currentTxnId;
  }

  public void setCurrentTxnId(long currentTxnId) {
    this.currentTxnId = currentTxnId;
    setCurrentTxnIdIsSet(true);
  }

  public void unsetCurrentTxnId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTTXNID_ISSET_ID);
  }

  /** Returns true if field currentTxnId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentTxnId() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTTXNID_ISSET_ID);
  }

  public void setCurrentTxnIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTTXNID_ISSET_ID, value);
  }

  public int getTableNamesSize() {
    return (this.tableNames == null) ? 0 : this.tableNames.size();
  }

  public java.util.Iterator<String> getTableNamesIterator() {
    return (this.tableNames == null) ? null : this.tableNames.iterator();
  }

  public void addToTableNames(String elem) {
    if (this.tableNames == null) {
      this.tableNames = new ArrayList<String>();
    }
    this.tableNames.add(elem);
  }

  public List<String> getTableNames() {
    return this.tableNames;
  }

  public void setTableNames(List<String> tableNames) {
    this.tableNames = tableNames;
  }

  public void unsetTableNames() {
    this.tableNames = null;
  }

  /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
  public boolean isSetTableNames() {
    return this.tableNames != null;
  }

  public void setTableNamesIsSet(boolean value) {
    if (!value) {
      this.tableNames = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT_TXN_ID:
      if (value == null) {
        unsetCurrentTxnId();
      } else {
        setCurrentTxnId((Long)value);
      }
      break;

    case TABLE_NAMES:
      if (value == null) {
        unsetTableNames();
      } else {
        setTableNames((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_TXN_ID:
      return getCurrentTxnId();

    case TABLE_NAMES:
      return getTableNames();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_TXN_ID:
      return isSetCurrentTxnId();
    case TABLE_NAMES:
      return isSetTableNames();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetOpenWriteIdsRequest)
      return this.equals((GetOpenWriteIdsRequest)that);
    return false;
  }

  public boolean equals(GetOpenWriteIdsRequest that) {
    if (that == null)
      return false;

    boolean this_present_currentTxnId = true;
    boolean that_present_currentTxnId = true;
    if (this_present_currentTxnId || that_present_currentTxnId) {
      if (!(this_present_currentTxnId && that_present_currentTxnId))
        return false;
      if (this.currentTxnId != that.currentTxnId)
        return false;
    }

    boolean this_present_tableNames = true && this.isSetTableNames();
    boolean that_present_tableNames = true && that.isSetTableNames();
    if (this_present_tableNames || that_present_tableNames) {
      if (!(this_present_tableNames && that_present_tableNames))
        return false;
      if (!this.tableNames.equals(that.tableNames))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_currentTxnId = true;
    list.add(present_currentTxnId);
    if (present_currentTxnId)
      list.add(currentTxnId);

    boolean present_tableNames = true && (isSetTableNames());
    list.add(present_tableNames);
    if (present_tableNames)
      list.add(tableNames);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetOpenWriteIdsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrentTxnId()).compareTo(other.isSetCurrentTxnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTxnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentTxnId, other.currentTxnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetOpenWriteIdsRequest(");
    boolean first = true;

    sb.append("currentTxnId:");
    sb.append(this.currentTxnId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableNames:");
    if (this.tableNames == null) {
      sb.append("null");
    } else {
      sb.append(this.tableNames);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetCurrentTxnId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'currentTxnId' is unset! Struct:" + toString());
    }

    if (!isSetTableNames()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableNames' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetOpenWriteIdsRequestStandardSchemeFactory implements SchemeFactory {
    public GetOpenWriteIdsRequestStandardScheme getScheme() {
      return new GetOpenWriteIdsRequestStandardScheme();
    }
  }

  private static class GetOpenWriteIdsRequestStandardScheme extends StandardScheme<GetOpenWriteIdsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetOpenWriteIdsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT_TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentTxnId = iprot.readI64();
              struct.setCurrentTxnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list556 = iprot.readListBegin();
                struct.tableNames = new ArrayList<String>(_list556.size);
                String _elem557;
                for (int _i558 = 0; _i558 < _list556.size; ++_i558)
                {
                  _elem557 = iprot.readString();
                  struct.tableNames.add(_elem557);
                }
                iprot.readListEnd();
              }
              struct.setTableNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetOpenWriteIdsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CURRENT_TXN_ID_FIELD_DESC);
      oprot.writeI64(struct.currentTxnId);
      oprot.writeFieldEnd();
      if (struct.tableNames != null) {
        oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
          for (String _iter559 : struct.tableNames)
          {
            oprot.writeString(_iter559);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetOpenWriteIdsRequestTupleSchemeFactory implements SchemeFactory {
    public GetOpenWriteIdsRequestTupleScheme getScheme() {
      return new GetOpenWriteIdsRequestTupleScheme();
    }
  }

  private static class GetOpenWriteIdsRequestTupleScheme extends TupleScheme<GetOpenWriteIdsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetOpenWriteIdsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.currentTxnId);
      {
        oprot.writeI32(struct.tableNames.size());
        for (String _iter560 : struct.tableNames)
        {
          oprot.writeString(_iter560);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetOpenWriteIdsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.currentTxnId = iprot.readI64();
      struct.setCurrentTxnIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list561 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.tableNames = new ArrayList<String>(_list561.size);
        String _elem562;
        for (int _i563 = 0; _i563 < _list561.size; ++_i563)
        {
          _elem562 = iprot.readString();
          struct.tableNames.add(_elem562);
        }
      }
      struct.setTableNamesIsSet(true);
    }
  }

}

