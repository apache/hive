/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class WMNullablePool implements org.apache.thrift.TBase<WMNullablePool, WMNullablePool._Fields>, java.io.Serializable, Cloneable, Comparable<WMNullablePool> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WMNullablePool");

  private static final org.apache.thrift.protocol.TField RESOURCE_PLAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourcePlanName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POOL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("poolPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALLOC_FRACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("allocFraction", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_PARALLELISM_FIELD_DESC = new org.apache.thrift.protocol.TField("queryParallelism", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SCHEDULING_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulingPolicy", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_SET_SCHEDULING_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("isSetSchedulingPolicy", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WMNullablePoolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WMNullablePoolTupleSchemeFactory());
  }

  private String resourcePlanName; // required
  private String poolPath; // required
  private double allocFraction; // optional
  private int queryParallelism; // optional
  private String schedulingPolicy; // optional
  private boolean isSetSchedulingPolicy; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE_PLAN_NAME((short)1, "resourcePlanName"),
    POOL_PATH((short)2, "poolPath"),
    ALLOC_FRACTION((short)3, "allocFraction"),
    QUERY_PARALLELISM((short)4, "queryParallelism"),
    SCHEDULING_POLICY((short)5, "schedulingPolicy"),
    IS_SET_SCHEDULING_POLICY((short)6, "isSetSchedulingPolicy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE_PLAN_NAME
          return RESOURCE_PLAN_NAME;
        case 2: // POOL_PATH
          return POOL_PATH;
        case 3: // ALLOC_FRACTION
          return ALLOC_FRACTION;
        case 4: // QUERY_PARALLELISM
          return QUERY_PARALLELISM;
        case 5: // SCHEDULING_POLICY
          return SCHEDULING_POLICY;
        case 6: // IS_SET_SCHEDULING_POLICY
          return IS_SET_SCHEDULING_POLICY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALLOCFRACTION_ISSET_ID = 0;
  private static final int __QUERYPARALLELISM_ISSET_ID = 1;
  private static final int __ISSETSCHEDULINGPOLICY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ALLOC_FRACTION,_Fields.QUERY_PARALLELISM,_Fields.SCHEDULING_POLICY,_Fields.IS_SET_SCHEDULING_POLICY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE_PLAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourcePlanName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_PATH, new org.apache.thrift.meta_data.FieldMetaData("poolPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOC_FRACTION, new org.apache.thrift.meta_data.FieldMetaData("allocFraction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUERY_PARALLELISM, new org.apache.thrift.meta_data.FieldMetaData("queryParallelism", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEDULING_POLICY, new org.apache.thrift.meta_data.FieldMetaData("schedulingPolicy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SET_SCHEDULING_POLICY, new org.apache.thrift.meta_data.FieldMetaData("isSetSchedulingPolicy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WMNullablePool.class, metaDataMap);
  }

  public WMNullablePool() {
  }

  public WMNullablePool(
    String resourcePlanName,
    String poolPath)
  {
    this();
    this.resourcePlanName = resourcePlanName;
    this.poolPath = poolPath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WMNullablePool(WMNullablePool other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResourcePlanName()) {
      this.resourcePlanName = other.resourcePlanName;
    }
    if (other.isSetPoolPath()) {
      this.poolPath = other.poolPath;
    }
    this.allocFraction = other.allocFraction;
    this.queryParallelism = other.queryParallelism;
    if (other.isSetSchedulingPolicy()) {
      this.schedulingPolicy = other.schedulingPolicy;
    }
    this.isSetSchedulingPolicy = other.isSetSchedulingPolicy;
  }

  public WMNullablePool deepCopy() {
    return new WMNullablePool(this);
  }

  @Override
  public void clear() {
    this.resourcePlanName = null;
    this.poolPath = null;
    setAllocFractionIsSet(false);
    this.allocFraction = 0.0;
    setQueryParallelismIsSet(false);
    this.queryParallelism = 0;
    this.schedulingPolicy = null;
    setIsSetSchedulingPolicyIsSet(false);
    this.isSetSchedulingPolicy = false;
  }

  public String getResourcePlanName() {
    return this.resourcePlanName;
  }

  public void setResourcePlanName(String resourcePlanName) {
    this.resourcePlanName = resourcePlanName;
  }

  public void unsetResourcePlanName() {
    this.resourcePlanName = null;
  }

  /** Returns true if field resourcePlanName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourcePlanName() {
    return this.resourcePlanName != null;
  }

  public void setResourcePlanNameIsSet(boolean value) {
    if (!value) {
      this.resourcePlanName = null;
    }
  }

  public String getPoolPath() {
    return this.poolPath;
  }

  public void setPoolPath(String poolPath) {
    this.poolPath = poolPath;
  }

  public void unsetPoolPath() {
    this.poolPath = null;
  }

  /** Returns true if field poolPath is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolPath() {
    return this.poolPath != null;
  }

  public void setPoolPathIsSet(boolean value) {
    if (!value) {
      this.poolPath = null;
    }
  }

  public double getAllocFraction() {
    return this.allocFraction;
  }

  public void setAllocFraction(double allocFraction) {
    this.allocFraction = allocFraction;
    setAllocFractionIsSet(true);
  }

  public void unsetAllocFraction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOCFRACTION_ISSET_ID);
  }

  /** Returns true if field allocFraction is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocFraction() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOCFRACTION_ISSET_ID);
  }

  public void setAllocFractionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOCFRACTION_ISSET_ID, value);
  }

  public int getQueryParallelism() {
    return this.queryParallelism;
  }

  public void setQueryParallelism(int queryParallelism) {
    this.queryParallelism = queryParallelism;
    setQueryParallelismIsSet(true);
  }

  public void unsetQueryParallelism() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYPARALLELISM_ISSET_ID);
  }

  /** Returns true if field queryParallelism is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryParallelism() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYPARALLELISM_ISSET_ID);
  }

  public void setQueryParallelismIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYPARALLELISM_ISSET_ID, value);
  }

  public String getSchedulingPolicy() {
    return this.schedulingPolicy;
  }

  public void setSchedulingPolicy(String schedulingPolicy) {
    this.schedulingPolicy = schedulingPolicy;
  }

  public void unsetSchedulingPolicy() {
    this.schedulingPolicy = null;
  }

  /** Returns true if field schedulingPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedulingPolicy() {
    return this.schedulingPolicy != null;
  }

  public void setSchedulingPolicyIsSet(boolean value) {
    if (!value) {
      this.schedulingPolicy = null;
    }
  }

  public boolean isIsSetSchedulingPolicy() {
    return this.isSetSchedulingPolicy;
  }

  public void setIsSetSchedulingPolicy(boolean isSetSchedulingPolicy) {
    this.isSetSchedulingPolicy = isSetSchedulingPolicy;
    setIsSetSchedulingPolicyIsSet(true);
  }

  public void unsetIsSetSchedulingPolicy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSETSCHEDULINGPOLICY_ISSET_ID);
  }

  /** Returns true if field isSetSchedulingPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSetSchedulingPolicy() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSETSCHEDULINGPOLICY_ISSET_ID);
  }

  public void setIsSetSchedulingPolicyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSETSCHEDULINGPOLICY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOURCE_PLAN_NAME:
      if (value == null) {
        unsetResourcePlanName();
      } else {
        setResourcePlanName((String)value);
      }
      break;

    case POOL_PATH:
      if (value == null) {
        unsetPoolPath();
      } else {
        setPoolPath((String)value);
      }
      break;

    case ALLOC_FRACTION:
      if (value == null) {
        unsetAllocFraction();
      } else {
        setAllocFraction((Double)value);
      }
      break;

    case QUERY_PARALLELISM:
      if (value == null) {
        unsetQueryParallelism();
      } else {
        setQueryParallelism((Integer)value);
      }
      break;

    case SCHEDULING_POLICY:
      if (value == null) {
        unsetSchedulingPolicy();
      } else {
        setSchedulingPolicy((String)value);
      }
      break;

    case IS_SET_SCHEDULING_POLICY:
      if (value == null) {
        unsetIsSetSchedulingPolicy();
      } else {
        setIsSetSchedulingPolicy((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE_PLAN_NAME:
      return getResourcePlanName();

    case POOL_PATH:
      return getPoolPath();

    case ALLOC_FRACTION:
      return getAllocFraction();

    case QUERY_PARALLELISM:
      return getQueryParallelism();

    case SCHEDULING_POLICY:
      return getSchedulingPolicy();

    case IS_SET_SCHEDULING_POLICY:
      return isIsSetSchedulingPolicy();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE_PLAN_NAME:
      return isSetResourcePlanName();
    case POOL_PATH:
      return isSetPoolPath();
    case ALLOC_FRACTION:
      return isSetAllocFraction();
    case QUERY_PARALLELISM:
      return isSetQueryParallelism();
    case SCHEDULING_POLICY:
      return isSetSchedulingPolicy();
    case IS_SET_SCHEDULING_POLICY:
      return isSetIsSetSchedulingPolicy();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WMNullablePool)
      return this.equals((WMNullablePool)that);
    return false;
  }

  public boolean equals(WMNullablePool that) {
    if (that == null)
      return false;

    boolean this_present_resourcePlanName = true && this.isSetResourcePlanName();
    boolean that_present_resourcePlanName = true && that.isSetResourcePlanName();
    if (this_present_resourcePlanName || that_present_resourcePlanName) {
      if (!(this_present_resourcePlanName && that_present_resourcePlanName))
        return false;
      if (!this.resourcePlanName.equals(that.resourcePlanName))
        return false;
    }

    boolean this_present_poolPath = true && this.isSetPoolPath();
    boolean that_present_poolPath = true && that.isSetPoolPath();
    if (this_present_poolPath || that_present_poolPath) {
      if (!(this_present_poolPath && that_present_poolPath))
        return false;
      if (!this.poolPath.equals(that.poolPath))
        return false;
    }

    boolean this_present_allocFraction = true && this.isSetAllocFraction();
    boolean that_present_allocFraction = true && that.isSetAllocFraction();
    if (this_present_allocFraction || that_present_allocFraction) {
      if (!(this_present_allocFraction && that_present_allocFraction))
        return false;
      if (this.allocFraction != that.allocFraction)
        return false;
    }

    boolean this_present_queryParallelism = true && this.isSetQueryParallelism();
    boolean that_present_queryParallelism = true && that.isSetQueryParallelism();
    if (this_present_queryParallelism || that_present_queryParallelism) {
      if (!(this_present_queryParallelism && that_present_queryParallelism))
        return false;
      if (this.queryParallelism != that.queryParallelism)
        return false;
    }

    boolean this_present_schedulingPolicy = true && this.isSetSchedulingPolicy();
    boolean that_present_schedulingPolicy = true && that.isSetSchedulingPolicy();
    if (this_present_schedulingPolicy || that_present_schedulingPolicy) {
      if (!(this_present_schedulingPolicy && that_present_schedulingPolicy))
        return false;
      if (!this.schedulingPolicy.equals(that.schedulingPolicy))
        return false;
    }

    boolean this_present_isSetSchedulingPolicy = true && this.isSetIsSetSchedulingPolicy();
    boolean that_present_isSetSchedulingPolicy = true && that.isSetIsSetSchedulingPolicy();
    if (this_present_isSetSchedulingPolicy || that_present_isSetSchedulingPolicy) {
      if (!(this_present_isSetSchedulingPolicy && that_present_isSetSchedulingPolicy))
        return false;
      if (this.isSetSchedulingPolicy != that.isSetSchedulingPolicy)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resourcePlanName = true && (isSetResourcePlanName());
    list.add(present_resourcePlanName);
    if (present_resourcePlanName)
      list.add(resourcePlanName);

    boolean present_poolPath = true && (isSetPoolPath());
    list.add(present_poolPath);
    if (present_poolPath)
      list.add(poolPath);

    boolean present_allocFraction = true && (isSetAllocFraction());
    list.add(present_allocFraction);
    if (present_allocFraction)
      list.add(allocFraction);

    boolean present_queryParallelism = true && (isSetQueryParallelism());
    list.add(present_queryParallelism);
    if (present_queryParallelism)
      list.add(queryParallelism);

    boolean present_schedulingPolicy = true && (isSetSchedulingPolicy());
    list.add(present_schedulingPolicy);
    if (present_schedulingPolicy)
      list.add(schedulingPolicy);

    boolean present_isSetSchedulingPolicy = true && (isSetIsSetSchedulingPolicy());
    list.add(present_isSetSchedulingPolicy);
    if (present_isSetSchedulingPolicy)
      list.add(isSetSchedulingPolicy);

    return list.hashCode();
  }

  @Override
  public int compareTo(WMNullablePool other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResourcePlanName()).compareTo(other.isSetResourcePlanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourcePlanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourcePlanName, other.resourcePlanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolPath()).compareTo(other.isSetPoolPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolPath, other.poolPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllocFraction()).compareTo(other.isSetAllocFraction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocFraction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocFraction, other.allocFraction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryParallelism()).compareTo(other.isSetQueryParallelism());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryParallelism()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryParallelism, other.queryParallelism);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedulingPolicy()).compareTo(other.isSetSchedulingPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedulingPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulingPolicy, other.schedulingPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSetSchedulingPolicy()).compareTo(other.isSetIsSetSchedulingPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSetSchedulingPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSetSchedulingPolicy, other.isSetSchedulingPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WMNullablePool(");
    boolean first = true;

    sb.append("resourcePlanName:");
    if (this.resourcePlanName == null) {
      sb.append("null");
    } else {
      sb.append(this.resourcePlanName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("poolPath:");
    if (this.poolPath == null) {
      sb.append("null");
    } else {
      sb.append(this.poolPath);
    }
    first = false;
    if (isSetAllocFraction()) {
      if (!first) sb.append(", ");
      sb.append("allocFraction:");
      sb.append(this.allocFraction);
      first = false;
    }
    if (isSetQueryParallelism()) {
      if (!first) sb.append(", ");
      sb.append("queryParallelism:");
      sb.append(this.queryParallelism);
      first = false;
    }
    if (isSetSchedulingPolicy()) {
      if (!first) sb.append(", ");
      sb.append("schedulingPolicy:");
      if (this.schedulingPolicy == null) {
        sb.append("null");
      } else {
        sb.append(this.schedulingPolicy);
      }
      first = false;
    }
    if (isSetIsSetSchedulingPolicy()) {
      if (!first) sb.append(", ");
      sb.append("isSetSchedulingPolicy:");
      sb.append(this.isSetSchedulingPolicy);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetResourcePlanName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourcePlanName' is unset! Struct:" + toString());
    }

    if (!isSetPoolPath()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'poolPath' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WMNullablePoolStandardSchemeFactory implements SchemeFactory {
    public WMNullablePoolStandardScheme getScheme() {
      return new WMNullablePoolStandardScheme();
    }
  }

  private static class WMNullablePoolStandardScheme extends StandardScheme<WMNullablePool> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WMNullablePool struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_PLAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourcePlanName = iprot.readString();
              struct.setResourcePlanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POOL_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poolPath = iprot.readString();
              struct.setPoolPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALLOC_FRACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.allocFraction = iprot.readDouble();
              struct.setAllocFractionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_PARALLELISM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryParallelism = iprot.readI32();
              struct.setQueryParallelismIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCHEDULING_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schedulingPolicy = iprot.readString();
              struct.setSchedulingPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_SET_SCHEDULING_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSetSchedulingPolicy = iprot.readBool();
              struct.setIsSetSchedulingPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WMNullablePool struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resourcePlanName != null) {
        oprot.writeFieldBegin(RESOURCE_PLAN_NAME_FIELD_DESC);
        oprot.writeString(struct.resourcePlanName);
        oprot.writeFieldEnd();
      }
      if (struct.poolPath != null) {
        oprot.writeFieldBegin(POOL_PATH_FIELD_DESC);
        oprot.writeString(struct.poolPath);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllocFraction()) {
        oprot.writeFieldBegin(ALLOC_FRACTION_FIELD_DESC);
        oprot.writeDouble(struct.allocFraction);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryParallelism()) {
        oprot.writeFieldBegin(QUERY_PARALLELISM_FIELD_DESC);
        oprot.writeI32(struct.queryParallelism);
        oprot.writeFieldEnd();
      }
      if (struct.schedulingPolicy != null) {
        if (struct.isSetSchedulingPolicy()) {
          oprot.writeFieldBegin(SCHEDULING_POLICY_FIELD_DESC);
          oprot.writeString(struct.schedulingPolicy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSetSchedulingPolicy()) {
        oprot.writeFieldBegin(IS_SET_SCHEDULING_POLICY_FIELD_DESC);
        oprot.writeBool(struct.isSetSchedulingPolicy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WMNullablePoolTupleSchemeFactory implements SchemeFactory {
    public WMNullablePoolTupleScheme getScheme() {
      return new WMNullablePoolTupleScheme();
    }
  }

  private static class WMNullablePoolTupleScheme extends TupleScheme<WMNullablePool> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WMNullablePool struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.resourcePlanName);
      oprot.writeString(struct.poolPath);
      BitSet optionals = new BitSet();
      if (struct.isSetAllocFraction()) {
        optionals.set(0);
      }
      if (struct.isSetQueryParallelism()) {
        optionals.set(1);
      }
      if (struct.isSetSchedulingPolicy()) {
        optionals.set(2);
      }
      if (struct.isSetIsSetSchedulingPolicy()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAllocFraction()) {
        oprot.writeDouble(struct.allocFraction);
      }
      if (struct.isSetQueryParallelism()) {
        oprot.writeI32(struct.queryParallelism);
      }
      if (struct.isSetSchedulingPolicy()) {
        oprot.writeString(struct.schedulingPolicy);
      }
      if (struct.isSetIsSetSchedulingPolicy()) {
        oprot.writeBool(struct.isSetSchedulingPolicy);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WMNullablePool struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.resourcePlanName = iprot.readString();
      struct.setResourcePlanNameIsSet(true);
      struct.poolPath = iprot.readString();
      struct.setPoolPathIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.allocFraction = iprot.readDouble();
        struct.setAllocFractionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queryParallelism = iprot.readI32();
        struct.setQueryParallelismIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schedulingPolicy = iprot.readString();
        struct.setSchedulingPolicyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isSetSchedulingPolicy = iprot.readBool();
        struct.setIsSetSchedulingPolicyIsSet(true);
      }
    }
  }

}

