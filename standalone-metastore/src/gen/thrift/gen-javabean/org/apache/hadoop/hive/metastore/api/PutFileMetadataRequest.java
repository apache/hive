/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class PutFileMetadataRequest implements org.apache.thrift.TBase<PutFileMetadataRequest, PutFileMetadataRequest._Fields>, java.io.Serializable, Cloneable, Comparable<PutFileMetadataRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PutFileMetadataRequest");

  private static final org.apache.thrift.protocol.TField FILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PutFileMetadataRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PutFileMetadataRequestTupleSchemeFactory());
  }

  private List<Long> fileIds; // required
  private List<ByteBuffer> metadata; // required
  private FileMetadataExprType type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_IDS((short)1, "fileIds"),
    METADATA((short)2, "metadata"),
    /**
     * 
     * @see FileMetadataExprType
     */
    TYPE((short)3, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_IDS
          return FILE_IDS;
        case 2: // METADATA
          return METADATA;
        case 3: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("fileIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileMetadataExprType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PutFileMetadataRequest.class, metaDataMap);
  }

  public PutFileMetadataRequest() {
  }

  public PutFileMetadataRequest(
    List<Long> fileIds,
    List<ByteBuffer> metadata)
  {
    this();
    this.fileIds = fileIds;
    this.metadata = metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PutFileMetadataRequest(PutFileMetadataRequest other) {
    if (other.isSetFileIds()) {
      List<Long> __this__fileIds = new ArrayList<Long>(other.fileIds);
      this.fileIds = __this__fileIds;
    }
    if (other.isSetMetadata()) {
      List<ByteBuffer> __this__metadata = new ArrayList<ByteBuffer>(other.metadata);
      this.metadata = __this__metadata;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public PutFileMetadataRequest deepCopy() {
    return new PutFileMetadataRequest(this);
  }

  @Override
  public void clear() {
    this.fileIds = null;
    this.metadata = null;
    this.type = null;
  }

  public int getFileIdsSize() {
    return (this.fileIds == null) ? 0 : this.fileIds.size();
  }

  public java.util.Iterator<Long> getFileIdsIterator() {
    return (this.fileIds == null) ? null : this.fileIds.iterator();
  }

  public void addToFileIds(long elem) {
    if (this.fileIds == null) {
      this.fileIds = new ArrayList<Long>();
    }
    this.fileIds.add(elem);
  }

  public List<Long> getFileIds() {
    return this.fileIds;
  }

  public void setFileIds(List<Long> fileIds) {
    this.fileIds = fileIds;
  }

  public void unsetFileIds() {
    this.fileIds = null;
  }

  /** Returns true if field fileIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFileIds() {
    return this.fileIds != null;
  }

  public void setFileIdsIsSet(boolean value) {
    if (!value) {
      this.fileIds = null;
    }
  }

  public int getMetadataSize() {
    return (this.metadata == null) ? 0 : this.metadata.size();
  }

  public java.util.Iterator<ByteBuffer> getMetadataIterator() {
    return (this.metadata == null) ? null : this.metadata.iterator();
  }

  public void addToMetadata(ByteBuffer elem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<ByteBuffer>();
    }
    this.metadata.add(elem);
  }

  public List<ByteBuffer> getMetadata() {
    return this.metadata;
  }

  public void setMetadata(List<ByteBuffer> metadata) {
    this.metadata = metadata;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  /**
   * 
   * @see FileMetadataExprType
   */
  public FileMetadataExprType getType() {
    return this.type;
  }

  /**
   * 
   * @see FileMetadataExprType
   */
  public void setType(FileMetadataExprType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_IDS:
      if (value == null) {
        unsetFileIds();
      } else {
        setFileIds((List<Long>)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((List<ByteBuffer>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((FileMetadataExprType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_IDS:
      return getFileIds();

    case METADATA:
      return getMetadata();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_IDS:
      return isSetFileIds();
    case METADATA:
      return isSetMetadata();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PutFileMetadataRequest)
      return this.equals((PutFileMetadataRequest)that);
    return false;
  }

  public boolean equals(PutFileMetadataRequest that) {
    if (that == null)
      return false;

    boolean this_present_fileIds = true && this.isSetFileIds();
    boolean that_present_fileIds = true && that.isSetFileIds();
    if (this_present_fileIds || that_present_fileIds) {
      if (!(this_present_fileIds && that_present_fileIds))
        return false;
      if (!this.fileIds.equals(that.fileIds))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fileIds = true && (isSetFileIds());
    list.add(present_fileIds);
    if (present_fileIds)
      list.add(fileIds);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(PutFileMetadataRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFileIds()).compareTo(other.isSetFileIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileIds, other.fileIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PutFileMetadataRequest(");
    boolean first = true;

    sb.append("fileIds:");
    if (this.fileIds == null) {
      sb.append("null");
    } else {
      sb.append(this.fileIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.metadata, sb);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetFileIds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileIds' is unset! Struct:" + toString());
    }

    if (!isSetMetadata()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PutFileMetadataRequestStandardSchemeFactory implements SchemeFactory {
    public PutFileMetadataRequestStandardScheme getScheme() {
      return new PutFileMetadataRequestStandardScheme();
    }
  }

  private static class PutFileMetadataRequestStandardScheme extends StandardScheme<PutFileMetadataRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PutFileMetadataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
<<<<<<< HEAD
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
                struct.fileIds = new ArrayList<Long>(_list760.size);
                long _elem761;
                for (int _i762 = 0; _i762 < _list760.size; ++_i762)
                {
                  _elem761 = iprot.readI64();
                  struct.fileIds.add(_elem761);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list752 = iprot.readListBegin();
                struct.fileIds = new ArrayList<Long>(_list752.size);
                long _elem753;
                for (int _i754 = 0; _i754 < _list752.size; ++_i754)
                {
                  _elem753 = iprot.readI64();
                  struct.fileIds.add(_elem753);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
                struct.fileIds = new ArrayList<Long>(_list736.size);
                long _elem737;
                for (int _i738 = 0; _i738 < _list736.size; ++_i738)
                {
                  _elem737 = iprot.readI64();
                  struct.fileIds.add(_elem737);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
                org.apache.thrift.protocol.TList _list754 = iprot.readListBegin();
                struct.fileIds = new ArrayList<Long>(_list754.size);
                long _elem755;
                for (int _i756 = 0; _i756 < _list754.size; ++_i756)
                {
                  _elem755 = iprot.readI64();
                  struct.fileIds.add(_elem755);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
                org.apache.thrift.protocol.TList _list738 = iprot.readListBegin();
                struct.fileIds = new ArrayList<Long>(_list738.size);
                long _elem739;
                for (int _i740 = 0; _i740 < _list738.size; ++_i740)
                {
                  _elem739 = iprot.readI64();
                  struct.fileIds.add(_elem739);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
                }
                iprot.readListEnd();
              }
              struct.setFileIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
<<<<<<< HEAD
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list763 = iprot.readListBegin();
                struct.metadata = new ArrayList<ByteBuffer>(_list763.size);
                ByteBuffer _elem764;
                for (int _i765 = 0; _i765 < _list763.size; ++_i765)
                {
                  _elem764 = iprot.readBinary();
                  struct.metadata.add(_elem764);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list755 = iprot.readListBegin();
                struct.metadata = new ArrayList<ByteBuffer>(_list755.size);
                ByteBuffer _elem756;
                for (int _i757 = 0; _i757 < _list755.size; ++_i757)
                {
                  _elem756 = iprot.readBinary();
                  struct.metadata.add(_elem756);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list739 = iprot.readListBegin();
                struct.metadata = new ArrayList<ByteBuffer>(_list739.size);
                ByteBuffer _elem740;
                for (int _i741 = 0; _i741 < _list739.size; ++_i741)
                {
                  _elem740 = iprot.readBinary();
                  struct.metadata.add(_elem740);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
                org.apache.thrift.protocol.TList _list757 = iprot.readListBegin();
                struct.metadata = new ArrayList<ByteBuffer>(_list757.size);
                ByteBuffer _elem758;
                for (int _i759 = 0; _i759 < _list757.size; ++_i759)
                {
                  _elem758 = iprot.readBinary();
                  struct.metadata.add(_elem758);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
                org.apache.thrift.protocol.TList _list741 = iprot.readListBegin();
                struct.metadata = new ArrayList<ByteBuffer>(_list741.size);
                ByteBuffer _elem742;
                for (int _i743 = 0; _i743 < _list741.size; ++_i743)
                {
                  _elem742 = iprot.readBinary();
                  struct.metadata.add(_elem742);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
                }
                iprot.readListEnd();
              }
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.hadoop.hive.metastore.api.FileMetadataExprType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PutFileMetadataRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fileIds != null) {
        oprot.writeFieldBegin(FILE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
          for (long _iter766 : struct.fileIds)
          {
            oprot.writeI64(_iter766);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          for (long _iter758 : struct.fileIds)
          {
            oprot.writeI64(_iter758);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          for (long _iter742 : struct.fileIds)
          {
            oprot.writeI64(_iter742);
=======
          for (long _iter760 : struct.fileIds)
          {
            oprot.writeI64(_iter760);
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
          for (long _iter760 : struct.fileIds)
          {
            oprot.writeI64(_iter760);
=======
          for (long _iter744 : struct.fileIds)
          {
            oprot.writeI64(_iter744);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metadata.size()));
<<<<<<< HEAD
<<<<<<< HEAD
          for (ByteBuffer _iter767 : struct.metadata)
          {
            oprot.writeBinary(_iter767);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          for (ByteBuffer _iter759 : struct.metadata)
          {
            oprot.writeBinary(_iter759);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          for (ByteBuffer _iter743 : struct.metadata)
          {
            oprot.writeBinary(_iter743);
=======
          for (ByteBuffer _iter761 : struct.metadata)
          {
            oprot.writeBinary(_iter761);
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
          for (ByteBuffer _iter761 : struct.metadata)
          {
            oprot.writeBinary(_iter761);
=======
          for (ByteBuffer _iter745 : struct.metadata)
          {
            oprot.writeBinary(_iter745);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PutFileMetadataRequestTupleSchemeFactory implements SchemeFactory {
    public PutFileMetadataRequestTupleScheme getScheme() {
      return new PutFileMetadataRequestTupleScheme();
    }
  }

  private static class PutFileMetadataRequestTupleScheme extends TupleScheme<PutFileMetadataRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PutFileMetadataRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.fileIds.size());
<<<<<<< HEAD
<<<<<<< HEAD
        for (long _iter768 : struct.fileIds)
        {
          oprot.writeI64(_iter768);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        for (long _iter760 : struct.fileIds)
        {
          oprot.writeI64(_iter760);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        for (long _iter744 : struct.fileIds)
        {
          oprot.writeI64(_iter744);
=======
        for (long _iter762 : struct.fileIds)
        {
          oprot.writeI64(_iter762);
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
        for (long _iter762 : struct.fileIds)
        {
          oprot.writeI64(_iter762);
=======
        for (long _iter746 : struct.fileIds)
        {
          oprot.writeI64(_iter746);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
        }
      }
      {
        oprot.writeI32(struct.metadata.size());
<<<<<<< HEAD
<<<<<<< HEAD
        for (ByteBuffer _iter769 : struct.metadata)
        {
          oprot.writeBinary(_iter769);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        for (ByteBuffer _iter761 : struct.metadata)
        {
          oprot.writeBinary(_iter761);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        for (ByteBuffer _iter745 : struct.metadata)
        {
          oprot.writeBinary(_iter745);
=======
        for (ByteBuffer _iter763 : struct.metadata)
        {
          oprot.writeBinary(_iter763);
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
        for (ByteBuffer _iter763 : struct.metadata)
        {
          oprot.writeBinary(_iter763);
=======
        for (ByteBuffer _iter747 : struct.metadata)
        {
          oprot.writeBinary(_iter747);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PutFileMetadataRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
<<<<<<< HEAD
<<<<<<< HEAD
        org.apache.thrift.protocol.TList _list770 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.fileIds = new ArrayList<Long>(_list770.size);
        long _elem771;
        for (int _i772 = 0; _i772 < _list770.size; ++_i772)
        {
          _elem771 = iprot.readI64();
          struct.fileIds.add(_elem771);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        org.apache.thrift.protocol.TList _list762 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.fileIds = new ArrayList<Long>(_list762.size);
        long _elem763;
        for (int _i764 = 0; _i764 < _list762.size; ++_i764)
        {
          _elem763 = iprot.readI64();
          struct.fileIds.add(_elem763);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        org.apache.thrift.protocol.TList _list746 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.fileIds = new ArrayList<Long>(_list746.size);
        long _elem747;
        for (int _i748 = 0; _i748 < _list746.size; ++_i748)
        {
          _elem747 = iprot.readI64();
          struct.fileIds.add(_elem747);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
        org.apache.thrift.protocol.TList _list764 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.fileIds = new ArrayList<Long>(_list764.size);
        long _elem765;
        for (int _i766 = 0; _i766 < _list764.size; ++_i766)
        {
          _elem765 = iprot.readI64();
          struct.fileIds.add(_elem765);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
        org.apache.thrift.protocol.TList _list748 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.fileIds = new ArrayList<Long>(_list748.size);
        long _elem749;
        for (int _i750 = 0; _i750 < _list748.size; ++_i750)
        {
          _elem749 = iprot.readI64();
          struct.fileIds.add(_elem749);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
        }
      }
      struct.setFileIdsIsSet(true);
      {
<<<<<<< HEAD
<<<<<<< HEAD
        org.apache.thrift.protocol.TList _list773 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata = new ArrayList<ByteBuffer>(_list773.size);
        ByteBuffer _elem774;
        for (int _i775 = 0; _i775 < _list773.size; ++_i775)
        {
          _elem774 = iprot.readBinary();
          struct.metadata.add(_elem774);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata = new ArrayList<ByteBuffer>(_list765.size);
        ByteBuffer _elem766;
        for (int _i767 = 0; _i767 < _list765.size; ++_i767)
        {
          _elem766 = iprot.readBinary();
          struct.metadata.add(_elem766);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
        org.apache.thrift.protocol.TList _list749 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata = new ArrayList<ByteBuffer>(_list749.size);
        ByteBuffer _elem750;
        for (int _i751 = 0; _i751 < _list749.size; ++_i751)
        {
          _elem750 = iprot.readBinary();
          struct.metadata.add(_elem750);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
        org.apache.thrift.protocol.TList _list767 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata = new ArrayList<ByteBuffer>(_list767.size);
        ByteBuffer _elem768;
        for (int _i769 = 0; _i769 < _list767.size; ++_i769)
        {
          _elem768 = iprot.readBinary();
          struct.metadata.add(_elem768);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
        org.apache.thrift.protocol.TList _list751 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata = new ArrayList<ByteBuffer>(_list751.size);
        ByteBuffer _elem752;
        for (int _i753 = 0; _i753 < _list751.size; ++_i753)
        {
          _elem752 = iprot.readBinary();
          struct.metadata.add(_elem752);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
        }
      }
      struct.setMetadataIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.type = org.apache.hadoop.hive.metastore.api.FileMetadataExprType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
    }
  }

}

