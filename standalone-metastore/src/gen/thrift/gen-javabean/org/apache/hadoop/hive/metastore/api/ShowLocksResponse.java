/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class ShowLocksResponse implements org.apache.thrift.TBase<ShowLocksResponse, ShowLocksResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ShowLocksResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShowLocksResponse");

  private static final org.apache.thrift.protocol.TField LOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("locks", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShowLocksResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShowLocksResponseTupleSchemeFactory());
  }

  private List<ShowLocksResponseElement> locks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCKS((short)1, "locks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCKS
          return LOCKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCKS, new org.apache.thrift.meta_data.FieldMetaData("locks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShowLocksResponseElement.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShowLocksResponse.class, metaDataMap);
  }

  public ShowLocksResponse() {
  }

  public ShowLocksResponse(
    List<ShowLocksResponseElement> locks)
  {
    this();
    this.locks = locks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShowLocksResponse(ShowLocksResponse other) {
    if (other.isSetLocks()) {
      List<ShowLocksResponseElement> __this__locks = new ArrayList<ShowLocksResponseElement>(other.locks.size());
      for (ShowLocksResponseElement other_element : other.locks) {
        __this__locks.add(new ShowLocksResponseElement(other_element));
      }
      this.locks = __this__locks;
    }
  }

  public ShowLocksResponse deepCopy() {
    return new ShowLocksResponse(this);
  }

  @Override
  public void clear() {
    this.locks = null;
  }

  public int getLocksSize() {
    return (this.locks == null) ? 0 : this.locks.size();
  }

  public java.util.Iterator<ShowLocksResponseElement> getLocksIterator() {
    return (this.locks == null) ? null : this.locks.iterator();
  }

  public void addToLocks(ShowLocksResponseElement elem) {
    if (this.locks == null) {
      this.locks = new ArrayList<ShowLocksResponseElement>();
    }
    this.locks.add(elem);
  }

  public List<ShowLocksResponseElement> getLocks() {
    return this.locks;
  }

  public void setLocks(List<ShowLocksResponseElement> locks) {
    this.locks = locks;
  }

  public void unsetLocks() {
    this.locks = null;
  }

  /** Returns true if field locks is set (has been assigned a value) and false otherwise */
  public boolean isSetLocks() {
    return this.locks != null;
  }

  public void setLocksIsSet(boolean value) {
    if (!value) {
      this.locks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCKS:
      if (value == null) {
        unsetLocks();
      } else {
        setLocks((List<ShowLocksResponseElement>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCKS:
      return getLocks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCKS:
      return isSetLocks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShowLocksResponse)
      return this.equals((ShowLocksResponse)that);
    return false;
  }

  public boolean equals(ShowLocksResponse that) {
    if (that == null)
      return false;

    boolean this_present_locks = true && this.isSetLocks();
    boolean that_present_locks = true && that.isSetLocks();
    if (this_present_locks || that_present_locks) {
      if (!(this_present_locks && that_present_locks))
        return false;
      if (!this.locks.equals(that.locks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_locks = true && (isSetLocks());
    list.add(present_locks);
    if (present_locks)
      list.add(locks);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShowLocksResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLocks()).compareTo(other.isSetLocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locks, other.locks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShowLocksResponse(");
    boolean first = true;

    sb.append("locks:");
    if (this.locks == null) {
      sb.append("null");
    } else {
      sb.append(this.locks);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShowLocksResponseStandardSchemeFactory implements SchemeFactory {
    public ShowLocksResponseStandardScheme getScheme() {
      return new ShowLocksResponseStandardScheme();
    }
  }

  private static class ShowLocksResponseStandardScheme extends StandardScheme<ShowLocksResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShowLocksResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> HIVE-18781 : Create/Replicate Open, Commit(without write) and Abort Txn event : Thrift changes
                org.apache.thrift.protocol.TList _list634 = iprot.readListBegin();
                struct.locks = new ArrayList<ShowLocksResponseElement>(_list634.size);
                ShowLocksResponseElement _elem635;
                for (int _i636 = 0; _i636 < _list634.size; ++_i636)
<<<<<<< HEAD
                {
                  _elem635 = new ShowLocksResponseElement();
                  _elem635.read(iprot);
                  struct.locks.add(_elem635);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list626 = iprot.readListBegin();
                struct.locks = new ArrayList<ShowLocksResponseElement>(_list626.size);
                ShowLocksResponseElement _elem627;
                for (int _i628 = 0; _i628 < _list626.size; ++_i628)
                {
                  _elem627 = new ShowLocksResponseElement();
                  _elem627.read(iprot);
                  struct.locks.add(_elem627);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
                org.apache.thrift.protocol.TList _list610 = iprot.readListBegin();
                struct.locks = new ArrayList<ShowLocksResponseElement>(_list610.size);
                ShowLocksResponseElement _elem611;
                for (int _i612 = 0; _i612 < _list610.size; ++_i612)
                {
                  _elem611 = new ShowLocksResponseElement();
                  _elem611.read(iprot);
                  struct.locks.add(_elem611);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
                org.apache.thrift.protocol.TList _list628 = iprot.readListBegin();
                struct.locks = new ArrayList<ShowLocksResponseElement>(_list628.size);
                ShowLocksResponseElement _elem629;
                for (int _i630 = 0; _i630 < _list628.size; ++_i630)
                {
                  _elem629 = new ShowLocksResponseElement();
                  _elem629.read(iprot);
                  struct.locks.add(_elem629);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
                org.apache.thrift.protocol.TList _list612 = iprot.readListBegin();
                struct.locks = new ArrayList<ShowLocksResponseElement>(_list612.size);
                ShowLocksResponseElement _elem613;
                for (int _i614 = 0; _i614 < _list612.size; ++_i614)
                {
                  _elem613 = new ShowLocksResponseElement();
                  _elem613.read(iprot);
                  struct.locks.add(_elem613);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
                org.apache.thrift.protocol.TList _list618 = iprot.readListBegin();
                struct.locks = new ArrayList<ShowLocksResponseElement>(_list618.size);
                ShowLocksResponseElement _elem619;
                for (int _i620 = 0; _i620 < _list618.size; ++_i620)
                {
                  _elem619 = new ShowLocksResponseElement();
                  _elem619.read(iprot);
                  struct.locks.add(_elem619);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
=======
                {
                  _elem635 = new ShowLocksResponseElement();
                  _elem635.read(iprot);
                  struct.locks.add(_elem635);
>>>>>>> HIVE-18781 : Create/Replicate Open, Commit(without write) and Abort Txn event : Thrift changes
                }
                iprot.readListEnd();
              }
              struct.setLocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShowLocksResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.locks != null) {
        oprot.writeFieldBegin(LOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.locks.size()));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          for (ShowLocksResponseElement _iter637 : struct.locks)
          {
            _iter637.write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          for (ShowLocksResponseElement _iter629 : struct.locks)
          {
            _iter629.write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          for (ShowLocksResponseElement _iter613 : struct.locks)
          {
            _iter613.write(oprot);
=======
          for (ShowLocksResponseElement _iter631 : struct.locks)
          {
            _iter631.write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
          for (ShowLocksResponseElement _iter631 : struct.locks)
          {
            _iter631.write(oprot);
=======
          for (ShowLocksResponseElement _iter615 : struct.locks)
          {
            _iter615.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          for (ShowLocksResponseElement _iter621 : struct.locks)
          {
            _iter621.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
=======
          for (ShowLocksResponseElement _iter637 : struct.locks)
          {
            _iter637.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Open, Commit(without write) and Abort Txn event : Thrift changes
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShowLocksResponseTupleSchemeFactory implements SchemeFactory {
    public ShowLocksResponseTupleScheme getScheme() {
      return new ShowLocksResponseTupleScheme();
    }
  }

  private static class ShowLocksResponseTupleScheme extends TupleScheme<ShowLocksResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShowLocksResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLocks()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetLocks()) {
        {
          oprot.writeI32(struct.locks.size());
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          for (ShowLocksResponseElement _iter638 : struct.locks)
          {
            _iter638.write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          for (ShowLocksResponseElement _iter630 : struct.locks)
          {
            _iter630.write(oprot);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          for (ShowLocksResponseElement _iter614 : struct.locks)
          {
            _iter614.write(oprot);
=======
          for (ShowLocksResponseElement _iter632 : struct.locks)
          {
            _iter632.write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
          for (ShowLocksResponseElement _iter632 : struct.locks)
          {
            _iter632.write(oprot);
=======
          for (ShowLocksResponseElement _iter616 : struct.locks)
          {
            _iter616.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          for (ShowLocksResponseElement _iter622 : struct.locks)
          {
            _iter622.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
=======
          for (ShowLocksResponseElement _iter638 : struct.locks)
          {
            _iter638.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Open, Commit(without write) and Abort Txn event : Thrift changes
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShowLocksResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> HIVE-18781 : Create/Replicate Open, Commit(without write) and Abort Txn event : Thrift changes
          org.apache.thrift.protocol.TList _list639 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locks = new ArrayList<ShowLocksResponseElement>(_list639.size);
          ShowLocksResponseElement _elem640;
          for (int _i641 = 0; _i641 < _list639.size; ++_i641)
<<<<<<< HEAD
          {
            _elem640 = new ShowLocksResponseElement();
            _elem640.read(iprot);
            struct.locks.add(_elem640);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
<<<<<<< HEAD
          org.apache.thrift.protocol.TList _list631 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locks = new ArrayList<ShowLocksResponseElement>(_list631.size);
          ShowLocksResponseElement _elem632;
          for (int _i633 = 0; _i633 < _list631.size; ++_i633)
          {
            _elem632 = new ShowLocksResponseElement();
            _elem632.read(iprot);
            struct.locks.add(_elem632);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
          org.apache.thrift.protocol.TList _list615 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locks = new ArrayList<ShowLocksResponseElement>(_list615.size);
          ShowLocksResponseElement _elem616;
          for (int _i617 = 0; _i617 < _list615.size; ++_i617)
          {
            _elem616 = new ShowLocksResponseElement();
            _elem616.read(iprot);
            struct.locks.add(_elem616);
=======
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          org.apache.thrift.protocol.TList _list633 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locks = new ArrayList<ShowLocksResponseElement>(_list633.size);
          ShowLocksResponseElement _elem634;
          for (int _i635 = 0; _i635 < _list633.size; ++_i635)
          {
            _elem634 = new ShowLocksResponseElement();
            _elem634.read(iprot);
            struct.locks.add(_elem634);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event
=======
=======
=======
=======
          org.apache.thrift.protocol.TList _list617 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locks = new ArrayList<ShowLocksResponseElement>(_list617.size);
          ShowLocksResponseElement _elem618;
          for (int _i619 = 0; _i619 < _list617.size; ++_i619)
          {
            _elem618 = new ShowLocksResponseElement();
            _elem618.read(iprot);
            struct.locks.add(_elem618);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
<<<<<<< HEAD
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
=======
=======
          org.apache.thrift.protocol.TList _list623 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locks = new ArrayList<ShowLocksResponseElement>(_list623.size);
          ShowLocksResponseElement _elem624;
          for (int _i625 = 0; _i625 < _list623.size; ++_i625)
          {
            _elem624 = new ShowLocksResponseElement();
            _elem624.read(iprot);
            struct.locks.add(_elem624);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event : After fixing review comments and test failures
=======
          {
            _elem640 = new ShowLocksResponseElement();
            _elem640.read(iprot);
            struct.locks.add(_elem640);
>>>>>>> HIVE-18781 : Create/Replicate Open, Commit(without write) and Abort Txn event : Thrift changes
          }
        }
        struct.setLocksIsSet(true);
      }
    }
  }

}

