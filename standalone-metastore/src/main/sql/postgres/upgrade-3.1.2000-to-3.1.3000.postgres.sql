CREATE TABLE "SCHEDULED_QUERIES" (
	"SCHEDULED_QUERY_ID" BIGINT NOT NULL,
	"CLUSTER_NAMESPACE" VARCHAR(256),
	"ENABLED" boolean NOT NULL,
	"NEXT_EXECUTION" INTEGER,
	"QUERY" VARCHAR(4000),
	"SCHEDULE" VARCHAR(256),
	"SCHEDULE_NAME" VARCHAR(256),
	"USER" VARCHAR(256),
	CONSTRAINT SCHEDULED_QUERIES_PK PRIMARY KEY ("SCHEDULED_QUERY_ID")
);

CREATE TABLE "SCHEDULED_EXECUTIONS" (
	"SCHEDULED_EXECUTION_ID" BIGINT NOT NULL,
	"END_TIME" INTEGER,
	"ERROR_MESSAGE" VARCHAR(2000),
	"EXECUTOR_QUERY_ID" VARCHAR(256),
	"LAST_UPDATE_TIME" INTEGER,
	"SCHEDULED_QUERY_ID" BIGINT,
	"START_TIME" INTEGER,
	"STATE" VARCHAR(256),
	CONSTRAINT SCHEDULED_EXECUTIONS_PK PRIMARY KEY ("SCHEDULED_EXECUTION_ID"),
	CONSTRAINT SCHEDULED_EXECUTIONS_SCHQ_FK FOREIGN KEY ("SCHEDULED_QUERY_ID") REFERENCES "SCHEDULED_QUERIES"("SCHEDULED_QUERY_ID") ON DELETE CASCADE
);

CREATE INDEX IDX_SCHEDULED_EXECUTIONS_LAST_UPDATE_TIME ON "SCHEDULED_EXECUTIONS" ("LAST_UPDATE_TIME");
CREATE INDEX IDX_SCHEDULED_EXECUTIONS_SCHEDULED_QUERY_ID ON "SCHEDULED_EXECUTIONS" ("SCHEDULED_QUERY_ID");
CREATE UNIQUE INDEX UNIQUE_SCHEDULED_EXECUTIONS_ID ON "SCHEDULED_EXECUTIONS" ("SCHEDULED_EXECUTION_ID");

-- HIVE-22728
ALTER TABLE "KEY_CONSTRAINTS" DROP CONSTRAINT "KEY_CONSTRAINTS_pkey";
ALTER TABLE "KEY_CONSTRAINTS" ADD CONSTRAINT "CONSTRAINTS_PK" PRIMARY KEY ("PARENT_TBL_ID", "CONSTRAINT_NAME", "POSITION");

-- HIVE-22729
ALTER TABLE COMPACTION_QUEUE ADD CQ_ERROR_MESSAGE text;
ALTER TABLE COMPLETED_COMPACTIONS ADD CC_ERROR_MESSAGE text;

-- HIVE-22546

ALTER TABLE aux_table RENAME TO "AUX_TABLE";
ALTER TABLE "AUX_TABLE" RENAME COLUMN mt_key1 TO "MT_KEY1";
ALTER TABLE "AUX_TABLE" RENAME COLUMN mt_key2 TO "MT_KEY2";
ALTER TABLE "AUX_TABLE" RENAME COLUMN mt_comment TO "MT_COMMENT";

ALTER TABLE compaction_queue RENAME TO "COMPACTION_QUEUE";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_id TO "CQ_ID";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_database TO "CQ_DATABASE";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_table TO "CQ_TABLE";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_partition TO "CQ_PARTITION";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_state TO "CQ_STATE";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_type TO "CQ_TYPE";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_tblproperties TO "CQ_TBLPROPERTIES";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_worker_id TO "CQ_WORKER_ID";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_start TO "CQ_START";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_run_as TO "CQ_RUN_AS";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_highest_write_id TO "CQ_HIGHEST_WRITE_ID";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_meta_info TO "CQ_META_INFO";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_hadoop_job_id TO "CQ_HADOOP_JOB_ID";
ALTER TABLE "COMPACTION_QUEUE" RENAME COLUMN cq_error_message TO "CQ_ERROR_MESSAGE";

ALTER TABLE completed_compactions RENAME TO "COMPLETED_COMPACTIONS";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_id TO "CC_ID";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_database TO "CC_DATABASE";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_table TO "CC_TABLE";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_partition TO "CC_PARTITION";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_state TO "CC_STATE";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_type TO "CC_TYPE";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_tblproperties TO "CC_TBLPROPERTIES";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_worker_id TO "CC_WORKER_ID";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_start TO "CC_START";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_end TO "CC_END";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_run_as TO "CC_RUN_AS";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_highest_write_id TO "CC_HIGHEST_WRITE_ID";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_meta_info TO "CC_META_INFO";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_hadoop_job_id TO "CC_HADOOP_JOB_ID";
ALTER TABLE "COMPLETED_COMPACTIONS" RENAME COLUMN cc_error_message TO "CC_ERROR_MESSAGE";


ALTER TABLE completed_txn_components RENAME TO "COMPLETED_TXN_COMPONENTS";
ALTER TABLE "COMPLETED_TXN_COMPONENTS" RENAME COLUMN ctc_txnid TO "CTC_TXNID";
ALTER TABLE "COMPLETED_TXN_COMPONENTS" RENAME COLUMN ctc_database TO "CTC_DATABASE";
ALTER TABLE "COMPLETED_TXN_COMPONENTS" RENAME COLUMN ctc_table TO "CTC_TABLE";
ALTER TABLE "COMPLETED_TXN_COMPONENTS" RENAME COLUMN ctc_partition TO "CTC_PARTITION";
ALTER TABLE "COMPLETED_TXN_COMPONENTS" RENAME COLUMN ctc_timestamp TO "CTC_TIMESTAMP";
ALTER TABLE "COMPLETED_TXN_COMPONENTS" RENAME COLUMN ctc_writeid TO "CTC_WRITEID";
ALTER TABLE "COMPLETED_TXN_COMPONENTS" RENAME COLUMN ctc_update_delete TO "CTC_UPDATE_DELETE";

ALTER TABLE hive_locks RENAME TO "HIVE_LOCKS";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_lock_ext_id TO "HL_LOCK_EXT_ID";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_lock_int_id TO "HL_LOCK_INT_ID";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_txnid TO "HL_TXNID";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_db TO "HL_DB";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_table TO "HL_TABLE";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_partition TO "HL_PARTITION";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_lock_state TO "HL_LOCK_STATE";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_lock_type TO "HL_LOCK_TYPE";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_last_heartbeat TO "HL_LAST_HEARTBEAT";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_acquired_at TO "HL_ACQUIRED_AT";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_user TO "HL_USER";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_host TO "HL_HOST";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_heartbeat_count TO "HL_HEARTBEAT_COUNT";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_agent_info TO "HL_AGENT_INFO";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_blockedby_ext_id TO "HL_BLOCKEDBY_EXT_ID";
ALTER TABLE "HIVE_LOCKS" RENAME COLUMN hl_blockedby_int_id TO "HL_BLOCKEDBY_INT_ID";

ALTER TABLE materialization_rebuild_locks RENAME TO "MATERIALIZATION_REBUILD_LOCKS";
ALTER TABLE "MATERIALIZATION_REBUILD_LOCKS" RENAME COLUMN mrl_txn_id TO "MRL_TXN_ID";
ALTER TABLE "MATERIALIZATION_REBUILD_LOCKS" RENAME COLUMN mrl_db_name TO "MRL_DB_NAME";
ALTER TABLE "MATERIALIZATION_REBUILD_LOCKS" RENAME COLUMN mrl_tbl_name TO "MRL_TBL_NAME";
ALTER TABLE "MATERIALIZATION_REBUILD_LOCKS" RENAME COLUMN mrl_last_heartbeat TO "MRL_LAST_HEARTBEAT";

ALTER TABLE min_history_level RENAME TO "MIN_HISTORY_LEVEL";
ALTER TABLE "MIN_HISTORY_LEVEL" RENAME COLUMN mhl_txnid TO "MHL_TXNID";
ALTER TABLE "MIN_HISTORY_LEVEL" RENAME COLUMN mhl_min_open_txnid TO "MHL_MIN_OPEN_TXNID";

ALTER TABLE next_compaction_queue_id RENAME TO "NEXT_COMPACTION_QUEUE_ID";
ALTER TABLE "NEXT_COMPACTION_QUEUE_ID" RENAME COLUMN ncq_next TO "NCQ_NEXT";

ALTER TABLE next_lock_id RENAME TO "NEXT_LOCK_ID";
ALTER TABLE "NEXT_LOCK_ID" RENAME COLUMN nl_next TO "NL_NEXT";

ALTER TABLE next_txn_id RENAME TO "NEXT_TXN_ID";
ALTER TABLE "NEXT_TXN_ID" RENAME COLUMN ntxn_next TO "NTXN_NEXT";

ALTER TABLE next_write_id RENAME TO "NEXT_WRITE_ID";
ALTER TABLE "NEXT_WRITE_ID" RENAME COLUMN nwi_database TO "NWI_DATABASE";
ALTER TABLE "NEXT_WRITE_ID" RENAME COLUMN nwi_table TO "NWI_TABLE";
ALTER TABLE "NEXT_WRITE_ID" RENAME COLUMN nwi_next TO "NWI_NEXT";

ALTER TABLE repl_txn_map RENAME TO "REPL_TXN_MAP";
ALTER TABLE "REPL_TXN_MAP" RENAME COLUMN rtm_repl_policy TO "RTM_REPL_POLICY";
ALTER TABLE "REPL_TXN_MAP" RENAME COLUMN rtm_src_txn_id TO "RTM_SRC_TXN_ID";
ALTER TABLE "REPL_TXN_MAP" RENAME COLUMN rtm_target_txn_id TO "RTM_TARGET_TXN_ID";

ALTER TABLE txn_components RENAME TO "TXN_COMPONENTS";
ALTER TABLE "TXN_COMPONENTS" RENAME COLUMN tc_txnid TO "TC_TXNID";
ALTER TABLE "TXN_COMPONENTS" RENAME COLUMN tc_database TO "TC_DATABASE";
ALTER TABLE "TXN_COMPONENTS" RENAME COLUMN tc_table TO "TC_TABLE";
ALTER TABLE "TXN_COMPONENTS" RENAME COLUMN tc_partition TO "TC_PARTITION";
ALTER TABLE "TXN_COMPONENTS" RENAME COLUMN tc_operation_type TO "TC_OPERATION_TYPE";
ALTER TABLE "TXN_COMPONENTS" RENAME COLUMN tc_writeid TO "TC_WRITEID";

ALTER TABLE txn_to_write_id RENAME TO "TXN_TO_WRITE_ID";
ALTER TABLE "TXN_TO_WRITE_ID" RENAME COLUMN t2w_txnid TO "T2W_TXNID";
ALTER TABLE "TXN_TO_WRITE_ID" RENAME COLUMN t2w_database TO "T2W_DATABASE";
ALTER TABLE "TXN_TO_WRITE_ID" RENAME COLUMN t2w_table TO "T2W_TABLE";
ALTER TABLE "TXN_TO_WRITE_ID" RENAME COLUMN t2w_writeid TO "T2W_WRITEID";

ALTER TABLE txns RENAME TO "TXNS";
ALTER TABLE "TXNS" RENAME COLUMN txn_id TO "TXN_ID";
ALTER TABLE "TXNS" RENAME COLUMN txn_state TO "TXN_STATE";
ALTER TABLE "TXNS" RENAME COLUMN txn_started TO "TXN_STARTED";
ALTER TABLE "TXNS" RENAME COLUMN txn_last_heartbeat TO "TXN_LAST_HEARTBEAT";
ALTER TABLE "TXNS" RENAME COLUMN txn_user TO "TXN_USER";
ALTER TABLE "TXNS" RENAME COLUMN txn_host TO "TXN_HOST";
ALTER TABLE "TXNS" RENAME COLUMN txn_agent_info TO "TXN_AGENT_INFO";
ALTER TABLE "TXNS" RENAME COLUMN txn_meta_info TO "TXN_META_INFO";
ALTER TABLE "TXNS" RENAME COLUMN txn_heartbeat_count TO "TXN_HEARTBEAT_COUNT";
ALTER TABLE "TXNS" RENAME COLUMN txn_type TO "TXN_TYPE";

ALTER TABLE write_set RENAME TO "WRITE_SET";
ALTER TABLE "WRITE_SET" RENAME COLUMN ws_database TO "WS_DATABASE";
ALTER TABLE "WRITE_SET" RENAME COLUMN ws_table TO "WS_TABLE";
ALTER TABLE "WRITE_SET" RENAME COLUMN ws_partition TO "WS_PARTITION";
ALTER TABLE "WRITE_SET" RENAME COLUMN ws_txnid TO "WS_TXNID";
ALTER TABLE "WRITE_SET" RENAME COLUMN ws_commit_id TO "WS_COMMIT_ID";
ALTER TABLE "WRITE_SET" RENAME COLUMN ws_operation_type TO "WS_OPERATION_TYPE";

-- HIVE-21487
CREATE INDEX "COMPLETED_COMPACTIONS_RES" ON "COMPLETED_COMPACTIONS" ("CC_DATABASE","CC_TABLE","CC_PARTITION");

-- HIVE-22546 - backwards compatibility addendum

CREATE OR REPLACE VIEW aux_table
    AS SELECT
        "MT_KEY1" mt_key1,
        "MT_KEY2" mt_key2,
        "MT_COMMENT" mt_comment
    FROM "AUX_TABLE";

CREATE OR REPLACE VIEW compaction_queue
    AS SELECT
        "CQ_ID" cq_id,
        "CQ_DATABASE" cq_database,
        "CQ_TABLE" cq_table,
        "CQ_PARTITION" cq_partition,
        "CQ_STATE" cq_state,
        "CQ_TYPE" cq_type,
        "CQ_TBLPROPERTIES" cq_tblproperties,
        "CQ_WORKER_ID" cq_worker_id,
        "CQ_START" cq_start,
        "CQ_RUN_AS" cq_run_as,
        "CQ_HIGHEST_WRITE_ID" cq_highest_write_id,
        "CQ_META_INFO" cq_meta_info,
        "CQ_HADOOP_JOB_ID" cq_hadoop_job_id,
        "CQ_ERROR_MESSAGE" cq_error_message
    FROM "COMPACTION_QUEUE";

CREATE OR REPLACE VIEW completed_compactions
    AS SELECT
        "CC_ID" cc_id,
        "CC_DATABASE" cc_database,
        "CC_TABLE" cc_table,
        "CC_PARTITION" cc_partition,
        "CC_STATE" cc_state,
        "CC_TYPE" cc_type,
        "CC_TBLPROPERTIES" cc_tblproperties,
        "CC_WORKER_ID" cc_worker_id,
        "CC_START" cc_start,
        "CC_END" cc_end,
        "CC_RUN_AS" cc_run_as,
        "CC_HIGHEST_WRITE_ID" cc_highest_write_id,
        "CC_META_INFO" cc_meta_info,
        "CC_HADOOP_JOB_ID" cc_hadoop_job_id,
        "CC_ERROR_MESSAGE"  cc_error_message
    FROM "COMPLETED_COMPACTIONS";

CREATE OR REPLACE VIEW completed_txn_components
    AS SELECT
        "CTC_TXNID" ctc_txnid,
        "CTC_DATABASE" ctc_database,
        "CTC_TABLE" ctc_table,
        "CTC_PARTITION" ctc_partition,
        "CTC_TIMESTAMP" ctc_timestamp,
        "CTC_WRITEID" ctc_writeid,
        "CTC_UPDATE_DELETE" ctc_update_delete
    FROM "COMPLETED_TXN_COMPONENTS";

CREATE OR REPLACE VIEW hive_locks
    AS SELECT
        "HL_LOCK_EXT_ID" hl_lock_ext_id,
        "HL_LOCK_INT_ID" hl_lock_int_id,
        "HL_TXNID" hl_txnid,
        "HL_DB" hl_db,
        "HL_TABLE" hl_table,
        "HL_PARTITION" hl_partition,
        "HL_LOCK_STATE" hl_lock_state,
        "HL_LOCK_TYPE" hl_lock_type,
        "HL_LAST_HEARTBEAT" hl_last_heartbeat,
        "HL_ACQUIRED_AT" hl_acquired_at,
        "HL_USER" hl_user,
        "HL_HOST" hl_host,
        "HL_HEARTBEAT_COUNT" hl_heartbeat_count,
        "HL_AGENT_INFO" hl_agent_info,
        "HL_BLOCKEDBY_EXT_ID" hl_blockedby_ext_id,
        "HL_BLOCKEDBY_INT_ID" hl_blockedby_int_id
    FROM "HIVE_LOCKS";

CREATE OR REPLACE VIEW materialization_rebuild_locks
    AS SELECT
        "MRL_TXN_ID" mrl_txn_id,
        "MRL_DB_NAME" mrl_db_name,
        "MRL_TBL_NAME" mrl_tbl_name,
        "MRL_LAST_HEARTBEAT" mrl_last_heartbeat
    FROM "MATERIALIZATION_REBUILD_LOCKS";

CREATE OR REPLACE VIEW min_history_level
    AS SELECT
        "MHL_TXNID" mhl_txnid,
        "MHL_MIN_OPEN_TXNID" mhl_min_open_txnid
    FROM "MIN_HISTORY_LEVEL";

CREATE OR REPLACE VIEW next_compaction_queue_id
    AS SELECT
        "NCQ_NEXT" ncq_next
    FROM "NEXT_COMPACTION_QUEUE_ID";

CREATE OR REPLACE VIEW next_lock_id
    AS SELECT
        "NL_NEXT" nl_next
    FROM "NEXT_LOCK_ID";

CREATE OR REPLACE VIEW next_txn_id
    AS SELECT
        "NTXN_NEXT" ntxn_next
    FROM "NEXT_TXN_ID";

CREATE OR REPLACE VIEW next_write_id
    AS SELECT
        "NWI_DATABASE" nwi_database,
        "NWI_TABLE" nwi_table,
        "NWI_NEXT" nwi_next
    FROM "NEXT_WRITE_ID";

CREATE OR REPLACE VIEW repl_txn_map
    AS SELECT
        "RTM_REPL_POLICY" rtm_repl_policy,
        "RTM_SRC_TXN_ID" rtm_src_txn_id,
        "RTM_TARGET_TXN_ID" rtm_target_txn_id
    FROM "REPL_TXN_MAP";

CREATE OR REPLACE VIEW runtime_stats
    AS SELECT
        "RS_ID" rs_id,
        "CREATE_TIME" create_time,
        "WEIGHT" weight,
        "PAYLOAD" payload
    FROM "RUNTIME_STATS";

CREATE OR REPLACE VIEW txn_components
    AS SELECT
        "TC_TXNID" tc_txnid,
        "TC_DATABASE" tc_database,
        "TC_TABLE" tc_table,
        "TC_PARTITION" tc_partition,
        "TC_OPERATION_TYPE" tc_operation_type,
        "TC_WRITEID" tc_writeid
    FROM "TXN_COMPONENTS";

CREATE OR REPLACE VIEW txn_to_write_id
    AS SELECT
        "T2W_TXNID" t2w_txnid,
        "T2W_DATABASE" t2w_database,
        "T2W_TABLE" t2w_table,
        "T2W_WRITEID" t2w_writeid
    FROM "TXN_TO_WRITE_ID";

CREATE OR REPLACE VIEW txns
    AS SELECT
        "TXN_ID" txn_id,
        "TXN_STATE" txn_state,
        "TXN_STARTED" txn_started,
        "TXN_LAST_HEARTBEAT" txn_last_heartbeat,
        "TXN_USER" txn_user,
        "TXN_HOST" txn_host,
        "TXN_AGENT_INFO" txn_agent_info,
        "TXN_META_INFO" txn_meta_info,
        "TXN_HEARTBEAT_COUNT" txn_heartbeat_count,
        "TXN_TYPE" txn_type
    FROM "TXNS";

CREATE OR REPLACE VIEW write_set
    AS SELECT
        "WS_DATABASE" ws_database,
        "WS_TABLE" ws_table,
        "WS_PARTITION" ws_partition,
        "WS_TXNID" ws_txnid,
        "WS_COMMIT_ID" ws_commit_id,
        "WS_OPERATION_TYPE" ws_operation_type
    FROM "WRITE_SET";

-- These lines need to be last.  Insert any changes above.
UPDATE "VERSION" SET "SCHEMA_VERSION"='3.1.3000', "VERSION_COMMENT"='Hive release version 3.1.3000' where "VER_ID"=1;
SELECT 'Finished upgrading MetaStore schema from 3.1.2000 to 3.1.3000';
