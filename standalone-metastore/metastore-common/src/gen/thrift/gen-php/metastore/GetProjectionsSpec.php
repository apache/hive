<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GetProjectionsSpec
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'fieldList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'includeParamKeyPattern',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'excludeParamKeyPattern',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string[]
     */
    public $fieldList = null;
    /**
     * @var string
     */
    public $includeParamKeyPattern = null;
    /**
     * @var string
     */
    public $excludeParamKeyPattern = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['fieldList'])) {
                $this->fieldList = $vals['fieldList'];
            }
            if (isset($vals['includeParamKeyPattern'])) {
                $this->includeParamKeyPattern = $vals['includeParamKeyPattern'];
            }
            if (isset($vals['excludeParamKeyPattern'])) {
                $this->excludeParamKeyPattern = $vals['excludeParamKeyPattern'];
            }
        }
    }

    public function getName()
    {
        return 'GetProjectionsSpec';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->fieldList = array();
                        $_size1071 = 0;
                        $_etype1074 = 0;
                        $xfer += $input->readListBegin($_etype1074, $_size1071);
                        for ($_i1075 = 0; $_i1075 < $_size1071; ++$_i1075) {
                            $elem1076 = null;
                            $xfer += $input->readString($elem1076);
                            $this->fieldList []= $elem1076;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->includeParamKeyPattern);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->excludeParamKeyPattern);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GetProjectionsSpec');
        if ($this->fieldList !== null) {
            if (!is_array($this->fieldList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fieldList', TType::LST, 1);
            $output->writeListBegin(TType::STRING, count($this->fieldList));
            foreach ($this->fieldList as $iter1077) {
                $xfer += $output->writeString($iter1077);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeParamKeyPattern !== null) {
            $xfer += $output->writeFieldBegin('includeParamKeyPattern', TType::STRING, 2);
            $xfer += $output->writeString($this->includeParamKeyPattern);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->excludeParamKeyPattern !== null) {
            $xfer += $output->writeFieldBegin('excludeParamKeyPattern', TType::STRING, 3);
            $xfer += $output->writeString($this->excludeParamKeyPattern);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
