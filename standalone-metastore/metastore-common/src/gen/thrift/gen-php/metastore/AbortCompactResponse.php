<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class AbortCompactResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'abortedcompacts',
            'isRequired' => true,
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::I64,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\metastore\AbortCompactionResponseElement',
                ),
        ),
    );

    /**
     * @var array
     */
    public $abortedcompacts = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['abortedcompacts'])) {
                $this->abortedcompacts = $vals['abortedcompacts'];
            }
        }
    }

    public function getName()
    {
        return 'AbortCompactResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->abortedcompacts = array();
                        $_size811 = 0;
                        $_ktype812 = 0;
                        $_vtype813 = 0;
                        $xfer += $input->readMapBegin($_ktype812, $_vtype813, $_size811);
                        for ($_i815 = 0; $_i815 < $_size811; ++$_i815) {
                            $key816 = 0;
                            $val817 = new \metastore\AbortCompactionResponseElement();
                            $xfer += $input->readI64($key816);
                            $val817 = new \metastore\AbortCompactionResponseElement();
                            $xfer += $val817->read($input);
                            $this->abortedcompacts[$key816] = $val817;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('AbortCompactResponse');
        if ($this->abortedcompacts !== null) {
            if (!is_array($this->abortedcompacts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('abortedcompacts', TType::MAP, 1);
            $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->abortedcompacts));
            foreach ($this->abortedcompacts as $kiter818 => $viter819) {
                $xfer += $output->writeI64($kiter818);
                $xfer += $viter819->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
