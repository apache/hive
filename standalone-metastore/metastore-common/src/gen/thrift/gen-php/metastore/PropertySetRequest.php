<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PropertySetRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'nameSpace',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'propertyMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $nameSpace = null;
    /**
     * @var array
     */
    public $propertyMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['nameSpace'])) {
                $this->nameSpace = $vals['nameSpace'];
            }
            if (isset($vals['propertyMap'])) {
                $this->propertyMap = $vals['propertyMap'];
            }
        }
    }

    public function getName()
    {
        return 'PropertySetRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->nameSpace);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->propertyMap = array();
                        $_size58 = 0;
                        $_ktype59 = 0;
                        $_vtype60 = 0;
                        $xfer += $input->readMapBegin($_ktype59, $_vtype60, $_size58);
                        for ($_i62 = 0; $_i62 < $_size58; ++$_i62) {
                            $key63 = '';
                            $val64 = '';
                            $xfer += $input->readString($key63);
                            $xfer += $input->readString($val64);
                            $this->propertyMap[$key63] = $val64;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PropertySetRequest');
        if ($this->nameSpace !== null) {
            $xfer += $output->writeFieldBegin('nameSpace', TType::STRING, 1);
            $xfer += $output->writeString($this->nameSpace);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->propertyMap !== null) {
            if (!is_array($this->propertyMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('propertyMap', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->propertyMap));
            foreach ($this->propertyMap as $kiter65 => $viter66) {
                $xfer += $output->writeString($kiter65);
                $xfer += $output->writeString($viter66);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
