<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ExtendedTableInfo
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'tblName',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'accessType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'requiredReadCapabilities',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'requiredWriteCapabilities',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $tblName = null;
    /**
     * @var int
     */
    public $accessType = null;
    /**
     * @var string[]
     */
    public $requiredReadCapabilities = null;
    /**
     * @var string[]
     */
    public $requiredWriteCapabilities = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['tblName'])) {
                $this->tblName = $vals['tblName'];
            }
            if (isset($vals['accessType'])) {
                $this->accessType = $vals['accessType'];
            }
            if (isset($vals['requiredReadCapabilities'])) {
                $this->requiredReadCapabilities = $vals['requiredReadCapabilities'];
            }
            if (isset($vals['requiredWriteCapabilities'])) {
                $this->requiredWriteCapabilities = $vals['requiredWriteCapabilities'];
            }
        }
    }

    public function getName()
    {
        return 'ExtendedTableInfo';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->tblName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->accessType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->requiredReadCapabilities = array();
                        $_size977 = 0;
                        $_etype980 = 0;
                        $xfer += $input->readListBegin($_etype980, $_size977);
                        for ($_i981 = 0; $_i981 < $_size977; ++$_i981) {
                            $elem982 = null;
                            $xfer += $input->readString($elem982);
                            $this->requiredReadCapabilities []= $elem982;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->requiredWriteCapabilities = array();
                        $_size983 = 0;
                        $_etype986 = 0;
                        $xfer += $input->readListBegin($_etype986, $_size983);
                        for ($_i987 = 0; $_i987 < $_size983; ++$_i987) {
                            $elem988 = null;
                            $xfer += $input->readString($elem988);
                            $this->requiredWriteCapabilities []= $elem988;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ExtendedTableInfo');
        if ($this->tblName !== null) {
            $xfer += $output->writeFieldBegin('tblName', TType::STRING, 1);
            $xfer += $output->writeString($this->tblName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->accessType !== null) {
            $xfer += $output->writeFieldBegin('accessType', TType::I32, 2);
            $xfer += $output->writeI32($this->accessType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->requiredReadCapabilities !== null) {
            if (!is_array($this->requiredReadCapabilities)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('requiredReadCapabilities', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->requiredReadCapabilities));
            foreach ($this->requiredReadCapabilities as $iter989) {
                $xfer += $output->writeString($iter989);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->requiredWriteCapabilities !== null) {
            if (!is_array($this->requiredWriteCapabilities)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('requiredWriteCapabilities', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->requiredWriteCapabilities));
            foreach ($this->requiredWriteCapabilities as $iter990) {
                $xfer += $output->writeString($iter990);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
