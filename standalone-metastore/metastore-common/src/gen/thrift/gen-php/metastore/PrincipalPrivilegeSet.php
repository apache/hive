<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PrincipalPrivilegeSet
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'userPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        2 => array(
            'var' => 'groupPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        3 => array(
            'var' => 'rolePrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
    );

    /**
     * @var array
     */
    public $userPrivileges = null;
    /**
     * @var array
     */
    public $groupPrivileges = null;
    /**
     * @var array
     */
    public $rolePrivileges = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['userPrivileges'])) {
                $this->userPrivileges = $vals['userPrivileges'];
            }
            if (isset($vals['groupPrivileges'])) {
                $this->groupPrivileges = $vals['groupPrivileges'];
            }
            if (isset($vals['rolePrivileges'])) {
                $this->rolePrivileges = $vals['rolePrivileges'];
            }
        }
    }

    public function getName()
    {
        return 'PrincipalPrivilegeSet';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->userPrivileges = array();
                        $_size72 = 0;
                        $_ktype73 = 0;
                        $_vtype74 = 0;
                        $xfer += $input->readMapBegin($_ktype73, $_vtype74, $_size72);
                        for ($_i76 = 0; $_i76 < $_size72; ++$_i76) {
                            $key77 = '';
                            $val78 = array();
                            $xfer += $input->readString($key77);
                            $val78 = array();
                            $_size79 = 0;
                            $_etype82 = 0;
                            $xfer += $input->readListBegin($_etype82, $_size79);
                            for ($_i83 = 0; $_i83 < $_size79; ++$_i83) {
                                $elem84 = null;
                                $elem84 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem84->read($input);
                                $val78 []= $elem84;
                            }
                            $xfer += $input->readListEnd();
                            $this->userPrivileges[$key77] = $val78;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->groupPrivileges = array();
                        $_size85 = 0;
                        $_ktype86 = 0;
                        $_vtype87 = 0;
                        $xfer += $input->readMapBegin($_ktype86, $_vtype87, $_size85);
                        for ($_i89 = 0; $_i89 < $_size85; ++$_i89) {
                            $key90 = '';
                            $val91 = array();
                            $xfer += $input->readString($key90);
                            $val91 = array();
                            $_size92 = 0;
                            $_etype95 = 0;
                            $xfer += $input->readListBegin($_etype95, $_size92);
                            for ($_i96 = 0; $_i96 < $_size92; ++$_i96) {
                                $elem97 = null;
                                $elem97 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem97->read($input);
                                $val91 []= $elem97;
                            }
                            $xfer += $input->readListEnd();
                            $this->groupPrivileges[$key90] = $val91;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->rolePrivileges = array();
                        $_size98 = 0;
                        $_ktype99 = 0;
                        $_vtype100 = 0;
                        $xfer += $input->readMapBegin($_ktype99, $_vtype100, $_size98);
                        for ($_i102 = 0; $_i102 < $_size98; ++$_i102) {
                            $key103 = '';
                            $val104 = array();
                            $xfer += $input->readString($key103);
                            $val104 = array();
                            $_size105 = 0;
                            $_etype108 = 0;
                            $xfer += $input->readListBegin($_etype108, $_size105);
                            for ($_i109 = 0; $_i109 < $_size105; ++$_i109) {
                                $elem110 = null;
                                $elem110 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem110->read($input);
                                $val104 []= $elem110;
                            }
                            $xfer += $input->readListEnd();
                            $this->rolePrivileges[$key103] = $val104;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PrincipalPrivilegeSet');
        if ($this->userPrivileges !== null) {
            if (!is_array($this->userPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userPrivileges', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->userPrivileges));
            foreach ($this->userPrivileges as $kiter111 => $viter112) {
                $xfer += $output->writeString($kiter111);
                $output->writeListBegin(TType::STRUCT, count($viter112));
                foreach ($viter112 as $iter113) {
                    $xfer += $iter113->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->groupPrivileges !== null) {
            if (!is_array($this->groupPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('groupPrivileges', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->groupPrivileges));
            foreach ($this->groupPrivileges as $kiter114 => $viter115) {
                $xfer += $output->writeString($kiter114);
                $output->writeListBegin(TType::STRUCT, count($viter115));
                foreach ($viter115 as $iter116) {
                    $xfer += $iter116->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rolePrivileges !== null) {
            if (!is_array($this->rolePrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rolePrivileges', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->rolePrivileges));
            foreach ($this->rolePrivileges as $kiter117 => $viter118) {
                $xfer += $output->writeString($kiter117);
                $output->writeListBegin(TType::STRUCT, count($viter118));
                foreach ($viter118 as $iter119) {
                    $xfer += $iter119->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
