<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PrincipalPrivilegeSet
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'userPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        2 => array(
            'var' => 'groupPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        3 => array(
            'var' => 'rolePrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
    );

    /**
     * @var array
     */
    public $userPrivileges = null;
    /**
     * @var array
     */
    public $groupPrivileges = null;
    /**
     * @var array
     */
    public $rolePrivileges = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['userPrivileges'])) {
                $this->userPrivileges = $vals['userPrivileges'];
            }
            if (isset($vals['groupPrivileges'])) {
                $this->groupPrivileges = $vals['groupPrivileges'];
            }
            if (isset($vals['rolePrivileges'])) {
                $this->rolePrivileges = $vals['rolePrivileges'];
            }
        }
    }

    public function getName()
    {
        return 'PrincipalPrivilegeSet';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->userPrivileges = array();
                        $_size21 = 0;
                        $_ktype22 = 0;
                        $_vtype23 = 0;
                        $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
                        for ($_i25 = 0; $_i25 < $_size21; ++$_i25) {
                            $key26 = '';
                            $val27 = array();
                            $xfer += $input->readString($key26);
                            $val27 = array();
                            $_size28 = 0;
                            $_etype31 = 0;
                            $xfer += $input->readListBegin($_etype31, $_size28);
                            for ($_i32 = 0; $_i32 < $_size28; ++$_i32) {
                                $elem33 = null;
                                $elem33 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem33->read($input);
                                $val27 []= $elem33;
                            }
                            $xfer += $input->readListEnd();
                            $this->userPrivileges[$key26] = $val27;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->groupPrivileges = array();
                        $_size34 = 0;
                        $_ktype35 = 0;
                        $_vtype36 = 0;
                        $xfer += $input->readMapBegin($_ktype35, $_vtype36, $_size34);
                        for ($_i38 = 0; $_i38 < $_size34; ++$_i38) {
                            $key39 = '';
                            $val40 = array();
                            $xfer += $input->readString($key39);
                            $val40 = array();
                            $_size41 = 0;
                            $_etype44 = 0;
                            $xfer += $input->readListBegin($_etype44, $_size41);
                            for ($_i45 = 0; $_i45 < $_size41; ++$_i45) {
                                $elem46 = null;
                                $elem46 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem46->read($input);
                                $val40 []= $elem46;
                            }
                            $xfer += $input->readListEnd();
                            $this->groupPrivileges[$key39] = $val40;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->rolePrivileges = array();
                        $_size47 = 0;
                        $_ktype48 = 0;
                        $_vtype49 = 0;
                        $xfer += $input->readMapBegin($_ktype48, $_vtype49, $_size47);
                        for ($_i51 = 0; $_i51 < $_size47; ++$_i51) {
                            $key52 = '';
                            $val53 = array();
                            $xfer += $input->readString($key52);
                            $val53 = array();
                            $_size54 = 0;
                            $_etype57 = 0;
                            $xfer += $input->readListBegin($_etype57, $_size54);
                            for ($_i58 = 0; $_i58 < $_size54; ++$_i58) {
                                $elem59 = null;
                                $elem59 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem59->read($input);
                                $val53 []= $elem59;
                            }
                            $xfer += $input->readListEnd();
                            $this->rolePrivileges[$key52] = $val53;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PrincipalPrivilegeSet');
        if ($this->userPrivileges !== null) {
            if (!is_array($this->userPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userPrivileges', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->userPrivileges));
            foreach ($this->userPrivileges as $kiter60 => $viter61) {
                $xfer += $output->writeString($kiter60);
                $output->writeListBegin(TType::STRUCT, count($viter61));
                foreach ($viter61 as $iter62) {
                    $xfer += $iter62->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->groupPrivileges !== null) {
            if (!is_array($this->groupPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('groupPrivileges', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->groupPrivileges));
            foreach ($this->groupPrivileges as $kiter63 => $viter64) {
                $xfer += $output->writeString($kiter63);
                $output->writeListBegin(TType::STRUCT, count($viter64));
                foreach ($viter64 as $iter65) {
                    $xfer += $iter65->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rolePrivileges !== null) {
            if (!is_array($this->rolePrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rolePrivileges', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->rolePrivileges));
            foreach ($this->rolePrivileges as $kiter66 => $viter67) {
                $xfer += $output->writeString($kiter66);
                $output->writeListBegin(TType::STRUCT, count($viter67));
                foreach ($viter67 as $iter68) {
                    $xfer += $iter68->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
