<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PrincipalPrivilegeSet
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'userPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        2 => array(
            'var' => 'groupPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        3 => array(
            'var' => 'rolePrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
    );

    /**
     * @var array
     */
    public $userPrivileges = null;
    /**
     * @var array
     */
    public $groupPrivileges = null;
    /**
     * @var array
     */
    public $rolePrivileges = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['userPrivileges'])) {
                $this->userPrivileges = $vals['userPrivileges'];
            }
            if (isset($vals['groupPrivileges'])) {
                $this->groupPrivileges = $vals['groupPrivileges'];
            }
            if (isset($vals['rolePrivileges'])) {
                $this->rolePrivileges = $vals['rolePrivileges'];
            }
        }
    }

    public function getName()
    {
        return 'PrincipalPrivilegeSet';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->userPrivileges = array();
                        $_size115 = 0;
                        $_ktype116 = 0;
                        $_vtype117 = 0;
                        $xfer += $input->readMapBegin($_ktype116, $_vtype117, $_size115);
                        for ($_i119 = 0; $_i119 < $_size115; ++$_i119) {
                            $key120 = '';
                            $val121 = array();
                            $xfer += $input->readString($key120);
                            $val121 = array();
                            $_size122 = 0;
                            $_etype125 = 0;
                            $xfer += $input->readListBegin($_etype125, $_size122);
                            for ($_i126 = 0; $_i126 < $_size122; ++$_i126) {
                                $elem127 = null;
                                $elem127 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem127->read($input);
                                $val121 []= $elem127;
                            }
                            $xfer += $input->readListEnd();
                            $this->userPrivileges[$key120] = $val121;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->groupPrivileges = array();
                        $_size128 = 0;
                        $_ktype129 = 0;
                        $_vtype130 = 0;
                        $xfer += $input->readMapBegin($_ktype129, $_vtype130, $_size128);
                        for ($_i132 = 0; $_i132 < $_size128; ++$_i132) {
                            $key133 = '';
                            $val134 = array();
                            $xfer += $input->readString($key133);
                            $val134 = array();
                            $_size135 = 0;
                            $_etype138 = 0;
                            $xfer += $input->readListBegin($_etype138, $_size135);
                            for ($_i139 = 0; $_i139 < $_size135; ++$_i139) {
                                $elem140 = null;
                                $elem140 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem140->read($input);
                                $val134 []= $elem140;
                            }
                            $xfer += $input->readListEnd();
                            $this->groupPrivileges[$key133] = $val134;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->rolePrivileges = array();
                        $_size141 = 0;
                        $_ktype142 = 0;
                        $_vtype143 = 0;
                        $xfer += $input->readMapBegin($_ktype142, $_vtype143, $_size141);
                        for ($_i145 = 0; $_i145 < $_size141; ++$_i145) {
                            $key146 = '';
                            $val147 = array();
                            $xfer += $input->readString($key146);
                            $val147 = array();
                            $_size148 = 0;
                            $_etype151 = 0;
                            $xfer += $input->readListBegin($_etype151, $_size148);
                            for ($_i152 = 0; $_i152 < $_size148; ++$_i152) {
                                $elem153 = null;
                                $elem153 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem153->read($input);
                                $val147 []= $elem153;
                            }
                            $xfer += $input->readListEnd();
                            $this->rolePrivileges[$key146] = $val147;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PrincipalPrivilegeSet');
        if ($this->userPrivileges !== null) {
            if (!is_array($this->userPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userPrivileges', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->userPrivileges));
            foreach ($this->userPrivileges as $kiter154 => $viter155) {
                $xfer += $output->writeString($kiter154);
                $output->writeListBegin(TType::STRUCT, count($viter155));
                foreach ($viter155 as $iter156) {
                    $xfer += $iter156->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->groupPrivileges !== null) {
            if (!is_array($this->groupPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('groupPrivileges', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->groupPrivileges));
            foreach ($this->groupPrivileges as $kiter157 => $viter158) {
                $xfer += $output->writeString($kiter157);
                $output->writeListBegin(TType::STRUCT, count($viter158));
                foreach ($viter158 as $iter159) {
                    $xfer += $iter159->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rolePrivileges !== null) {
            if (!is_array($this->rolePrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rolePrivileges', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->rolePrivileges));
            foreach ($this->rolePrivileges as $kiter160 => $viter161) {
                $xfer += $output->writeString($kiter160);
                $output->writeListBegin(TType::STRUCT, count($viter161));
                foreach ($viter161 as $iter162) {
                    $xfer += $iter162->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
