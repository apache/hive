<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PrincipalPrivilegeSet
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'userPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        2 => array(
            'var' => 'groupPrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
        3 => array(
            'var' => 'rolePrivileges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\metastore\PrivilegeGrantInfo',
                    ),
                ),
        ),
    );

    /**
     * @var array
     */
    public $userPrivileges = null;
    /**
     * @var array
     */
    public $groupPrivileges = null;
    /**
     * @var array
     */
    public $rolePrivileges = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['userPrivileges'])) {
                $this->userPrivileges = $vals['userPrivileges'];
            }
            if (isset($vals['groupPrivileges'])) {
                $this->groupPrivileges = $vals['groupPrivileges'];
            }
            if (isset($vals['rolePrivileges'])) {
                $this->rolePrivileges = $vals['rolePrivileges'];
            }
        }
    }

    public function getName()
    {
        return 'PrincipalPrivilegeSet';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->userPrivileges = array();
                        $_size63 = 0;
                        $_ktype64 = 0;
                        $_vtype65 = 0;
                        $xfer += $input->readMapBegin($_ktype64, $_vtype65, $_size63);
                        for ($_i67 = 0; $_i67 < $_size63; ++$_i67) {
                            $key68 = '';
                            $val69 = array();
                            $xfer += $input->readString($key68);
                            $val69 = array();
                            $_size70 = 0;
                            $_etype73 = 0;
                            $xfer += $input->readListBegin($_etype73, $_size70);
                            for ($_i74 = 0; $_i74 < $_size70; ++$_i74) {
                                $elem75 = null;
                                $elem75 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem75->read($input);
                                $val69 []= $elem75;
                            }
                            $xfer += $input->readListEnd();
                            $this->userPrivileges[$key68] = $val69;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->groupPrivileges = array();
                        $_size76 = 0;
                        $_ktype77 = 0;
                        $_vtype78 = 0;
                        $xfer += $input->readMapBegin($_ktype77, $_vtype78, $_size76);
                        for ($_i80 = 0; $_i80 < $_size76; ++$_i80) {
                            $key81 = '';
                            $val82 = array();
                            $xfer += $input->readString($key81);
                            $val82 = array();
                            $_size83 = 0;
                            $_etype86 = 0;
                            $xfer += $input->readListBegin($_etype86, $_size83);
                            for ($_i87 = 0; $_i87 < $_size83; ++$_i87) {
                                $elem88 = null;
                                $elem88 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem88->read($input);
                                $val82 []= $elem88;
                            }
                            $xfer += $input->readListEnd();
                            $this->groupPrivileges[$key81] = $val82;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->rolePrivileges = array();
                        $_size89 = 0;
                        $_ktype90 = 0;
                        $_vtype91 = 0;
                        $xfer += $input->readMapBegin($_ktype90, $_vtype91, $_size89);
                        for ($_i93 = 0; $_i93 < $_size89; ++$_i93) {
                            $key94 = '';
                            $val95 = array();
                            $xfer += $input->readString($key94);
                            $val95 = array();
                            $_size96 = 0;
                            $_etype99 = 0;
                            $xfer += $input->readListBegin($_etype99, $_size96);
                            for ($_i100 = 0; $_i100 < $_size96; ++$_i100) {
                                $elem101 = null;
                                $elem101 = new \metastore\PrivilegeGrantInfo();
                                $xfer += $elem101->read($input);
                                $val95 []= $elem101;
                            }
                            $xfer += $input->readListEnd();
                            $this->rolePrivileges[$key94] = $val95;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PrincipalPrivilegeSet');
        if ($this->userPrivileges !== null) {
            if (!is_array($this->userPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userPrivileges', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->userPrivileges));
            foreach ($this->userPrivileges as $kiter102 => $viter103) {
                $xfer += $output->writeString($kiter102);
                $output->writeListBegin(TType::STRUCT, count($viter103));
                foreach ($viter103 as $iter104) {
                    $xfer += $iter104->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->groupPrivileges !== null) {
            if (!is_array($this->groupPrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('groupPrivileges', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->groupPrivileges));
            foreach ($this->groupPrivileges as $kiter105 => $viter106) {
                $xfer += $output->writeString($kiter105);
                $output->writeListBegin(TType::STRUCT, count($viter106));
                foreach ($viter106 as $iter107) {
                    $xfer += $iter107->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rolePrivileges !== null) {
            if (!is_array($this->rolePrivileges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rolePrivileges', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->rolePrivileges));
            foreach ($this->rolePrivileges as $kiter108 => $viter109) {
                $xfer += $output->writeString($kiter108);
                $output->writeListBegin(TType::STRUCT, count($viter109));
                foreach ($viter109 as $iter110) {
                    $xfer += $iter110->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
