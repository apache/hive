<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PropertyGetResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'properties',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::MAP,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::MAP,
                'ktype' => TType::STRING,
                'vtype' => TType::STRING,
                'key' => array(
                    'type' => TType::STRING,
                ),
                'val' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
    );

    /**
     * @var array
     */
    public $properties = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['properties'])) {
                $this->properties = $vals['properties'];
            }
        }
    }

    public function getName()
    {
        return 'PropertyGetResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->properties = array();
                        $_size83 = 0;
                        $_ktype84 = 0;
                        $_vtype85 = 0;
                        $xfer += $input->readMapBegin($_ktype84, $_vtype85, $_size83);
                        for ($_i87 = 0; $_i87 < $_size83; ++$_i87) {
                            $key88 = '';
                            $val89 = array();
                            $xfer += $input->readString($key88);
                            $val89 = array();
                            $_size90 = 0;
                            $_ktype91 = 0;
                            $_vtype92 = 0;
                            $xfer += $input->readMapBegin($_ktype91, $_vtype92, $_size90);
                            for ($_i94 = 0; $_i94 < $_size90; ++$_i94) {
                                $key95 = '';
                                $val96 = '';
                                $xfer += $input->readString($key95);
                                $xfer += $input->readString($val96);
                                $val89[$key95] = $val96;
                            }
                            $xfer += $input->readMapEnd();
                            $this->properties[$key88] = $val89;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PropertyGetResponse');
        if ($this->properties !== null) {
            if (!is_array($this->properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('properties', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::MAP, count($this->properties));
            foreach ($this->properties as $kiter97 => $viter98) {
                $xfer += $output->writeString($kiter97);
                $output->writeMapBegin(TType::STRING, TType::STRING, count($viter98));
                foreach ($viter98 as $kiter99 => $viter100) {
                    $xfer += $output->writeString($kiter99);
                    $xfer += $output->writeString($viter100);
                }
                $output->writeMapEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
