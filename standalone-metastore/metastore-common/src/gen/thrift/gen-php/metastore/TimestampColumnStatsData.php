<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimestampColumnStatsData
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'lowValue',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\metastore\Timestamp',
        ),
        2 => array(
            'var' => 'highValue',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\metastore\Timestamp',
        ),
        3 => array(
            'var' => 'numNulls',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'numDVs',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'bitVectors',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \metastore\Timestamp
     */
    public $lowValue = null;
    /**
     * @var \metastore\Timestamp
     */
    public $highValue = null;
    /**
     * @var int
     */
    public $numNulls = null;
    /**
     * @var int
     */
    public $numDVs = null;
    /**
     * @var string
     */
    public $bitVectors = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['lowValue'])) {
                $this->lowValue = $vals['lowValue'];
            }
            if (isset($vals['highValue'])) {
                $this->highValue = $vals['highValue'];
            }
            if (isset($vals['numNulls'])) {
                $this->numNulls = $vals['numNulls'];
            }
            if (isset($vals['numDVs'])) {
                $this->numDVs = $vals['numDVs'];
            }
            if (isset($vals['bitVectors'])) {
                $this->bitVectors = $vals['bitVectors'];
            }
        }
    }

    public function getName()
    {
        return 'TimestampColumnStatsData';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->lowValue = new \metastore\Timestamp();
                        $xfer += $this->lowValue->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->highValue = new \metastore\Timestamp();
                        $xfer += $this->highValue->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->numNulls);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->numDVs);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bitVectors);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimestampColumnStatsData');
        if ($this->lowValue !== null) {
            if (!is_object($this->lowValue)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('lowValue', TType::STRUCT, 1);
            $xfer += $this->lowValue->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->highValue !== null) {
            if (!is_object($this->highValue)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('highValue', TType::STRUCT, 2);
            $xfer += $this->highValue->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->numNulls !== null) {
            $xfer += $output->writeFieldBegin('numNulls', TType::I64, 3);
            $xfer += $output->writeI64($this->numNulls);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->numDVs !== null) {
            $xfer += $output->writeFieldBegin('numDVs', TType::I64, 4);
            $xfer += $output->writeI64($this->numDVs);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bitVectors !== null) {
            $xfer += $output->writeFieldBegin('bitVectors', TType::STRING, 5);
            $xfer += $output->writeString($this->bitVectors);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
