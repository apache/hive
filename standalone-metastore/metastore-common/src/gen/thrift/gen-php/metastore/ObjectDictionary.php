<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ObjectDictionary
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'values',
            'isRequired' => true,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRING,
                'elem' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
    );

    /**
     * @var array
     */
    public $values = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['values'])) {
                $this->values = $vals['values'];
            }
        }
    }

    public function getName()
    {
        return 'ObjectDictionary';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->values = array();
                        $_size246 = 0;
                        $_ktype247 = 0;
                        $_vtype248 = 0;
                        $xfer += $input->readMapBegin($_ktype247, $_vtype248, $_size246);
                        for ($_i250 = 0; $_i250 < $_size246; ++$_i250) {
                            $key251 = '';
                            $val252 = array();
                            $xfer += $input->readString($key251);
                            $val252 = array();
                            $_size253 = 0;
                            $_etype256 = 0;
                            $xfer += $input->readListBegin($_etype256, $_size253);
                            for ($_i257 = 0; $_i257 < $_size253; ++$_i257) {
                                $elem258 = null;
                                $xfer += $input->readString($elem258);
                                $val252 []= $elem258;
                            }
                            $xfer += $input->readListEnd();
                            $this->values[$key251] = $val252;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ObjectDictionary');
        if ($this->values !== null) {
            if (!is_array($this->values)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('values', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->values));
            foreach ($this->values as $kiter259 => $viter260) {
                $xfer += $output->writeString($kiter259);
                $output->writeListBegin(TType::STRING, count($viter260));
                foreach ($viter260 as $iter261) {
                    $xfer += $output->writeString($iter261);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
