<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class DeleteColumnStatisticsRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'cat_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'db_name',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'tbl_name',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'part_names',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'col_names',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'engine',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'tableLevel',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $cat_name = null;
    /**
     * @var string
     */
    public $db_name = null;
    /**
     * @var string
     */
    public $tbl_name = null;
    /**
     * @var string[]
     */
    public $part_names = null;
    /**
     * @var string[]
     */
    public $col_names = null;
    /**
     * @var string
     */
    public $engine = "hive";
    /**
     * @var bool
     */
    public $tableLevel = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['cat_name'])) {
                $this->cat_name = $vals['cat_name'];
            }
            if (isset($vals['db_name'])) {
                $this->db_name = $vals['db_name'];
            }
            if (isset($vals['tbl_name'])) {
                $this->tbl_name = $vals['tbl_name'];
            }
            if (isset($vals['part_names'])) {
                $this->part_names = $vals['part_names'];
            }
            if (isset($vals['col_names'])) {
                $this->col_names = $vals['col_names'];
            }
            if (isset($vals['engine'])) {
                $this->engine = $vals['engine'];
            }
            if (isset($vals['tableLevel'])) {
                $this->tableLevel = $vals['tableLevel'];
            }
        }
    }

    public function getName()
    {
        return 'DeleteColumnStatisticsRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cat_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->db_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->tbl_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->part_names = array();
                        $_size1381 = 0;
                        $_etype1384 = 0;
                        $xfer += $input->readListBegin($_etype1384, $_size1381);
                        for ($_i1385 = 0; $_i1385 < $_size1381; ++$_i1385) {
                            $elem1386 = null;
                            $xfer += $input->readString($elem1386);
                            $this->part_names []= $elem1386;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->col_names = array();
                        $_size1387 = 0;
                        $_etype1390 = 0;
                        $xfer += $input->readListBegin($_etype1390, $_size1387);
                        for ($_i1391 = 0; $_i1391 < $_size1387; ++$_i1391) {
                            $elem1392 = null;
                            $xfer += $input->readString($elem1392);
                            $this->col_names []= $elem1392;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->engine);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->tableLevel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('DeleteColumnStatisticsRequest');
        if ($this->cat_name !== null) {
            $xfer += $output->writeFieldBegin('cat_name', TType::STRING, 1);
            $xfer += $output->writeString($this->cat_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->db_name !== null) {
            $xfer += $output->writeFieldBegin('db_name', TType::STRING, 2);
            $xfer += $output->writeString($this->db_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tbl_name !== null) {
            $xfer += $output->writeFieldBegin('tbl_name', TType::STRING, 3);
            $xfer += $output->writeString($this->tbl_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->part_names !== null) {
            if (!is_array($this->part_names)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('part_names', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->part_names));
            foreach ($this->part_names as $iter1393) {
                $xfer += $output->writeString($iter1393);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->col_names !== null) {
            if (!is_array($this->col_names)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('col_names', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->col_names));
            foreach ($this->col_names as $iter1394) {
                $xfer += $output->writeString($iter1394);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->engine !== null) {
            $xfer += $output->writeFieldBegin('engine', TType::STRING, 6);
            $xfer += $output->writeString($this->engine);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tableLevel !== null) {
            $xfer += $output->writeFieldBegin('tableLevel', TType::BOOL, 7);
            $xfer += $output->writeBool($this->tableLevel);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
