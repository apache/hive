<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class StoredProcedure
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'dbName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ownerName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'source',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'language',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'returnType',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'posParams',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\metastore\PosParam',
                ),
        ),
    );

    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $dbName = null;
    /**
     * @var string
     */
    public $ownerName = null;
    /**
     * @var string
     */
    public $source = null;
    /**
     * @var string
     */
    public $language = null;
    /**
     * @var string
     */
    public $returnType = null;
    /**
     * @var \metastore\PosParam[]
     */
    public $posParams = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['dbName'])) {
                $this->dbName = $vals['dbName'];
            }
            if (isset($vals['ownerName'])) {
                $this->ownerName = $vals['ownerName'];
            }
            if (isset($vals['source'])) {
                $this->source = $vals['source'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
            if (isset($vals['returnType'])) {
                $this->returnType = $vals['returnType'];
            }
            if (isset($vals['posParams'])) {
                $this->posParams = $vals['posParams'];
            }
        }
    }

    public function getName()
    {
        return 'StoredProcedure';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dbName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ownerName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->source);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->returnType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->posParams = array();
                        $_size1183 = 0;
                        $_etype1186 = 0;
                        $xfer += $input->readListBegin($_etype1186, $_size1183);
                        for ($_i1187 = 0; $_i1187 < $_size1183; ++$_i1187) {
                            $elem1188 = null;
                            $elem1188 = new \metastore\PosParam();
                            $xfer += $elem1188->read($input);
                            $this->posParams []= $elem1188;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('StoredProcedure');
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dbName !== null) {
            $xfer += $output->writeFieldBegin('dbName', TType::STRING, 2);
            $xfer += $output->writeString($this->dbName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ownerName !== null) {
            $xfer += $output->writeFieldBegin('ownerName', TType::STRING, 3);
            $xfer += $output->writeString($this->ownerName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->source !== null) {
            $xfer += $output->writeFieldBegin('source', TType::STRING, 4);
            $xfer += $output->writeString($this->source);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::STRING, 5);
            $xfer += $output->writeString($this->language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->returnType !== null) {
            $xfer += $output->writeFieldBegin('returnType', TType::STRING, 6);
            $xfer += $output->writeString($this->returnType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->posParams !== null) {
            if (!is_array($this->posParams)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('posParams', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->posParams));
            foreach ($this->posParams as $iter1189) {
                $xfer += $iter1189->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
