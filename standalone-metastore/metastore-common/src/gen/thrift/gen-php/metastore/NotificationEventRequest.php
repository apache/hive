<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class NotificationEventRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'lastEvent',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'maxEvents',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'eventTypeSkipList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'catName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'dbName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'tableNames',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $lastEvent = null;
    /**
     * @var int
     */
    public $maxEvents = null;
    /**
     * @var string[]
     */
    public $eventTypeSkipList = null;
    /**
     * @var string
     */
    public $catName = null;
    /**
     * @var string
     */
    public $dbName = null;
    /**
     * @var string[]
     */
    public $tableNames = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['lastEvent'])) {
                $this->lastEvent = $vals['lastEvent'];
            }
            if (isset($vals['maxEvents'])) {
                $this->maxEvents = $vals['maxEvents'];
            }
            if (isset($vals['eventTypeSkipList'])) {
                $this->eventTypeSkipList = $vals['eventTypeSkipList'];
            }
            if (isset($vals['catName'])) {
                $this->catName = $vals['catName'];
            }
            if (isset($vals['dbName'])) {
                $this->dbName = $vals['dbName'];
            }
            if (isset($vals['tableNames'])) {
                $this->tableNames = $vals['tableNames'];
            }
        }
    }

    public function getName()
    {
        return 'NotificationEventRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->lastEvent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->maxEvents);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->eventTypeSkipList = array();
                        $_size862 = 0;
                        $_etype865 = 0;
                        $xfer += $input->readListBegin($_etype865, $_size862);
                        for ($_i866 = 0; $_i866 < $_size862; ++$_i866) {
                            $elem867 = null;
                            $xfer += $input->readString($elem867);
                            $this->eventTypeSkipList []= $elem867;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->catName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dbName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->tableNames = array();
                        $_size868 = 0;
                        $_etype871 = 0;
                        $xfer += $input->readListBegin($_etype871, $_size868);
                        for ($_i872 = 0; $_i872 < $_size868; ++$_i872) {
                            $elem873 = null;
                            $xfer += $input->readString($elem873);
                            $this->tableNames []= $elem873;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NotificationEventRequest');
        if ($this->lastEvent !== null) {
            $xfer += $output->writeFieldBegin('lastEvent', TType::I64, 1);
            $xfer += $output->writeI64($this->lastEvent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxEvents !== null) {
            $xfer += $output->writeFieldBegin('maxEvents', TType::I32, 2);
            $xfer += $output->writeI32($this->maxEvents);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->eventTypeSkipList !== null) {
            if (!is_array($this->eventTypeSkipList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('eventTypeSkipList', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->eventTypeSkipList));
            foreach ($this->eventTypeSkipList as $iter874) {
                $xfer += $output->writeString($iter874);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->catName !== null) {
            $xfer += $output->writeFieldBegin('catName', TType::STRING, 4);
            $xfer += $output->writeString($this->catName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dbName !== null) {
            $xfer += $output->writeFieldBegin('dbName', TType::STRING, 5);
            $xfer += $output->writeString($this->dbName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tableNames !== null) {
            if (!is_array($this->tableNames)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tableNames', TType::LST, 6);
            $output->writeListBegin(TType::STRING, count($this->tableNames));
            foreach ($this->tableNames as $iter875) {
                $xfer += $output->writeString($iter875);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
