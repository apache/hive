<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ForeignKeysRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'parent_db_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'parent_tbl_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'foreign_db_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'foreign_tbl_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'catName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'validWriteIdList',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'tableId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var string
     */
    public $parent_db_name = null;
    /**
     * @var string
     */
    public $parent_tbl_name = null;
    /**
     * @var string
     */
    public $foreign_db_name = null;
    /**
     * @var string
     */
    public $foreign_tbl_name = null;
    /**
     * @var string
     */
    public $catName = null;
    /**
     * @var string
     */
    public $validWriteIdList = null;
    /**
     * @var int
     */
    public $tableId = -1;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['parent_db_name'])) {
                $this->parent_db_name = $vals['parent_db_name'];
            }
            if (isset($vals['parent_tbl_name'])) {
                $this->parent_tbl_name = $vals['parent_tbl_name'];
            }
            if (isset($vals['foreign_db_name'])) {
                $this->foreign_db_name = $vals['foreign_db_name'];
            }
            if (isset($vals['foreign_tbl_name'])) {
                $this->foreign_tbl_name = $vals['foreign_tbl_name'];
            }
            if (isset($vals['catName'])) {
                $this->catName = $vals['catName'];
            }
            if (isset($vals['validWriteIdList'])) {
                $this->validWriteIdList = $vals['validWriteIdList'];
            }
            if (isset($vals['tableId'])) {
                $this->tableId = $vals['tableId'];
            }
        }
    }

    public function getName()
    {
        return 'ForeignKeysRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parent_db_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parent_tbl_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->foreign_db_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->foreign_tbl_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->catName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->validWriteIdList);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->tableId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ForeignKeysRequest');
        if ($this->parent_db_name !== null) {
            $xfer += $output->writeFieldBegin('parent_db_name', TType::STRING, 1);
            $xfer += $output->writeString($this->parent_db_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parent_tbl_name !== null) {
            $xfer += $output->writeFieldBegin('parent_tbl_name', TType::STRING, 2);
            $xfer += $output->writeString($this->parent_tbl_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->foreign_db_name !== null) {
            $xfer += $output->writeFieldBegin('foreign_db_name', TType::STRING, 3);
            $xfer += $output->writeString($this->foreign_db_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->foreign_tbl_name !== null) {
            $xfer += $output->writeFieldBegin('foreign_tbl_name', TType::STRING, 4);
            $xfer += $output->writeString($this->foreign_tbl_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->catName !== null) {
            $xfer += $output->writeFieldBegin('catName', TType::STRING, 5);
            $xfer += $output->writeString($this->catName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->validWriteIdList !== null) {
            $xfer += $output->writeFieldBegin('validWriteIdList', TType::STRING, 6);
            $xfer += $output->writeString($this->validWriteIdList);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tableId !== null) {
            $xfer += $output->writeFieldBegin('tableId', TType::I64, 7);
            $xfer += $output->writeI64($this->tableId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
