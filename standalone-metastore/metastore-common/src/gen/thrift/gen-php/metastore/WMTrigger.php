<?php
namespace metastore;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class WMTrigger
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'resourcePlanName',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'triggerName',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'triggerExpression',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'actionExpression',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'isInUnmanaged',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'ns',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $resourcePlanName = null;
    /**
     * @var string
     */
    public $triggerName = null;
    /**
     * @var string
     */
    public $triggerExpression = null;
    /**
     * @var string
     */
    public $actionExpression = null;
    /**
     * @var bool
     */
    public $isInUnmanaged = null;
    /**
     * @var string
     */
    public $ns = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['resourcePlanName'])) {
                $this->resourcePlanName = $vals['resourcePlanName'];
            }
            if (isset($vals['triggerName'])) {
                $this->triggerName = $vals['triggerName'];
            }
            if (isset($vals['triggerExpression'])) {
                $this->triggerExpression = $vals['triggerExpression'];
            }
            if (isset($vals['actionExpression'])) {
                $this->actionExpression = $vals['actionExpression'];
            }
            if (isset($vals['isInUnmanaged'])) {
                $this->isInUnmanaged = $vals['isInUnmanaged'];
            }
            if (isset($vals['ns'])) {
                $this->ns = $vals['ns'];
            }
        }
    }

    public function getName()
    {
        return 'WMTrigger';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->resourcePlanName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->triggerName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->triggerExpression);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->actionExpression);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isInUnmanaged);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ns);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WMTrigger');
        if ($this->resourcePlanName !== null) {
            $xfer += $output->writeFieldBegin('resourcePlanName', TType::STRING, 1);
            $xfer += $output->writeString($this->resourcePlanName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->triggerName !== null) {
            $xfer += $output->writeFieldBegin('triggerName', TType::STRING, 2);
            $xfer += $output->writeString($this->triggerName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->triggerExpression !== null) {
            $xfer += $output->writeFieldBegin('triggerExpression', TType::STRING, 3);
            $xfer += $output->writeString($this->triggerExpression);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->actionExpression !== null) {
            $xfer += $output->writeFieldBegin('actionExpression', TType::STRING, 4);
            $xfer += $output->writeString($this->actionExpression);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isInUnmanaged !== null) {
            $xfer += $output->writeFieldBegin('isInUnmanaged', TType::BOOL, 5);
            $xfer += $output->writeBool($this->isInUnmanaged);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ns !== null) {
            $xfer += $output->writeFieldBegin('ns', TType::STRING, 6);
            $xfer += $output->writeString($this->ns);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
