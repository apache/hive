/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class Table implements org.apache.thrift.TBase<Table, Table._Fields>, java.io.Serializable, Cloneable, Comparable<Table> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Table");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_ACCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAccessTime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RETENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("retention", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SD_FIELD_DESC = new org.apache.thrift.protocol.TField("sd", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionKeys", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField VIEW_ORIGINAL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewOriginalText", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VIEW_EXPANDED_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewExpandedText", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tableType", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PRIVILEGES_FIELD_DESC = new org.apache.thrift.protocol.TField("privileges", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField TEMPORARY_FIELD_DESC = new org.apache.thrift.protocol.TField("temporary", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField REWRITE_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("rewriteEnabled", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField CREATION_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("creationMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField CAT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField OWNER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerType", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField WRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("writeId", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField IS_STATS_COMPLIANT_FIELD_DESC = new org.apache.thrift.protocol.TField("isStatsCompliant", org.apache.thrift.protocol.TType.BOOL, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TableTupleSchemeFactory());
  }

  private String tableName; // required
  private String dbName; // required
  private String owner; // required
  private int createTime; // required
  private int lastAccessTime; // required
  private int retention; // required
  private StorageDescriptor sd; // required
  private List<FieldSchema> partitionKeys; // required
  private Map<String,String> parameters; // required
  private String viewOriginalText; // required
  private String viewExpandedText; // required
  private String tableType; // required
  private PrincipalPrivilegeSet privileges; // optional
  private boolean temporary; // optional
  private boolean rewriteEnabled; // optional
  private CreationMetadata creationMetadata; // optional
  private String catName; // optional
  private PrincipalType ownerType; // optional
  private long writeId; // optional
  private boolean isStatsCompliant; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    DB_NAME((short)2, "dbName"),
    OWNER((short)3, "owner"),
    CREATE_TIME((short)4, "createTime"),
    LAST_ACCESS_TIME((short)5, "lastAccessTime"),
    RETENTION((short)6, "retention"),
    SD((short)7, "sd"),
    PARTITION_KEYS((short)8, "partitionKeys"),
    PARAMETERS((short)9, "parameters"),
    VIEW_ORIGINAL_TEXT((short)10, "viewOriginalText"),
    VIEW_EXPANDED_TEXT((short)11, "viewExpandedText"),
    TABLE_TYPE((short)12, "tableType"),
    PRIVILEGES((short)13, "privileges"),
    TEMPORARY((short)14, "temporary"),
    REWRITE_ENABLED((short)15, "rewriteEnabled"),
    CREATION_METADATA((short)16, "creationMetadata"),
    CAT_NAME((short)17, "catName"),
    /**
     * 
     * @see PrincipalType
     */
    OWNER_TYPE((short)18, "ownerType"),
    WRITE_ID((short)19, "writeId"),
    IS_STATS_COMPLIANT((short)20, "isStatsCompliant");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // DB_NAME
          return DB_NAME;
        case 3: // OWNER
          return OWNER;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        case 5: // LAST_ACCESS_TIME
          return LAST_ACCESS_TIME;
        case 6: // RETENTION
          return RETENTION;
        case 7: // SD
          return SD;
        case 8: // PARTITION_KEYS
          return PARTITION_KEYS;
        case 9: // PARAMETERS
          return PARAMETERS;
        case 10: // VIEW_ORIGINAL_TEXT
          return VIEW_ORIGINAL_TEXT;
        case 11: // VIEW_EXPANDED_TEXT
          return VIEW_EXPANDED_TEXT;
        case 12: // TABLE_TYPE
          return TABLE_TYPE;
        case 13: // PRIVILEGES
          return PRIVILEGES;
        case 14: // TEMPORARY
          return TEMPORARY;
        case 15: // REWRITE_ENABLED
          return REWRITE_ENABLED;
        case 16: // CREATION_METADATA
          return CREATION_METADATA;
        case 17: // CAT_NAME
          return CAT_NAME;
        case 18: // OWNER_TYPE
          return OWNER_TYPE;
        case 19: // WRITE_ID
          return WRITE_ID;
        case 20: // IS_STATS_COMPLIANT
          return IS_STATS_COMPLIANT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __LASTACCESSTIME_ISSET_ID = 1;
  private static final int __RETENTION_ISSET_ID = 2;
  private static final int __TEMPORARY_ISSET_ID = 3;
  private static final int __REWRITEENABLED_ISSET_ID = 4;
  private static final int __WRITEID_ISSET_ID = 5;
  private static final int __ISSTATSCOMPLIANT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PRIVILEGES,_Fields.TEMPORARY,_Fields.REWRITE_ENABLED,_Fields.CREATION_METADATA,_Fields.CAT_NAME,_Fields.OWNER_TYPE,_Fields.WRITE_ID,_Fields.IS_STATS_COMPLIANT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_ACCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastAccessTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETENTION, new org.apache.thrift.meta_data.FieldMetaData("retention", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SD, new org.apache.thrift.meta_data.FieldMetaData("sd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StorageDescriptor.class)));
    tmpMap.put(_Fields.PARTITION_KEYS, new org.apache.thrift.meta_data.FieldMetaData("partitionKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldSchema.class))));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VIEW_ORIGINAL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("viewOriginalText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEW_EXPANDED_TEXT, new org.apache.thrift.meta_data.FieldMetaData("viewExpandedText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tableType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVILEGES, new org.apache.thrift.meta_data.FieldMetaData("privileges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrincipalPrivilegeSet.class)));
    tmpMap.put(_Fields.TEMPORARY, new org.apache.thrift.meta_data.FieldMetaData("temporary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REWRITE_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("rewriteEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATION_METADATA, new org.apache.thrift.meta_data.FieldMetaData("creationMetadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "CreationMetadata")));
    tmpMap.put(_Fields.CAT_NAME, new org.apache.thrift.meta_data.FieldMetaData("catName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ownerType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrincipalType.class)));
    tmpMap.put(_Fields.WRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("writeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_STATS_COMPLIANT, new org.apache.thrift.meta_data.FieldMetaData("isStatsCompliant", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Table.class, metaDataMap);
  }

  public Table() {
    this.temporary = false;

    this.ownerType = org.apache.hadoop.hive.metastore.api.PrincipalType.USER;

    this.writeId = -1L;

  }

  public Table(
    String tableName,
    String dbName,
    String owner,
    int createTime,
    int lastAccessTime,
    int retention,
    StorageDescriptor sd,
    List<FieldSchema> partitionKeys,
    Map<String,String> parameters,
    String viewOriginalText,
    String viewExpandedText,
    String tableType)
  {
    this();
    this.tableName = tableName;
    this.dbName = dbName;
    this.owner = owner;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.lastAccessTime = lastAccessTime;
    setLastAccessTimeIsSet(true);
    this.retention = retention;
    setRetentionIsSet(true);
    this.sd = sd;
    this.partitionKeys = partitionKeys;
    this.parameters = parameters;
    this.viewOriginalText = viewOriginalText;
    this.viewExpandedText = viewExpandedText;
    this.tableType = tableType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Table(Table other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    this.createTime = other.createTime;
    this.lastAccessTime = other.lastAccessTime;
    this.retention = other.retention;
    if (other.isSetSd()) {
      this.sd = new StorageDescriptor(other.sd);
    }
    if (other.isSetPartitionKeys()) {
      List<FieldSchema> __this__partitionKeys = new ArrayList<FieldSchema>(other.partitionKeys.size());
      for (FieldSchema other_element : other.partitionKeys) {
        __this__partitionKeys.add(new FieldSchema(other_element));
      }
      this.partitionKeys = __this__partitionKeys;
    }
    if (other.isSetParameters()) {
      Map<String,String> __this__parameters = new HashMap<String,String>(other.parameters);
      this.parameters = __this__parameters;
    }
    if (other.isSetViewOriginalText()) {
      this.viewOriginalText = other.viewOriginalText;
    }
    if (other.isSetViewExpandedText()) {
      this.viewExpandedText = other.viewExpandedText;
    }
    if (other.isSetTableType()) {
      this.tableType = other.tableType;
    }
    if (other.isSetPrivileges()) {
      this.privileges = new PrincipalPrivilegeSet(other.privileges);
    }
    this.temporary = other.temporary;
    this.rewriteEnabled = other.rewriteEnabled;
    if (other.isSetCreationMetadata()) {
      this.creationMetadata = other.creationMetadata;
    }
    if (other.isSetCatName()) {
      this.catName = other.catName;
    }
    if (other.isSetOwnerType()) {
      this.ownerType = other.ownerType;
    }
    this.writeId = other.writeId;
    this.isStatsCompliant = other.isStatsCompliant;
  }

  public Table deepCopy() {
    return new Table(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.dbName = null;
    this.owner = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setLastAccessTimeIsSet(false);
    this.lastAccessTime = 0;
    setRetentionIsSet(false);
    this.retention = 0;
    this.sd = null;
    this.partitionKeys = null;
    this.parameters = null;
    this.viewOriginalText = null;
    this.viewExpandedText = null;
    this.tableType = null;
    this.privileges = null;
    this.temporary = false;

    setRewriteEnabledIsSet(false);
    this.rewriteEnabled = false;
    this.creationMetadata = null;
    this.catName = null;
    this.ownerType = org.apache.hadoop.hive.metastore.api.PrincipalType.USER;

    this.writeId = -1L;

    setIsStatsCompliantIsSet(false);
    this.isStatsCompliant = false;
  }

  public String getTableName() {
    return this.tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getDbName() {
    return this.dbName;
  }

  public void setDbName(String dbName) {
    this.dbName = dbName;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public void setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getLastAccessTime() {
    return this.lastAccessTime;
  }

  public void setLastAccessTime(int lastAccessTime) {
    this.lastAccessTime = lastAccessTime;
    setLastAccessTimeIsSet(true);
  }

  public void unsetLastAccessTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACCESSTIME_ISSET_ID);
  }

  /** Returns true if field lastAccessTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAccessTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTACCESSTIME_ISSET_ID);
  }

  public void setLastAccessTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACCESSTIME_ISSET_ID, value);
  }

  public int getRetention() {
    return this.retention;
  }

  public void setRetention(int retention) {
    this.retention = retention;
    setRetentionIsSet(true);
  }

  public void unsetRetention() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETENTION_ISSET_ID);
  }

  /** Returns true if field retention is set (has been assigned a value) and false otherwise */
  public boolean isSetRetention() {
    return EncodingUtils.testBit(__isset_bitfield, __RETENTION_ISSET_ID);
  }

  public void setRetentionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETENTION_ISSET_ID, value);
  }

  public StorageDescriptor getSd() {
    return this.sd;
  }

  public void setSd(StorageDescriptor sd) {
    this.sd = sd;
  }

  public void unsetSd() {
    this.sd = null;
  }

  /** Returns true if field sd is set (has been assigned a value) and false otherwise */
  public boolean isSetSd() {
    return this.sd != null;
  }

  public void setSdIsSet(boolean value) {
    if (!value) {
      this.sd = null;
    }
  }

  public int getPartitionKeysSize() {
    return (this.partitionKeys == null) ? 0 : this.partitionKeys.size();
  }

  public java.util.Iterator<FieldSchema> getPartitionKeysIterator() {
    return (this.partitionKeys == null) ? null : this.partitionKeys.iterator();
  }

  public void addToPartitionKeys(FieldSchema elem) {
    if (this.partitionKeys == null) {
      this.partitionKeys = new ArrayList<FieldSchema>();
    }
    this.partitionKeys.add(elem);
  }

  public List<FieldSchema> getPartitionKeys() {
    return this.partitionKeys;
  }

  public void setPartitionKeys(List<FieldSchema> partitionKeys) {
    this.partitionKeys = partitionKeys;
  }

  public void unsetPartitionKeys() {
    this.partitionKeys = null;
  }

  /** Returns true if field partitionKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionKeys() {
    return this.partitionKeys != null;
  }

  public void setPartitionKeysIsSet(boolean value) {
    if (!value) {
      this.partitionKeys = null;
    }
  }

  public int getParametersSize() {
    return (this.parameters == null) ? 0 : this.parameters.size();
  }

  public void putToParameters(String key, String val) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String,String>();
    }
    this.parameters.put(key, val);
  }

  public Map<String,String> getParameters() {
    return this.parameters;
  }

  public void setParameters(Map<String,String> parameters) {
    this.parameters = parameters;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public String getViewOriginalText() {
    return this.viewOriginalText;
  }

  public void setViewOriginalText(String viewOriginalText) {
    this.viewOriginalText = viewOriginalText;
  }

  public void unsetViewOriginalText() {
    this.viewOriginalText = null;
  }

  /** Returns true if field viewOriginalText is set (has been assigned a value) and false otherwise */
  public boolean isSetViewOriginalText() {
    return this.viewOriginalText != null;
  }

  public void setViewOriginalTextIsSet(boolean value) {
    if (!value) {
      this.viewOriginalText = null;
    }
  }

  public String getViewExpandedText() {
    return this.viewExpandedText;
  }

  public void setViewExpandedText(String viewExpandedText) {
    this.viewExpandedText = viewExpandedText;
  }

  public void unsetViewExpandedText() {
    this.viewExpandedText = null;
  }

  /** Returns true if field viewExpandedText is set (has been assigned a value) and false otherwise */
  public boolean isSetViewExpandedText() {
    return this.viewExpandedText != null;
  }

  public void setViewExpandedTextIsSet(boolean value) {
    if (!value) {
      this.viewExpandedText = null;
    }
  }

  public String getTableType() {
    return this.tableType;
  }

  public void setTableType(String tableType) {
    this.tableType = tableType;
  }

  public void unsetTableType() {
    this.tableType = null;
  }

  /** Returns true if field tableType is set (has been assigned a value) and false otherwise */
  public boolean isSetTableType() {
    return this.tableType != null;
  }

  public void setTableTypeIsSet(boolean value) {
    if (!value) {
      this.tableType = null;
    }
  }

  public PrincipalPrivilegeSet getPrivileges() {
    return this.privileges;
  }

  public void setPrivileges(PrincipalPrivilegeSet privileges) {
    this.privileges = privileges;
  }

  public void unsetPrivileges() {
    this.privileges = null;
  }

  /** Returns true if field privileges is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivileges() {
    return this.privileges != null;
  }

  public void setPrivilegesIsSet(boolean value) {
    if (!value) {
      this.privileges = null;
    }
  }

  public boolean isTemporary() {
    return this.temporary;
  }

  public void setTemporary(boolean temporary) {
    this.temporary = temporary;
    setTemporaryIsSet(true);
  }

  public void unsetTemporary() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPORARY_ISSET_ID);
  }

  /** Returns true if field temporary is set (has been assigned a value) and false otherwise */
  public boolean isSetTemporary() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPORARY_ISSET_ID);
  }

  public void setTemporaryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPORARY_ISSET_ID, value);
  }

  public boolean isRewriteEnabled() {
    return this.rewriteEnabled;
  }

  public void setRewriteEnabled(boolean rewriteEnabled) {
    this.rewriteEnabled = rewriteEnabled;
    setRewriteEnabledIsSet(true);
  }

  public void unsetRewriteEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWRITEENABLED_ISSET_ID);
  }

  /** Returns true if field rewriteEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetRewriteEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __REWRITEENABLED_ISSET_ID);
  }

  public void setRewriteEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWRITEENABLED_ISSET_ID, value);
  }

  public CreationMetadata getCreationMetadata() {
    return this.creationMetadata;
  }

  public void setCreationMetadata(CreationMetadata creationMetadata) {
    this.creationMetadata = creationMetadata;
  }

  public void unsetCreationMetadata() {
    this.creationMetadata = null;
  }

  /** Returns true if field creationMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationMetadata() {
    return this.creationMetadata != null;
  }

  public void setCreationMetadataIsSet(boolean value) {
    if (!value) {
      this.creationMetadata = null;
    }
  }

  public String getCatName() {
    return this.catName;
  }

  public void setCatName(String catName) {
    this.catName = catName;
  }

  public void unsetCatName() {
    this.catName = null;
  }

  /** Returns true if field catName is set (has been assigned a value) and false otherwise */
  public boolean isSetCatName() {
    return this.catName != null;
  }

  public void setCatNameIsSet(boolean value) {
    if (!value) {
      this.catName = null;
    }
  }

  /**
   * 
   * @see PrincipalType
   */
  public PrincipalType getOwnerType() {
    return this.ownerType;
  }

  /**
   * 
   * @see PrincipalType
   */
  public void setOwnerType(PrincipalType ownerType) {
    this.ownerType = ownerType;
  }

  public void unsetOwnerType() {
    this.ownerType = null;
  }

  /** Returns true if field ownerType is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerType() {
    return this.ownerType != null;
  }

  public void setOwnerTypeIsSet(boolean value) {
    if (!value) {
      this.ownerType = null;
    }
  }

  public long getWriteId() {
    return this.writeId;
  }

  public void setWriteId(long writeId) {
    this.writeId = writeId;
    setWriteIdIsSet(true);
  }

  public void unsetWriteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITEID_ISSET_ID);
  }

  /** Returns true if field writeId is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteId() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITEID_ISSET_ID);
  }

  public void setWriteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITEID_ISSET_ID, value);
  }

  public boolean isIsStatsCompliant() {
    return this.isStatsCompliant;
  }

  public void setIsStatsCompliant(boolean isStatsCompliant) {
    this.isStatsCompliant = isStatsCompliant;
    setIsStatsCompliantIsSet(true);
  }

  public void unsetIsStatsCompliant() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSTATSCOMPLIANT_ISSET_ID);
  }

  /** Returns true if field isStatsCompliant is set (has been assigned a value) and false otherwise */
  public boolean isSetIsStatsCompliant() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSTATSCOMPLIANT_ISSET_ID);
  }

  public void setIsStatsCompliantIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSTATSCOMPLIANT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((String)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case LAST_ACCESS_TIME:
      if (value == null) {
        unsetLastAccessTime();
      } else {
        setLastAccessTime((Integer)value);
      }
      break;

    case RETENTION:
      if (value == null) {
        unsetRetention();
      } else {
        setRetention((Integer)value);
      }
      break;

    case SD:
      if (value == null) {
        unsetSd();
      } else {
        setSd((StorageDescriptor)value);
      }
      break;

    case PARTITION_KEYS:
      if (value == null) {
        unsetPartitionKeys();
      } else {
        setPartitionKeys((List<FieldSchema>)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((Map<String,String>)value);
      }
      break;

    case VIEW_ORIGINAL_TEXT:
      if (value == null) {
        unsetViewOriginalText();
      } else {
        setViewOriginalText((String)value);
      }
      break;

    case VIEW_EXPANDED_TEXT:
      if (value == null) {
        unsetViewExpandedText();
      } else {
        setViewExpandedText((String)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTableType();
      } else {
        setTableType((String)value);
      }
      break;

    case PRIVILEGES:
      if (value == null) {
        unsetPrivileges();
      } else {
        setPrivileges((PrincipalPrivilegeSet)value);
      }
      break;

    case TEMPORARY:
      if (value == null) {
        unsetTemporary();
      } else {
        setTemporary((Boolean)value);
      }
      break;

    case REWRITE_ENABLED:
      if (value == null) {
        unsetRewriteEnabled();
      } else {
        setRewriteEnabled((Boolean)value);
      }
      break;

    case CREATION_METADATA:
      if (value == null) {
        unsetCreationMetadata();
      } else {
        setCreationMetadata((CreationMetadata)value);
      }
      break;

    case CAT_NAME:
      if (value == null) {
        unsetCatName();
      } else {
        setCatName((String)value);
      }
      break;

    case OWNER_TYPE:
      if (value == null) {
        unsetOwnerType();
      } else {
        setOwnerType((PrincipalType)value);
      }
      break;

    case WRITE_ID:
      if (value == null) {
        unsetWriteId();
      } else {
        setWriteId((Long)value);
      }
      break;

    case IS_STATS_COMPLIANT:
      if (value == null) {
        unsetIsStatsCompliant();
      } else {
        setIsStatsCompliant((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case DB_NAME:
      return getDbName();

    case OWNER:
      return getOwner();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_ACCESS_TIME:
      return getLastAccessTime();

    case RETENTION:
      return getRetention();

    case SD:
      return getSd();

    case PARTITION_KEYS:
      return getPartitionKeys();

    case PARAMETERS:
      return getParameters();

    case VIEW_ORIGINAL_TEXT:
      return getViewOriginalText();

    case VIEW_EXPANDED_TEXT:
      return getViewExpandedText();

    case TABLE_TYPE:
      return getTableType();

    case PRIVILEGES:
      return getPrivileges();

    case TEMPORARY:
      return isTemporary();

    case REWRITE_ENABLED:
      return isRewriteEnabled();

    case CREATION_METADATA:
      return getCreationMetadata();

    case CAT_NAME:
      return getCatName();

    case OWNER_TYPE:
      return getOwnerType();

    case WRITE_ID:
      return getWriteId();

    case IS_STATS_COMPLIANT:
      return isIsStatsCompliant();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case DB_NAME:
      return isSetDbName();
    case OWNER:
      return isSetOwner();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_ACCESS_TIME:
      return isSetLastAccessTime();
    case RETENTION:
      return isSetRetention();
    case SD:
      return isSetSd();
    case PARTITION_KEYS:
      return isSetPartitionKeys();
    case PARAMETERS:
      return isSetParameters();
    case VIEW_ORIGINAL_TEXT:
      return isSetViewOriginalText();
    case VIEW_EXPANDED_TEXT:
      return isSetViewExpandedText();
    case TABLE_TYPE:
      return isSetTableType();
    case PRIVILEGES:
      return isSetPrivileges();
    case TEMPORARY:
      return isSetTemporary();
    case REWRITE_ENABLED:
      return isSetRewriteEnabled();
    case CREATION_METADATA:
      return isSetCreationMetadata();
    case CAT_NAME:
      return isSetCatName();
    case OWNER_TYPE:
      return isSetOwnerType();
    case WRITE_ID:
      return isSetWriteId();
    case IS_STATS_COMPLIANT:
      return isSetIsStatsCompliant();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Table)
      return this.equals((Table)that);
    return false;
  }

  public boolean equals(Table that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_lastAccessTime = true;
    boolean that_present_lastAccessTime = true;
    if (this_present_lastAccessTime || that_present_lastAccessTime) {
      if (!(this_present_lastAccessTime && that_present_lastAccessTime))
        return false;
      if (this.lastAccessTime != that.lastAccessTime)
        return false;
    }

    boolean this_present_retention = true;
    boolean that_present_retention = true;
    if (this_present_retention || that_present_retention) {
      if (!(this_present_retention && that_present_retention))
        return false;
      if (this.retention != that.retention)
        return false;
    }

    boolean this_present_sd = true && this.isSetSd();
    boolean that_present_sd = true && that.isSetSd();
    if (this_present_sd || that_present_sd) {
      if (!(this_present_sd && that_present_sd))
        return false;
      if (!this.sd.equals(that.sd))
        return false;
    }

    boolean this_present_partitionKeys = true && this.isSetPartitionKeys();
    boolean that_present_partitionKeys = true && that.isSetPartitionKeys();
    if (this_present_partitionKeys || that_present_partitionKeys) {
      if (!(this_present_partitionKeys && that_present_partitionKeys))
        return false;
      if (!this.partitionKeys.equals(that.partitionKeys))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_viewOriginalText = true && this.isSetViewOriginalText();
    boolean that_present_viewOriginalText = true && that.isSetViewOriginalText();
    if (this_present_viewOriginalText || that_present_viewOriginalText) {
      if (!(this_present_viewOriginalText && that_present_viewOriginalText))
        return false;
      if (!this.viewOriginalText.equals(that.viewOriginalText))
        return false;
    }

    boolean this_present_viewExpandedText = true && this.isSetViewExpandedText();
    boolean that_present_viewExpandedText = true && that.isSetViewExpandedText();
    if (this_present_viewExpandedText || that_present_viewExpandedText) {
      if (!(this_present_viewExpandedText && that_present_viewExpandedText))
        return false;
      if (!this.viewExpandedText.equals(that.viewExpandedText))
        return false;
    }

    boolean this_present_tableType = true && this.isSetTableType();
    boolean that_present_tableType = true && that.isSetTableType();
    if (this_present_tableType || that_present_tableType) {
      if (!(this_present_tableType && that_present_tableType))
        return false;
      if (!this.tableType.equals(that.tableType))
        return false;
    }

    boolean this_present_privileges = true && this.isSetPrivileges();
    boolean that_present_privileges = true && that.isSetPrivileges();
    if (this_present_privileges || that_present_privileges) {
      if (!(this_present_privileges && that_present_privileges))
        return false;
      if (!this.privileges.equals(that.privileges))
        return false;
    }

    boolean this_present_temporary = true && this.isSetTemporary();
    boolean that_present_temporary = true && that.isSetTemporary();
    if (this_present_temporary || that_present_temporary) {
      if (!(this_present_temporary && that_present_temporary))
        return false;
      if (this.temporary != that.temporary)
        return false;
    }

    boolean this_present_rewriteEnabled = true && this.isSetRewriteEnabled();
    boolean that_present_rewriteEnabled = true && that.isSetRewriteEnabled();
    if (this_present_rewriteEnabled || that_present_rewriteEnabled) {
      if (!(this_present_rewriteEnabled && that_present_rewriteEnabled))
        return false;
      if (this.rewriteEnabled != that.rewriteEnabled)
        return false;
    }

    boolean this_present_creationMetadata = true && this.isSetCreationMetadata();
    boolean that_present_creationMetadata = true && that.isSetCreationMetadata();
    if (this_present_creationMetadata || that_present_creationMetadata) {
      if (!(this_present_creationMetadata && that_present_creationMetadata))
        return false;
      if (!this.creationMetadata.equals(that.creationMetadata))
        return false;
    }

    boolean this_present_catName = true && this.isSetCatName();
    boolean that_present_catName = true && that.isSetCatName();
    if (this_present_catName || that_present_catName) {
      if (!(this_present_catName && that_present_catName))
        return false;
      if (!this.catName.equals(that.catName))
        return false;
    }

    boolean this_present_ownerType = true && this.isSetOwnerType();
    boolean that_present_ownerType = true && that.isSetOwnerType();
    if (this_present_ownerType || that_present_ownerType) {
      if (!(this_present_ownerType && that_present_ownerType))
        return false;
      if (!this.ownerType.equals(that.ownerType))
        return false;
    }

    boolean this_present_writeId = true && this.isSetWriteId();
    boolean that_present_writeId = true && that.isSetWriteId();
    if (this_present_writeId || that_present_writeId) {
      if (!(this_present_writeId && that_present_writeId))
        return false;
      if (this.writeId != that.writeId)
        return false;
    }

    boolean this_present_isStatsCompliant = true && this.isSetIsStatsCompliant();
    boolean that_present_isStatsCompliant = true && that.isSetIsStatsCompliant();
    if (this_present_isStatsCompliant || that_present_isStatsCompliant) {
      if (!(this_present_isStatsCompliant && that_present_isStatsCompliant))
        return false;
      if (this.isStatsCompliant != that.isStatsCompliant)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_dbName = true && (isSetDbName());
    list.add(present_dbName);
    if (present_dbName)
      list.add(dbName);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_lastAccessTime = true;
    list.add(present_lastAccessTime);
    if (present_lastAccessTime)
      list.add(lastAccessTime);

    boolean present_retention = true;
    list.add(present_retention);
    if (present_retention)
      list.add(retention);

    boolean present_sd = true && (isSetSd());
    list.add(present_sd);
    if (present_sd)
      list.add(sd);

    boolean present_partitionKeys = true && (isSetPartitionKeys());
    list.add(present_partitionKeys);
    if (present_partitionKeys)
      list.add(partitionKeys);

    boolean present_parameters = true && (isSetParameters());
    list.add(present_parameters);
    if (present_parameters)
      list.add(parameters);

    boolean present_viewOriginalText = true && (isSetViewOriginalText());
    list.add(present_viewOriginalText);
    if (present_viewOriginalText)
      list.add(viewOriginalText);

    boolean present_viewExpandedText = true && (isSetViewExpandedText());
    list.add(present_viewExpandedText);
    if (present_viewExpandedText)
      list.add(viewExpandedText);

    boolean present_tableType = true && (isSetTableType());
    list.add(present_tableType);
    if (present_tableType)
      list.add(tableType);

    boolean present_privileges = true && (isSetPrivileges());
    list.add(present_privileges);
    if (present_privileges)
      list.add(privileges);

    boolean present_temporary = true && (isSetTemporary());
    list.add(present_temporary);
    if (present_temporary)
      list.add(temporary);

    boolean present_rewriteEnabled = true && (isSetRewriteEnabled());
    list.add(present_rewriteEnabled);
    if (present_rewriteEnabled)
      list.add(rewriteEnabled);

    boolean present_creationMetadata = true && (isSetCreationMetadata());
    list.add(present_creationMetadata);
    if (present_creationMetadata)
      list.add(creationMetadata);

    boolean present_catName = true && (isSetCatName());
    list.add(present_catName);
    if (present_catName)
      list.add(catName);

    boolean present_ownerType = true && (isSetOwnerType());
    list.add(present_ownerType);
    if (present_ownerType)
      list.add(ownerType.getValue());

    boolean present_writeId = true && (isSetWriteId());
    list.add(present_writeId);
    if (present_writeId)
      list.add(writeId);

    boolean present_isStatsCompliant = true && (isSetIsStatsCompliant());
    list.add(present_isStatsCompliant);
    if (present_isStatsCompliant)
      list.add(isStatsCompliant);

    return list.hashCode();
  }

  @Override
  public int compareTo(Table other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbName()).compareTo(other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAccessTime()).compareTo(other.isSetLastAccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAccessTime, other.lastAccessTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetention()).compareTo(other.isSetRetention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retention, other.retention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSd()).compareTo(other.isSetSd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sd, other.sd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionKeys()).compareTo(other.isSetPartitionKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionKeys, other.partitionKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewOriginalText()).compareTo(other.isSetViewOriginalText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewOriginalText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewOriginalText, other.viewOriginalText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewExpandedText()).compareTo(other.isSetViewExpandedText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewExpandedText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewExpandedText, other.viewExpandedText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableType()).compareTo(other.isSetTableType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableType, other.tableType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivileges()).compareTo(other.isSetPrivileges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivileges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privileges, other.privileges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemporary()).compareTo(other.isSetTemporary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemporary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temporary, other.temporary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewriteEnabled()).compareTo(other.isSetRewriteEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewriteEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewriteEnabled, other.rewriteEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationMetadata()).compareTo(other.isSetCreationMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationMetadata, other.creationMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatName()).compareTo(other.isSetCatName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catName, other.catName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerType()).compareTo(other.isSetOwnerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerType, other.ownerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteId()).compareTo(other.isSetWriteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeId, other.writeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsStatsCompliant()).compareTo(other.isSetIsStatsCompliant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStatsCompliant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStatsCompliant, other.isStatsCompliant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Table(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbName:");
    if (this.dbName == null) {
      sb.append("null");
    } else {
      sb.append(this.dbName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAccessTime:");
    sb.append(this.lastAccessTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retention:");
    sb.append(this.retention);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sd:");
    if (this.sd == null) {
      sb.append("null");
    } else {
      sb.append(this.sd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionKeys:");
    if (this.partitionKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionKeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameters:");
    if (this.parameters == null) {
      sb.append("null");
    } else {
      sb.append(this.parameters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewOriginalText:");
    if (this.viewOriginalText == null) {
      sb.append("null");
    } else {
      sb.append(this.viewOriginalText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewExpandedText:");
    if (this.viewExpandedText == null) {
      sb.append("null");
    } else {
      sb.append(this.viewExpandedText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableType:");
    if (this.tableType == null) {
      sb.append("null");
    } else {
      sb.append(this.tableType);
    }
    first = false;
    if (isSetPrivileges()) {
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
    }
    if (isSetTemporary()) {
      if (!first) sb.append(", ");
      sb.append("temporary:");
      sb.append(this.temporary);
      first = false;
    }
    if (isSetRewriteEnabled()) {
      if (!first) sb.append(", ");
      sb.append("rewriteEnabled:");
      sb.append(this.rewriteEnabled);
      first = false;
    }
    if (isSetCreationMetadata()) {
      if (!first) sb.append(", ");
      sb.append("creationMetadata:");
      if (this.creationMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.creationMetadata);
      }
      first = false;
    }
    if (isSetCatName()) {
      if (!first) sb.append(", ");
      sb.append("catName:");
      if (this.catName == null) {
        sb.append("null");
      } else {
        sb.append(this.catName);
      }
      first = false;
    }
    if (isSetOwnerType()) {
      if (!first) sb.append(", ");
      sb.append("ownerType:");
      if (this.ownerType == null) {
        sb.append("null");
      } else {
        sb.append(this.ownerType);
      }
      first = false;
    }
    if (isSetWriteId()) {
      if (!first) sb.append(", ");
      sb.append("writeId:");
      sb.append(this.writeId);
      first = false;
    }
    if (isSetIsStatsCompliant()) {
      if (!first) sb.append(", ");
      sb.append("isStatsCompliant:");
      sb.append(this.isStatsCompliant);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sd != null) {
      sd.validate();
    }
    if (privileges != null) {
      privileges.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableStandardSchemeFactory implements SchemeFactory {
    public TableStandardScheme getScheme() {
      return new TableStandardScheme();
    }
  }

  private static class TableStandardScheme extends StandardScheme<Table> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Table struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_ACCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastAccessTime = iprot.readI32();
              struct.setLastAccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RETENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retention = iprot.readI32();
              struct.setRetentionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sd = new StorageDescriptor();
              struct.sd.read(iprot);
              struct.setSdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list206 = iprot.readListBegin();
                struct.partitionKeys = new ArrayList<FieldSchema>(_list206.size);
                FieldSchema _elem207;
                for (int _i208 = 0; _i208 < _list206.size; ++_i208)
                {
                  _elem207 = new FieldSchema();
                  _elem207.read(iprot);
                  struct.partitionKeys.add(_elem207);
                }
                iprot.readListEnd();
              }
              struct.setPartitionKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map209 = iprot.readMapBegin();
                struct.parameters = new HashMap<String,String>(2*_map209.size);
                String _key210;
                String _val211;
                for (int _i212 = 0; _i212 < _map209.size; ++_i212)
                {
                  _key210 = iprot.readString();
                  _val211 = iprot.readString();
                  struct.parameters.put(_key210, _val211);
                }
                iprot.readMapEnd();
              }
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VIEW_ORIGINAL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewOriginalText = iprot.readString();
              struct.setViewOriginalTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VIEW_EXPANDED_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewExpandedText = iprot.readString();
              struct.setViewExpandedTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableType = iprot.readString();
              struct.setTableTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRIVILEGES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.privileges = new PrincipalPrivilegeSet();
              struct.privileges.read(iprot);
              struct.setPrivilegesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TEMPORARY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.temporary = iprot.readBool();
              struct.setTemporaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REWRITE_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rewriteEnabled = iprot.readBool();
              struct.setRewriteEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATION_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.creationMetadata = new CreationMetadata();
              struct.creationMetadata.read(iprot);
              struct.setCreationMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CAT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catName = iprot.readString();
              struct.setCatNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OWNER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ownerType = org.apache.hadoop.hive.metastore.api.PrincipalType.findByValue(iprot.readI32());
              struct.setOwnerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // WRITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.writeId = iprot.readI64();
              struct.setWriteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_STATS_COMPLIANT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isStatsCompliant = iprot.readBool();
              struct.setIsStatsCompliantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Table struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.dbName != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.dbName);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_ACCESS_TIME_FIELD_DESC);
      oprot.writeI32(struct.lastAccessTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETENTION_FIELD_DESC);
      oprot.writeI32(struct.retention);
      oprot.writeFieldEnd();
      if (struct.sd != null) {
        oprot.writeFieldBegin(SD_FIELD_DESC);
        struct.sd.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.partitionKeys != null) {
        oprot.writeFieldBegin(PARTITION_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partitionKeys.size()));
          for (FieldSchema _iter213 : struct.partitionKeys)
          {
            _iter213.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.parameters != null) {
        oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
          for (Map.Entry<String, String> _iter214 : struct.parameters.entrySet())
          {
            oprot.writeString(_iter214.getKey());
            oprot.writeString(_iter214.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.viewOriginalText != null) {
        oprot.writeFieldBegin(VIEW_ORIGINAL_TEXT_FIELD_DESC);
        oprot.writeString(struct.viewOriginalText);
        oprot.writeFieldEnd();
      }
      if (struct.viewExpandedText != null) {
        oprot.writeFieldBegin(VIEW_EXPANDED_TEXT_FIELD_DESC);
        oprot.writeString(struct.viewExpandedText);
        oprot.writeFieldEnd();
      }
      if (struct.tableType != null) {
        oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
        oprot.writeString(struct.tableType);
        oprot.writeFieldEnd();
      }
      if (struct.privileges != null) {
        if (struct.isSetPrivileges()) {
          oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
          struct.privileges.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTemporary()) {
        oprot.writeFieldBegin(TEMPORARY_FIELD_DESC);
        oprot.writeBool(struct.temporary);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRewriteEnabled()) {
        oprot.writeFieldBegin(REWRITE_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.rewriteEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.creationMetadata != null) {
        if (struct.isSetCreationMetadata()) {
          oprot.writeFieldBegin(CREATION_METADATA_FIELD_DESC);
          struct.creationMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catName != null) {
        if (struct.isSetCatName()) {
          oprot.writeFieldBegin(CAT_NAME_FIELD_DESC);
          oprot.writeString(struct.catName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ownerType != null) {
        if (struct.isSetOwnerType()) {
          oprot.writeFieldBegin(OWNER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.ownerType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWriteId()) {
        oprot.writeFieldBegin(WRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.writeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsStatsCompliant()) {
        oprot.writeFieldBegin(IS_STATS_COMPLIANT_FIELD_DESC);
        oprot.writeBool(struct.isStatsCompliant);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableTupleSchemeFactory implements SchemeFactory {
    public TableTupleScheme getScheme() {
      return new TableTupleScheme();
    }
  }

  private static class TableTupleScheme extends TupleScheme<Table> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Table struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTableName()) {
        optionals.set(0);
      }
      if (struct.isSetDbName()) {
        optionals.set(1);
      }
      if (struct.isSetOwner()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetLastAccessTime()) {
        optionals.set(4);
      }
      if (struct.isSetRetention()) {
        optionals.set(5);
      }
      if (struct.isSetSd()) {
        optionals.set(6);
      }
      if (struct.isSetPartitionKeys()) {
        optionals.set(7);
      }
      if (struct.isSetParameters()) {
        optionals.set(8);
      }
      if (struct.isSetViewOriginalText()) {
        optionals.set(9);
      }
      if (struct.isSetViewExpandedText()) {
        optionals.set(10);
      }
      if (struct.isSetTableType()) {
        optionals.set(11);
      }
      if (struct.isSetPrivileges()) {
        optionals.set(12);
      }
      if (struct.isSetTemporary()) {
        optionals.set(13);
      }
      if (struct.isSetRewriteEnabled()) {
        optionals.set(14);
      }
      if (struct.isSetCreationMetadata()) {
        optionals.set(15);
      }
      if (struct.isSetCatName()) {
        optionals.set(16);
      }
      if (struct.isSetOwnerType()) {
        optionals.set(17);
      }
      if (struct.isSetWriteId()) {
        optionals.set(18);
      }
      if (struct.isSetIsStatsCompliant()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.dbName);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetLastAccessTime()) {
        oprot.writeI32(struct.lastAccessTime);
      }
      if (struct.isSetRetention()) {
        oprot.writeI32(struct.retention);
      }
      if (struct.isSetSd()) {
        struct.sd.write(oprot);
      }
      if (struct.isSetPartitionKeys()) {
        {
          oprot.writeI32(struct.partitionKeys.size());
          for (FieldSchema _iter215 : struct.partitionKeys)
          {
            _iter215.write(oprot);
          }
        }
      }
      if (struct.isSetParameters()) {
        {
          oprot.writeI32(struct.parameters.size());
          for (Map.Entry<String, String> _iter216 : struct.parameters.entrySet())
          {
            oprot.writeString(_iter216.getKey());
            oprot.writeString(_iter216.getValue());
          }
        }
      }
      if (struct.isSetViewOriginalText()) {
        oprot.writeString(struct.viewOriginalText);
      }
      if (struct.isSetViewExpandedText()) {
        oprot.writeString(struct.viewExpandedText);
      }
      if (struct.isSetTableType()) {
        oprot.writeString(struct.tableType);
      }
      if (struct.isSetPrivileges()) {
        struct.privileges.write(oprot);
      }
      if (struct.isSetTemporary()) {
        oprot.writeBool(struct.temporary);
      }
      if (struct.isSetRewriteEnabled()) {
        oprot.writeBool(struct.rewriteEnabled);
      }
      if (struct.isSetCreationMetadata()) {
        struct.creationMetadata.write(oprot);
      }
      if (struct.isSetCatName()) {
        oprot.writeString(struct.catName);
      }
      if (struct.isSetOwnerType()) {
        oprot.writeI32(struct.ownerType.getValue());
      }
      if (struct.isSetWriteId()) {
        oprot.writeI64(struct.writeId);
      }
      if (struct.isSetIsStatsCompliant()) {
        oprot.writeBool(struct.isStatsCompliant);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Table struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dbName = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastAccessTime = iprot.readI32();
        struct.setLastAccessTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.retention = iprot.readI32();
        struct.setRetentionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sd = new StorageDescriptor();
        struct.sd.read(iprot);
        struct.setSdIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list217 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partitionKeys = new ArrayList<FieldSchema>(_list217.size);
          FieldSchema _elem218;
          for (int _i219 = 0; _i219 < _list217.size; ++_i219)
          {
            _elem218 = new FieldSchema();
            _elem218.read(iprot);
            struct.partitionKeys.add(_elem218);
          }
        }
        struct.setPartitionKeysIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map220 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parameters = new HashMap<String,String>(2*_map220.size);
          String _key221;
          String _val222;
          for (int _i223 = 0; _i223 < _map220.size; ++_i223)
          {
            _key221 = iprot.readString();
            _val222 = iprot.readString();
            struct.parameters.put(_key221, _val222);
          }
        }
        struct.setParametersIsSet(true);
      }
      if (incoming.get(9)) {
        struct.viewOriginalText = iprot.readString();
        struct.setViewOriginalTextIsSet(true);
      }
      if (incoming.get(10)) {
        struct.viewExpandedText = iprot.readString();
        struct.setViewExpandedTextIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tableType = iprot.readString();
        struct.setTableTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.privileges = new PrincipalPrivilegeSet();
        struct.privileges.read(iprot);
        struct.setPrivilegesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.temporary = iprot.readBool();
        struct.setTemporaryIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rewriteEnabled = iprot.readBool();
        struct.setRewriteEnabledIsSet(true);
      }
      if (incoming.get(15)) {
        struct.creationMetadata = new CreationMetadata();
        struct.creationMetadata.read(iprot);
        struct.setCreationMetadataIsSet(true);
      }
      if (incoming.get(16)) {
        struct.catName = iprot.readString();
        struct.setCatNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ownerType = org.apache.hadoop.hive.metastore.api.PrincipalType.findByValue(iprot.readI32());
        struct.setOwnerTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.writeId = iprot.readI64();
        struct.setWriteIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.isStatsCompliant = iprot.readBool();
        struct.setIsStatsCompliantIsSet(true);
      }
    }
  }

}

