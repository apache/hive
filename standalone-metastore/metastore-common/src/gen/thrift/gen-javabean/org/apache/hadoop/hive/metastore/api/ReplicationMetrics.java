/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class ReplicationMetrics implements org.apache.thrift.TBase<ReplicationMetrics, ReplicationMetrics._Fields>, java.io.Serializable, Cloneable, Comparable<ReplicationMetrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReplicationMetrics");

  private static final org.apache.thrift.protocol.TField SCHEDULED_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduledExecutionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("policy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DUMP_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dumpExecutionId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReplicationMetricsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReplicationMetricsTupleSchemeFactory());
  }

  private long scheduledExecutionId; // required
  private String policy; // required
  private long dumpExecutionId; // required
  private String metadata; // optional
  private String progress; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEDULED_EXECUTION_ID((short)1, "scheduledExecutionId"),
    POLICY((short)2, "policy"),
    DUMP_EXECUTION_ID((short)3, "dumpExecutionId"),
    METADATA((short)4, "metadata"),
    PROGRESS((short)5, "progress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEDULED_EXECUTION_ID
          return SCHEDULED_EXECUTION_ID;
        case 2: // POLICY
          return POLICY;
        case 3: // DUMP_EXECUTION_ID
          return DUMP_EXECUTION_ID;
        case 4: // METADATA
          return METADATA;
        case 5: // PROGRESS
          return PROGRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCHEDULEDEXECUTIONID_ISSET_ID = 0;
  private static final int __DUMPEXECUTIONID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.METADATA,_Fields.PROGRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEDULED_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("scheduledExecutionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POLICY, new org.apache.thrift.meta_data.FieldMetaData("policy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUMP_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("dumpExecutionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReplicationMetrics.class, metaDataMap);
  }

  public ReplicationMetrics() {
  }

  public ReplicationMetrics(
    long scheduledExecutionId,
    String policy,
    long dumpExecutionId)
  {
    this();
    this.scheduledExecutionId = scheduledExecutionId;
    setScheduledExecutionIdIsSet(true);
    this.policy = policy;
    this.dumpExecutionId = dumpExecutionId;
    setDumpExecutionIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReplicationMetrics(ReplicationMetrics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scheduledExecutionId = other.scheduledExecutionId;
    if (other.isSetPolicy()) {
      this.policy = other.policy;
    }
    this.dumpExecutionId = other.dumpExecutionId;
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
    if (other.isSetProgress()) {
      this.progress = other.progress;
    }
  }

  public ReplicationMetrics deepCopy() {
    return new ReplicationMetrics(this);
  }

  @Override
  public void clear() {
    setScheduledExecutionIdIsSet(false);
    this.scheduledExecutionId = 0;
    this.policy = null;
    setDumpExecutionIdIsSet(false);
    this.dumpExecutionId = 0;
    this.metadata = null;
    this.progress = null;
  }

  public long getScheduledExecutionId() {
    return this.scheduledExecutionId;
  }

  public void setScheduledExecutionId(long scheduledExecutionId) {
    this.scheduledExecutionId = scheduledExecutionId;
    setScheduledExecutionIdIsSet(true);
  }

  public void unsetScheduledExecutionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULEDEXECUTIONID_ISSET_ID);
  }

  /** Returns true if field scheduledExecutionId is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduledExecutionId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULEDEXECUTIONID_ISSET_ID);
  }

  public void setScheduledExecutionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULEDEXECUTIONID_ISSET_ID, value);
  }

  public String getPolicy() {
    return this.policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }

  public void unsetPolicy() {
    this.policy = null;
  }

  /** Returns true if field policy is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicy() {
    return this.policy != null;
  }

  public void setPolicyIsSet(boolean value) {
    if (!value) {
      this.policy = null;
    }
  }

  public long getDumpExecutionId() {
    return this.dumpExecutionId;
  }

  public void setDumpExecutionId(long dumpExecutionId) {
    this.dumpExecutionId = dumpExecutionId;
    setDumpExecutionIdIsSet(true);
  }

  public void unsetDumpExecutionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUMPEXECUTIONID_ISSET_ID);
  }

  /** Returns true if field dumpExecutionId is set (has been assigned a value) and false otherwise */
  public boolean isSetDumpExecutionId() {
    return EncodingUtils.testBit(__isset_bitfield, __DUMPEXECUTIONID_ISSET_ID);
  }

  public void setDumpExecutionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUMPEXECUTIONID_ISSET_ID, value);
  }

  public String getMetadata() {
    return this.metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public String getProgress() {
    return this.progress;
  }

  public void setProgress(String progress) {
    this.progress = progress;
  }

  public void unsetProgress() {
    this.progress = null;
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return this.progress != null;
  }

  public void setProgressIsSet(boolean value) {
    if (!value) {
      this.progress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEDULED_EXECUTION_ID:
      if (value == null) {
        unsetScheduledExecutionId();
      } else {
        setScheduledExecutionId((Long)value);
      }
      break;

    case POLICY:
      if (value == null) {
        unsetPolicy();
      } else {
        setPolicy((String)value);
      }
      break;

    case DUMP_EXECUTION_ID:
      if (value == null) {
        unsetDumpExecutionId();
      } else {
        setDumpExecutionId((Long)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((String)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEDULED_EXECUTION_ID:
      return getScheduledExecutionId();

    case POLICY:
      return getPolicy();

    case DUMP_EXECUTION_ID:
      return getDumpExecutionId();

    case METADATA:
      return getMetadata();

    case PROGRESS:
      return getProgress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEDULED_EXECUTION_ID:
      return isSetScheduledExecutionId();
    case POLICY:
      return isSetPolicy();
    case DUMP_EXECUTION_ID:
      return isSetDumpExecutionId();
    case METADATA:
      return isSetMetadata();
    case PROGRESS:
      return isSetProgress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReplicationMetrics)
      return this.equals((ReplicationMetrics)that);
    return false;
  }

  public boolean equals(ReplicationMetrics that) {
    if (that == null)
      return false;

    boolean this_present_scheduledExecutionId = true;
    boolean that_present_scheduledExecutionId = true;
    if (this_present_scheduledExecutionId || that_present_scheduledExecutionId) {
      if (!(this_present_scheduledExecutionId && that_present_scheduledExecutionId))
        return false;
      if (this.scheduledExecutionId != that.scheduledExecutionId)
        return false;
    }

    boolean this_present_policy = true && this.isSetPolicy();
    boolean that_present_policy = true && that.isSetPolicy();
    if (this_present_policy || that_present_policy) {
      if (!(this_present_policy && that_present_policy))
        return false;
      if (!this.policy.equals(that.policy))
        return false;
    }

    boolean this_present_dumpExecutionId = true;
    boolean that_present_dumpExecutionId = true;
    if (this_present_dumpExecutionId || that_present_dumpExecutionId) {
      if (!(this_present_dumpExecutionId && that_present_dumpExecutionId))
        return false;
      if (this.dumpExecutionId != that.dumpExecutionId)
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (!this.progress.equals(that.progress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_scheduledExecutionId = true;
    list.add(present_scheduledExecutionId);
    if (present_scheduledExecutionId)
      list.add(scheduledExecutionId);

    boolean present_policy = true && (isSetPolicy());
    list.add(present_policy);
    if (present_policy)
      list.add(policy);

    boolean present_dumpExecutionId = true;
    list.add(present_dumpExecutionId);
    if (present_dumpExecutionId)
      list.add(dumpExecutionId);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    boolean present_progress = true && (isSetProgress());
    list.add(present_progress);
    if (present_progress)
      list.add(progress);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReplicationMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScheduledExecutionId()).compareTo(other.isSetScheduledExecutionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduledExecutionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduledExecutionId, other.scheduledExecutionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicy()).compareTo(other.isSetPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policy, other.policy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDumpExecutionId()).compareTo(other.isSetDumpExecutionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDumpExecutionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dumpExecutionId, other.dumpExecutionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReplicationMetrics(");
    boolean first = true;

    sb.append("scheduledExecutionId:");
    sb.append(this.scheduledExecutionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("policy:");
    if (this.policy == null) {
      sb.append("null");
    } else {
      sb.append(this.policy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dumpExecutionId:");
    sb.append(this.dumpExecutionId);
    first = false;
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    if (isSetProgress()) {
      if (!first) sb.append(", ");
      sb.append("progress:");
      if (this.progress == null) {
        sb.append("null");
      } else {
        sb.append(this.progress);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetScheduledExecutionId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scheduledExecutionId' is unset! Struct:" + toString());
    }

    if (!isSetPolicy()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'policy' is unset! Struct:" + toString());
    }

    if (!isSetDumpExecutionId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dumpExecutionId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReplicationMetricsStandardSchemeFactory implements SchemeFactory {
    public ReplicationMetricsStandardScheme getScheme() {
      return new ReplicationMetricsStandardScheme();
    }
  }

  private static class ReplicationMetricsStandardScheme extends StandardScheme<ReplicationMetrics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReplicationMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEDULED_EXECUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scheduledExecutionId = iprot.readI64();
              struct.setScheduledExecutionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policy = iprot.readString();
              struct.setPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DUMP_EXECUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dumpExecutionId = iprot.readI64();
              struct.setDumpExecutionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.progress = iprot.readString();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReplicationMetrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCHEDULED_EXECUTION_ID_FIELD_DESC);
      oprot.writeI64(struct.scheduledExecutionId);
      oprot.writeFieldEnd();
      if (struct.policy != null) {
        oprot.writeFieldBegin(POLICY_FIELD_DESC);
        oprot.writeString(struct.policy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DUMP_EXECUTION_ID_FIELD_DESC);
      oprot.writeI64(struct.dumpExecutionId);
      oprot.writeFieldEnd();
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeString(struct.metadata);
          oprot.writeFieldEnd();
        }
      }
      if (struct.progress != null) {
        if (struct.isSetProgress()) {
          oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
          oprot.writeString(struct.progress);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReplicationMetricsTupleSchemeFactory implements SchemeFactory {
    public ReplicationMetricsTupleScheme getScheme() {
      return new ReplicationMetricsTupleScheme();
    }
  }

  private static class ReplicationMetricsTupleScheme extends TupleScheme<ReplicationMetrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReplicationMetrics struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.scheduledExecutionId);
      oprot.writeString(struct.policy);
      oprot.writeI64(struct.dumpExecutionId);
      BitSet optionals = new BitSet();
      if (struct.isSetMetadata()) {
        optionals.set(0);
      }
      if (struct.isSetProgress()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMetadata()) {
        oprot.writeString(struct.metadata);
      }
      if (struct.isSetProgress()) {
        oprot.writeString(struct.progress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReplicationMetrics struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.scheduledExecutionId = iprot.readI64();
      struct.setScheduledExecutionIdIsSet(true);
      struct.policy = iprot.readString();
      struct.setPolicyIsSet(true);
      struct.dumpExecutionId = iprot.readI64();
      struct.setDumpExecutionIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.metadata = iprot.readString();
        struct.setMetadataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.progress = iprot.readString();
        struct.setProgressIsSet(true);
      }
    }
  }

}

