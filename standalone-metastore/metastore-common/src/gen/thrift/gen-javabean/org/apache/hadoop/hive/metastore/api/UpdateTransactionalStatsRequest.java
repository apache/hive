/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class UpdateTransactionalStatsRequest implements org.apache.thrift.TBase<UpdateTransactionalStatsRequest, UpdateTransactionalStatsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateTransactionalStatsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateTransactionalStatsRequest");

  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INSERT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("insertCount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DELETED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedCount", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateTransactionalStatsRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateTransactionalStatsRequestTupleSchemeFactory();

  private long tableId; // required
  private long insertCount; // required
  private long updatedCount; // required
  private long deletedCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_ID((short)1, "tableId"),
    INSERT_COUNT((short)2, "insertCount"),
    UPDATED_COUNT((short)3, "updatedCount"),
    DELETED_COUNT((short)4, "deletedCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_ID
          return TABLE_ID;
        case 2: // INSERT_COUNT
          return INSERT_COUNT;
        case 3: // UPDATED_COUNT
          return UPDATED_COUNT;
        case 4: // DELETED_COUNT
          return DELETED_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLEID_ISSET_ID = 0;
  private static final int __INSERTCOUNT_ISSET_ID = 1;
  private static final int __UPDATEDCOUNT_ISSET_ID = 2;
  private static final int __DELETEDCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INSERT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("insertCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("updatedCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("deletedCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateTransactionalStatsRequest.class, metaDataMap);
  }

  public UpdateTransactionalStatsRequest() {
  }

  public UpdateTransactionalStatsRequest(
    long tableId,
    long insertCount,
    long updatedCount,
    long deletedCount)
  {
    this();
    this.tableId = tableId;
    setTableIdIsSet(true);
    this.insertCount = insertCount;
    setInsertCountIsSet(true);
    this.updatedCount = updatedCount;
    setUpdatedCountIsSet(true);
    this.deletedCount = deletedCount;
    setDeletedCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateTransactionalStatsRequest(UpdateTransactionalStatsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tableId = other.tableId;
    this.insertCount = other.insertCount;
    this.updatedCount = other.updatedCount;
    this.deletedCount = other.deletedCount;
  }

  public UpdateTransactionalStatsRequest deepCopy() {
    return new UpdateTransactionalStatsRequest(this);
  }

  @Override
  public void clear() {
    setTableIdIsSet(false);
    this.tableId = 0;
    setInsertCountIsSet(false);
    this.insertCount = 0;
    setUpdatedCountIsSet(false);
    this.updatedCount = 0;
    setDeletedCountIsSet(false);
    this.deletedCount = 0;
  }

  public long getTableId() {
    return this.tableId;
  }

  public void setTableId(long tableId) {
    this.tableId = tableId;
    setTableIdIsSet(true);
  }

  public void unsetTableId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLEID_ISSET_ID);
  }

  /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
  public boolean isSetTableId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLEID_ISSET_ID);
  }

  public void setTableIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLEID_ISSET_ID, value);
  }

  public long getInsertCount() {
    return this.insertCount;
  }

  public void setInsertCount(long insertCount) {
    this.insertCount = insertCount;
    setInsertCountIsSet(true);
  }

  public void unsetInsertCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSERTCOUNT_ISSET_ID);
  }

  /** Returns true if field insertCount is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSERTCOUNT_ISSET_ID);
  }

  public void setInsertCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSERTCOUNT_ISSET_ID, value);
  }

  public long getUpdatedCount() {
    return this.updatedCount;
  }

  public void setUpdatedCount(long updatedCount) {
    this.updatedCount = updatedCount;
    setUpdatedCountIsSet(true);
  }

  public void unsetUpdatedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEDCOUNT_ISSET_ID);
  }

  /** Returns true if field updatedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEDCOUNT_ISSET_ID);
  }

  public void setUpdatedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEDCOUNT_ISSET_ID, value);
  }

  public long getDeletedCount() {
    return this.deletedCount;
  }

  public void setDeletedCount(long deletedCount) {
    this.deletedCount = deletedCount;
    setDeletedCountIsSet(true);
  }

  public void unsetDeletedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELETEDCOUNT_ISSET_ID);
  }

  /** Returns true if field deletedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELETEDCOUNT_ISSET_ID);
  }

  public void setDeletedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELETEDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_ID:
      if (value == null) {
        unsetTableId();
      } else {
        setTableId((java.lang.Long)value);
      }
      break;

    case INSERT_COUNT:
      if (value == null) {
        unsetInsertCount();
      } else {
        setInsertCount((java.lang.Long)value);
      }
      break;

    case UPDATED_COUNT:
      if (value == null) {
        unsetUpdatedCount();
      } else {
        setUpdatedCount((java.lang.Long)value);
      }
      break;

    case DELETED_COUNT:
      if (value == null) {
        unsetDeletedCount();
      } else {
        setDeletedCount((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_ID:
      return getTableId();

    case INSERT_COUNT:
      return getInsertCount();

    case UPDATED_COUNT:
      return getUpdatedCount();

    case DELETED_COUNT:
      return getDeletedCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_ID:
      return isSetTableId();
    case INSERT_COUNT:
      return isSetInsertCount();
    case UPDATED_COUNT:
      return isSetUpdatedCount();
    case DELETED_COUNT:
      return isSetDeletedCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof UpdateTransactionalStatsRequest)
      return this.equals((UpdateTransactionalStatsRequest)that);
    return false;
  }

  public boolean equals(UpdateTransactionalStatsRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tableId = true;
    boolean that_present_tableId = true;
    if (this_present_tableId || that_present_tableId) {
      if (!(this_present_tableId && that_present_tableId))
        return false;
      if (this.tableId != that.tableId)
        return false;
    }

    boolean this_present_insertCount = true;
    boolean that_present_insertCount = true;
    if (this_present_insertCount || that_present_insertCount) {
      if (!(this_present_insertCount && that_present_insertCount))
        return false;
      if (this.insertCount != that.insertCount)
        return false;
    }

    boolean this_present_updatedCount = true;
    boolean that_present_updatedCount = true;
    if (this_present_updatedCount || that_present_updatedCount) {
      if (!(this_present_updatedCount && that_present_updatedCount))
        return false;
      if (this.updatedCount != that.updatedCount)
        return false;
    }

    boolean this_present_deletedCount = true;
    boolean that_present_deletedCount = true;
    if (this_present_deletedCount || that_present_deletedCount) {
      if (!(this_present_deletedCount && that_present_deletedCount))
        return false;
      if (this.deletedCount != that.deletedCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tableId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(insertCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updatedCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(deletedCount);

    return hashCode;
  }

  @Override
  public int compareTo(UpdateTransactionalStatsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTableId(), other.isSetTableId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInsertCount(), other.isSetInsertCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertCount, other.insertCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdatedCount(), other.isSetUpdatedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedCount, other.updatedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeletedCount(), other.isSetDeletedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedCount, other.deletedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UpdateTransactionalStatsRequest(");
    boolean first = true;

    sb.append("tableId:");
    sb.append(this.tableId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertCount:");
    sb.append(this.insertCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedCount:");
    sb.append(this.updatedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deletedCount:");
    sb.append(this.deletedCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTableId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableId' is unset! Struct:" + toString());
    }

    if (!isSetInsertCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'insertCount' is unset! Struct:" + toString());
    }

    if (!isSetUpdatedCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'updatedCount' is unset! Struct:" + toString());
    }

    if (!isSetDeletedCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deletedCount' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateTransactionalStatsRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateTransactionalStatsRequestStandardScheme getScheme() {
      return new UpdateTransactionalStatsRequestStandardScheme();
    }
  }

  private static class UpdateTransactionalStatsRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<UpdateTransactionalStatsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateTransactionalStatsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tableId = iprot.readI64();
              struct.setTableIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INSERT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertCount = iprot.readI64();
              struct.setInsertCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedCount = iprot.readI64();
              struct.setUpdatedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deletedCount = iprot.readI64();
              struct.setDeletedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateTransactionalStatsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI64(struct.tableId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INSERT_COUNT_FIELD_DESC);
      oprot.writeI64(struct.insertCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.updatedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.deletedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateTransactionalStatsRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateTransactionalStatsRequestTupleScheme getScheme() {
      return new UpdateTransactionalStatsRequestTupleScheme();
    }
  }

  private static class UpdateTransactionalStatsRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<UpdateTransactionalStatsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateTransactionalStatsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.tableId);
      oprot.writeI64(struct.insertCount);
      oprot.writeI64(struct.updatedCount);
      oprot.writeI64(struct.deletedCount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateTransactionalStatsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tableId = iprot.readI64();
      struct.setTableIdIsSet(true);
      struct.insertCount = iprot.readI64();
      struct.setInsertCountIsSet(true);
      struct.updatedCount = iprot.readI64();
      struct.setUpdatedCountIsSet(true);
      struct.deletedCount = iprot.readI64();
      struct.setDeletedCountIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

