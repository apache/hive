/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetFunctionsResponse implements org.apache.thrift.TBase<GetFunctionsResponse, GetFunctionsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetFunctionsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetFunctionsResponse");

  private static final org.apache.thrift.protocol.TField FUNCTION_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("function_names", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("functions", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetFunctionsResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetFunctionsResponseTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> function_names; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<Function> functions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FUNCTION_NAMES((short)1, "function_names"),
    FUNCTIONS((short)2, "functions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FUNCTION_NAMES
          return FUNCTION_NAMES;
        case 2: // FUNCTIONS
          return FUNCTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FUNCTION_NAMES,_Fields.FUNCTIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FUNCTION_NAMES, new org.apache.thrift.meta_data.FieldMetaData("function_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Function.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetFunctionsResponse.class, metaDataMap);
  }

  public GetFunctionsResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetFunctionsResponse(GetFunctionsResponse other) {
    if (other.isSetFunction_names()) {
      java.util.List<java.lang.String> __this__function_names = new java.util.ArrayList<java.lang.String>(other.function_names);
      this.function_names = __this__function_names;
    }
    if (other.isSetFunctions()) {
      java.util.List<Function> __this__functions = new java.util.ArrayList<Function>(other.functions.size());
      for (Function other_element : other.functions) {
        __this__functions.add(new Function(other_element));
      }
      this.functions = __this__functions;
    }
  }

  public GetFunctionsResponse deepCopy() {
    return new GetFunctionsResponse(this);
  }

  @Override
  public void clear() {
    this.function_names = null;
    this.functions = null;
  }

  public int getFunction_namesSize() {
    return (this.function_names == null) ? 0 : this.function_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getFunction_namesIterator() {
    return (this.function_names == null) ? null : this.function_names.iterator();
  }

  public void addToFunction_names(java.lang.String elem) {
    if (this.function_names == null) {
      this.function_names = new java.util.ArrayList<java.lang.String>();
    }
    this.function_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getFunction_names() {
    return this.function_names;
  }

  public void setFunction_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> function_names) {
    this.function_names = function_names;
  }

  public void unsetFunction_names() {
    this.function_names = null;
  }

  /** Returns true if field function_names is set (has been assigned a value) and false otherwise */
  public boolean isSetFunction_names() {
    return this.function_names != null;
  }

  public void setFunction_namesIsSet(boolean value) {
    if (!value) {
      this.function_names = null;
    }
  }

  public int getFunctionsSize() {
    return (this.functions == null) ? 0 : this.functions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Function> getFunctionsIterator() {
    return (this.functions == null) ? null : this.functions.iterator();
  }

  public void addToFunctions(Function elem) {
    if (this.functions == null) {
      this.functions = new java.util.ArrayList<Function>();
    }
    this.functions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Function> getFunctions() {
    return this.functions;
  }

  public void setFunctions(@org.apache.thrift.annotation.Nullable java.util.List<Function> functions) {
    this.functions = functions;
  }

  public void unsetFunctions() {
    this.functions = null;
  }

  /** Returns true if field functions is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctions() {
    return this.functions != null;
  }

  public void setFunctionsIsSet(boolean value) {
    if (!value) {
      this.functions = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FUNCTION_NAMES:
      if (value == null) {
        unsetFunction_names();
      } else {
        setFunction_names((java.util.List<java.lang.String>)value);
      }
      break;

    case FUNCTIONS:
      if (value == null) {
        unsetFunctions();
      } else {
        setFunctions((java.util.List<Function>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FUNCTION_NAMES:
      return getFunction_names();

    case FUNCTIONS:
      return getFunctions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FUNCTION_NAMES:
      return isSetFunction_names();
    case FUNCTIONS:
      return isSetFunctions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof GetFunctionsResponse)
      return this.equals((GetFunctionsResponse)that);
    return false;
  }

  public boolean equals(GetFunctionsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_function_names = true && this.isSetFunction_names();
    boolean that_present_function_names = true && that.isSetFunction_names();
    if (this_present_function_names || that_present_function_names) {
      if (!(this_present_function_names && that_present_function_names))
        return false;
      if (!this.function_names.equals(that.function_names))
        return false;
    }

    boolean this_present_functions = true && this.isSetFunctions();
    boolean that_present_functions = true && that.isSetFunctions();
    if (this_present_functions || that_present_functions) {
      if (!(this_present_functions && that_present_functions))
        return false;
      if (!this.functions.equals(that.functions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFunction_names()) ? 131071 : 524287);
    if (isSetFunction_names())
      hashCode = hashCode * 8191 + function_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetFunctions()) ? 131071 : 524287);
    if (isSetFunctions())
      hashCode = hashCode * 8191 + functions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetFunctionsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFunction_names(), other.isSetFunction_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunction_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.function_names, other.function_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFunctions(), other.isSetFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functions, other.functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetFunctionsResponse(");
    boolean first = true;

    if (isSetFunction_names()) {
      sb.append("function_names:");
      if (this.function_names == null) {
        sb.append("null");
      } else {
        sb.append(this.function_names);
      }
      first = false;
    }
    if (isSetFunctions()) {
      if (!first) sb.append(", ");
      sb.append("functions:");
      if (this.functions == null) {
        sb.append("null");
      } else {
        sb.append(this.functions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetFunctionsResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetFunctionsResponseStandardScheme getScheme() {
      return new GetFunctionsResponseStandardScheme();
    }
  }

  private static class GetFunctionsResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetFunctionsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetFunctionsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FUNCTION_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1238 = iprot.readListBegin();
                struct.function_names = new java.util.ArrayList<java.lang.String>(_list1238.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1239;
                for (int _i1240 = 0; _i1240 < _list1238.size; ++_i1240)
                {
                  _elem1239 = iprot.readString();
                  struct.function_names.add(_elem1239);
                }
                iprot.readListEnd();
              }
              struct.setFunction_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1241 = iprot.readListBegin();
                struct.functions = new java.util.ArrayList<Function>(_list1241.size);
                @org.apache.thrift.annotation.Nullable Function _elem1242;
                for (int _i1243 = 0; _i1243 < _list1241.size; ++_i1243)
                {
                  _elem1242 = new Function();
                  _elem1242.read(iprot);
                  struct.functions.add(_elem1242);
                }
                iprot.readListEnd();
              }
              struct.setFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetFunctionsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.function_names != null) {
        if (struct.isSetFunction_names()) {
          oprot.writeFieldBegin(FUNCTION_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.function_names.size()));
            for (java.lang.String _iter1244 : struct.function_names)
            {
              oprot.writeString(_iter1244);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.functions != null) {
        if (struct.isSetFunctions()) {
          oprot.writeFieldBegin(FUNCTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.functions.size()));
            for (Function _iter1245 : struct.functions)
            {
              _iter1245.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetFunctionsResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetFunctionsResponseTupleScheme getScheme() {
      return new GetFunctionsResponseTupleScheme();
    }
  }

  private static class GetFunctionsResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetFunctionsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetFunctionsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFunction_names()) {
        optionals.set(0);
      }
      if (struct.isSetFunctions()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFunction_names()) {
        {
          oprot.writeI32(struct.function_names.size());
          for (java.lang.String _iter1246 : struct.function_names)
          {
            oprot.writeString(_iter1246);
          }
        }
      }
      if (struct.isSetFunctions()) {
        {
          oprot.writeI32(struct.functions.size());
          for (Function _iter1247 : struct.functions)
          {
            _iter1247.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetFunctionsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list1248 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.function_names = new java.util.ArrayList<java.lang.String>(_list1248.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem1249;
          for (int _i1250 = 0; _i1250 < _list1248.size; ++_i1250)
          {
            _elem1249 = iprot.readString();
            struct.function_names.add(_elem1249);
          }
        }
        struct.setFunction_namesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list1251 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.functions = new java.util.ArrayList<Function>(_list1251.size);
          @org.apache.thrift.annotation.Nullable Function _elem1252;
          for (int _i1253 = 0; _i1253 < _list1251.size; ++_i1253)
          {
            _elem1252 = new Function();
            _elem1252.read(iprot);
            struct.functions.add(_elem1252);
          }
        }
        struct.setFunctionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

