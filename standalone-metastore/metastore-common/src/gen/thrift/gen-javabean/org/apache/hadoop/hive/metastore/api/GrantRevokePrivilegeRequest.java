/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class GrantRevokePrivilegeRequest implements org.apache.thrift.TBase<GrantRevokePrivilegeRequest, GrantRevokePrivilegeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GrantRevokePrivilegeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GrantRevokePrivilegeRequest");

  private static final org.apache.thrift.protocol.TField REQUEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRIVILEGES_FIELD_DESC = new org.apache.thrift.protocol.TField("privileges", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REVOKE_GRANT_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("revokeGrantOption", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GrantRevokePrivilegeRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GrantRevokePrivilegeRequestTupleSchemeFactory());
  }

  private GrantRevokeType requestType; // required
  private PrivilegeBag privileges; // required
  private boolean revokeGrantOption; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see GrantRevokeType
     */
    REQUEST_TYPE((short)1, "requestType"),
    PRIVILEGES((short)2, "privileges"),
    REVOKE_GRANT_OPTION((short)3, "revokeGrantOption");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_TYPE
          return REQUEST_TYPE;
        case 2: // PRIVILEGES
          return PRIVILEGES;
        case 3: // REVOKE_GRANT_OPTION
          return REVOKE_GRANT_OPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REVOKEGRANTOPTION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REVOKE_GRANT_OPTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requestType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GrantRevokeType.class)));
    tmpMap.put(_Fields.PRIVILEGES, new org.apache.thrift.meta_data.FieldMetaData("privileges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrivilegeBag.class)));
    tmpMap.put(_Fields.REVOKE_GRANT_OPTION, new org.apache.thrift.meta_data.FieldMetaData("revokeGrantOption", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GrantRevokePrivilegeRequest.class, metaDataMap);
  }

  public GrantRevokePrivilegeRequest() {
  }

  public GrantRevokePrivilegeRequest(
    GrantRevokeType requestType,
    PrivilegeBag privileges)
  {
    this();
    this.requestType = requestType;
    this.privileges = privileges;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GrantRevokePrivilegeRequest(GrantRevokePrivilegeRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequestType()) {
      this.requestType = other.requestType;
    }
    if (other.isSetPrivileges()) {
      this.privileges = new PrivilegeBag(other.privileges);
    }
    this.revokeGrantOption = other.revokeGrantOption;
  }

  public GrantRevokePrivilegeRequest deepCopy() {
    return new GrantRevokePrivilegeRequest(this);
  }

  @Override
  public void clear() {
    this.requestType = null;
    this.privileges = null;
    setRevokeGrantOptionIsSet(false);
    this.revokeGrantOption = false;
  }

  /**
   * 
   * @see GrantRevokeType
   */
  public GrantRevokeType getRequestType() {
    return this.requestType;
  }

  /**
   * 
   * @see GrantRevokeType
   */
  public void setRequestType(GrantRevokeType requestType) {
    this.requestType = requestType;
  }

  public void unsetRequestType() {
    this.requestType = null;
  }

  /** Returns true if field requestType is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestType() {
    return this.requestType != null;
  }

  public void setRequestTypeIsSet(boolean value) {
    if (!value) {
      this.requestType = null;
    }
  }

  public PrivilegeBag getPrivileges() {
    return this.privileges;
  }

  public void setPrivileges(PrivilegeBag privileges) {
    this.privileges = privileges;
  }

  public void unsetPrivileges() {
    this.privileges = null;
  }

  /** Returns true if field privileges is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivileges() {
    return this.privileges != null;
  }

  public void setPrivilegesIsSet(boolean value) {
    if (!value) {
      this.privileges = null;
    }
  }

  public boolean isRevokeGrantOption() {
    return this.revokeGrantOption;
  }

  public void setRevokeGrantOption(boolean revokeGrantOption) {
    this.revokeGrantOption = revokeGrantOption;
    setRevokeGrantOptionIsSet(true);
  }

  public void unsetRevokeGrantOption() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVOKEGRANTOPTION_ISSET_ID);
  }

  /** Returns true if field revokeGrantOption is set (has been assigned a value) and false otherwise */
  public boolean isSetRevokeGrantOption() {
    return EncodingUtils.testBit(__isset_bitfield, __REVOKEGRANTOPTION_ISSET_ID);
  }

  public void setRevokeGrantOptionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVOKEGRANTOPTION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_TYPE:
      if (value == null) {
        unsetRequestType();
      } else {
        setRequestType((GrantRevokeType)value);
      }
      break;

    case PRIVILEGES:
      if (value == null) {
        unsetPrivileges();
      } else {
        setPrivileges((PrivilegeBag)value);
      }
      break;

    case REVOKE_GRANT_OPTION:
      if (value == null) {
        unsetRevokeGrantOption();
      } else {
        setRevokeGrantOption((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_TYPE:
      return getRequestType();

    case PRIVILEGES:
      return getPrivileges();

    case REVOKE_GRANT_OPTION:
      return isRevokeGrantOption();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_TYPE:
      return isSetRequestType();
    case PRIVILEGES:
      return isSetPrivileges();
    case REVOKE_GRANT_OPTION:
      return isSetRevokeGrantOption();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GrantRevokePrivilegeRequest)
      return this.equals((GrantRevokePrivilegeRequest)that);
    return false;
  }

  public boolean equals(GrantRevokePrivilegeRequest that) {
    if (that == null)
      return false;

    boolean this_present_requestType = true && this.isSetRequestType();
    boolean that_present_requestType = true && that.isSetRequestType();
    if (this_present_requestType || that_present_requestType) {
      if (!(this_present_requestType && that_present_requestType))
        return false;
      if (!this.requestType.equals(that.requestType))
        return false;
    }

    boolean this_present_privileges = true && this.isSetPrivileges();
    boolean that_present_privileges = true && that.isSetPrivileges();
    if (this_present_privileges || that_present_privileges) {
      if (!(this_present_privileges && that_present_privileges))
        return false;
      if (!this.privileges.equals(that.privileges))
        return false;
    }

    boolean this_present_revokeGrantOption = true && this.isSetRevokeGrantOption();
    boolean that_present_revokeGrantOption = true && that.isSetRevokeGrantOption();
    if (this_present_revokeGrantOption || that_present_revokeGrantOption) {
      if (!(this_present_revokeGrantOption && that_present_revokeGrantOption))
        return false;
      if (this.revokeGrantOption != that.revokeGrantOption)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requestType = true && (isSetRequestType());
    list.add(present_requestType);
    if (present_requestType)
      list.add(requestType.getValue());

    boolean present_privileges = true && (isSetPrivileges());
    list.add(present_privileges);
    if (present_privileges)
      list.add(privileges);

    boolean present_revokeGrantOption = true && (isSetRevokeGrantOption());
    list.add(present_revokeGrantOption);
    if (present_revokeGrantOption)
      list.add(revokeGrantOption);

    return list.hashCode();
  }

  @Override
  public int compareTo(GrantRevokePrivilegeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestType()).compareTo(other.isSetRequestType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestType, other.requestType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivileges()).compareTo(other.isSetPrivileges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivileges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privileges, other.privileges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevokeGrantOption()).compareTo(other.isSetRevokeGrantOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevokeGrantOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revokeGrantOption, other.revokeGrantOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GrantRevokePrivilegeRequest(");
    boolean first = true;

    sb.append("requestType:");
    if (this.requestType == null) {
      sb.append("null");
    } else {
      sb.append(this.requestType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privileges:");
    if (this.privileges == null) {
      sb.append("null");
    } else {
      sb.append(this.privileges);
    }
    first = false;
    if (isSetRevokeGrantOption()) {
      if (!first) sb.append(", ");
      sb.append("revokeGrantOption:");
      sb.append(this.revokeGrantOption);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (privileges != null) {
      privileges.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GrantRevokePrivilegeRequestStandardSchemeFactory implements SchemeFactory {
    public GrantRevokePrivilegeRequestStandardScheme getScheme() {
      return new GrantRevokePrivilegeRequestStandardScheme();
    }
  }

  private static class GrantRevokePrivilegeRequestStandardScheme extends StandardScheme<GrantRevokePrivilegeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GrantRevokePrivilegeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestType = org.apache.hadoop.hive.metastore.api.GrantRevokeType.findByValue(iprot.readI32());
              struct.setRequestTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIVILEGES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.privileges = new PrivilegeBag();
              struct.privileges.read(iprot);
              struct.setPrivilegesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REVOKE_GRANT_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.revokeGrantOption = iprot.readBool();
              struct.setRevokeGrantOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GrantRevokePrivilegeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requestType != null) {
        oprot.writeFieldBegin(REQUEST_TYPE_FIELD_DESC);
        oprot.writeI32(struct.requestType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        struct.privileges.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRevokeGrantOption()) {
        oprot.writeFieldBegin(REVOKE_GRANT_OPTION_FIELD_DESC);
        oprot.writeBool(struct.revokeGrantOption);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GrantRevokePrivilegeRequestTupleSchemeFactory implements SchemeFactory {
    public GrantRevokePrivilegeRequestTupleScheme getScheme() {
      return new GrantRevokePrivilegeRequestTupleScheme();
    }
  }

  private static class GrantRevokePrivilegeRequestTupleScheme extends TupleScheme<GrantRevokePrivilegeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GrantRevokePrivilegeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRequestType()) {
        optionals.set(0);
      }
      if (struct.isSetPrivileges()) {
        optionals.set(1);
      }
      if (struct.isSetRevokeGrantOption()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRequestType()) {
        oprot.writeI32(struct.requestType.getValue());
      }
      if (struct.isSetPrivileges()) {
        struct.privileges.write(oprot);
      }
      if (struct.isSetRevokeGrantOption()) {
        oprot.writeBool(struct.revokeGrantOption);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GrantRevokePrivilegeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.requestType = org.apache.hadoop.hive.metastore.api.GrantRevokeType.findByValue(iprot.readI32());
        struct.setRequestTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.privileges = new PrivilegeBag();
        struct.privileges.read(iprot);
        struct.setPrivilegesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.revokeGrantOption = iprot.readBool();
        struct.setRevokeGrantOptionIsSet(true);
      }
    }
  }

}

