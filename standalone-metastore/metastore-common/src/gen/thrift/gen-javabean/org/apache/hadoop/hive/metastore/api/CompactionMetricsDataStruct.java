/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class CompactionMetricsDataStruct implements org.apache.thrift.TBase<CompactionMetricsDataStruct, CompactionMetricsDataStruct._Fields>, java.io.Serializable, Cloneable, Comparable<CompactionMetricsDataStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompactionMetricsDataStruct");

  private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TBLNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tblname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITIONNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField METRICVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("metricvalue", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompactionMetricsDataStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompactionMetricsDataStructTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String dbname; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String tblname; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String partitionname; // optional
  private @org.apache.thrift.annotation.Nullable CompactionMetricsMetricType type; // required
  private int metricvalue; // required
  private int version; // required
  private int threshold; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DBNAME((short)1, "dbname"),
    TBLNAME((short)2, "tblname"),
    PARTITIONNAME((short)3, "partitionname"),
    /**
     * 
     * @see CompactionMetricsMetricType
     */
    TYPE((short)4, "type"),
    METRICVALUE((short)5, "metricvalue"),
    VERSION((short)6, "version"),
    THRESHOLD((short)7, "threshold");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DBNAME
          return DBNAME;
        case 2: // TBLNAME
          return TBLNAME;
        case 3: // PARTITIONNAME
          return PARTITIONNAME;
        case 4: // TYPE
          return TYPE;
        case 5: // METRICVALUE
          return METRICVALUE;
        case 6: // VERSION
          return VERSION;
        case 7: // THRESHOLD
          return THRESHOLD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __METRICVALUE_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __THRESHOLD_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITIONNAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData("dbname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBLNAME, new org.apache.thrift.meta_data.FieldMetaData("tblname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITIONNAME, new org.apache.thrift.meta_data.FieldMetaData("partitionname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CompactionMetricsMetricType.class)));
    tmpMap.put(_Fields.METRICVALUE, new org.apache.thrift.meta_data.FieldMetaData("metricvalue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompactionMetricsDataStruct.class, metaDataMap);
  }

  public CompactionMetricsDataStruct() {
  }

  public CompactionMetricsDataStruct(
    java.lang.String dbname,
    java.lang.String tblname,
    CompactionMetricsMetricType type,
    int metricvalue,
    int version,
    int threshold)
  {
    this();
    this.dbname = dbname;
    this.tblname = tblname;
    this.type = type;
    this.metricvalue = metricvalue;
    setMetricvalueIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.threshold = threshold;
    setThresholdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompactionMetricsDataStruct(CompactionMetricsDataStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDbname()) {
      this.dbname = other.dbname;
    }
    if (other.isSetTblname()) {
      this.tblname = other.tblname;
    }
    if (other.isSetPartitionname()) {
      this.partitionname = other.partitionname;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.metricvalue = other.metricvalue;
    this.version = other.version;
    this.threshold = other.threshold;
  }

  public CompactionMetricsDataStruct deepCopy() {
    return new CompactionMetricsDataStruct(this);
  }

  @Override
  public void clear() {
    this.dbname = null;
    this.tblname = null;
    this.partitionname = null;
    this.type = null;
    setMetricvalueIsSet(false);
    this.metricvalue = 0;
    setVersionIsSet(false);
    this.version = 0;
    setThresholdIsSet(false);
    this.threshold = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbname() {
    return this.dbname;
  }

  public void setDbname(@org.apache.thrift.annotation.Nullable java.lang.String dbname) {
    this.dbname = dbname;
  }

  public void unsetDbname() {
    this.dbname = null;
  }

  /** Returns true if field dbname is set (has been assigned a value) and false otherwise */
  public boolean isSetDbname() {
    return this.dbname != null;
  }

  public void setDbnameIsSet(boolean value) {
    if (!value) {
      this.dbname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTblname() {
    return this.tblname;
  }

  public void setTblname(@org.apache.thrift.annotation.Nullable java.lang.String tblname) {
    this.tblname = tblname;
  }

  public void unsetTblname() {
    this.tblname = null;
  }

  /** Returns true if field tblname is set (has been assigned a value) and false otherwise */
  public boolean isSetTblname() {
    return this.tblname != null;
  }

  public void setTblnameIsSet(boolean value) {
    if (!value) {
      this.tblname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartitionname() {
    return this.partitionname;
  }

  public void setPartitionname(@org.apache.thrift.annotation.Nullable java.lang.String partitionname) {
    this.partitionname = partitionname;
  }

  public void unsetPartitionname() {
    this.partitionname = null;
  }

  /** Returns true if field partitionname is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionname() {
    return this.partitionname != null;
  }

  public void setPartitionnameIsSet(boolean value) {
    if (!value) {
      this.partitionname = null;
    }
  }

  /**
   * 
   * @see CompactionMetricsMetricType
   */
  @org.apache.thrift.annotation.Nullable
  public CompactionMetricsMetricType getType() {
    return this.type;
  }

  /**
   * 
   * @see CompactionMetricsMetricType
   */
  public void setType(@org.apache.thrift.annotation.Nullable CompactionMetricsMetricType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getMetricvalue() {
    return this.metricvalue;
  }

  public void setMetricvalue(int metricvalue) {
    this.metricvalue = metricvalue;
    setMetricvalueIsSet(true);
  }

  public void unsetMetricvalue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __METRICVALUE_ISSET_ID);
  }

  /** Returns true if field metricvalue is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricvalue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __METRICVALUE_ISSET_ID);
  }

  public void setMetricvalueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __METRICVALUE_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public void setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getThreshold() {
    return this.threshold;
  }

  public void setThreshold(int threshold) {
    this.threshold = threshold;
    setThresholdIsSet(true);
  }

  public void unsetThreshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
  }

  /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetThreshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
  }

  public void setThresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DBNAME:
      if (value == null) {
        unsetDbname();
      } else {
        setDbname((java.lang.String)value);
      }
      break;

    case TBLNAME:
      if (value == null) {
        unsetTblname();
      } else {
        setTblname((java.lang.String)value);
      }
      break;

    case PARTITIONNAME:
      if (value == null) {
        unsetPartitionname();
      } else {
        setPartitionname((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CompactionMetricsMetricType)value);
      }
      break;

    case METRICVALUE:
      if (value == null) {
        unsetMetricvalue();
      } else {
        setMetricvalue((java.lang.Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Integer)value);
      }
      break;

    case THRESHOLD:
      if (value == null) {
        unsetThreshold();
      } else {
        setThreshold((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DBNAME:
      return getDbname();

    case TBLNAME:
      return getTblname();

    case PARTITIONNAME:
      return getPartitionname();

    case TYPE:
      return getType();

    case METRICVALUE:
      return getMetricvalue();

    case VERSION:
      return getVersion();

    case THRESHOLD:
      return getThreshold();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DBNAME:
      return isSetDbname();
    case TBLNAME:
      return isSetTblname();
    case PARTITIONNAME:
      return isSetPartitionname();
    case TYPE:
      return isSetType();
    case METRICVALUE:
      return isSetMetricvalue();
    case VERSION:
      return isSetVersion();
    case THRESHOLD:
      return isSetThreshold();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CompactionMetricsDataStruct)
      return this.equals((CompactionMetricsDataStruct)that);
    return false;
  }

  public boolean equals(CompactionMetricsDataStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dbname = true && this.isSetDbname();
    boolean that_present_dbname = true && that.isSetDbname();
    if (this_present_dbname || that_present_dbname) {
      if (!(this_present_dbname && that_present_dbname))
        return false;
      if (!this.dbname.equals(that.dbname))
        return false;
    }

    boolean this_present_tblname = true && this.isSetTblname();
    boolean that_present_tblname = true && that.isSetTblname();
    if (this_present_tblname || that_present_tblname) {
      if (!(this_present_tblname && that_present_tblname))
        return false;
      if (!this.tblname.equals(that.tblname))
        return false;
    }

    boolean this_present_partitionname = true && this.isSetPartitionname();
    boolean that_present_partitionname = true && that.isSetPartitionname();
    if (this_present_partitionname || that_present_partitionname) {
      if (!(this_present_partitionname && that_present_partitionname))
        return false;
      if (!this.partitionname.equals(that.partitionname))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_metricvalue = true;
    boolean that_present_metricvalue = true;
    if (this_present_metricvalue || that_present_metricvalue) {
      if (!(this_present_metricvalue && that_present_metricvalue))
        return false;
      if (this.metricvalue != that.metricvalue)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_threshold = true;
    boolean that_present_threshold = true;
    if (this_present_threshold || that_present_threshold) {
      if (!(this_present_threshold && that_present_threshold))
        return false;
      if (this.threshold != that.threshold)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDbname()) ? 131071 : 524287);
    if (isSetDbname())
      hashCode = hashCode * 8191 + dbname.hashCode();

    hashCode = hashCode * 8191 + ((isSetTblname()) ? 131071 : 524287);
    if (isSetTblname())
      hashCode = hashCode * 8191 + tblname.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitionname()) ? 131071 : 524287);
    if (isSetPartitionname())
      hashCode = hashCode * 8191 + partitionname.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + metricvalue;

    hashCode = hashCode * 8191 + version;

    hashCode = hashCode * 8191 + threshold;

    return hashCode;
  }

  @Override
  public int compareTo(CompactionMetricsDataStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDbname(), other.isSetDbname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname, other.dbname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTblname(), other.isSetTblname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTblname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tblname, other.tblname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionname(), other.isSetPartitionname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionname, other.partitionname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMetricvalue(), other.isSetMetricvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricvalue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricvalue, other.metricvalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetThreshold(), other.isSetThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CompactionMetricsDataStruct(");
    boolean first = true;

    sb.append("dbname:");
    if (this.dbname == null) {
      sb.append("null");
    } else {
      sb.append(this.dbname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tblname:");
    if (this.tblname == null) {
      sb.append("null");
    } else {
      sb.append(this.tblname);
    }
    first = false;
    if (isSetPartitionname()) {
      if (!first) sb.append(", ");
      sb.append("partitionname:");
      if (this.partitionname == null) {
        sb.append("null");
      } else {
        sb.append(this.partitionname);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricvalue:");
    sb.append(this.metricvalue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threshold:");
    sb.append(this.threshold);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetDbname()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbname' is unset! Struct:" + toString());
    }

    if (!isSetTblname()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tblname' is unset! Struct:" + toString());
    }

    if (!isSetType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' is unset! Struct:" + toString());
    }

    if (!isSetMetricvalue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metricvalue' is unset! Struct:" + toString());
    }

    if (!isSetVersion()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' is unset! Struct:" + toString());
    }

    if (!isSetThreshold()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'threshold' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompactionMetricsDataStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CompactionMetricsDataStructStandardScheme getScheme() {
      return new CompactionMetricsDataStructStandardScheme();
    }
  }

  private static class CompactionMetricsDataStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompactionMetricsDataStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompactionMetricsDataStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DBNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TBLNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tblname = iprot.readString();
              struct.setTblnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITIONNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partitionname = iprot.readString();
              struct.setPartitionnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.hadoop.hive.metastore.api.CompactionMetricsMetricType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // METRICVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.metricvalue = iprot.readI32();
              struct.setMetricvalueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threshold = iprot.readI32();
              struct.setThresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompactionMetricsDataStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(struct.dbname);
        oprot.writeFieldEnd();
      }
      if (struct.tblname != null) {
        oprot.writeFieldBegin(TBLNAME_FIELD_DESC);
        oprot.writeString(struct.tblname);
        oprot.writeFieldEnd();
      }
      if (struct.partitionname != null) {
        if (struct.isSetPartitionname()) {
          oprot.writeFieldBegin(PARTITIONNAME_FIELD_DESC);
          oprot.writeString(struct.partitionname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METRICVALUE_FIELD_DESC);
      oprot.writeI32(struct.metricvalue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
      oprot.writeI32(struct.threshold);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompactionMetricsDataStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CompactionMetricsDataStructTupleScheme getScheme() {
      return new CompactionMetricsDataStructTupleScheme();
    }
  }

  private static class CompactionMetricsDataStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompactionMetricsDataStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompactionMetricsDataStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.dbname);
      oprot.writeString(struct.tblname);
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.metricvalue);
      oprot.writeI32(struct.version);
      oprot.writeI32(struct.threshold);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPartitionname()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPartitionname()) {
        oprot.writeString(struct.partitionname);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompactionMetricsDataStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.dbname = iprot.readString();
      struct.setDbnameIsSet(true);
      struct.tblname = iprot.readString();
      struct.setTblnameIsSet(true);
      struct.type = org.apache.hadoop.hive.metastore.api.CompactionMetricsMetricType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.metricvalue = iprot.readI32();
      struct.setMetricvalueIsSet(true);
      struct.version = iprot.readI32();
      struct.setVersionIsSet(true);
      struct.threshold = iprot.readI32();
      struct.setThresholdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.partitionname = iprot.readString();
        struct.setPartitionnameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

