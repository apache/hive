/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class PropertySetRequest implements org.apache.thrift.TBase<PropertySetRequest, PropertySetRequest._Fields>, java.io.Serializable, Cloneable, Comparable<PropertySetRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PropertySetRequest");

  private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyMap", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PropertySetRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PropertySetRequestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String nameSpace; // required
  private @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> propertyMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME_SPACE((short)1, "nameSpace"),
    PROPERTY_MAP((short)2, "propertyMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME_SPACE
          return NAME_SPACE;
        case 2: // PROPERTY_MAP
          return PROPERTY_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTY_MAP, new org.apache.thrift.meta_data.FieldMetaData("propertyMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PropertySetRequest.class, metaDataMap);
  }

  public PropertySetRequest() {
  }

  public PropertySetRequest(
    java.lang.String nameSpace,
    java.util.Map<java.lang.String,java.lang.String> propertyMap)
  {
    this();
    this.nameSpace = nameSpace;
    this.propertyMap = propertyMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PropertySetRequest(PropertySetRequest other) {
    if (other.isSetNameSpace()) {
      this.nameSpace = other.nameSpace;
    }
    if (other.isSetPropertyMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.propertyMap);
      this.propertyMap = __this__propertyMap;
    }
  }

  public PropertySetRequest deepCopy() {
    return new PropertySetRequest(this);
  }

  @Override
  public void clear() {
    this.nameSpace = null;
    this.propertyMap = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNameSpace() {
    return this.nameSpace;
  }

  public void setNameSpace(@org.apache.thrift.annotation.Nullable java.lang.String nameSpace) {
    this.nameSpace = nameSpace;
  }

  public void unsetNameSpace() {
    this.nameSpace = null;
  }

  /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetNameSpace() {
    return this.nameSpace != null;
  }

  public void setNameSpaceIsSet(boolean value) {
    if (!value) {
      this.nameSpace = null;
    }
  }

  public int getPropertyMapSize() {
    return (this.propertyMap == null) ? 0 : this.propertyMap.size();
  }

  public void putToPropertyMap(java.lang.String key, java.lang.String val) {
    if (this.propertyMap == null) {
      this.propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.propertyMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getPropertyMap() {
    return this.propertyMap;
  }

  public void setPropertyMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> propertyMap) {
    this.propertyMap = propertyMap;
  }

  public void unsetPropertyMap() {
    this.propertyMap = null;
  }

  /** Returns true if field propertyMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyMap() {
    return this.propertyMap != null;
  }

  public void setPropertyMapIsSet(boolean value) {
    if (!value) {
      this.propertyMap = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME_SPACE:
      if (value == null) {
        unsetNameSpace();
      } else {
        setNameSpace((java.lang.String)value);
      }
      break;

    case PROPERTY_MAP:
      if (value == null) {
        unsetPropertyMap();
      } else {
        setPropertyMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME_SPACE:
      return getNameSpace();

    case PROPERTY_MAP:
      return getPropertyMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME_SPACE:
      return isSetNameSpace();
    case PROPERTY_MAP:
      return isSetPropertyMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PropertySetRequest)
      return this.equals((PropertySetRequest)that);
    return false;
  }

  public boolean equals(PropertySetRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nameSpace = true && this.isSetNameSpace();
    boolean that_present_nameSpace = true && that.isSetNameSpace();
    if (this_present_nameSpace || that_present_nameSpace) {
      if (!(this_present_nameSpace && that_present_nameSpace))
        return false;
      if (!this.nameSpace.equals(that.nameSpace))
        return false;
    }

    boolean this_present_propertyMap = true && this.isSetPropertyMap();
    boolean that_present_propertyMap = true && that.isSetPropertyMap();
    if (this_present_propertyMap || that_present_propertyMap) {
      if (!(this_present_propertyMap && that_present_propertyMap))
        return false;
      if (!this.propertyMap.equals(that.propertyMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
    if (isSetNameSpace())
      hashCode = hashCode * 8191 + nameSpace.hashCode();

    hashCode = hashCode * 8191 + ((isSetPropertyMap()) ? 131071 : 524287);
    if (isSetPropertyMap())
      hashCode = hashCode * 8191 + propertyMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PropertySetRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNameSpace(), other.isSetNameSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPropertyMap(), other.isSetPropertyMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyMap, other.propertyMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PropertySetRequest(");
    boolean first = true;

    sb.append("nameSpace:");
    if (this.nameSpace == null) {
      sb.append("null");
    } else {
      sb.append(this.nameSpace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyMap:");
    if (this.propertyMap == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetNameSpace()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nameSpace' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PropertySetRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PropertySetRequestStandardScheme getScheme() {
      return new PropertySetRequestStandardScheme();
    }
  }

  private static class PropertySetRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<PropertySetRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PropertySetRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameSpace = iprot.readString();
              struct.setNameSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTY_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                struct.propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map66.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key67;
                @org.apache.thrift.annotation.Nullable java.lang.String _val68;
                for (int _i69 = 0; _i69 < _map66.size; ++_i69)
                {
                  _key67 = iprot.readString();
                  _val68 = iprot.readString();
                  struct.propertyMap.put(_key67, _val68);
                }
                iprot.readMapEnd();
              }
              struct.setPropertyMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PropertySetRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nameSpace != null) {
        oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
        oprot.writeString(struct.nameSpace);
        oprot.writeFieldEnd();
      }
      if (struct.propertyMap != null) {
        oprot.writeFieldBegin(PROPERTY_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.propertyMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter70 : struct.propertyMap.entrySet())
          {
            oprot.writeString(_iter70.getKey());
            oprot.writeString(_iter70.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PropertySetRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PropertySetRequestTupleScheme getScheme() {
      return new PropertySetRequestTupleScheme();
    }
  }

  private static class PropertySetRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<PropertySetRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PropertySetRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.nameSpace);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPropertyMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPropertyMap()) {
        {
          oprot.writeI32(struct.propertyMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter71 : struct.propertyMap.entrySet())
          {
            oprot.writeString(_iter71.getKey());
            oprot.writeString(_iter71.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PropertySetRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nameSpace = iprot.readString();
      struct.setNameSpaceIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map72.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key73;
          @org.apache.thrift.annotation.Nullable java.lang.String _val74;
          for (int _i75 = 0; _i75 < _map72.size; ++_i75)
          {
            _key73 = iprot.readString();
            _val74 = iprot.readString();
            struct.propertyMap.put(_key73, _val74);
          }
        }
        struct.setPropertyMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

