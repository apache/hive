/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class ForeignKeysRequest implements org.apache.thrift.TBase<ForeignKeysRequest, ForeignKeysRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ForeignKeysRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForeignKeysRequest");

  private static final org.apache.thrift.protocol.TField PARENT_DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_tbl_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FOREIGN_DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("foreign_db_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FOREIGN_TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("foreign_tbl_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CAT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ForeignKeysRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ForeignKeysRequestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String parent_db_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String parent_tbl_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String foreign_db_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String foreign_tbl_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String catName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_DB_NAME((short)1, "parent_db_name"),
    PARENT_TBL_NAME((short)2, "parent_tbl_name"),
    FOREIGN_DB_NAME((short)3, "foreign_db_name"),
    FOREIGN_TBL_NAME((short)4, "foreign_tbl_name"),
    CAT_NAME((short)5, "catName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_DB_NAME
          return PARENT_DB_NAME;
        case 2: // PARENT_TBL_NAME
          return PARENT_TBL_NAME;
        case 3: // FOREIGN_DB_NAME
          return FOREIGN_DB_NAME;
        case 4: // FOREIGN_TBL_NAME
          return FOREIGN_TBL_NAME;
        case 5: // CAT_NAME
          return CAT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CAT_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("parent_db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("parent_tbl_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOREIGN_DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("foreign_db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOREIGN_TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("foreign_tbl_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAT_NAME, new org.apache.thrift.meta_data.FieldMetaData("catName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForeignKeysRequest.class, metaDataMap);
  }

  public ForeignKeysRequest() {
  }

  public ForeignKeysRequest(
    java.lang.String parent_db_name,
    java.lang.String parent_tbl_name,
    java.lang.String foreign_db_name,
    java.lang.String foreign_tbl_name)
  {
    this();
    this.parent_db_name = parent_db_name;
    this.parent_tbl_name = parent_tbl_name;
    this.foreign_db_name = foreign_db_name;
    this.foreign_tbl_name = foreign_tbl_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ForeignKeysRequest(ForeignKeysRequest other) {
    if (other.isSetParent_db_name()) {
      this.parent_db_name = other.parent_db_name;
    }
    if (other.isSetParent_tbl_name()) {
      this.parent_tbl_name = other.parent_tbl_name;
    }
    if (other.isSetForeign_db_name()) {
      this.foreign_db_name = other.foreign_db_name;
    }
    if (other.isSetForeign_tbl_name()) {
      this.foreign_tbl_name = other.foreign_tbl_name;
    }
    if (other.isSetCatName()) {
      this.catName = other.catName;
    }
  }

  public ForeignKeysRequest deepCopy() {
    return new ForeignKeysRequest(this);
  }

  @Override
  public void clear() {
    this.parent_db_name = null;
    this.parent_tbl_name = null;
    this.foreign_db_name = null;
    this.foreign_tbl_name = null;
    this.catName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParent_db_name() {
    return this.parent_db_name;
  }

  public void setParent_db_name(@org.apache.thrift.annotation.Nullable java.lang.String parent_db_name) {
    this.parent_db_name = parent_db_name;
  }

  public void unsetParent_db_name() {
    this.parent_db_name = null;
  }

  /** Returns true if field parent_db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_db_name() {
    return this.parent_db_name != null;
  }

  public void setParent_db_nameIsSet(boolean value) {
    if (!value) {
      this.parent_db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParent_tbl_name() {
    return this.parent_tbl_name;
  }

  public void setParent_tbl_name(@org.apache.thrift.annotation.Nullable java.lang.String parent_tbl_name) {
    this.parent_tbl_name = parent_tbl_name;
  }

  public void unsetParent_tbl_name() {
    this.parent_tbl_name = null;
  }

  /** Returns true if field parent_tbl_name is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_tbl_name() {
    return this.parent_tbl_name != null;
  }

  public void setParent_tbl_nameIsSet(boolean value) {
    if (!value) {
      this.parent_tbl_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getForeign_db_name() {
    return this.foreign_db_name;
  }

  public void setForeign_db_name(@org.apache.thrift.annotation.Nullable java.lang.String foreign_db_name) {
    this.foreign_db_name = foreign_db_name;
  }

  public void unsetForeign_db_name() {
    this.foreign_db_name = null;
  }

  /** Returns true if field foreign_db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetForeign_db_name() {
    return this.foreign_db_name != null;
  }

  public void setForeign_db_nameIsSet(boolean value) {
    if (!value) {
      this.foreign_db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getForeign_tbl_name() {
    return this.foreign_tbl_name;
  }

  public void setForeign_tbl_name(@org.apache.thrift.annotation.Nullable java.lang.String foreign_tbl_name) {
    this.foreign_tbl_name = foreign_tbl_name;
  }

  public void unsetForeign_tbl_name() {
    this.foreign_tbl_name = null;
  }

  /** Returns true if field foreign_tbl_name is set (has been assigned a value) and false otherwise */
  public boolean isSetForeign_tbl_name() {
    return this.foreign_tbl_name != null;
  }

  public void setForeign_tbl_nameIsSet(boolean value) {
    if (!value) {
      this.foreign_tbl_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCatName() {
    return this.catName;
  }

  public void setCatName(@org.apache.thrift.annotation.Nullable java.lang.String catName) {
    this.catName = catName;
  }

  public void unsetCatName() {
    this.catName = null;
  }

  /** Returns true if field catName is set (has been assigned a value) and false otherwise */
  public boolean isSetCatName() {
    return this.catName != null;
  }

  public void setCatNameIsSet(boolean value) {
    if (!value) {
      this.catName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PARENT_DB_NAME:
      if (value == null) {
        unsetParent_db_name();
      } else {
        setParent_db_name((java.lang.String)value);
      }
      break;

    case PARENT_TBL_NAME:
      if (value == null) {
        unsetParent_tbl_name();
      } else {
        setParent_tbl_name((java.lang.String)value);
      }
      break;

    case FOREIGN_DB_NAME:
      if (value == null) {
        unsetForeign_db_name();
      } else {
        setForeign_db_name((java.lang.String)value);
      }
      break;

    case FOREIGN_TBL_NAME:
      if (value == null) {
        unsetForeign_tbl_name();
      } else {
        setForeign_tbl_name((java.lang.String)value);
      }
      break;

    case CAT_NAME:
      if (value == null) {
        unsetCatName();
      } else {
        setCatName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_DB_NAME:
      return getParent_db_name();

    case PARENT_TBL_NAME:
      return getParent_tbl_name();

    case FOREIGN_DB_NAME:
      return getForeign_db_name();

    case FOREIGN_TBL_NAME:
      return getForeign_tbl_name();

    case CAT_NAME:
      return getCatName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARENT_DB_NAME:
      return isSetParent_db_name();
    case PARENT_TBL_NAME:
      return isSetParent_tbl_name();
    case FOREIGN_DB_NAME:
      return isSetForeign_db_name();
    case FOREIGN_TBL_NAME:
      return isSetForeign_tbl_name();
    case CAT_NAME:
      return isSetCatName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ForeignKeysRequest)
      return this.equals((ForeignKeysRequest)that);
    return false;
  }

  public boolean equals(ForeignKeysRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parent_db_name = true && this.isSetParent_db_name();
    boolean that_present_parent_db_name = true && that.isSetParent_db_name();
    if (this_present_parent_db_name || that_present_parent_db_name) {
      if (!(this_present_parent_db_name && that_present_parent_db_name))
        return false;
      if (!this.parent_db_name.equals(that.parent_db_name))
        return false;
    }

    boolean this_present_parent_tbl_name = true && this.isSetParent_tbl_name();
    boolean that_present_parent_tbl_name = true && that.isSetParent_tbl_name();
    if (this_present_parent_tbl_name || that_present_parent_tbl_name) {
      if (!(this_present_parent_tbl_name && that_present_parent_tbl_name))
        return false;
      if (!this.parent_tbl_name.equals(that.parent_tbl_name))
        return false;
    }

    boolean this_present_foreign_db_name = true && this.isSetForeign_db_name();
    boolean that_present_foreign_db_name = true && that.isSetForeign_db_name();
    if (this_present_foreign_db_name || that_present_foreign_db_name) {
      if (!(this_present_foreign_db_name && that_present_foreign_db_name))
        return false;
      if (!this.foreign_db_name.equals(that.foreign_db_name))
        return false;
    }

    boolean this_present_foreign_tbl_name = true && this.isSetForeign_tbl_name();
    boolean that_present_foreign_tbl_name = true && that.isSetForeign_tbl_name();
    if (this_present_foreign_tbl_name || that_present_foreign_tbl_name) {
      if (!(this_present_foreign_tbl_name && that_present_foreign_tbl_name))
        return false;
      if (!this.foreign_tbl_name.equals(that.foreign_tbl_name))
        return false;
    }

    boolean this_present_catName = true && this.isSetCatName();
    boolean that_present_catName = true && that.isSetCatName();
    if (this_present_catName || that_present_catName) {
      if (!(this_present_catName && that_present_catName))
        return false;
      if (!this.catName.equals(that.catName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParent_db_name()) ? 131071 : 524287);
    if (isSetParent_db_name())
      hashCode = hashCode * 8191 + parent_db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetParent_tbl_name()) ? 131071 : 524287);
    if (isSetParent_tbl_name())
      hashCode = hashCode * 8191 + parent_tbl_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetForeign_db_name()) ? 131071 : 524287);
    if (isSetForeign_db_name())
      hashCode = hashCode * 8191 + foreign_db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetForeign_tbl_name()) ? 131071 : 524287);
    if (isSetForeign_tbl_name())
      hashCode = hashCode * 8191 + foreign_tbl_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCatName()) ? 131071 : 524287);
    if (isSetCatName())
      hashCode = hashCode * 8191 + catName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ForeignKeysRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetParent_db_name(), other.isSetParent_db_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_db_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_db_name, other.parent_db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParent_tbl_name(), other.isSetParent_tbl_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_tbl_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_tbl_name, other.parent_tbl_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForeign_db_name(), other.isSetForeign_db_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeign_db_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreign_db_name, other.foreign_db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForeign_tbl_name(), other.isSetForeign_tbl_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeign_tbl_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreign_tbl_name, other.foreign_tbl_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCatName(), other.isSetCatName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catName, other.catName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ForeignKeysRequest(");
    boolean first = true;

    sb.append("parent_db_name:");
    if (this.parent_db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.parent_db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parent_tbl_name:");
    if (this.parent_tbl_name == null) {
      sb.append("null");
    } else {
      sb.append(this.parent_tbl_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreign_db_name:");
    if (this.foreign_db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.foreign_db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreign_tbl_name:");
    if (this.foreign_tbl_name == null) {
      sb.append("null");
    } else {
      sb.append(this.foreign_tbl_name);
    }
    first = false;
    if (isSetCatName()) {
      if (!first) sb.append(", ");
      sb.append("catName:");
      if (this.catName == null) {
        sb.append("null");
      } else {
        sb.append(this.catName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ForeignKeysRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ForeignKeysRequestStandardScheme getScheme() {
      return new ForeignKeysRequestStandardScheme();
    }
  }

  private static class ForeignKeysRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ForeignKeysRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parent_db_name = iprot.readString();
              struct.setParent_db_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parent_tbl_name = iprot.readString();
              struct.setParent_tbl_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOREIGN_DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreign_db_name = iprot.readString();
              struct.setForeign_db_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOREIGN_TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreign_tbl_name = iprot.readString();
              struct.setForeign_tbl_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catName = iprot.readString();
              struct.setCatNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parent_db_name != null) {
        oprot.writeFieldBegin(PARENT_DB_NAME_FIELD_DESC);
        oprot.writeString(struct.parent_db_name);
        oprot.writeFieldEnd();
      }
      if (struct.parent_tbl_name != null) {
        oprot.writeFieldBegin(PARENT_TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.parent_tbl_name);
        oprot.writeFieldEnd();
      }
      if (struct.foreign_db_name != null) {
        oprot.writeFieldBegin(FOREIGN_DB_NAME_FIELD_DESC);
        oprot.writeString(struct.foreign_db_name);
        oprot.writeFieldEnd();
      }
      if (struct.foreign_tbl_name != null) {
        oprot.writeFieldBegin(FOREIGN_TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.foreign_tbl_name);
        oprot.writeFieldEnd();
      }
      if (struct.catName != null) {
        if (struct.isSetCatName()) {
          oprot.writeFieldBegin(CAT_NAME_FIELD_DESC);
          oprot.writeString(struct.catName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ForeignKeysRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ForeignKeysRequestTupleScheme getScheme() {
      return new ForeignKeysRequestTupleScheme();
    }
  }

  private static class ForeignKeysRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ForeignKeysRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParent_db_name()) {
        optionals.set(0);
      }
      if (struct.isSetParent_tbl_name()) {
        optionals.set(1);
      }
      if (struct.isSetForeign_db_name()) {
        optionals.set(2);
      }
      if (struct.isSetForeign_tbl_name()) {
        optionals.set(3);
      }
      if (struct.isSetCatName()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetParent_db_name()) {
        oprot.writeString(struct.parent_db_name);
      }
      if (struct.isSetParent_tbl_name()) {
        oprot.writeString(struct.parent_tbl_name);
      }
      if (struct.isSetForeign_db_name()) {
        oprot.writeString(struct.foreign_db_name);
      }
      if (struct.isSetForeign_tbl_name()) {
        oprot.writeString(struct.foreign_tbl_name);
      }
      if (struct.isSetCatName()) {
        oprot.writeString(struct.catName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.parent_db_name = iprot.readString();
        struct.setParent_db_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parent_tbl_name = iprot.readString();
        struct.setParent_tbl_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.foreign_db_name = iprot.readString();
        struct.setForeign_db_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.foreign_tbl_name = iprot.readString();
        struct.setForeign_tbl_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.catName = iprot.readString();
        struct.setCatNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

