/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class PartitionsSpecByExprResult implements org.apache.thrift.TBase<PartitionsSpecByExprResult, PartitionsSpecByExprResult._Fields>, java.io.Serializable, Cloneable, Comparable<PartitionsSpecByExprResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartitionsSpecByExprResult");

  private static final org.apache.thrift.protocol.TField PARTITIONS_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionsSpec", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_UNKNOWN_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasUnknownPartitions", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartitionsSpecByExprResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartitionsSpecByExprResultTupleSchemeFactory());
  }

  private List<PartitionSpec> partitionsSpec; // required
  private boolean hasUnknownPartitions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITIONS_SPEC((short)1, "partitionsSpec"),
    HAS_UNKNOWN_PARTITIONS((short)2, "hasUnknownPartitions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITIONS_SPEC
          return PARTITIONS_SPEC;
        case 2: // HAS_UNKNOWN_PARTITIONS
          return HAS_UNKNOWN_PARTITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASUNKNOWNPARTITIONS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITIONS_SPEC, new org.apache.thrift.meta_data.FieldMetaData("partitionsSpec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartitionSpec.class))));
    tmpMap.put(_Fields.HAS_UNKNOWN_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("hasUnknownPartitions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartitionsSpecByExprResult.class, metaDataMap);
  }

  public PartitionsSpecByExprResult() {
  }

  public PartitionsSpecByExprResult(
    List<PartitionSpec> partitionsSpec,
    boolean hasUnknownPartitions)
  {
    this();
    this.partitionsSpec = partitionsSpec;
    this.hasUnknownPartitions = hasUnknownPartitions;
    setHasUnknownPartitionsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartitionsSpecByExprResult(PartitionsSpecByExprResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartitionsSpec()) {
      List<PartitionSpec> __this__partitionsSpec = new ArrayList<PartitionSpec>(other.partitionsSpec.size());
      for (PartitionSpec other_element : other.partitionsSpec) {
        __this__partitionsSpec.add(new PartitionSpec(other_element));
      }
      this.partitionsSpec = __this__partitionsSpec;
    }
    this.hasUnknownPartitions = other.hasUnknownPartitions;
  }

  public PartitionsSpecByExprResult deepCopy() {
    return new PartitionsSpecByExprResult(this);
  }

  @Override
  public void clear() {
    this.partitionsSpec = null;
    setHasUnknownPartitionsIsSet(false);
    this.hasUnknownPartitions = false;
  }

  public int getPartitionsSpecSize() {
    return (this.partitionsSpec == null) ? 0 : this.partitionsSpec.size();
  }

  public java.util.Iterator<PartitionSpec> getPartitionsSpecIterator() {
    return (this.partitionsSpec == null) ? null : this.partitionsSpec.iterator();
  }

  public void addToPartitionsSpec(PartitionSpec elem) {
    if (this.partitionsSpec == null) {
      this.partitionsSpec = new ArrayList<PartitionSpec>();
    }
    this.partitionsSpec.add(elem);
  }

  public List<PartitionSpec> getPartitionsSpec() {
    return this.partitionsSpec;
  }

  public void setPartitionsSpec(List<PartitionSpec> partitionsSpec) {
    this.partitionsSpec = partitionsSpec;
  }

  public void unsetPartitionsSpec() {
    this.partitionsSpec = null;
  }

  /** Returns true if field partitionsSpec is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionsSpec() {
    return this.partitionsSpec != null;
  }

  public void setPartitionsSpecIsSet(boolean value) {
    if (!value) {
      this.partitionsSpec = null;
    }
  }

  public boolean isHasUnknownPartitions() {
    return this.hasUnknownPartitions;
  }

  public void setHasUnknownPartitions(boolean hasUnknownPartitions) {
    this.hasUnknownPartitions = hasUnknownPartitions;
    setHasUnknownPartitionsIsSet(true);
  }

  public void unsetHasUnknownPartitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASUNKNOWNPARTITIONS_ISSET_ID);
  }

  /** Returns true if field hasUnknownPartitions is set (has been assigned a value) and false otherwise */
  public boolean isSetHasUnknownPartitions() {
    return EncodingUtils.testBit(__isset_bitfield, __HASUNKNOWNPARTITIONS_ISSET_ID);
  }

  public void setHasUnknownPartitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASUNKNOWNPARTITIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITIONS_SPEC:
      if (value == null) {
        unsetPartitionsSpec();
      } else {
        setPartitionsSpec((List<PartitionSpec>)value);
      }
      break;

    case HAS_UNKNOWN_PARTITIONS:
      if (value == null) {
        unsetHasUnknownPartitions();
      } else {
        setHasUnknownPartitions((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITIONS_SPEC:
      return getPartitionsSpec();

    case HAS_UNKNOWN_PARTITIONS:
      return isHasUnknownPartitions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITIONS_SPEC:
      return isSetPartitionsSpec();
    case HAS_UNKNOWN_PARTITIONS:
      return isSetHasUnknownPartitions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartitionsSpecByExprResult)
      return this.equals((PartitionsSpecByExprResult)that);
    return false;
  }

  public boolean equals(PartitionsSpecByExprResult that) {
    if (that == null)
      return false;

    boolean this_present_partitionsSpec = true && this.isSetPartitionsSpec();
    boolean that_present_partitionsSpec = true && that.isSetPartitionsSpec();
    if (this_present_partitionsSpec || that_present_partitionsSpec) {
      if (!(this_present_partitionsSpec && that_present_partitionsSpec))
        return false;
      if (!this.partitionsSpec.equals(that.partitionsSpec))
        return false;
    }

    boolean this_present_hasUnknownPartitions = true;
    boolean that_present_hasUnknownPartitions = true;
    if (this_present_hasUnknownPartitions || that_present_hasUnknownPartitions) {
      if (!(this_present_hasUnknownPartitions && that_present_hasUnknownPartitions))
        return false;
      if (this.hasUnknownPartitions != that.hasUnknownPartitions)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partitionsSpec = true && (isSetPartitionsSpec());
    list.add(present_partitionsSpec);
    if (present_partitionsSpec)
      list.add(partitionsSpec);

    boolean present_hasUnknownPartitions = true;
    list.add(present_hasUnknownPartitions);
    if (present_hasUnknownPartitions)
      list.add(hasUnknownPartitions);

    return list.hashCode();
  }

  @Override
  public int compareTo(PartitionsSpecByExprResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartitionsSpec()).compareTo(other.isSetPartitionsSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionsSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionsSpec, other.partitionsSpec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasUnknownPartitions()).compareTo(other.isSetHasUnknownPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasUnknownPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasUnknownPartitions, other.hasUnknownPartitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartitionsSpecByExprResult(");
    boolean first = true;

    sb.append("partitionsSpec:");
    if (this.partitionsSpec == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionsSpec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasUnknownPartitions:");
    sb.append(this.hasUnknownPartitions);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetPartitionsSpec()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partitionsSpec' is unset! Struct:" + toString());
    }

    if (!isSetHasUnknownPartitions()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hasUnknownPartitions' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartitionsSpecByExprResultStandardSchemeFactory implements SchemeFactory {
    public PartitionsSpecByExprResultStandardScheme getScheme() {
      return new PartitionsSpecByExprResultStandardScheme();
    }
  }

  private static class PartitionsSpecByExprResultStandardScheme extends StandardScheme<PartitionsSpecByExprResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartitionsSpecByExprResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITIONS_SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list456 = iprot.readListBegin();
                struct.partitionsSpec = new ArrayList<PartitionSpec>(_list456.size);
                PartitionSpec _elem457;
                for (int _i458 = 0; _i458 < _list456.size; ++_i458)
                {
                  _elem457 = new PartitionSpec();
                  _elem457.read(iprot);
                  struct.partitionsSpec.add(_elem457);
                }
                iprot.readListEnd();
              }
              struct.setPartitionsSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_UNKNOWN_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasUnknownPartitions = iprot.readBool();
              struct.setHasUnknownPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartitionsSpecByExprResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partitionsSpec != null) {
        oprot.writeFieldBegin(PARTITIONS_SPEC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partitionsSpec.size()));
          for (PartitionSpec _iter459 : struct.partitionsSpec)
          {
            _iter459.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_UNKNOWN_PARTITIONS_FIELD_DESC);
      oprot.writeBool(struct.hasUnknownPartitions);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartitionsSpecByExprResultTupleSchemeFactory implements SchemeFactory {
    public PartitionsSpecByExprResultTupleScheme getScheme() {
      return new PartitionsSpecByExprResultTupleScheme();
    }
  }

  private static class PartitionsSpecByExprResultTupleScheme extends TupleScheme<PartitionsSpecByExprResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartitionsSpecByExprResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.partitionsSpec.size());
        for (PartitionSpec _iter460 : struct.partitionsSpec)
        {
          _iter460.write(oprot);
        }
      }
      oprot.writeBool(struct.hasUnknownPartitions);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartitionsSpecByExprResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list461 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.partitionsSpec = new ArrayList<PartitionSpec>(_list461.size);
        PartitionSpec _elem462;
        for (int _i463 = 0; _i463 < _list461.size; ++_i463)
        {
          _elem462 = new PartitionSpec();
          _elem462.read(iprot);
          struct.partitionsSpec.add(_elem462);
        }
      }
      struct.setPartitionsSpecIsSet(true);
      struct.hasUnknownPartitions = iprot.readBool();
      struct.setHasUnknownPartitionsIsSet(true);
    }
  }

}

