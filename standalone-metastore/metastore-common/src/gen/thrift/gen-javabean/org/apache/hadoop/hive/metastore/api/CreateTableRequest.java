/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class CreateTableRequest implements org.apache.thrift.TBase<CreateTableRequest, CreateTableRequest._Fields>, java.io.Serializable, Cloneable, Comparable<CreateTableRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateTableRequest");

  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ENV_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("envContext", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PRIMARY_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKeys", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FOREIGN_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreignKeys", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField UNIQUE_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueConstraints", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NOT_NULL_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("notNullConstraints", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DEFAULT_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultConstraints", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CHECK_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkConstraints", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PROCESSOR_CAPABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("processorCapabilities", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PROCESSOR_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("processorIdentifier", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreateTableRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreateTableRequestTupleSchemeFactory());
  }

  private Table table; // required
  private EnvironmentContext envContext; // optional
  private List<SQLPrimaryKey> primaryKeys; // optional
  private List<SQLForeignKey> foreignKeys; // optional
  private List<SQLUniqueConstraint> uniqueConstraints; // optional
  private List<SQLNotNullConstraint> notNullConstraints; // optional
  private List<SQLDefaultConstraint> defaultConstraints; // optional
  private List<SQLCheckConstraint> checkConstraints; // optional
  private List<String> processorCapabilities; // optional
  private String processorIdentifier; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE((short)1, "table"),
    ENV_CONTEXT((short)2, "envContext"),
    PRIMARY_KEYS((short)3, "primaryKeys"),
    FOREIGN_KEYS((short)4, "foreignKeys"),
    UNIQUE_CONSTRAINTS((short)5, "uniqueConstraints"),
    NOT_NULL_CONSTRAINTS((short)6, "notNullConstraints"),
    DEFAULT_CONSTRAINTS((short)7, "defaultConstraints"),
    CHECK_CONSTRAINTS((short)8, "checkConstraints"),
    PROCESSOR_CAPABILITIES((short)9, "processorCapabilities"),
    PROCESSOR_IDENTIFIER((short)10, "processorIdentifier");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE
          return TABLE;
        case 2: // ENV_CONTEXT
          return ENV_CONTEXT;
        case 3: // PRIMARY_KEYS
          return PRIMARY_KEYS;
        case 4: // FOREIGN_KEYS
          return FOREIGN_KEYS;
        case 5: // UNIQUE_CONSTRAINTS
          return UNIQUE_CONSTRAINTS;
        case 6: // NOT_NULL_CONSTRAINTS
          return NOT_NULL_CONSTRAINTS;
        case 7: // DEFAULT_CONSTRAINTS
          return DEFAULT_CONSTRAINTS;
        case 8: // CHECK_CONSTRAINTS
          return CHECK_CONSTRAINTS;
        case 9: // PROCESSOR_CAPABILITIES
          return PROCESSOR_CAPABILITIES;
        case 10: // PROCESSOR_IDENTIFIER
          return PROCESSOR_IDENTIFIER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ENV_CONTEXT,_Fields.PRIMARY_KEYS,_Fields.FOREIGN_KEYS,_Fields.UNIQUE_CONSTRAINTS,_Fields.NOT_NULL_CONSTRAINTS,_Fields.DEFAULT_CONSTRAINTS,_Fields.CHECK_CONSTRAINTS,_Fields.PROCESSOR_CAPABILITIES,_Fields.PROCESSOR_IDENTIFIER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Table.class)));
    tmpMap.put(_Fields.ENV_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("envContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnvironmentContext.class)));
    tmpMap.put(_Fields.PRIMARY_KEYS, new org.apache.thrift.meta_data.FieldMetaData("primaryKeys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLPrimaryKey.class))));
    tmpMap.put(_Fields.FOREIGN_KEYS, new org.apache.thrift.meta_data.FieldMetaData("foreignKeys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLForeignKey.class))));
    tmpMap.put(_Fields.UNIQUE_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("uniqueConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLUniqueConstraint.class))));
    tmpMap.put(_Fields.NOT_NULL_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("notNullConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLNotNullConstraint.class))));
    tmpMap.put(_Fields.DEFAULT_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("defaultConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLDefaultConstraint.class))));
    tmpMap.put(_Fields.CHECK_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("checkConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLCheckConstraint.class))));
    tmpMap.put(_Fields.PROCESSOR_CAPABILITIES, new org.apache.thrift.meta_data.FieldMetaData("processorCapabilities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROCESSOR_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("processorIdentifier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateTableRequest.class, metaDataMap);
  }

  public CreateTableRequest() {
  }

  public CreateTableRequest(
    Table table)
  {
    this();
    this.table = table;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateTableRequest(CreateTableRequest other) {
    if (other.isSetTable()) {
      this.table = new Table(other.table);
    }
    if (other.isSetEnvContext()) {
      this.envContext = new EnvironmentContext(other.envContext);
    }
    if (other.isSetPrimaryKeys()) {
      List<SQLPrimaryKey> __this__primaryKeys = new ArrayList<SQLPrimaryKey>(other.primaryKeys.size());
      for (SQLPrimaryKey other_element : other.primaryKeys) {
        __this__primaryKeys.add(new SQLPrimaryKey(other_element));
      }
      this.primaryKeys = __this__primaryKeys;
    }
    if (other.isSetForeignKeys()) {
      List<SQLForeignKey> __this__foreignKeys = new ArrayList<SQLForeignKey>(other.foreignKeys.size());
      for (SQLForeignKey other_element : other.foreignKeys) {
        __this__foreignKeys.add(new SQLForeignKey(other_element));
      }
      this.foreignKeys = __this__foreignKeys;
    }
    if (other.isSetUniqueConstraints()) {
      List<SQLUniqueConstraint> __this__uniqueConstraints = new ArrayList<SQLUniqueConstraint>(other.uniqueConstraints.size());
      for (SQLUniqueConstraint other_element : other.uniqueConstraints) {
        __this__uniqueConstraints.add(new SQLUniqueConstraint(other_element));
      }
      this.uniqueConstraints = __this__uniqueConstraints;
    }
    if (other.isSetNotNullConstraints()) {
      List<SQLNotNullConstraint> __this__notNullConstraints = new ArrayList<SQLNotNullConstraint>(other.notNullConstraints.size());
      for (SQLNotNullConstraint other_element : other.notNullConstraints) {
        __this__notNullConstraints.add(new SQLNotNullConstraint(other_element));
      }
      this.notNullConstraints = __this__notNullConstraints;
    }
    if (other.isSetDefaultConstraints()) {
      List<SQLDefaultConstraint> __this__defaultConstraints = new ArrayList<SQLDefaultConstraint>(other.defaultConstraints.size());
      for (SQLDefaultConstraint other_element : other.defaultConstraints) {
        __this__defaultConstraints.add(new SQLDefaultConstraint(other_element));
      }
      this.defaultConstraints = __this__defaultConstraints;
    }
    if (other.isSetCheckConstraints()) {
      List<SQLCheckConstraint> __this__checkConstraints = new ArrayList<SQLCheckConstraint>(other.checkConstraints.size());
      for (SQLCheckConstraint other_element : other.checkConstraints) {
        __this__checkConstraints.add(new SQLCheckConstraint(other_element));
      }
      this.checkConstraints = __this__checkConstraints;
    }
    if (other.isSetProcessorCapabilities()) {
      List<String> __this__processorCapabilities = new ArrayList<String>(other.processorCapabilities);
      this.processorCapabilities = __this__processorCapabilities;
    }
    if (other.isSetProcessorIdentifier()) {
      this.processorIdentifier = other.processorIdentifier;
    }
  }

  public CreateTableRequest deepCopy() {
    return new CreateTableRequest(this);
  }

  @Override
  public void clear() {
    this.table = null;
    this.envContext = null;
    this.primaryKeys = null;
    this.foreignKeys = null;
    this.uniqueConstraints = null;
    this.notNullConstraints = null;
    this.defaultConstraints = null;
    this.checkConstraints = null;
    this.processorCapabilities = null;
    this.processorIdentifier = null;
  }

  public Table getTable() {
    return this.table;
  }

  public void setTable(Table table) {
    this.table = table;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  public EnvironmentContext getEnvContext() {
    return this.envContext;
  }

  public void setEnvContext(EnvironmentContext envContext) {
    this.envContext = envContext;
  }

  public void unsetEnvContext() {
    this.envContext = null;
  }

  /** Returns true if field envContext is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvContext() {
    return this.envContext != null;
  }

  public void setEnvContextIsSet(boolean value) {
    if (!value) {
      this.envContext = null;
    }
  }

  public int getPrimaryKeysSize() {
    return (this.primaryKeys == null) ? 0 : this.primaryKeys.size();
  }

  public java.util.Iterator<SQLPrimaryKey> getPrimaryKeysIterator() {
    return (this.primaryKeys == null) ? null : this.primaryKeys.iterator();
  }

  public void addToPrimaryKeys(SQLPrimaryKey elem) {
    if (this.primaryKeys == null) {
      this.primaryKeys = new ArrayList<SQLPrimaryKey>();
    }
    this.primaryKeys.add(elem);
  }

  public List<SQLPrimaryKey> getPrimaryKeys() {
    return this.primaryKeys;
  }

  public void setPrimaryKeys(List<SQLPrimaryKey> primaryKeys) {
    this.primaryKeys = primaryKeys;
  }

  public void unsetPrimaryKeys() {
    this.primaryKeys = null;
  }

  /** Returns true if field primaryKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryKeys() {
    return this.primaryKeys != null;
  }

  public void setPrimaryKeysIsSet(boolean value) {
    if (!value) {
      this.primaryKeys = null;
    }
  }

  public int getForeignKeysSize() {
    return (this.foreignKeys == null) ? 0 : this.foreignKeys.size();
  }

  public java.util.Iterator<SQLForeignKey> getForeignKeysIterator() {
    return (this.foreignKeys == null) ? null : this.foreignKeys.iterator();
  }

  public void addToForeignKeys(SQLForeignKey elem) {
    if (this.foreignKeys == null) {
      this.foreignKeys = new ArrayList<SQLForeignKey>();
    }
    this.foreignKeys.add(elem);
  }

  public List<SQLForeignKey> getForeignKeys() {
    return this.foreignKeys;
  }

  public void setForeignKeys(List<SQLForeignKey> foreignKeys) {
    this.foreignKeys = foreignKeys;
  }

  public void unsetForeignKeys() {
    this.foreignKeys = null;
  }

  /** Returns true if field foreignKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetForeignKeys() {
    return this.foreignKeys != null;
  }

  public void setForeignKeysIsSet(boolean value) {
    if (!value) {
      this.foreignKeys = null;
    }
  }

  public int getUniqueConstraintsSize() {
    return (this.uniqueConstraints == null) ? 0 : this.uniqueConstraints.size();
  }

  public java.util.Iterator<SQLUniqueConstraint> getUniqueConstraintsIterator() {
    return (this.uniqueConstraints == null) ? null : this.uniqueConstraints.iterator();
  }

  public void addToUniqueConstraints(SQLUniqueConstraint elem) {
    if (this.uniqueConstraints == null) {
      this.uniqueConstraints = new ArrayList<SQLUniqueConstraint>();
    }
    this.uniqueConstraints.add(elem);
  }

  public List<SQLUniqueConstraint> getUniqueConstraints() {
    return this.uniqueConstraints;
  }

  public void setUniqueConstraints(List<SQLUniqueConstraint> uniqueConstraints) {
    this.uniqueConstraints = uniqueConstraints;
  }

  public void unsetUniqueConstraints() {
    this.uniqueConstraints = null;
  }

  /** Returns true if field uniqueConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueConstraints() {
    return this.uniqueConstraints != null;
  }

  public void setUniqueConstraintsIsSet(boolean value) {
    if (!value) {
      this.uniqueConstraints = null;
    }
  }

  public int getNotNullConstraintsSize() {
    return (this.notNullConstraints == null) ? 0 : this.notNullConstraints.size();
  }

  public java.util.Iterator<SQLNotNullConstraint> getNotNullConstraintsIterator() {
    return (this.notNullConstraints == null) ? null : this.notNullConstraints.iterator();
  }

  public void addToNotNullConstraints(SQLNotNullConstraint elem) {
    if (this.notNullConstraints == null) {
      this.notNullConstraints = new ArrayList<SQLNotNullConstraint>();
    }
    this.notNullConstraints.add(elem);
  }

  public List<SQLNotNullConstraint> getNotNullConstraints() {
    return this.notNullConstraints;
  }

  public void setNotNullConstraints(List<SQLNotNullConstraint> notNullConstraints) {
    this.notNullConstraints = notNullConstraints;
  }

  public void unsetNotNullConstraints() {
    this.notNullConstraints = null;
  }

  /** Returns true if field notNullConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetNotNullConstraints() {
    return this.notNullConstraints != null;
  }

  public void setNotNullConstraintsIsSet(boolean value) {
    if (!value) {
      this.notNullConstraints = null;
    }
  }

  public int getDefaultConstraintsSize() {
    return (this.defaultConstraints == null) ? 0 : this.defaultConstraints.size();
  }

  public java.util.Iterator<SQLDefaultConstraint> getDefaultConstraintsIterator() {
    return (this.defaultConstraints == null) ? null : this.defaultConstraints.iterator();
  }

  public void addToDefaultConstraints(SQLDefaultConstraint elem) {
    if (this.defaultConstraints == null) {
      this.defaultConstraints = new ArrayList<SQLDefaultConstraint>();
    }
    this.defaultConstraints.add(elem);
  }

  public List<SQLDefaultConstraint> getDefaultConstraints() {
    return this.defaultConstraints;
  }

  public void setDefaultConstraints(List<SQLDefaultConstraint> defaultConstraints) {
    this.defaultConstraints = defaultConstraints;
  }

  public void unsetDefaultConstraints() {
    this.defaultConstraints = null;
  }

  /** Returns true if field defaultConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultConstraints() {
    return this.defaultConstraints != null;
  }

  public void setDefaultConstraintsIsSet(boolean value) {
    if (!value) {
      this.defaultConstraints = null;
    }
  }

  public int getCheckConstraintsSize() {
    return (this.checkConstraints == null) ? 0 : this.checkConstraints.size();
  }

  public java.util.Iterator<SQLCheckConstraint> getCheckConstraintsIterator() {
    return (this.checkConstraints == null) ? null : this.checkConstraints.iterator();
  }

  public void addToCheckConstraints(SQLCheckConstraint elem) {
    if (this.checkConstraints == null) {
      this.checkConstraints = new ArrayList<SQLCheckConstraint>();
    }
    this.checkConstraints.add(elem);
  }

  public List<SQLCheckConstraint> getCheckConstraints() {
    return this.checkConstraints;
  }

  public void setCheckConstraints(List<SQLCheckConstraint> checkConstraints) {
    this.checkConstraints = checkConstraints;
  }

  public void unsetCheckConstraints() {
    this.checkConstraints = null;
  }

  /** Returns true if field checkConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckConstraints() {
    return this.checkConstraints != null;
  }

  public void setCheckConstraintsIsSet(boolean value) {
    if (!value) {
      this.checkConstraints = null;
    }
  }

  public int getProcessorCapabilitiesSize() {
    return (this.processorCapabilities == null) ? 0 : this.processorCapabilities.size();
  }

  public java.util.Iterator<String> getProcessorCapabilitiesIterator() {
    return (this.processorCapabilities == null) ? null : this.processorCapabilities.iterator();
  }

  public void addToProcessorCapabilities(String elem) {
    if (this.processorCapabilities == null) {
      this.processorCapabilities = new ArrayList<String>();
    }
    this.processorCapabilities.add(elem);
  }

  public List<String> getProcessorCapabilities() {
    return this.processorCapabilities;
  }

  public void setProcessorCapabilities(List<String> processorCapabilities) {
    this.processorCapabilities = processorCapabilities;
  }

  public void unsetProcessorCapabilities() {
    this.processorCapabilities = null;
  }

  /** Returns true if field processorCapabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessorCapabilities() {
    return this.processorCapabilities != null;
  }

  public void setProcessorCapabilitiesIsSet(boolean value) {
    if (!value) {
      this.processorCapabilities = null;
    }
  }

  public String getProcessorIdentifier() {
    return this.processorIdentifier;
  }

  public void setProcessorIdentifier(String processorIdentifier) {
    this.processorIdentifier = processorIdentifier;
  }

  public void unsetProcessorIdentifier() {
    this.processorIdentifier = null;
  }

  /** Returns true if field processorIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessorIdentifier() {
    return this.processorIdentifier != null;
  }

  public void setProcessorIdentifierIsSet(boolean value) {
    if (!value) {
      this.processorIdentifier = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((Table)value);
      }
      break;

    case ENV_CONTEXT:
      if (value == null) {
        unsetEnvContext();
      } else {
        setEnvContext((EnvironmentContext)value);
      }
      break;

    case PRIMARY_KEYS:
      if (value == null) {
        unsetPrimaryKeys();
      } else {
        setPrimaryKeys((List<SQLPrimaryKey>)value);
      }
      break;

    case FOREIGN_KEYS:
      if (value == null) {
        unsetForeignKeys();
      } else {
        setForeignKeys((List<SQLForeignKey>)value);
      }
      break;

    case UNIQUE_CONSTRAINTS:
      if (value == null) {
        unsetUniqueConstraints();
      } else {
        setUniqueConstraints((List<SQLUniqueConstraint>)value);
      }
      break;

    case NOT_NULL_CONSTRAINTS:
      if (value == null) {
        unsetNotNullConstraints();
      } else {
        setNotNullConstraints((List<SQLNotNullConstraint>)value);
      }
      break;

    case DEFAULT_CONSTRAINTS:
      if (value == null) {
        unsetDefaultConstraints();
      } else {
        setDefaultConstraints((List<SQLDefaultConstraint>)value);
      }
      break;

    case CHECK_CONSTRAINTS:
      if (value == null) {
        unsetCheckConstraints();
      } else {
        setCheckConstraints((List<SQLCheckConstraint>)value);
      }
      break;

    case PROCESSOR_CAPABILITIES:
      if (value == null) {
        unsetProcessorCapabilities();
      } else {
        setProcessorCapabilities((List<String>)value);
      }
      break;

    case PROCESSOR_IDENTIFIER:
      if (value == null) {
        unsetProcessorIdentifier();
      } else {
        setProcessorIdentifier((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE:
      return getTable();

    case ENV_CONTEXT:
      return getEnvContext();

    case PRIMARY_KEYS:
      return getPrimaryKeys();

    case FOREIGN_KEYS:
      return getForeignKeys();

    case UNIQUE_CONSTRAINTS:
      return getUniqueConstraints();

    case NOT_NULL_CONSTRAINTS:
      return getNotNullConstraints();

    case DEFAULT_CONSTRAINTS:
      return getDefaultConstraints();

    case CHECK_CONSTRAINTS:
      return getCheckConstraints();

    case PROCESSOR_CAPABILITIES:
      return getProcessorCapabilities();

    case PROCESSOR_IDENTIFIER:
      return getProcessorIdentifier();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE:
      return isSetTable();
    case ENV_CONTEXT:
      return isSetEnvContext();
    case PRIMARY_KEYS:
      return isSetPrimaryKeys();
    case FOREIGN_KEYS:
      return isSetForeignKeys();
    case UNIQUE_CONSTRAINTS:
      return isSetUniqueConstraints();
    case NOT_NULL_CONSTRAINTS:
      return isSetNotNullConstraints();
    case DEFAULT_CONSTRAINTS:
      return isSetDefaultConstraints();
    case CHECK_CONSTRAINTS:
      return isSetCheckConstraints();
    case PROCESSOR_CAPABILITIES:
      return isSetProcessorCapabilities();
    case PROCESSOR_IDENTIFIER:
      return isSetProcessorIdentifier();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateTableRequest)
      return this.equals((CreateTableRequest)that);
    return false;
  }

  public boolean equals(CreateTableRequest that) {
    if (that == null)
      return false;

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_envContext = true && this.isSetEnvContext();
    boolean that_present_envContext = true && that.isSetEnvContext();
    if (this_present_envContext || that_present_envContext) {
      if (!(this_present_envContext && that_present_envContext))
        return false;
      if (!this.envContext.equals(that.envContext))
        return false;
    }

    boolean this_present_primaryKeys = true && this.isSetPrimaryKeys();
    boolean that_present_primaryKeys = true && that.isSetPrimaryKeys();
    if (this_present_primaryKeys || that_present_primaryKeys) {
      if (!(this_present_primaryKeys && that_present_primaryKeys))
        return false;
      if (!this.primaryKeys.equals(that.primaryKeys))
        return false;
    }

    boolean this_present_foreignKeys = true && this.isSetForeignKeys();
    boolean that_present_foreignKeys = true && that.isSetForeignKeys();
    if (this_present_foreignKeys || that_present_foreignKeys) {
      if (!(this_present_foreignKeys && that_present_foreignKeys))
        return false;
      if (!this.foreignKeys.equals(that.foreignKeys))
        return false;
    }

    boolean this_present_uniqueConstraints = true && this.isSetUniqueConstraints();
    boolean that_present_uniqueConstraints = true && that.isSetUniqueConstraints();
    if (this_present_uniqueConstraints || that_present_uniqueConstraints) {
      if (!(this_present_uniqueConstraints && that_present_uniqueConstraints))
        return false;
      if (!this.uniqueConstraints.equals(that.uniqueConstraints))
        return false;
    }

    boolean this_present_notNullConstraints = true && this.isSetNotNullConstraints();
    boolean that_present_notNullConstraints = true && that.isSetNotNullConstraints();
    if (this_present_notNullConstraints || that_present_notNullConstraints) {
      if (!(this_present_notNullConstraints && that_present_notNullConstraints))
        return false;
      if (!this.notNullConstraints.equals(that.notNullConstraints))
        return false;
    }

    boolean this_present_defaultConstraints = true && this.isSetDefaultConstraints();
    boolean that_present_defaultConstraints = true && that.isSetDefaultConstraints();
    if (this_present_defaultConstraints || that_present_defaultConstraints) {
      if (!(this_present_defaultConstraints && that_present_defaultConstraints))
        return false;
      if (!this.defaultConstraints.equals(that.defaultConstraints))
        return false;
    }

    boolean this_present_checkConstraints = true && this.isSetCheckConstraints();
    boolean that_present_checkConstraints = true && that.isSetCheckConstraints();
    if (this_present_checkConstraints || that_present_checkConstraints) {
      if (!(this_present_checkConstraints && that_present_checkConstraints))
        return false;
      if (!this.checkConstraints.equals(that.checkConstraints))
        return false;
    }

    boolean this_present_processorCapabilities = true && this.isSetProcessorCapabilities();
    boolean that_present_processorCapabilities = true && that.isSetProcessorCapabilities();
    if (this_present_processorCapabilities || that_present_processorCapabilities) {
      if (!(this_present_processorCapabilities && that_present_processorCapabilities))
        return false;
      if (!this.processorCapabilities.equals(that.processorCapabilities))
        return false;
    }

    boolean this_present_processorIdentifier = true && this.isSetProcessorIdentifier();
    boolean that_present_processorIdentifier = true && that.isSetProcessorIdentifier();
    if (this_present_processorIdentifier || that_present_processorIdentifier) {
      if (!(this_present_processorIdentifier && that_present_processorIdentifier))
        return false;
      if (!this.processorIdentifier.equals(that.processorIdentifier))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table = true && (isSetTable());
    list.add(present_table);
    if (present_table)
      list.add(table);

    boolean present_envContext = true && (isSetEnvContext());
    list.add(present_envContext);
    if (present_envContext)
      list.add(envContext);

    boolean present_primaryKeys = true && (isSetPrimaryKeys());
    list.add(present_primaryKeys);
    if (present_primaryKeys)
      list.add(primaryKeys);

    boolean present_foreignKeys = true && (isSetForeignKeys());
    list.add(present_foreignKeys);
    if (present_foreignKeys)
      list.add(foreignKeys);

    boolean present_uniqueConstraints = true && (isSetUniqueConstraints());
    list.add(present_uniqueConstraints);
    if (present_uniqueConstraints)
      list.add(uniqueConstraints);

    boolean present_notNullConstraints = true && (isSetNotNullConstraints());
    list.add(present_notNullConstraints);
    if (present_notNullConstraints)
      list.add(notNullConstraints);

    boolean present_defaultConstraints = true && (isSetDefaultConstraints());
    list.add(present_defaultConstraints);
    if (present_defaultConstraints)
      list.add(defaultConstraints);

    boolean present_checkConstraints = true && (isSetCheckConstraints());
    list.add(present_checkConstraints);
    if (present_checkConstraints)
      list.add(checkConstraints);

    boolean present_processorCapabilities = true && (isSetProcessorCapabilities());
    list.add(present_processorCapabilities);
    if (present_processorCapabilities)
      list.add(processorCapabilities);

    boolean present_processorIdentifier = true && (isSetProcessorIdentifier());
    list.add(present_processorIdentifier);
    if (present_processorIdentifier)
      list.add(processorIdentifier);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreateTableRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvContext()).compareTo(other.isSetEnvContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envContext, other.envContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimaryKeys()).compareTo(other.isSetPrimaryKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKeys, other.primaryKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeignKeys()).compareTo(other.isSetForeignKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeignKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreignKeys, other.foreignKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUniqueConstraints()).compareTo(other.isSetUniqueConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueConstraints, other.uniqueConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotNullConstraints()).compareTo(other.isSetNotNullConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotNullConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notNullConstraints, other.notNullConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultConstraints()).compareTo(other.isSetDefaultConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultConstraints, other.defaultConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckConstraints()).compareTo(other.isSetCheckConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkConstraints, other.checkConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessorCapabilities()).compareTo(other.isSetProcessorCapabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessorCapabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processorCapabilities, other.processorCapabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessorIdentifier()).compareTo(other.isSetProcessorIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessorIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processorIdentifier, other.processorIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreateTableRequest(");
    boolean first = true;

    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      sb.append(this.table);
    }
    first = false;
    if (isSetEnvContext()) {
      if (!first) sb.append(", ");
      sb.append("envContext:");
      if (this.envContext == null) {
        sb.append("null");
      } else {
        sb.append(this.envContext);
      }
      first = false;
    }
    if (isSetPrimaryKeys()) {
      if (!first) sb.append(", ");
      sb.append("primaryKeys:");
      if (this.primaryKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKeys);
      }
      first = false;
    }
    if (isSetForeignKeys()) {
      if (!first) sb.append(", ");
      sb.append("foreignKeys:");
      if (this.foreignKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.foreignKeys);
      }
      first = false;
    }
    if (isSetUniqueConstraints()) {
      if (!first) sb.append(", ");
      sb.append("uniqueConstraints:");
      if (this.uniqueConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.uniqueConstraints);
      }
      first = false;
    }
    if (isSetNotNullConstraints()) {
      if (!first) sb.append(", ");
      sb.append("notNullConstraints:");
      if (this.notNullConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.notNullConstraints);
      }
      first = false;
    }
    if (isSetDefaultConstraints()) {
      if (!first) sb.append(", ");
      sb.append("defaultConstraints:");
      if (this.defaultConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultConstraints);
      }
      first = false;
    }
    if (isSetCheckConstraints()) {
      if (!first) sb.append(", ");
      sb.append("checkConstraints:");
      if (this.checkConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.checkConstraints);
      }
      first = false;
    }
    if (isSetProcessorCapabilities()) {
      if (!first) sb.append(", ");
      sb.append("processorCapabilities:");
      if (this.processorCapabilities == null) {
        sb.append("null");
      } else {
        sb.append(this.processorCapabilities);
      }
      first = false;
    }
    if (isSetProcessorIdentifier()) {
      if (!first) sb.append(", ");
      sb.append("processorIdentifier:");
      if (this.processorIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.processorIdentifier);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTable()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (table != null) {
      table.validate();
    }
    if (envContext != null) {
      envContext.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreateTableRequestStandardSchemeFactory implements SchemeFactory {
    public CreateTableRequestStandardScheme getScheme() {
      return new CreateTableRequestStandardScheme();
    }
  }

  private static class CreateTableRequestStandardScheme extends StandardScheme<CreateTableRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreateTableRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table = new Table();
              struct.table.read(iprot);
              struct.setTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENV_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.envContext = new EnvironmentContext();
              struct.envContext.read(iprot);
              struct.setEnvContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIMARY_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1056 = iprot.readListBegin();
                struct.primaryKeys = new ArrayList<SQLPrimaryKey>(_list1056.size);
                SQLPrimaryKey _elem1057;
                for (int _i1058 = 0; _i1058 < _list1056.size; ++_i1058)
                {
                  _elem1057 = new SQLPrimaryKey();
                  _elem1057.read(iprot);
                  struct.primaryKeys.add(_elem1057);
                }
                iprot.readListEnd();
              }
              struct.setPrimaryKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOREIGN_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1059 = iprot.readListBegin();
                struct.foreignKeys = new ArrayList<SQLForeignKey>(_list1059.size);
                SQLForeignKey _elem1060;
                for (int _i1061 = 0; _i1061 < _list1059.size; ++_i1061)
                {
                  _elem1060 = new SQLForeignKey();
                  _elem1060.read(iprot);
                  struct.foreignKeys.add(_elem1060);
                }
                iprot.readListEnd();
              }
              struct.setForeignKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UNIQUE_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1062 = iprot.readListBegin();
                struct.uniqueConstraints = new ArrayList<SQLUniqueConstraint>(_list1062.size);
                SQLUniqueConstraint _elem1063;
                for (int _i1064 = 0; _i1064 < _list1062.size; ++_i1064)
                {
                  _elem1063 = new SQLUniqueConstraint();
                  _elem1063.read(iprot);
                  struct.uniqueConstraints.add(_elem1063);
                }
                iprot.readListEnd();
              }
              struct.setUniqueConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOT_NULL_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1065 = iprot.readListBegin();
                struct.notNullConstraints = new ArrayList<SQLNotNullConstraint>(_list1065.size);
                SQLNotNullConstraint _elem1066;
                for (int _i1067 = 0; _i1067 < _list1065.size; ++_i1067)
                {
                  _elem1066 = new SQLNotNullConstraint();
                  _elem1066.read(iprot);
                  struct.notNullConstraints.add(_elem1066);
                }
                iprot.readListEnd();
              }
              struct.setNotNullConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFAULT_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1068 = iprot.readListBegin();
                struct.defaultConstraints = new ArrayList<SQLDefaultConstraint>(_list1068.size);
                SQLDefaultConstraint _elem1069;
                for (int _i1070 = 0; _i1070 < _list1068.size; ++_i1070)
                {
                  _elem1069 = new SQLDefaultConstraint();
                  _elem1069.read(iprot);
                  struct.defaultConstraints.add(_elem1069);
                }
                iprot.readListEnd();
              }
              struct.setDefaultConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHECK_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1071 = iprot.readListBegin();
                struct.checkConstraints = new ArrayList<SQLCheckConstraint>(_list1071.size);
                SQLCheckConstraint _elem1072;
                for (int _i1073 = 0; _i1073 < _list1071.size; ++_i1073)
                {
                  _elem1072 = new SQLCheckConstraint();
                  _elem1072.read(iprot);
                  struct.checkConstraints.add(_elem1072);
                }
                iprot.readListEnd();
              }
              struct.setCheckConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROCESSOR_CAPABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1074 = iprot.readListBegin();
                struct.processorCapabilities = new ArrayList<String>(_list1074.size);
                String _elem1075;
                for (int _i1076 = 0; _i1076 < _list1074.size; ++_i1076)
                {
                  _elem1075 = iprot.readString();
                  struct.processorCapabilities.add(_elem1075);
                }
                iprot.readListEnd();
              }
              struct.setProcessorCapabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROCESSOR_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processorIdentifier = iprot.readString();
              struct.setProcessorIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreateTableRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        struct.table.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.envContext != null) {
        if (struct.isSetEnvContext()) {
          oprot.writeFieldBegin(ENV_CONTEXT_FIELD_DESC);
          struct.envContext.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.primaryKeys != null) {
        if (struct.isSetPrimaryKeys()) {
          oprot.writeFieldBegin(PRIMARY_KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.primaryKeys.size()));
            for (SQLPrimaryKey _iter1077 : struct.primaryKeys)
            {
              _iter1077.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.foreignKeys != null) {
        if (struct.isSetForeignKeys()) {
          oprot.writeFieldBegin(FOREIGN_KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foreignKeys.size()));
            for (SQLForeignKey _iter1078 : struct.foreignKeys)
            {
              _iter1078.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.uniqueConstraints != null) {
        if (struct.isSetUniqueConstraints()) {
          oprot.writeFieldBegin(UNIQUE_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.uniqueConstraints.size()));
            for (SQLUniqueConstraint _iter1079 : struct.uniqueConstraints)
            {
              _iter1079.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.notNullConstraints != null) {
        if (struct.isSetNotNullConstraints()) {
          oprot.writeFieldBegin(NOT_NULL_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.notNullConstraints.size()));
            for (SQLNotNullConstraint _iter1080 : struct.notNullConstraints)
            {
              _iter1080.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultConstraints != null) {
        if (struct.isSetDefaultConstraints()) {
          oprot.writeFieldBegin(DEFAULT_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.defaultConstraints.size()));
            for (SQLDefaultConstraint _iter1081 : struct.defaultConstraints)
            {
              _iter1081.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.checkConstraints != null) {
        if (struct.isSetCheckConstraints()) {
          oprot.writeFieldBegin(CHECK_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.checkConstraints.size()));
            for (SQLCheckConstraint _iter1082 : struct.checkConstraints)
            {
              _iter1082.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.processorCapabilities != null) {
        if (struct.isSetProcessorCapabilities()) {
          oprot.writeFieldBegin(PROCESSOR_CAPABILITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.processorCapabilities.size()));
            for (String _iter1083 : struct.processorCapabilities)
            {
              oprot.writeString(_iter1083);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.processorIdentifier != null) {
        if (struct.isSetProcessorIdentifier()) {
          oprot.writeFieldBegin(PROCESSOR_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.processorIdentifier);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreateTableRequestTupleSchemeFactory implements SchemeFactory {
    public CreateTableRequestTupleScheme getScheme() {
      return new CreateTableRequestTupleScheme();
    }
  }

  private static class CreateTableRequestTupleScheme extends TupleScheme<CreateTableRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreateTableRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetEnvContext()) {
        optionals.set(0);
      }
      if (struct.isSetPrimaryKeys()) {
        optionals.set(1);
      }
      if (struct.isSetForeignKeys()) {
        optionals.set(2);
      }
      if (struct.isSetUniqueConstraints()) {
        optionals.set(3);
      }
      if (struct.isSetNotNullConstraints()) {
        optionals.set(4);
      }
      if (struct.isSetDefaultConstraints()) {
        optionals.set(5);
      }
      if (struct.isSetCheckConstraints()) {
        optionals.set(6);
      }
      if (struct.isSetProcessorCapabilities()) {
        optionals.set(7);
      }
      if (struct.isSetProcessorIdentifier()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetEnvContext()) {
        struct.envContext.write(oprot);
      }
      if (struct.isSetPrimaryKeys()) {
        {
          oprot.writeI32(struct.primaryKeys.size());
          for (SQLPrimaryKey _iter1084 : struct.primaryKeys)
          {
            _iter1084.write(oprot);
          }
        }
      }
      if (struct.isSetForeignKeys()) {
        {
          oprot.writeI32(struct.foreignKeys.size());
          for (SQLForeignKey _iter1085 : struct.foreignKeys)
          {
            _iter1085.write(oprot);
          }
        }
      }
      if (struct.isSetUniqueConstraints()) {
        {
          oprot.writeI32(struct.uniqueConstraints.size());
          for (SQLUniqueConstraint _iter1086 : struct.uniqueConstraints)
          {
            _iter1086.write(oprot);
          }
        }
      }
      if (struct.isSetNotNullConstraints()) {
        {
          oprot.writeI32(struct.notNullConstraints.size());
          for (SQLNotNullConstraint _iter1087 : struct.notNullConstraints)
          {
            _iter1087.write(oprot);
          }
        }
      }
      if (struct.isSetDefaultConstraints()) {
        {
          oprot.writeI32(struct.defaultConstraints.size());
          for (SQLDefaultConstraint _iter1088 : struct.defaultConstraints)
          {
            _iter1088.write(oprot);
          }
        }
      }
      if (struct.isSetCheckConstraints()) {
        {
          oprot.writeI32(struct.checkConstraints.size());
          for (SQLCheckConstraint _iter1089 : struct.checkConstraints)
          {
            _iter1089.write(oprot);
          }
        }
      }
      if (struct.isSetProcessorCapabilities()) {
        {
          oprot.writeI32(struct.processorCapabilities.size());
          for (String _iter1090 : struct.processorCapabilities)
          {
            oprot.writeString(_iter1090);
          }
        }
      }
      if (struct.isSetProcessorIdentifier()) {
        oprot.writeString(struct.processorIdentifier);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreateTableRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table = new Table();
      struct.table.read(iprot);
      struct.setTableIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.envContext = new EnvironmentContext();
        struct.envContext.read(iprot);
        struct.setEnvContextIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list1091 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.primaryKeys = new ArrayList<SQLPrimaryKey>(_list1091.size);
          SQLPrimaryKey _elem1092;
          for (int _i1093 = 0; _i1093 < _list1091.size; ++_i1093)
          {
            _elem1092 = new SQLPrimaryKey();
            _elem1092.read(iprot);
            struct.primaryKeys.add(_elem1092);
          }
        }
        struct.setPrimaryKeysIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list1094 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.foreignKeys = new ArrayList<SQLForeignKey>(_list1094.size);
          SQLForeignKey _elem1095;
          for (int _i1096 = 0; _i1096 < _list1094.size; ++_i1096)
          {
            _elem1095 = new SQLForeignKey();
            _elem1095.read(iprot);
            struct.foreignKeys.add(_elem1095);
          }
        }
        struct.setForeignKeysIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list1097 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.uniqueConstraints = new ArrayList<SQLUniqueConstraint>(_list1097.size);
          SQLUniqueConstraint _elem1098;
          for (int _i1099 = 0; _i1099 < _list1097.size; ++_i1099)
          {
            _elem1098 = new SQLUniqueConstraint();
            _elem1098.read(iprot);
            struct.uniqueConstraints.add(_elem1098);
          }
        }
        struct.setUniqueConstraintsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list1100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.notNullConstraints = new ArrayList<SQLNotNullConstraint>(_list1100.size);
          SQLNotNullConstraint _elem1101;
          for (int _i1102 = 0; _i1102 < _list1100.size; ++_i1102)
          {
            _elem1101 = new SQLNotNullConstraint();
            _elem1101.read(iprot);
            struct.notNullConstraints.add(_elem1101);
          }
        }
        struct.setNotNullConstraintsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list1103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.defaultConstraints = new ArrayList<SQLDefaultConstraint>(_list1103.size);
          SQLDefaultConstraint _elem1104;
          for (int _i1105 = 0; _i1105 < _list1103.size; ++_i1105)
          {
            _elem1104 = new SQLDefaultConstraint();
            _elem1104.read(iprot);
            struct.defaultConstraints.add(_elem1104);
          }
        }
        struct.setDefaultConstraintsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list1106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.checkConstraints = new ArrayList<SQLCheckConstraint>(_list1106.size);
          SQLCheckConstraint _elem1107;
          for (int _i1108 = 0; _i1108 < _list1106.size; ++_i1108)
          {
            _elem1107 = new SQLCheckConstraint();
            _elem1107.read(iprot);
            struct.checkConstraints.add(_elem1107);
          }
        }
        struct.setCheckConstraintsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list1109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.processorCapabilities = new ArrayList<String>(_list1109.size);
          String _elem1110;
          for (int _i1111 = 0; _i1111 < _list1109.size; ++_i1111)
          {
            _elem1110 = iprot.readString();
            struct.processorCapabilities.add(_elem1110);
          }
        }
        struct.setProcessorCapabilitiesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.processorIdentifier = iprot.readString();
        struct.setProcessorIdentifierIsSet(true);
      }
    }
  }

}

