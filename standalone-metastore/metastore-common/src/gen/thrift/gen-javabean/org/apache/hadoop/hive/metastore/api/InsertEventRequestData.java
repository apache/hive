/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class InsertEventRequestData implements org.apache.thrift.TBase<InsertEventRequestData, InsertEventRequestData._Fields>, java.io.Serializable, Cloneable, Comparable<InsertEventRequestData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertEventRequestData");

  private static final org.apache.thrift.protocol.TField REPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("replace", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField FILES_ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("filesAdded", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FILES_ADDED_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("filesAddedChecksum", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_DIRECTORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("subDirectoryList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionVal", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InsertEventRequestDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InsertEventRequestDataTupleSchemeFactory();

  private boolean replace; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> filesAdded; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> filesAddedChecksum; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> subDirectoryList; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partitionVal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLACE((short)1, "replace"),
    FILES_ADDED((short)2, "filesAdded"),
    FILES_ADDED_CHECKSUM((short)3, "filesAddedChecksum"),
    SUB_DIRECTORY_LIST((short)4, "subDirectoryList"),
    PARTITION_VAL((short)5, "partitionVal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLACE
          return REPLACE;
        case 2: // FILES_ADDED
          return FILES_ADDED;
        case 3: // FILES_ADDED_CHECKSUM
          return FILES_ADDED_CHECKSUM;
        case 4: // SUB_DIRECTORY_LIST
          return SUB_DIRECTORY_LIST;
        case 5: // PARTITION_VAL
          return PARTITION_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPLACE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLACE,_Fields.FILES_ADDED_CHECKSUM,_Fields.SUB_DIRECTORY_LIST,_Fields.PARTITION_VAL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLACE, new org.apache.thrift.meta_data.FieldMetaData("replace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FILES_ADDED, new org.apache.thrift.meta_data.FieldMetaData("filesAdded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FILES_ADDED_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("filesAddedChecksum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUB_DIRECTORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("subDirectoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_VAL, new org.apache.thrift.meta_data.FieldMetaData("partitionVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertEventRequestData.class, metaDataMap);
  }

  public InsertEventRequestData() {
  }

  public InsertEventRequestData(
    java.util.List<java.lang.String> filesAdded)
  {
    this();
    this.filesAdded = filesAdded;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InsertEventRequestData(InsertEventRequestData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.replace = other.replace;
    if (other.isSetFilesAdded()) {
      java.util.List<java.lang.String> __this__filesAdded = new java.util.ArrayList<java.lang.String>(other.filesAdded);
      this.filesAdded = __this__filesAdded;
    }
    if (other.isSetFilesAddedChecksum()) {
      java.util.List<java.lang.String> __this__filesAddedChecksum = new java.util.ArrayList<java.lang.String>(other.filesAddedChecksum);
      this.filesAddedChecksum = __this__filesAddedChecksum;
    }
    if (other.isSetSubDirectoryList()) {
      java.util.List<java.lang.String> __this__subDirectoryList = new java.util.ArrayList<java.lang.String>(other.subDirectoryList);
      this.subDirectoryList = __this__subDirectoryList;
    }
    if (other.isSetPartitionVal()) {
      java.util.List<java.lang.String> __this__partitionVal = new java.util.ArrayList<java.lang.String>(other.partitionVal);
      this.partitionVal = __this__partitionVal;
    }
  }

  public InsertEventRequestData deepCopy() {
    return new InsertEventRequestData(this);
  }

  @Override
  public void clear() {
    setReplaceIsSet(false);
    this.replace = false;
    this.filesAdded = null;
    this.filesAddedChecksum = null;
    this.subDirectoryList = null;
    this.partitionVal = null;
  }

  public boolean isReplace() {
    return this.replace;
  }

  public void setReplace(boolean replace) {
    this.replace = replace;
    setReplaceIsSet(true);
  }

  public void unsetReplace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLACE_ISSET_ID);
  }

  /** Returns true if field replace is set (has been assigned a value) and false otherwise */
  public boolean isSetReplace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLACE_ISSET_ID);
  }

  public void setReplaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLACE_ISSET_ID, value);
  }

  public int getFilesAddedSize() {
    return (this.filesAdded == null) ? 0 : this.filesAdded.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getFilesAddedIterator() {
    return (this.filesAdded == null) ? null : this.filesAdded.iterator();
  }

  public void addToFilesAdded(java.lang.String elem) {
    if (this.filesAdded == null) {
      this.filesAdded = new java.util.ArrayList<java.lang.String>();
    }
    this.filesAdded.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getFilesAdded() {
    return this.filesAdded;
  }

  public void setFilesAdded(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> filesAdded) {
    this.filesAdded = filesAdded;
  }

  public void unsetFilesAdded() {
    this.filesAdded = null;
  }

  /** Returns true if field filesAdded is set (has been assigned a value) and false otherwise */
  public boolean isSetFilesAdded() {
    return this.filesAdded != null;
  }

  public void setFilesAddedIsSet(boolean value) {
    if (!value) {
      this.filesAdded = null;
    }
  }

  public int getFilesAddedChecksumSize() {
    return (this.filesAddedChecksum == null) ? 0 : this.filesAddedChecksum.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getFilesAddedChecksumIterator() {
    return (this.filesAddedChecksum == null) ? null : this.filesAddedChecksum.iterator();
  }

  public void addToFilesAddedChecksum(java.lang.String elem) {
    if (this.filesAddedChecksum == null) {
      this.filesAddedChecksum = new java.util.ArrayList<java.lang.String>();
    }
    this.filesAddedChecksum.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getFilesAddedChecksum() {
    return this.filesAddedChecksum;
  }

  public void setFilesAddedChecksum(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> filesAddedChecksum) {
    this.filesAddedChecksum = filesAddedChecksum;
  }

  public void unsetFilesAddedChecksum() {
    this.filesAddedChecksum = null;
  }

  /** Returns true if field filesAddedChecksum is set (has been assigned a value) and false otherwise */
  public boolean isSetFilesAddedChecksum() {
    return this.filesAddedChecksum != null;
  }

  public void setFilesAddedChecksumIsSet(boolean value) {
    if (!value) {
      this.filesAddedChecksum = null;
    }
  }

  public int getSubDirectoryListSize() {
    return (this.subDirectoryList == null) ? 0 : this.subDirectoryList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSubDirectoryListIterator() {
    return (this.subDirectoryList == null) ? null : this.subDirectoryList.iterator();
  }

  public void addToSubDirectoryList(java.lang.String elem) {
    if (this.subDirectoryList == null) {
      this.subDirectoryList = new java.util.ArrayList<java.lang.String>();
    }
    this.subDirectoryList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSubDirectoryList() {
    return this.subDirectoryList;
  }

  public void setSubDirectoryList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> subDirectoryList) {
    this.subDirectoryList = subDirectoryList;
  }

  public void unsetSubDirectoryList() {
    this.subDirectoryList = null;
  }

  /** Returns true if field subDirectoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubDirectoryList() {
    return this.subDirectoryList != null;
  }

  public void setSubDirectoryListIsSet(boolean value) {
    if (!value) {
      this.subDirectoryList = null;
    }
  }

  public int getPartitionValSize() {
    return (this.partitionVal == null) ? 0 : this.partitionVal.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPartitionValIterator() {
    return (this.partitionVal == null) ? null : this.partitionVal.iterator();
  }

  public void addToPartitionVal(java.lang.String elem) {
    if (this.partitionVal == null) {
      this.partitionVal = new java.util.ArrayList<java.lang.String>();
    }
    this.partitionVal.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPartitionVal() {
    return this.partitionVal;
  }

  public void setPartitionVal(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partitionVal) {
    this.partitionVal = partitionVal;
  }

  public void unsetPartitionVal() {
    this.partitionVal = null;
  }

  /** Returns true if field partitionVal is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionVal() {
    return this.partitionVal != null;
  }

  public void setPartitionValIsSet(boolean value) {
    if (!value) {
      this.partitionVal = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REPLACE:
      if (value == null) {
        unsetReplace();
      } else {
        setReplace((java.lang.Boolean)value);
      }
      break;

    case FILES_ADDED:
      if (value == null) {
        unsetFilesAdded();
      } else {
        setFilesAdded((java.util.List<java.lang.String>)value);
      }
      break;

    case FILES_ADDED_CHECKSUM:
      if (value == null) {
        unsetFilesAddedChecksum();
      } else {
        setFilesAddedChecksum((java.util.List<java.lang.String>)value);
      }
      break;

    case SUB_DIRECTORY_LIST:
      if (value == null) {
        unsetSubDirectoryList();
      } else {
        setSubDirectoryList((java.util.List<java.lang.String>)value);
      }
      break;

    case PARTITION_VAL:
      if (value == null) {
        unsetPartitionVal();
      } else {
        setPartitionVal((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLACE:
      return isReplace();

    case FILES_ADDED:
      return getFilesAdded();

    case FILES_ADDED_CHECKSUM:
      return getFilesAddedChecksum();

    case SUB_DIRECTORY_LIST:
      return getSubDirectoryList();

    case PARTITION_VAL:
      return getPartitionVal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REPLACE:
      return isSetReplace();
    case FILES_ADDED:
      return isSetFilesAdded();
    case FILES_ADDED_CHECKSUM:
      return isSetFilesAddedChecksum();
    case SUB_DIRECTORY_LIST:
      return isSetSubDirectoryList();
    case PARTITION_VAL:
      return isSetPartitionVal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof InsertEventRequestData)
      return this.equals((InsertEventRequestData)that);
    return false;
  }

  public boolean equals(InsertEventRequestData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_replace = true && this.isSetReplace();
    boolean that_present_replace = true && that.isSetReplace();
    if (this_present_replace || that_present_replace) {
      if (!(this_present_replace && that_present_replace))
        return false;
      if (this.replace != that.replace)
        return false;
    }

    boolean this_present_filesAdded = true && this.isSetFilesAdded();
    boolean that_present_filesAdded = true && that.isSetFilesAdded();
    if (this_present_filesAdded || that_present_filesAdded) {
      if (!(this_present_filesAdded && that_present_filesAdded))
        return false;
      if (!this.filesAdded.equals(that.filesAdded))
        return false;
    }

    boolean this_present_filesAddedChecksum = true && this.isSetFilesAddedChecksum();
    boolean that_present_filesAddedChecksum = true && that.isSetFilesAddedChecksum();
    if (this_present_filesAddedChecksum || that_present_filesAddedChecksum) {
      if (!(this_present_filesAddedChecksum && that_present_filesAddedChecksum))
        return false;
      if (!this.filesAddedChecksum.equals(that.filesAddedChecksum))
        return false;
    }

    boolean this_present_subDirectoryList = true && this.isSetSubDirectoryList();
    boolean that_present_subDirectoryList = true && that.isSetSubDirectoryList();
    if (this_present_subDirectoryList || that_present_subDirectoryList) {
      if (!(this_present_subDirectoryList && that_present_subDirectoryList))
        return false;
      if (!this.subDirectoryList.equals(that.subDirectoryList))
        return false;
    }

    boolean this_present_partitionVal = true && this.isSetPartitionVal();
    boolean that_present_partitionVal = true && that.isSetPartitionVal();
    if (this_present_partitionVal || that_present_partitionVal) {
      if (!(this_present_partitionVal && that_present_partitionVal))
        return false;
      if (!this.partitionVal.equals(that.partitionVal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReplace()) ? 131071 : 524287);
    if (isSetReplace())
      hashCode = hashCode * 8191 + ((replace) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFilesAdded()) ? 131071 : 524287);
    if (isSetFilesAdded())
      hashCode = hashCode * 8191 + filesAdded.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilesAddedChecksum()) ? 131071 : 524287);
    if (isSetFilesAddedChecksum())
      hashCode = hashCode * 8191 + filesAddedChecksum.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubDirectoryList()) ? 131071 : 524287);
    if (isSetSubDirectoryList())
      hashCode = hashCode * 8191 + subDirectoryList.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitionVal()) ? 131071 : 524287);
    if (isSetPartitionVal())
      hashCode = hashCode * 8191 + partitionVal.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(InsertEventRequestData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetReplace(), other.isSetReplace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace, other.replace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilesAdded(), other.isSetFilesAdded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilesAdded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesAdded, other.filesAdded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilesAddedChecksum(), other.isSetFilesAddedChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilesAddedChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesAddedChecksum, other.filesAddedChecksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSubDirectoryList(), other.isSetSubDirectoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubDirectoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subDirectoryList, other.subDirectoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionVal(), other.isSetPartitionVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionVal, other.partitionVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InsertEventRequestData(");
    boolean first = true;

    if (isSetReplace()) {
      sb.append("replace:");
      sb.append(this.replace);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("filesAdded:");
    if (this.filesAdded == null) {
      sb.append("null");
    } else {
      sb.append(this.filesAdded);
    }
    first = false;
    if (isSetFilesAddedChecksum()) {
      if (!first) sb.append(", ");
      sb.append("filesAddedChecksum:");
      if (this.filesAddedChecksum == null) {
        sb.append("null");
      } else {
        sb.append(this.filesAddedChecksum);
      }
      first = false;
    }
    if (isSetSubDirectoryList()) {
      if (!first) sb.append(", ");
      sb.append("subDirectoryList:");
      if (this.subDirectoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.subDirectoryList);
      }
      first = false;
    }
    if (isSetPartitionVal()) {
      if (!first) sb.append(", ");
      sb.append("partitionVal:");
      if (this.partitionVal == null) {
        sb.append("null");
      } else {
        sb.append(this.partitionVal);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetFilesAdded()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filesAdded' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InsertEventRequestDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InsertEventRequestDataStandardScheme getScheme() {
      return new InsertEventRequestDataStandardScheme();
    }
  }

  private static class InsertEventRequestDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<InsertEventRequestData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InsertEventRequestData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.replace = iprot.readBool();
              struct.setReplaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILES_ADDED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list878 = iprot.readListBegin();
                struct.filesAdded = new java.util.ArrayList<java.lang.String>(_list878.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem879;
                for (int _i880 = 0; _i880 < _list878.size; ++_i880)
                {
                  _elem879 = iprot.readString();
                  struct.filesAdded.add(_elem879);
                }
                iprot.readListEnd();
              }
              struct.setFilesAddedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILES_ADDED_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list881 = iprot.readListBegin();
                struct.filesAddedChecksum = new java.util.ArrayList<java.lang.String>(_list881.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem882;
                for (int _i883 = 0; _i883 < _list881.size; ++_i883)
                {
                  _elem882 = iprot.readString();
                  struct.filesAddedChecksum.add(_elem882);
                }
                iprot.readListEnd();
              }
              struct.setFilesAddedChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_DIRECTORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list884 = iprot.readListBegin();
                struct.subDirectoryList = new java.util.ArrayList<java.lang.String>(_list884.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem885;
                for (int _i886 = 0; _i886 < _list884.size; ++_i886)
                {
                  _elem885 = iprot.readString();
                  struct.subDirectoryList.add(_elem885);
                }
                iprot.readListEnd();
              }
              struct.setSubDirectoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list887 = iprot.readListBegin();
                struct.partitionVal = new java.util.ArrayList<java.lang.String>(_list887.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem888;
                for (int _i889 = 0; _i889 < _list887.size; ++_i889)
                {
                  _elem888 = iprot.readString();
                  struct.partitionVal.add(_elem888);
                }
                iprot.readListEnd();
              }
              struct.setPartitionValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InsertEventRequestData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetReplace()) {
        oprot.writeFieldBegin(REPLACE_FIELD_DESC);
        oprot.writeBool(struct.replace);
        oprot.writeFieldEnd();
      }
      if (struct.filesAdded != null) {
        oprot.writeFieldBegin(FILES_ADDED_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filesAdded.size()));
          for (java.lang.String _iter890 : struct.filesAdded)
          {
            oprot.writeString(_iter890);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.filesAddedChecksum != null) {
        if (struct.isSetFilesAddedChecksum()) {
          oprot.writeFieldBegin(FILES_ADDED_CHECKSUM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filesAddedChecksum.size()));
            for (java.lang.String _iter891 : struct.filesAddedChecksum)
            {
              oprot.writeString(_iter891);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.subDirectoryList != null) {
        if (struct.isSetSubDirectoryList()) {
          oprot.writeFieldBegin(SUB_DIRECTORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.subDirectoryList.size()));
            for (java.lang.String _iter892 : struct.subDirectoryList)
            {
              oprot.writeString(_iter892);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitionVal != null) {
        if (struct.isSetPartitionVal()) {
          oprot.writeFieldBegin(PARTITION_VAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partitionVal.size()));
            for (java.lang.String _iter893 : struct.partitionVal)
            {
              oprot.writeString(_iter893);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InsertEventRequestDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InsertEventRequestDataTupleScheme getScheme() {
      return new InsertEventRequestDataTupleScheme();
    }
  }

  private static class InsertEventRequestDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<InsertEventRequestData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InsertEventRequestData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.filesAdded.size());
        for (java.lang.String _iter894 : struct.filesAdded)
        {
          oprot.writeString(_iter894);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReplace()) {
        optionals.set(0);
      }
      if (struct.isSetFilesAddedChecksum()) {
        optionals.set(1);
      }
      if (struct.isSetSubDirectoryList()) {
        optionals.set(2);
      }
      if (struct.isSetPartitionVal()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetReplace()) {
        oprot.writeBool(struct.replace);
      }
      if (struct.isSetFilesAddedChecksum()) {
        {
          oprot.writeI32(struct.filesAddedChecksum.size());
          for (java.lang.String _iter895 : struct.filesAddedChecksum)
          {
            oprot.writeString(_iter895);
          }
        }
      }
      if (struct.isSetSubDirectoryList()) {
        {
          oprot.writeI32(struct.subDirectoryList.size());
          for (java.lang.String _iter896 : struct.subDirectoryList)
          {
            oprot.writeString(_iter896);
          }
        }
      }
      if (struct.isSetPartitionVal()) {
        {
          oprot.writeI32(struct.partitionVal.size());
          for (java.lang.String _iter897 : struct.partitionVal)
          {
            oprot.writeString(_iter897);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InsertEventRequestData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list898 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.filesAdded = new java.util.ArrayList<java.lang.String>(_list898.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem899;
        for (int _i900 = 0; _i900 < _list898.size; ++_i900)
        {
          _elem899 = iprot.readString();
          struct.filesAdded.add(_elem899);
        }
      }
      struct.setFilesAddedIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.replace = iprot.readBool();
        struct.setReplaceIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list901 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.filesAddedChecksum = new java.util.ArrayList<java.lang.String>(_list901.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem902;
          for (int _i903 = 0; _i903 < _list901.size; ++_i903)
          {
            _elem902 = iprot.readString();
            struct.filesAddedChecksum.add(_elem902);
          }
        }
        struct.setFilesAddedChecksumIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list904 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.subDirectoryList = new java.util.ArrayList<java.lang.String>(_list904.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem905;
          for (int _i906 = 0; _i906 < _list904.size; ++_i906)
          {
            _elem905 = iprot.readString();
            struct.subDirectoryList.add(_elem905);
          }
        }
        struct.setSubDirectoryListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list907 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partitionVal = new java.util.ArrayList<java.lang.String>(_list907.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem908;
          for (int _i909 = 0; _i909 < _list907.size; ++_i909)
          {
            _elem908 = iprot.readString();
            struct.partitionVal.add(_elem908);
          }
        }
        struct.setPartitionValIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

