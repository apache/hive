/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class CompactionInfoStruct implements org.apache.thrift.TBase<CompactionInfoStruct, CompactionInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<CompactionInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompactionInfoStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tablename", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITIONNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RUNAS_FIELD_DESC = new org.apache.thrift.protocol.TField("runas", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOOMANYABORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("toomanyaborts", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField HIGHEST_WRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("highestWriteId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField HASOLDABORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasoldabort", org.apache.thrift.protocol.TType.BOOL, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompactionInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompactionInfoStructTupleSchemeFactory());
  }

  private long id; // required
  private String dbname; // required
  private String tablename; // required
  private String partitionname; // optional
  private CompactionType type; // required
  private String runas; // optional
  private String properties; // optional
  private boolean toomanyaborts; // optional
  private String state; // optional
  private String workerId; // optional
  private long start; // optional
  private long highestWriteId; // optional
  private String errorMessage; // optional
  private boolean hasoldabort; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DBNAME((short)2, "dbname"),
    TABLENAME((short)3, "tablename"),
    PARTITIONNAME((short)4, "partitionname"),
    /**
     * 
     * @see CompactionType
     */
    TYPE((short)5, "type"),
    RUNAS((short)6, "runas"),
    PROPERTIES((short)7, "properties"),
    TOOMANYABORTS((short)8, "toomanyaborts"),
    STATE((short)9, "state"),
    WORKER_ID((short)10, "workerId"),
    START((short)11, "start"),
    HIGHEST_WRITE_ID((short)12, "highestWriteId"),
    ERROR_MESSAGE((short)13, "errorMessage"),
    HASOLDABORT((short)14, "hasoldabort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DBNAME
          return DBNAME;
        case 3: // TABLENAME
          return TABLENAME;
        case 4: // PARTITIONNAME
          return PARTITIONNAME;
        case 5: // TYPE
          return TYPE;
        case 6: // RUNAS
          return RUNAS;
        case 7: // PROPERTIES
          return PROPERTIES;
        case 8: // TOOMANYABORTS
          return TOOMANYABORTS;
        case 9: // STATE
          return STATE;
        case 10: // WORKER_ID
          return WORKER_ID;
        case 11: // START
          return START;
        case 12: // HIGHEST_WRITE_ID
          return HIGHEST_WRITE_ID;
        case 13: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 14: // HASOLDABORT
          return HASOLDABORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TOOMANYABORTS_ISSET_ID = 1;
  private static final int __START_ISSET_ID = 2;
  private static final int __HIGHESTWRITEID_ISSET_ID = 3;
  private static final int __HASOLDABORT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITIONNAME,_Fields.RUNAS,_Fields.PROPERTIES,_Fields.TOOMANYABORTS,_Fields.STATE,_Fields.WORKER_ID,_Fields.START,_Fields.HIGHEST_WRITE_ID,_Fields.ERROR_MESSAGE,_Fields.HASOLDABORT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData("dbname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLENAME, new org.apache.thrift.meta_data.FieldMetaData("tablename", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITIONNAME, new org.apache.thrift.meta_data.FieldMetaData("partitionname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CompactionType.class)));
    tmpMap.put(_Fields.RUNAS, new org.apache.thrift.meta_data.FieldMetaData("runas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOOMANYABORTS, new org.apache.thrift.meta_data.FieldMetaData("toomanyaborts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HIGHEST_WRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("highestWriteId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HASOLDABORT, new org.apache.thrift.meta_data.FieldMetaData("hasoldabort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompactionInfoStruct.class, metaDataMap);
  }

  public CompactionInfoStruct() {
  }

  public CompactionInfoStruct(
    long id,
    String dbname,
    String tablename,
    CompactionType type)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.dbname = dbname;
    this.tablename = tablename;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompactionInfoStruct(CompactionInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDbname()) {
      this.dbname = other.dbname;
    }
    if (other.isSetTablename()) {
      this.tablename = other.tablename;
    }
    if (other.isSetPartitionname()) {
      this.partitionname = other.partitionname;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetRunas()) {
      this.runas = other.runas;
    }
    if (other.isSetProperties()) {
      this.properties = other.properties;
    }
    this.toomanyaborts = other.toomanyaborts;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetWorkerId()) {
      this.workerId = other.workerId;
    }
    this.start = other.start;
    this.highestWriteId = other.highestWriteId;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    this.hasoldabort = other.hasoldabort;
  }

  public CompactionInfoStruct deepCopy() {
    return new CompactionInfoStruct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.dbname = null;
    this.tablename = null;
    this.partitionname = null;
    this.type = null;
    this.runas = null;
    this.properties = null;
    setToomanyabortsIsSet(false);
    this.toomanyaborts = false;
    this.state = null;
    this.workerId = null;
    setStartIsSet(false);
    this.start = 0;
    setHighestWriteIdIsSet(false);
    this.highestWriteId = 0;
    this.errorMessage = null;
    setHasoldabortIsSet(false);
    this.hasoldabort = false;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getDbname() {
    return this.dbname;
  }

  public void setDbname(String dbname) {
    this.dbname = dbname;
  }

  public void unsetDbname() {
    this.dbname = null;
  }

  /** Returns true if field dbname is set (has been assigned a value) and false otherwise */
  public boolean isSetDbname() {
    return this.dbname != null;
  }

  public void setDbnameIsSet(boolean value) {
    if (!value) {
      this.dbname = null;
    }
  }

  public String getTablename() {
    return this.tablename;
  }

  public void setTablename(String tablename) {
    this.tablename = tablename;
  }

  public void unsetTablename() {
    this.tablename = null;
  }

  /** Returns true if field tablename is set (has been assigned a value) and false otherwise */
  public boolean isSetTablename() {
    return this.tablename != null;
  }

  public void setTablenameIsSet(boolean value) {
    if (!value) {
      this.tablename = null;
    }
  }

  public String getPartitionname() {
    return this.partitionname;
  }

  public void setPartitionname(String partitionname) {
    this.partitionname = partitionname;
  }

  public void unsetPartitionname() {
    this.partitionname = null;
  }

  /** Returns true if field partitionname is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionname() {
    return this.partitionname != null;
  }

  public void setPartitionnameIsSet(boolean value) {
    if (!value) {
      this.partitionname = null;
    }
  }

  /**
   * 
   * @see CompactionType
   */
  public CompactionType getType() {
    return this.type;
  }

  /**
   * 
   * @see CompactionType
   */
  public void setType(CompactionType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getRunas() {
    return this.runas;
  }

  public void setRunas(String runas) {
    this.runas = runas;
  }

  public void unsetRunas() {
    this.runas = null;
  }

  /** Returns true if field runas is set (has been assigned a value) and false otherwise */
  public boolean isSetRunas() {
    return this.runas != null;
  }

  public void setRunasIsSet(boolean value) {
    if (!value) {
      this.runas = null;
    }
  }

  public String getProperties() {
    return this.properties;
  }

  public void setProperties(String properties) {
    this.properties = properties;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public boolean isToomanyaborts() {
    return this.toomanyaborts;
  }

  public void setToomanyaborts(boolean toomanyaborts) {
    this.toomanyaborts = toomanyaborts;
    setToomanyabortsIsSet(true);
  }

  public void unsetToomanyaborts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOOMANYABORTS_ISSET_ID);
  }

  /** Returns true if field toomanyaborts is set (has been assigned a value) and false otherwise */
  public boolean isSetToomanyaborts() {
    return EncodingUtils.testBit(__isset_bitfield, __TOOMANYABORTS_ISSET_ID);
  }

  public void setToomanyabortsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOOMANYABORTS_ISSET_ID, value);
  }

  public String getState() {
    return this.state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getWorkerId() {
    return this.workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }

  public void unsetWorkerId() {
    this.workerId = null;
  }

  /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerId() {
    return this.workerId != null;
  }

  public void setWorkerIdIsSet(boolean value) {
    if (!value) {
      this.workerId = null;
    }
  }

  public long getStart() {
    return this.start;
  }

  public void setStart(long start) {
    this.start = start;
    setStartIsSet(true);
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public long getHighestWriteId() {
    return this.highestWriteId;
  }

  public void setHighestWriteId(long highestWriteId) {
    this.highestWriteId = highestWriteId;
    setHighestWriteIdIsSet(true);
  }

  public void unsetHighestWriteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGHESTWRITEID_ISSET_ID);
  }

  /** Returns true if field highestWriteId is set (has been assigned a value) and false otherwise */
  public boolean isSetHighestWriteId() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGHESTWRITEID_ISSET_ID);
  }

  public void setHighestWriteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGHESTWRITEID_ISSET_ID, value);
  }

  public String getErrorMessage() {
    return this.errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  public boolean isHasoldabort() {
    return this.hasoldabort;
  }

  public void setHasoldabort(boolean hasoldabort) {
    this.hasoldabort = hasoldabort;
    setHasoldabortIsSet(true);
  }

  public void unsetHasoldabort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASOLDABORT_ISSET_ID);
  }

  /** Returns true if field hasoldabort is set (has been assigned a value) and false otherwise */
  public boolean isSetHasoldabort() {
    return EncodingUtils.testBit(__isset_bitfield, __HASOLDABORT_ISSET_ID);
  }

  public void setHasoldabortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASOLDABORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case DBNAME:
      if (value == null) {
        unsetDbname();
      } else {
        setDbname((String)value);
      }
      break;

    case TABLENAME:
      if (value == null) {
        unsetTablename();
      } else {
        setTablename((String)value);
      }
      break;

    case PARTITIONNAME:
      if (value == null) {
        unsetPartitionname();
      } else {
        setPartitionname((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CompactionType)value);
      }
      break;

    case RUNAS:
      if (value == null) {
        unsetRunas();
      } else {
        setRunas((String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((String)value);
      }
      break;

    case TOOMANYABORTS:
      if (value == null) {
        unsetToomanyaborts();
      } else {
        setToomanyaborts((Boolean)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case WORKER_ID:
      if (value == null) {
        unsetWorkerId();
      } else {
        setWorkerId((String)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case HIGHEST_WRITE_ID:
      if (value == null) {
        unsetHighestWriteId();
      } else {
        setHighestWriteId((Long)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((String)value);
      }
      break;

    case HASOLDABORT:
      if (value == null) {
        unsetHasoldabort();
      } else {
        setHasoldabort((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DBNAME:
      return getDbname();

    case TABLENAME:
      return getTablename();

    case PARTITIONNAME:
      return getPartitionname();

    case TYPE:
      return getType();

    case RUNAS:
      return getRunas();

    case PROPERTIES:
      return getProperties();

    case TOOMANYABORTS:
      return isToomanyaborts();

    case STATE:
      return getState();

    case WORKER_ID:
      return getWorkerId();

    case START:
      return getStart();

    case HIGHEST_WRITE_ID:
      return getHighestWriteId();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case HASOLDABORT:
      return isHasoldabort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DBNAME:
      return isSetDbname();
    case TABLENAME:
      return isSetTablename();
    case PARTITIONNAME:
      return isSetPartitionname();
    case TYPE:
      return isSetType();
    case RUNAS:
      return isSetRunas();
    case PROPERTIES:
      return isSetProperties();
    case TOOMANYABORTS:
      return isSetToomanyaborts();
    case STATE:
      return isSetState();
    case WORKER_ID:
      return isSetWorkerId();
    case START:
      return isSetStart();
    case HIGHEST_WRITE_ID:
      return isSetHighestWriteId();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case HASOLDABORT:
      return isSetHasoldabort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompactionInfoStruct)
      return this.equals((CompactionInfoStruct)that);
    return false;
  }

  public boolean equals(CompactionInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_dbname = true && this.isSetDbname();
    boolean that_present_dbname = true && that.isSetDbname();
    if (this_present_dbname || that_present_dbname) {
      if (!(this_present_dbname && that_present_dbname))
        return false;
      if (!this.dbname.equals(that.dbname))
        return false;
    }

    boolean this_present_tablename = true && this.isSetTablename();
    boolean that_present_tablename = true && that.isSetTablename();
    if (this_present_tablename || that_present_tablename) {
      if (!(this_present_tablename && that_present_tablename))
        return false;
      if (!this.tablename.equals(that.tablename))
        return false;
    }

    boolean this_present_partitionname = true && this.isSetPartitionname();
    boolean that_present_partitionname = true && that.isSetPartitionname();
    if (this_present_partitionname || that_present_partitionname) {
      if (!(this_present_partitionname && that_present_partitionname))
        return false;
      if (!this.partitionname.equals(that.partitionname))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_runas = true && this.isSetRunas();
    boolean that_present_runas = true && that.isSetRunas();
    if (this_present_runas || that_present_runas) {
      if (!(this_present_runas && that_present_runas))
        return false;
      if (!this.runas.equals(that.runas))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_toomanyaborts = true && this.isSetToomanyaborts();
    boolean that_present_toomanyaborts = true && that.isSetToomanyaborts();
    if (this_present_toomanyaborts || that_present_toomanyaborts) {
      if (!(this_present_toomanyaborts && that_present_toomanyaborts))
        return false;
      if (this.toomanyaborts != that.toomanyaborts)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_workerId = true && this.isSetWorkerId();
    boolean that_present_workerId = true && that.isSetWorkerId();
    if (this_present_workerId || that_present_workerId) {
      if (!(this_present_workerId && that_present_workerId))
        return false;
      if (!this.workerId.equals(that.workerId))
        return false;
    }

    boolean this_present_start = true && this.isSetStart();
    boolean that_present_start = true && that.isSetStart();
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_highestWriteId = true && this.isSetHighestWriteId();
    boolean that_present_highestWriteId = true && that.isSetHighestWriteId();
    if (this_present_highestWriteId || that_present_highestWriteId) {
      if (!(this_present_highestWriteId && that_present_highestWriteId))
        return false;
      if (this.highestWriteId != that.highestWriteId)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_hasoldabort = true && this.isSetHasoldabort();
    boolean that_present_hasoldabort = true && that.isSetHasoldabort();
    if (this_present_hasoldabort || that_present_hasoldabort) {
      if (!(this_present_hasoldabort && that_present_hasoldabort))
        return false;
      if (this.hasoldabort != that.hasoldabort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_dbname = true && (isSetDbname());
    list.add(present_dbname);
    if (present_dbname)
      list.add(dbname);

    boolean present_tablename = true && (isSetTablename());
    list.add(present_tablename);
    if (present_tablename)
      list.add(tablename);

    boolean present_partitionname = true && (isSetPartitionname());
    list.add(present_partitionname);
    if (present_partitionname)
      list.add(partitionname);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_runas = true && (isSetRunas());
    list.add(present_runas);
    if (present_runas)
      list.add(runas);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_toomanyaborts = true && (isSetToomanyaborts());
    list.add(present_toomanyaborts);
    if (present_toomanyaborts)
      list.add(toomanyaborts);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_workerId = true && (isSetWorkerId());
    list.add(present_workerId);
    if (present_workerId)
      list.add(workerId);

    boolean present_start = true && (isSetStart());
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_highestWriteId = true && (isSetHighestWriteId());
    list.add(present_highestWriteId);
    if (present_highestWriteId)
      list.add(highestWriteId);

    boolean present_errorMessage = true && (isSetErrorMessage());
    list.add(present_errorMessage);
    if (present_errorMessage)
      list.add(errorMessage);

    boolean present_hasoldabort = true && (isSetHasoldabort());
    list.add(present_hasoldabort);
    if (present_hasoldabort)
      list.add(hasoldabort);

    return list.hashCode();
  }

  @Override
  public int compareTo(CompactionInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbname()).compareTo(other.isSetDbname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname, other.dbname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTablename()).compareTo(other.isSetTablename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablename, other.tablename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionname()).compareTo(other.isSetPartitionname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionname, other.partitionname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunas()).compareTo(other.isSetRunas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runas, other.runas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToomanyaborts()).compareTo(other.isSetToomanyaborts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToomanyaborts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toomanyaborts, other.toomanyaborts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(other.isSetWorkerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, other.workerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighestWriteId()).compareTo(other.isSetHighestWriteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighestWriteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highestWriteId, other.highestWriteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasoldabort()).compareTo(other.isSetHasoldabort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasoldabort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasoldabort, other.hasoldabort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompactionInfoStruct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbname:");
    if (this.dbname == null) {
      sb.append("null");
    } else {
      sb.append(this.dbname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tablename:");
    if (this.tablename == null) {
      sb.append("null");
    } else {
      sb.append(this.tablename);
    }
    first = false;
    if (isSetPartitionname()) {
      if (!first) sb.append(", ");
      sb.append("partitionname:");
      if (this.partitionname == null) {
        sb.append("null");
      } else {
        sb.append(this.partitionname);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetRunas()) {
      if (!first) sb.append(", ");
      sb.append("runas:");
      if (this.runas == null) {
        sb.append("null");
      } else {
        sb.append(this.runas);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetToomanyaborts()) {
      if (!first) sb.append(", ");
      sb.append("toomanyaborts:");
      sb.append(this.toomanyaborts);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetWorkerId()) {
      if (!first) sb.append(", ");
      sb.append("workerId:");
      if (this.workerId == null) {
        sb.append("null");
      } else {
        sb.append(this.workerId);
      }
      first = false;
    }
    if (isSetStart()) {
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
    }
    if (isSetHighestWriteId()) {
      if (!first) sb.append(", ");
      sb.append("highestWriteId:");
      sb.append(this.highestWriteId);
      first = false;
    }
    if (isSetErrorMessage()) {
      if (!first) sb.append(", ");
      sb.append("errorMessage:");
      if (this.errorMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMessage);
      }
      first = false;
    }
    if (isSetHasoldabort()) {
      if (!first) sb.append(", ");
      sb.append("hasoldabort:");
      sb.append(this.hasoldabort);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!isSetDbname()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbname' is unset! Struct:" + toString());
    }

    if (!isSetTablename()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablename' is unset! Struct:" + toString());
    }

    if (!isSetType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompactionInfoStructStandardSchemeFactory implements SchemeFactory {
    public CompactionInfoStructStandardScheme getScheme() {
      return new CompactionInfoStructStandardScheme();
    }
  }

  private static class CompactionInfoStructStandardScheme extends StandardScheme<CompactionInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompactionInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DBNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tablename = iprot.readString();
              struct.setTablenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITIONNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partitionname = iprot.readString();
              struct.setPartitionnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.hadoop.hive.metastore.api.CompactionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RUNAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runas = iprot.readString();
              struct.setRunasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.properties = iprot.readString();
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOOMANYABORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.toomanyaborts = iprot.readBool();
              struct.setToomanyabortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WORKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workerId = iprot.readString();
              struct.setWorkerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start = iprot.readI64();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HIGHEST_WRITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.highestWriteId = iprot.readI64();
              struct.setHighestWriteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HASOLDABORT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasoldabort = iprot.readBool();
              struct.setHasoldabortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompactionInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(struct.dbname);
        oprot.writeFieldEnd();
      }
      if (struct.tablename != null) {
        oprot.writeFieldBegin(TABLENAME_FIELD_DESC);
        oprot.writeString(struct.tablename);
        oprot.writeFieldEnd();
      }
      if (struct.partitionname != null) {
        if (struct.isSetPartitionname()) {
          oprot.writeFieldBegin(PARTITIONNAME_FIELD_DESC);
          oprot.writeString(struct.partitionname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.runas != null) {
        if (struct.isSetRunas()) {
          oprot.writeFieldBegin(RUNAS_FIELD_DESC);
          oprot.writeString(struct.runas);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.properties);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetToomanyaborts()) {
        oprot.writeFieldBegin(TOOMANYABORTS_FIELD_DESC);
        oprot.writeBool(struct.toomanyaborts);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.workerId != null) {
        if (struct.isSetWorkerId()) {
          oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
          oprot.writeString(struct.workerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStart()) {
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHighestWriteId()) {
        oprot.writeFieldBegin(HIGHEST_WRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.highestWriteId);
        oprot.writeFieldEnd();
      }
      if (struct.errorMessage != null) {
        if (struct.isSetErrorMessage()) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.errorMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHasoldabort()) {
        oprot.writeFieldBegin(HASOLDABORT_FIELD_DESC);
        oprot.writeBool(struct.hasoldabort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompactionInfoStructTupleSchemeFactory implements SchemeFactory {
    public CompactionInfoStructTupleScheme getScheme() {
      return new CompactionInfoStructTupleScheme();
    }
  }

  private static class CompactionInfoStructTupleScheme extends TupleScheme<CompactionInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompactionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeString(struct.dbname);
      oprot.writeString(struct.tablename);
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPartitionname()) {
        optionals.set(0);
      }
      if (struct.isSetRunas()) {
        optionals.set(1);
      }
      if (struct.isSetProperties()) {
        optionals.set(2);
      }
      if (struct.isSetToomanyaborts()) {
        optionals.set(3);
      }
      if (struct.isSetState()) {
        optionals.set(4);
      }
      if (struct.isSetWorkerId()) {
        optionals.set(5);
      }
      if (struct.isSetStart()) {
        optionals.set(6);
      }
      if (struct.isSetHighestWriteId()) {
        optionals.set(7);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(8);
      }
      if (struct.isSetHasoldabort()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPartitionname()) {
        oprot.writeString(struct.partitionname);
      }
      if (struct.isSetRunas()) {
        oprot.writeString(struct.runas);
      }
      if (struct.isSetProperties()) {
        oprot.writeString(struct.properties);
      }
      if (struct.isSetToomanyaborts()) {
        oprot.writeBool(struct.toomanyaborts);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetWorkerId()) {
        oprot.writeString(struct.workerId);
      }
      if (struct.isSetStart()) {
        oprot.writeI64(struct.start);
      }
      if (struct.isSetHighestWriteId()) {
        oprot.writeI64(struct.highestWriteId);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetHasoldabort()) {
        oprot.writeBool(struct.hasoldabort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompactionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.dbname = iprot.readString();
      struct.setDbnameIsSet(true);
      struct.tablename = iprot.readString();
      struct.setTablenameIsSet(true);
      struct.type = org.apache.hadoop.hive.metastore.api.CompactionType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.partitionname = iprot.readString();
        struct.setPartitionnameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.runas = iprot.readString();
        struct.setRunasIsSet(true);
      }
      if (incoming.get(2)) {
        struct.properties = iprot.readString();
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.toomanyaborts = iprot.readBool();
        struct.setToomanyabortsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.workerId = iprot.readString();
        struct.setWorkerIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.start = iprot.readI64();
        struct.setStartIsSet(true);
      }
      if (incoming.get(7)) {
        struct.highestWriteId = iprot.readI64();
        struct.setHighestWriteIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hasoldabort = iprot.readBool();
        struct.setHasoldabortIsSet(true);
      }
    }
  }

}

