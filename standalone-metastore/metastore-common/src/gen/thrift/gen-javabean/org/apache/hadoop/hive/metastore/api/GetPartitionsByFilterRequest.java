/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetPartitionsByFilterRequest implements org.apache.thrift.TBase<GetPartitionsByFilterRequest, GetPartitionsByFilterRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetPartitionsByFilterRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPartitionsByFilterRequest");

  private static final org.apache.thrift.protocol.TField CAT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tblName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_PARTS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxParts", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField SKIP_COLUMN_SCHEMA_FOR_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("skipColumnSchemaForPartition", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField INCLUDE_PARAM_KEY_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("includeParamKeyPattern", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXCLUDE_PARAM_KEY_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("excludeParamKeyPattern", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetPartitionsByFilterRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetPartitionsByFilterRequestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String catName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String dbName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String tblName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String filter; // required
  private short maxParts; // optional
  private boolean skipColumnSchemaForPartition; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String includeParamKeyPattern; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String excludeParamKeyPattern; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAT_NAME((short)1, "catName"),
    DB_NAME((short)2, "dbName"),
    TBL_NAME((short)3, "tblName"),
    FILTER((short)4, "filter"),
    MAX_PARTS((short)5, "maxParts"),
    SKIP_COLUMN_SCHEMA_FOR_PARTITION((short)6, "skipColumnSchemaForPartition"),
    INCLUDE_PARAM_KEY_PATTERN((short)7, "includeParamKeyPattern"),
    EXCLUDE_PARAM_KEY_PATTERN((short)8, "excludeParamKeyPattern");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAT_NAME
          return CAT_NAME;
        case 2: // DB_NAME
          return DB_NAME;
        case 3: // TBL_NAME
          return TBL_NAME;
        case 4: // FILTER
          return FILTER;
        case 5: // MAX_PARTS
          return MAX_PARTS;
        case 6: // SKIP_COLUMN_SCHEMA_FOR_PARTITION
          return SKIP_COLUMN_SCHEMA_FOR_PARTITION;
        case 7: // INCLUDE_PARAM_KEY_PATTERN
          return INCLUDE_PARAM_KEY_PATTERN;
        case 8: // EXCLUDE_PARAM_KEY_PATTERN
          return EXCLUDE_PARAM_KEY_PATTERN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXPARTS_ISSET_ID = 0;
  private static final int __SKIPCOLUMNSCHEMAFORPARTITION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CAT_NAME,_Fields.MAX_PARTS,_Fields.SKIP_COLUMN_SCHEMA_FOR_PARTITION,_Fields.INCLUDE_PARAM_KEY_PATTERN,_Fields.EXCLUDE_PARAM_KEY_PATTERN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAT_NAME, new org.apache.thrift.meta_data.FieldMetaData("catName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("tblName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_PARTS, new org.apache.thrift.meta_data.FieldMetaData("maxParts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SKIP_COLUMN_SCHEMA_FOR_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("skipColumnSchemaForPartition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_PARAM_KEY_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("includeParamKeyPattern", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCLUDE_PARAM_KEY_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("excludeParamKeyPattern", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPartitionsByFilterRequest.class, metaDataMap);
  }

  public GetPartitionsByFilterRequest() {
    this.maxParts = (short)-1;

  }

  public GetPartitionsByFilterRequest(
    java.lang.String dbName,
    java.lang.String tblName,
    java.lang.String filter)
  {
    this();
    this.dbName = dbName;
    this.tblName = tblName;
    this.filter = filter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetPartitionsByFilterRequest(GetPartitionsByFilterRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCatName()) {
      this.catName = other.catName;
    }
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
    if (other.isSetTblName()) {
      this.tblName = other.tblName;
    }
    if (other.isSetFilter()) {
      this.filter = other.filter;
    }
    this.maxParts = other.maxParts;
    this.skipColumnSchemaForPartition = other.skipColumnSchemaForPartition;
    if (other.isSetIncludeParamKeyPattern()) {
      this.includeParamKeyPattern = other.includeParamKeyPattern;
    }
    if (other.isSetExcludeParamKeyPattern()) {
      this.excludeParamKeyPattern = other.excludeParamKeyPattern;
    }
  }

  public GetPartitionsByFilterRequest deepCopy() {
    return new GetPartitionsByFilterRequest(this);
  }

  @Override
  public void clear() {
    this.catName = null;
    this.dbName = null;
    this.tblName = null;
    this.filter = null;
    this.maxParts = (short)-1;

    setSkipColumnSchemaForPartitionIsSet(false);
    this.skipColumnSchemaForPartition = false;
    this.includeParamKeyPattern = null;
    this.excludeParamKeyPattern = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCatName() {
    return this.catName;
  }

  public void setCatName(@org.apache.thrift.annotation.Nullable java.lang.String catName) {
    this.catName = catName;
  }

  public void unsetCatName() {
    this.catName = null;
  }

  /** Returns true if field catName is set (has been assigned a value) and false otherwise */
  public boolean isSetCatName() {
    return this.catName != null;
  }

  public void setCatNameIsSet(boolean value) {
    if (!value) {
      this.catName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.dbName;
  }

  public void setDbName(@org.apache.thrift.annotation.Nullable java.lang.String dbName) {
    this.dbName = dbName;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTblName() {
    return this.tblName;
  }

  public void setTblName(@org.apache.thrift.annotation.Nullable java.lang.String tblName) {
    this.tblName = tblName;
  }

  public void unsetTblName() {
    this.tblName = null;
  }

  /** Returns true if field tblName is set (has been assigned a value) and false otherwise */
  public boolean isSetTblName() {
    return this.tblName != null;
  }

  public void setTblNameIsSet(boolean value) {
    if (!value) {
      this.tblName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFilter() {
    return this.filter;
  }

  public void setFilter(@org.apache.thrift.annotation.Nullable java.lang.String filter) {
    this.filter = filter;
  }

  public void unsetFilter() {
    this.filter = null;
  }

  /** Returns true if field filter is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter() {
    return this.filter != null;
  }

  public void setFilterIsSet(boolean value) {
    if (!value) {
      this.filter = null;
    }
  }

  public short getMaxParts() {
    return this.maxParts;
  }

  public void setMaxParts(short maxParts) {
    this.maxParts = maxParts;
    setMaxPartsIsSet(true);
  }

  public void unsetMaxParts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXPARTS_ISSET_ID);
  }

  /** Returns true if field maxParts is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxParts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXPARTS_ISSET_ID);
  }

  public void setMaxPartsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXPARTS_ISSET_ID, value);
  }

  public boolean isSkipColumnSchemaForPartition() {
    return this.skipColumnSchemaForPartition;
  }

  public void setSkipColumnSchemaForPartition(boolean skipColumnSchemaForPartition) {
    this.skipColumnSchemaForPartition = skipColumnSchemaForPartition;
    setSkipColumnSchemaForPartitionIsSet(true);
  }

  public void unsetSkipColumnSchemaForPartition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIPCOLUMNSCHEMAFORPARTITION_ISSET_ID);
  }

  /** Returns true if field skipColumnSchemaForPartition is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipColumnSchemaForPartition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIPCOLUMNSCHEMAFORPARTITION_ISSET_ID);
  }

  public void setSkipColumnSchemaForPartitionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIPCOLUMNSCHEMAFORPARTITION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIncludeParamKeyPattern() {
    return this.includeParamKeyPattern;
  }

  public void setIncludeParamKeyPattern(@org.apache.thrift.annotation.Nullable java.lang.String includeParamKeyPattern) {
    this.includeParamKeyPattern = includeParamKeyPattern;
  }

  public void unsetIncludeParamKeyPattern() {
    this.includeParamKeyPattern = null;
  }

  /** Returns true if field includeParamKeyPattern is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeParamKeyPattern() {
    return this.includeParamKeyPattern != null;
  }

  public void setIncludeParamKeyPatternIsSet(boolean value) {
    if (!value) {
      this.includeParamKeyPattern = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExcludeParamKeyPattern() {
    return this.excludeParamKeyPattern;
  }

  public void setExcludeParamKeyPattern(@org.apache.thrift.annotation.Nullable java.lang.String excludeParamKeyPattern) {
    this.excludeParamKeyPattern = excludeParamKeyPattern;
  }

  public void unsetExcludeParamKeyPattern() {
    this.excludeParamKeyPattern = null;
  }

  /** Returns true if field excludeParamKeyPattern is set (has been assigned a value) and false otherwise */
  public boolean isSetExcludeParamKeyPattern() {
    return this.excludeParamKeyPattern != null;
  }

  public void setExcludeParamKeyPatternIsSet(boolean value) {
    if (!value) {
      this.excludeParamKeyPattern = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CAT_NAME:
      if (value == null) {
        unsetCatName();
      } else {
        setCatName((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case TBL_NAME:
      if (value == null) {
        unsetTblName();
      } else {
        setTblName((java.lang.String)value);
      }
      break;

    case FILTER:
      if (value == null) {
        unsetFilter();
      } else {
        setFilter((java.lang.String)value);
      }
      break;

    case MAX_PARTS:
      if (value == null) {
        unsetMaxParts();
      } else {
        setMaxParts((java.lang.Short)value);
      }
      break;

    case SKIP_COLUMN_SCHEMA_FOR_PARTITION:
      if (value == null) {
        unsetSkipColumnSchemaForPartition();
      } else {
        setSkipColumnSchemaForPartition((java.lang.Boolean)value);
      }
      break;

    case INCLUDE_PARAM_KEY_PATTERN:
      if (value == null) {
        unsetIncludeParamKeyPattern();
      } else {
        setIncludeParamKeyPattern((java.lang.String)value);
      }
      break;

    case EXCLUDE_PARAM_KEY_PATTERN:
      if (value == null) {
        unsetExcludeParamKeyPattern();
      } else {
        setExcludeParamKeyPattern((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CAT_NAME:
      return getCatName();

    case DB_NAME:
      return getDbName();

    case TBL_NAME:
      return getTblName();

    case FILTER:
      return getFilter();

    case MAX_PARTS:
      return getMaxParts();

    case SKIP_COLUMN_SCHEMA_FOR_PARTITION:
      return isSkipColumnSchemaForPartition();

    case INCLUDE_PARAM_KEY_PATTERN:
      return getIncludeParamKeyPattern();

    case EXCLUDE_PARAM_KEY_PATTERN:
      return getExcludeParamKeyPattern();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CAT_NAME:
      return isSetCatName();
    case DB_NAME:
      return isSetDbName();
    case TBL_NAME:
      return isSetTblName();
    case FILTER:
      return isSetFilter();
    case MAX_PARTS:
      return isSetMaxParts();
    case SKIP_COLUMN_SCHEMA_FOR_PARTITION:
      return isSetSkipColumnSchemaForPartition();
    case INCLUDE_PARAM_KEY_PATTERN:
      return isSetIncludeParamKeyPattern();
    case EXCLUDE_PARAM_KEY_PATTERN:
      return isSetExcludeParamKeyPattern();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof GetPartitionsByFilterRequest)
      return this.equals((GetPartitionsByFilterRequest)that);
    return false;
  }

  public boolean equals(GetPartitionsByFilterRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_catName = true && this.isSetCatName();
    boolean that_present_catName = true && that.isSetCatName();
    if (this_present_catName || that_present_catName) {
      if (!(this_present_catName && that_present_catName))
        return false;
      if (!this.catName.equals(that.catName))
        return false;
    }

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    boolean this_present_tblName = true && this.isSetTblName();
    boolean that_present_tblName = true && that.isSetTblName();
    if (this_present_tblName || that_present_tblName) {
      if (!(this_present_tblName && that_present_tblName))
        return false;
      if (!this.tblName.equals(that.tblName))
        return false;
    }

    boolean this_present_filter = true && this.isSetFilter();
    boolean that_present_filter = true && that.isSetFilter();
    if (this_present_filter || that_present_filter) {
      if (!(this_present_filter && that_present_filter))
        return false;
      if (!this.filter.equals(that.filter))
        return false;
    }

    boolean this_present_maxParts = true && this.isSetMaxParts();
    boolean that_present_maxParts = true && that.isSetMaxParts();
    if (this_present_maxParts || that_present_maxParts) {
      if (!(this_present_maxParts && that_present_maxParts))
        return false;
      if (this.maxParts != that.maxParts)
        return false;
    }

    boolean this_present_skipColumnSchemaForPartition = true && this.isSetSkipColumnSchemaForPartition();
    boolean that_present_skipColumnSchemaForPartition = true && that.isSetSkipColumnSchemaForPartition();
    if (this_present_skipColumnSchemaForPartition || that_present_skipColumnSchemaForPartition) {
      if (!(this_present_skipColumnSchemaForPartition && that_present_skipColumnSchemaForPartition))
        return false;
      if (this.skipColumnSchemaForPartition != that.skipColumnSchemaForPartition)
        return false;
    }

    boolean this_present_includeParamKeyPattern = true && this.isSetIncludeParamKeyPattern();
    boolean that_present_includeParamKeyPattern = true && that.isSetIncludeParamKeyPattern();
    if (this_present_includeParamKeyPattern || that_present_includeParamKeyPattern) {
      if (!(this_present_includeParamKeyPattern && that_present_includeParamKeyPattern))
        return false;
      if (!this.includeParamKeyPattern.equals(that.includeParamKeyPattern))
        return false;
    }

    boolean this_present_excludeParamKeyPattern = true && this.isSetExcludeParamKeyPattern();
    boolean that_present_excludeParamKeyPattern = true && that.isSetExcludeParamKeyPattern();
    if (this_present_excludeParamKeyPattern || that_present_excludeParamKeyPattern) {
      if (!(this_present_excludeParamKeyPattern && that_present_excludeParamKeyPattern))
        return false;
      if (!this.excludeParamKeyPattern.equals(that.excludeParamKeyPattern))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCatName()) ? 131071 : 524287);
    if (isSetCatName())
      hashCode = hashCode * 8191 + catName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + dbName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTblName()) ? 131071 : 524287);
    if (isSetTblName())
      hashCode = hashCode * 8191 + tblName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilter()) ? 131071 : 524287);
    if (isSetFilter())
      hashCode = hashCode * 8191 + filter.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxParts()) ? 131071 : 524287);
    if (isSetMaxParts())
      hashCode = hashCode * 8191 + maxParts;

    hashCode = hashCode * 8191 + ((isSetSkipColumnSchemaForPartition()) ? 131071 : 524287);
    if (isSetSkipColumnSchemaForPartition())
      hashCode = hashCode * 8191 + ((skipColumnSchemaForPartition) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIncludeParamKeyPattern()) ? 131071 : 524287);
    if (isSetIncludeParamKeyPattern())
      hashCode = hashCode * 8191 + includeParamKeyPattern.hashCode();

    hashCode = hashCode * 8191 + ((isSetExcludeParamKeyPattern()) ? 131071 : 524287);
    if (isSetExcludeParamKeyPattern())
      hashCode = hashCode * 8191 + excludeParamKeyPattern.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetPartitionsByFilterRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCatName(), other.isSetCatName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catName, other.catName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTblName(), other.isSetTblName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTblName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tblName, other.tblName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilter(), other.isSetFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxParts(), other.isSetMaxParts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxParts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxParts, other.maxParts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkipColumnSchemaForPartition(), other.isSetSkipColumnSchemaForPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipColumnSchemaForPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skipColumnSchemaForPartition, other.skipColumnSchemaForPartition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIncludeParamKeyPattern(), other.isSetIncludeParamKeyPattern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeParamKeyPattern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeParamKeyPattern, other.includeParamKeyPattern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExcludeParamKeyPattern(), other.isSetExcludeParamKeyPattern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcludeParamKeyPattern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludeParamKeyPattern, other.excludeParamKeyPattern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetPartitionsByFilterRequest(");
    boolean first = true;

    if (isSetCatName()) {
      sb.append("catName:");
      if (this.catName == null) {
        sb.append("null");
      } else {
        sb.append(this.catName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("dbName:");
    if (this.dbName == null) {
      sb.append("null");
    } else {
      sb.append(this.dbName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tblName:");
    if (this.tblName == null) {
      sb.append("null");
    } else {
      sb.append(this.tblName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filter:");
    if (this.filter == null) {
      sb.append("null");
    } else {
      sb.append(this.filter);
    }
    first = false;
    if (isSetMaxParts()) {
      if (!first) sb.append(", ");
      sb.append("maxParts:");
      sb.append(this.maxParts);
      first = false;
    }
    if (isSetSkipColumnSchemaForPartition()) {
      if (!first) sb.append(", ");
      sb.append("skipColumnSchemaForPartition:");
      sb.append(this.skipColumnSchemaForPartition);
      first = false;
    }
    if (isSetIncludeParamKeyPattern()) {
      if (!first) sb.append(", ");
      sb.append("includeParamKeyPattern:");
      if (this.includeParamKeyPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.includeParamKeyPattern);
      }
      first = false;
    }
    if (isSetExcludeParamKeyPattern()) {
      if (!first) sb.append(", ");
      sb.append("excludeParamKeyPattern:");
      if (this.excludeParamKeyPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.excludeParamKeyPattern);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetPartitionsByFilterRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetPartitionsByFilterRequestStandardScheme getScheme() {
      return new GetPartitionsByFilterRequestStandardScheme();
    }
  }

  private static class GetPartitionsByFilterRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetPartitionsByFilterRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetPartitionsByFilterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catName = iprot.readString();
              struct.setCatNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tblName = iprot.readString();
              struct.setTblNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filter = iprot.readString();
              struct.setFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_PARTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxParts = iprot.readI16();
              struct.setMaxPartsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SKIP_COLUMN_SCHEMA_FOR_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skipColumnSchemaForPartition = iprot.readBool();
              struct.setSkipColumnSchemaForPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INCLUDE_PARAM_KEY_PATTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.includeParamKeyPattern = iprot.readString();
              struct.setIncludeParamKeyPatternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCLUDE_PARAM_KEY_PATTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.excludeParamKeyPattern = iprot.readString();
              struct.setExcludeParamKeyPatternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetPartitionsByFilterRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catName != null) {
        if (struct.isSetCatName()) {
          oprot.writeFieldBegin(CAT_NAME_FIELD_DESC);
          oprot.writeString(struct.catName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbName != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.dbName);
        oprot.writeFieldEnd();
      }
      if (struct.tblName != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.tblName);
        oprot.writeFieldEnd();
      }
      if (struct.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        oprot.writeString(struct.filter);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxParts()) {
        oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
        oprot.writeI16(struct.maxParts);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkipColumnSchemaForPartition()) {
        oprot.writeFieldBegin(SKIP_COLUMN_SCHEMA_FOR_PARTITION_FIELD_DESC);
        oprot.writeBool(struct.skipColumnSchemaForPartition);
        oprot.writeFieldEnd();
      }
      if (struct.includeParamKeyPattern != null) {
        if (struct.isSetIncludeParamKeyPattern()) {
          oprot.writeFieldBegin(INCLUDE_PARAM_KEY_PATTERN_FIELD_DESC);
          oprot.writeString(struct.includeParamKeyPattern);
          oprot.writeFieldEnd();
        }
      }
      if (struct.excludeParamKeyPattern != null) {
        if (struct.isSetExcludeParamKeyPattern()) {
          oprot.writeFieldBegin(EXCLUDE_PARAM_KEY_PATTERN_FIELD_DESC);
          oprot.writeString(struct.excludeParamKeyPattern);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetPartitionsByFilterRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetPartitionsByFilterRequestTupleScheme getScheme() {
      return new GetPartitionsByFilterRequestTupleScheme();
    }
  }

  private static class GetPartitionsByFilterRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetPartitionsByFilterRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetPartitionsByFilterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCatName()) {
        optionals.set(0);
      }
      if (struct.isSetDbName()) {
        optionals.set(1);
      }
      if (struct.isSetTblName()) {
        optionals.set(2);
      }
      if (struct.isSetFilter()) {
        optionals.set(3);
      }
      if (struct.isSetMaxParts()) {
        optionals.set(4);
      }
      if (struct.isSetSkipColumnSchemaForPartition()) {
        optionals.set(5);
      }
      if (struct.isSetIncludeParamKeyPattern()) {
        optionals.set(6);
      }
      if (struct.isSetExcludeParamKeyPattern()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCatName()) {
        oprot.writeString(struct.catName);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.dbName);
      }
      if (struct.isSetTblName()) {
        oprot.writeString(struct.tblName);
      }
      if (struct.isSetFilter()) {
        oprot.writeString(struct.filter);
      }
      if (struct.isSetMaxParts()) {
        oprot.writeI16(struct.maxParts);
      }
      if (struct.isSetSkipColumnSchemaForPartition()) {
        oprot.writeBool(struct.skipColumnSchemaForPartition);
      }
      if (struct.isSetIncludeParamKeyPattern()) {
        oprot.writeString(struct.includeParamKeyPattern);
      }
      if (struct.isSetExcludeParamKeyPattern()) {
        oprot.writeString(struct.excludeParamKeyPattern);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetPartitionsByFilterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.catName = iprot.readString();
        struct.setCatNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dbName = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tblName = iprot.readString();
        struct.setTblNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.filter = iprot.readString();
        struct.setFilterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxParts = iprot.readI16();
        struct.setMaxPartsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.skipColumnSchemaForPartition = iprot.readBool();
        struct.setSkipColumnSchemaForPartitionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.includeParamKeyPattern = iprot.readString();
        struct.setIncludeParamKeyPatternIsSet(true);
      }
      if (incoming.get(7)) {
        struct.excludeParamKeyPattern = iprot.readString();
        struct.setExcludeParamKeyPatternIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

