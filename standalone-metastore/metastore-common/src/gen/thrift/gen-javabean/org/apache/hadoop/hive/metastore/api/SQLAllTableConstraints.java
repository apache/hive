/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class SQLAllTableConstraints implements org.apache.thrift.TBase<SQLAllTableConstraints, SQLAllTableConstraints._Fields>, java.io.Serializable, Cloneable, Comparable<SQLAllTableConstraints> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SQLAllTableConstraints");

  private static final org.apache.thrift.protocol.TField PRIMARY_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKeys", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FOREIGN_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreignKeys", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField UNIQUE_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueConstraints", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NOT_NULL_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("notNullConstraints", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEFAULT_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultConstraints", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField CHECK_CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkConstraints", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SQLAllTableConstraintsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SQLAllTableConstraintsTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.util.List<SQLPrimaryKey> primaryKeys; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<SQLForeignKey> foreignKeys; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<SQLUniqueConstraint> uniqueConstraints; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<SQLNotNullConstraint> notNullConstraints; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<SQLDefaultConstraint> defaultConstraints; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<SQLCheckConstraint> checkConstraints; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIMARY_KEYS((short)1, "primaryKeys"),
    FOREIGN_KEYS((short)2, "foreignKeys"),
    UNIQUE_CONSTRAINTS((short)3, "uniqueConstraints"),
    NOT_NULL_CONSTRAINTS((short)4, "notNullConstraints"),
    DEFAULT_CONSTRAINTS((short)5, "defaultConstraints"),
    CHECK_CONSTRAINTS((short)6, "checkConstraints");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIMARY_KEYS
          return PRIMARY_KEYS;
        case 2: // FOREIGN_KEYS
          return FOREIGN_KEYS;
        case 3: // UNIQUE_CONSTRAINTS
          return UNIQUE_CONSTRAINTS;
        case 4: // NOT_NULL_CONSTRAINTS
          return NOT_NULL_CONSTRAINTS;
        case 5: // DEFAULT_CONSTRAINTS
          return DEFAULT_CONSTRAINTS;
        case 6: // CHECK_CONSTRAINTS
          return CHECK_CONSTRAINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PRIMARY_KEYS,_Fields.FOREIGN_KEYS,_Fields.UNIQUE_CONSTRAINTS,_Fields.NOT_NULL_CONSTRAINTS,_Fields.DEFAULT_CONSTRAINTS,_Fields.CHECK_CONSTRAINTS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIMARY_KEYS, new org.apache.thrift.meta_data.FieldMetaData("primaryKeys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLPrimaryKey.class))));
    tmpMap.put(_Fields.FOREIGN_KEYS, new org.apache.thrift.meta_data.FieldMetaData("foreignKeys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLForeignKey.class))));
    tmpMap.put(_Fields.UNIQUE_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("uniqueConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLUniqueConstraint.class))));
    tmpMap.put(_Fields.NOT_NULL_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("notNullConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLNotNullConstraint.class))));
    tmpMap.put(_Fields.DEFAULT_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("defaultConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLDefaultConstraint.class))));
    tmpMap.put(_Fields.CHECK_CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("checkConstraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQLCheckConstraint.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SQLAllTableConstraints.class, metaDataMap);
  }

  public SQLAllTableConstraints() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SQLAllTableConstraints(SQLAllTableConstraints other) {
    if (other.isSetPrimaryKeys()) {
      java.util.List<SQLPrimaryKey> __this__primaryKeys = new java.util.ArrayList<SQLPrimaryKey>(other.primaryKeys.size());
      for (SQLPrimaryKey other_element : other.primaryKeys) {
        __this__primaryKeys.add(new SQLPrimaryKey(other_element));
      }
      this.primaryKeys = __this__primaryKeys;
    }
    if (other.isSetForeignKeys()) {
      java.util.List<SQLForeignKey> __this__foreignKeys = new java.util.ArrayList<SQLForeignKey>(other.foreignKeys.size());
      for (SQLForeignKey other_element : other.foreignKeys) {
        __this__foreignKeys.add(new SQLForeignKey(other_element));
      }
      this.foreignKeys = __this__foreignKeys;
    }
    if (other.isSetUniqueConstraints()) {
      java.util.List<SQLUniqueConstraint> __this__uniqueConstraints = new java.util.ArrayList<SQLUniqueConstraint>(other.uniqueConstraints.size());
      for (SQLUniqueConstraint other_element : other.uniqueConstraints) {
        __this__uniqueConstraints.add(new SQLUniqueConstraint(other_element));
      }
      this.uniqueConstraints = __this__uniqueConstraints;
    }
    if (other.isSetNotNullConstraints()) {
      java.util.List<SQLNotNullConstraint> __this__notNullConstraints = new java.util.ArrayList<SQLNotNullConstraint>(other.notNullConstraints.size());
      for (SQLNotNullConstraint other_element : other.notNullConstraints) {
        __this__notNullConstraints.add(new SQLNotNullConstraint(other_element));
      }
      this.notNullConstraints = __this__notNullConstraints;
    }
    if (other.isSetDefaultConstraints()) {
      java.util.List<SQLDefaultConstraint> __this__defaultConstraints = new java.util.ArrayList<SQLDefaultConstraint>(other.defaultConstraints.size());
      for (SQLDefaultConstraint other_element : other.defaultConstraints) {
        __this__defaultConstraints.add(new SQLDefaultConstraint(other_element));
      }
      this.defaultConstraints = __this__defaultConstraints;
    }
    if (other.isSetCheckConstraints()) {
      java.util.List<SQLCheckConstraint> __this__checkConstraints = new java.util.ArrayList<SQLCheckConstraint>(other.checkConstraints.size());
      for (SQLCheckConstraint other_element : other.checkConstraints) {
        __this__checkConstraints.add(new SQLCheckConstraint(other_element));
      }
      this.checkConstraints = __this__checkConstraints;
    }
  }

  public SQLAllTableConstraints deepCopy() {
    return new SQLAllTableConstraints(this);
  }

  @Override
  public void clear() {
    this.primaryKeys = null;
    this.foreignKeys = null;
    this.uniqueConstraints = null;
    this.notNullConstraints = null;
    this.defaultConstraints = null;
    this.checkConstraints = null;
  }

  public int getPrimaryKeysSize() {
    return (this.primaryKeys == null) ? 0 : this.primaryKeys.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SQLPrimaryKey> getPrimaryKeysIterator() {
    return (this.primaryKeys == null) ? null : this.primaryKeys.iterator();
  }

  public void addToPrimaryKeys(SQLPrimaryKey elem) {
    if (this.primaryKeys == null) {
      this.primaryKeys = new java.util.ArrayList<SQLPrimaryKey>();
    }
    this.primaryKeys.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SQLPrimaryKey> getPrimaryKeys() {
    return this.primaryKeys;
  }

  public void setPrimaryKeys(@org.apache.thrift.annotation.Nullable java.util.List<SQLPrimaryKey> primaryKeys) {
    this.primaryKeys = primaryKeys;
  }

  public void unsetPrimaryKeys() {
    this.primaryKeys = null;
  }

  /** Returns true if field primaryKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryKeys() {
    return this.primaryKeys != null;
  }

  public void setPrimaryKeysIsSet(boolean value) {
    if (!value) {
      this.primaryKeys = null;
    }
  }

  public int getForeignKeysSize() {
    return (this.foreignKeys == null) ? 0 : this.foreignKeys.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SQLForeignKey> getForeignKeysIterator() {
    return (this.foreignKeys == null) ? null : this.foreignKeys.iterator();
  }

  public void addToForeignKeys(SQLForeignKey elem) {
    if (this.foreignKeys == null) {
      this.foreignKeys = new java.util.ArrayList<SQLForeignKey>();
    }
    this.foreignKeys.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SQLForeignKey> getForeignKeys() {
    return this.foreignKeys;
  }

  public void setForeignKeys(@org.apache.thrift.annotation.Nullable java.util.List<SQLForeignKey> foreignKeys) {
    this.foreignKeys = foreignKeys;
  }

  public void unsetForeignKeys() {
    this.foreignKeys = null;
  }

  /** Returns true if field foreignKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetForeignKeys() {
    return this.foreignKeys != null;
  }

  public void setForeignKeysIsSet(boolean value) {
    if (!value) {
      this.foreignKeys = null;
    }
  }

  public int getUniqueConstraintsSize() {
    return (this.uniqueConstraints == null) ? 0 : this.uniqueConstraints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SQLUniqueConstraint> getUniqueConstraintsIterator() {
    return (this.uniqueConstraints == null) ? null : this.uniqueConstraints.iterator();
  }

  public void addToUniqueConstraints(SQLUniqueConstraint elem) {
    if (this.uniqueConstraints == null) {
      this.uniqueConstraints = new java.util.ArrayList<SQLUniqueConstraint>();
    }
    this.uniqueConstraints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SQLUniqueConstraint> getUniqueConstraints() {
    return this.uniqueConstraints;
  }

  public void setUniqueConstraints(@org.apache.thrift.annotation.Nullable java.util.List<SQLUniqueConstraint> uniqueConstraints) {
    this.uniqueConstraints = uniqueConstraints;
  }

  public void unsetUniqueConstraints() {
    this.uniqueConstraints = null;
  }

  /** Returns true if field uniqueConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueConstraints() {
    return this.uniqueConstraints != null;
  }

  public void setUniqueConstraintsIsSet(boolean value) {
    if (!value) {
      this.uniqueConstraints = null;
    }
  }

  public int getNotNullConstraintsSize() {
    return (this.notNullConstraints == null) ? 0 : this.notNullConstraints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SQLNotNullConstraint> getNotNullConstraintsIterator() {
    return (this.notNullConstraints == null) ? null : this.notNullConstraints.iterator();
  }

  public void addToNotNullConstraints(SQLNotNullConstraint elem) {
    if (this.notNullConstraints == null) {
      this.notNullConstraints = new java.util.ArrayList<SQLNotNullConstraint>();
    }
    this.notNullConstraints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SQLNotNullConstraint> getNotNullConstraints() {
    return this.notNullConstraints;
  }

  public void setNotNullConstraints(@org.apache.thrift.annotation.Nullable java.util.List<SQLNotNullConstraint> notNullConstraints) {
    this.notNullConstraints = notNullConstraints;
  }

  public void unsetNotNullConstraints() {
    this.notNullConstraints = null;
  }

  /** Returns true if field notNullConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetNotNullConstraints() {
    return this.notNullConstraints != null;
  }

  public void setNotNullConstraintsIsSet(boolean value) {
    if (!value) {
      this.notNullConstraints = null;
    }
  }

  public int getDefaultConstraintsSize() {
    return (this.defaultConstraints == null) ? 0 : this.defaultConstraints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SQLDefaultConstraint> getDefaultConstraintsIterator() {
    return (this.defaultConstraints == null) ? null : this.defaultConstraints.iterator();
  }

  public void addToDefaultConstraints(SQLDefaultConstraint elem) {
    if (this.defaultConstraints == null) {
      this.defaultConstraints = new java.util.ArrayList<SQLDefaultConstraint>();
    }
    this.defaultConstraints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SQLDefaultConstraint> getDefaultConstraints() {
    return this.defaultConstraints;
  }

  public void setDefaultConstraints(@org.apache.thrift.annotation.Nullable java.util.List<SQLDefaultConstraint> defaultConstraints) {
    this.defaultConstraints = defaultConstraints;
  }

  public void unsetDefaultConstraints() {
    this.defaultConstraints = null;
  }

  /** Returns true if field defaultConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultConstraints() {
    return this.defaultConstraints != null;
  }

  public void setDefaultConstraintsIsSet(boolean value) {
    if (!value) {
      this.defaultConstraints = null;
    }
  }

  public int getCheckConstraintsSize() {
    return (this.checkConstraints == null) ? 0 : this.checkConstraints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SQLCheckConstraint> getCheckConstraintsIterator() {
    return (this.checkConstraints == null) ? null : this.checkConstraints.iterator();
  }

  public void addToCheckConstraints(SQLCheckConstraint elem) {
    if (this.checkConstraints == null) {
      this.checkConstraints = new java.util.ArrayList<SQLCheckConstraint>();
    }
    this.checkConstraints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SQLCheckConstraint> getCheckConstraints() {
    return this.checkConstraints;
  }

  public void setCheckConstraints(@org.apache.thrift.annotation.Nullable java.util.List<SQLCheckConstraint> checkConstraints) {
    this.checkConstraints = checkConstraints;
  }

  public void unsetCheckConstraints() {
    this.checkConstraints = null;
  }

  /** Returns true if field checkConstraints is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckConstraints() {
    return this.checkConstraints != null;
  }

  public void setCheckConstraintsIsSet(boolean value) {
    if (!value) {
      this.checkConstraints = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PRIMARY_KEYS:
      if (value == null) {
        unsetPrimaryKeys();
      } else {
        setPrimaryKeys((java.util.List<SQLPrimaryKey>)value);
      }
      break;

    case FOREIGN_KEYS:
      if (value == null) {
        unsetForeignKeys();
      } else {
        setForeignKeys((java.util.List<SQLForeignKey>)value);
      }
      break;

    case UNIQUE_CONSTRAINTS:
      if (value == null) {
        unsetUniqueConstraints();
      } else {
        setUniqueConstraints((java.util.List<SQLUniqueConstraint>)value);
      }
      break;

    case NOT_NULL_CONSTRAINTS:
      if (value == null) {
        unsetNotNullConstraints();
      } else {
        setNotNullConstraints((java.util.List<SQLNotNullConstraint>)value);
      }
      break;

    case DEFAULT_CONSTRAINTS:
      if (value == null) {
        unsetDefaultConstraints();
      } else {
        setDefaultConstraints((java.util.List<SQLDefaultConstraint>)value);
      }
      break;

    case CHECK_CONSTRAINTS:
      if (value == null) {
        unsetCheckConstraints();
      } else {
        setCheckConstraints((java.util.List<SQLCheckConstraint>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PRIMARY_KEYS:
      return getPrimaryKeys();

    case FOREIGN_KEYS:
      return getForeignKeys();

    case UNIQUE_CONSTRAINTS:
      return getUniqueConstraints();

    case NOT_NULL_CONSTRAINTS:
      return getNotNullConstraints();

    case DEFAULT_CONSTRAINTS:
      return getDefaultConstraints();

    case CHECK_CONSTRAINTS:
      return getCheckConstraints();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PRIMARY_KEYS:
      return isSetPrimaryKeys();
    case FOREIGN_KEYS:
      return isSetForeignKeys();
    case UNIQUE_CONSTRAINTS:
      return isSetUniqueConstraints();
    case NOT_NULL_CONSTRAINTS:
      return isSetNotNullConstraints();
    case DEFAULT_CONSTRAINTS:
      return isSetDefaultConstraints();
    case CHECK_CONSTRAINTS:
      return isSetCheckConstraints();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SQLAllTableConstraints)
      return this.equals((SQLAllTableConstraints)that);
    return false;
  }

  public boolean equals(SQLAllTableConstraints that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_primaryKeys = true && this.isSetPrimaryKeys();
    boolean that_present_primaryKeys = true && that.isSetPrimaryKeys();
    if (this_present_primaryKeys || that_present_primaryKeys) {
      if (!(this_present_primaryKeys && that_present_primaryKeys))
        return false;
      if (!this.primaryKeys.equals(that.primaryKeys))
        return false;
    }

    boolean this_present_foreignKeys = true && this.isSetForeignKeys();
    boolean that_present_foreignKeys = true && that.isSetForeignKeys();
    if (this_present_foreignKeys || that_present_foreignKeys) {
      if (!(this_present_foreignKeys && that_present_foreignKeys))
        return false;
      if (!this.foreignKeys.equals(that.foreignKeys))
        return false;
    }

    boolean this_present_uniqueConstraints = true && this.isSetUniqueConstraints();
    boolean that_present_uniqueConstraints = true && that.isSetUniqueConstraints();
    if (this_present_uniqueConstraints || that_present_uniqueConstraints) {
      if (!(this_present_uniqueConstraints && that_present_uniqueConstraints))
        return false;
      if (!this.uniqueConstraints.equals(that.uniqueConstraints))
        return false;
    }

    boolean this_present_notNullConstraints = true && this.isSetNotNullConstraints();
    boolean that_present_notNullConstraints = true && that.isSetNotNullConstraints();
    if (this_present_notNullConstraints || that_present_notNullConstraints) {
      if (!(this_present_notNullConstraints && that_present_notNullConstraints))
        return false;
      if (!this.notNullConstraints.equals(that.notNullConstraints))
        return false;
    }

    boolean this_present_defaultConstraints = true && this.isSetDefaultConstraints();
    boolean that_present_defaultConstraints = true && that.isSetDefaultConstraints();
    if (this_present_defaultConstraints || that_present_defaultConstraints) {
      if (!(this_present_defaultConstraints && that_present_defaultConstraints))
        return false;
      if (!this.defaultConstraints.equals(that.defaultConstraints))
        return false;
    }

    boolean this_present_checkConstraints = true && this.isSetCheckConstraints();
    boolean that_present_checkConstraints = true && that.isSetCheckConstraints();
    if (this_present_checkConstraints || that_present_checkConstraints) {
      if (!(this_present_checkConstraints && that_present_checkConstraints))
        return false;
      if (!this.checkConstraints.equals(that.checkConstraints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPrimaryKeys()) ? 131071 : 524287);
    if (isSetPrimaryKeys())
      hashCode = hashCode * 8191 + primaryKeys.hashCode();

    hashCode = hashCode * 8191 + ((isSetForeignKeys()) ? 131071 : 524287);
    if (isSetForeignKeys())
      hashCode = hashCode * 8191 + foreignKeys.hashCode();

    hashCode = hashCode * 8191 + ((isSetUniqueConstraints()) ? 131071 : 524287);
    if (isSetUniqueConstraints())
      hashCode = hashCode * 8191 + uniqueConstraints.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotNullConstraints()) ? 131071 : 524287);
    if (isSetNotNullConstraints())
      hashCode = hashCode * 8191 + notNullConstraints.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultConstraints()) ? 131071 : 524287);
    if (isSetDefaultConstraints())
      hashCode = hashCode * 8191 + defaultConstraints.hashCode();

    hashCode = hashCode * 8191 + ((isSetCheckConstraints()) ? 131071 : 524287);
    if (isSetCheckConstraints())
      hashCode = hashCode * 8191 + checkConstraints.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SQLAllTableConstraints other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPrimaryKeys(), other.isSetPrimaryKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKeys, other.primaryKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForeignKeys(), other.isSetForeignKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeignKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreignKeys, other.foreignKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUniqueConstraints(), other.isSetUniqueConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueConstraints, other.uniqueConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNotNullConstraints(), other.isSetNotNullConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotNullConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notNullConstraints, other.notNullConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultConstraints(), other.isSetDefaultConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultConstraints, other.defaultConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheckConstraints(), other.isSetCheckConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkConstraints, other.checkConstraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SQLAllTableConstraints(");
    boolean first = true;

    if (isSetPrimaryKeys()) {
      sb.append("primaryKeys:");
      if (this.primaryKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKeys);
      }
      first = false;
    }
    if (isSetForeignKeys()) {
      if (!first) sb.append(", ");
      sb.append("foreignKeys:");
      if (this.foreignKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.foreignKeys);
      }
      first = false;
    }
    if (isSetUniqueConstraints()) {
      if (!first) sb.append(", ");
      sb.append("uniqueConstraints:");
      if (this.uniqueConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.uniqueConstraints);
      }
      first = false;
    }
    if (isSetNotNullConstraints()) {
      if (!first) sb.append(", ");
      sb.append("notNullConstraints:");
      if (this.notNullConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.notNullConstraints);
      }
      first = false;
    }
    if (isSetDefaultConstraints()) {
      if (!first) sb.append(", ");
      sb.append("defaultConstraints:");
      if (this.defaultConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultConstraints);
      }
      first = false;
    }
    if (isSetCheckConstraints()) {
      if (!first) sb.append(", ");
      sb.append("checkConstraints:");
      if (this.checkConstraints == null) {
        sb.append("null");
      } else {
        sb.append(this.checkConstraints);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SQLAllTableConstraintsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SQLAllTableConstraintsStandardScheme getScheme() {
      return new SQLAllTableConstraintsStandardScheme();
    }
  }

  private static class SQLAllTableConstraintsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SQLAllTableConstraints> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SQLAllTableConstraints struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRIMARY_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.primaryKeys = new java.util.ArrayList<SQLPrimaryKey>(_list20.size);
                @org.apache.thrift.annotation.Nullable SQLPrimaryKey _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = new SQLPrimaryKey();
                  _elem21.read(iprot);
                  struct.primaryKeys.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setPrimaryKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FOREIGN_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.foreignKeys = new java.util.ArrayList<SQLForeignKey>(_list23.size);
                @org.apache.thrift.annotation.Nullable SQLForeignKey _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = new SQLForeignKey();
                  _elem24.read(iprot);
                  struct.foreignKeys.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setForeignKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIQUE_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.uniqueConstraints = new java.util.ArrayList<SQLUniqueConstraint>(_list26.size);
                @org.apache.thrift.annotation.Nullable SQLUniqueConstraint _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new SQLUniqueConstraint();
                  _elem27.read(iprot);
                  struct.uniqueConstraints.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setUniqueConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOT_NULL_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.notNullConstraints = new java.util.ArrayList<SQLNotNullConstraint>(_list29.size);
                @org.apache.thrift.annotation.Nullable SQLNotNullConstraint _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = new SQLNotNullConstraint();
                  _elem30.read(iprot);
                  struct.notNullConstraints.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setNotNullConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEFAULT_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.defaultConstraints = new java.util.ArrayList<SQLDefaultConstraint>(_list32.size);
                @org.apache.thrift.annotation.Nullable SQLDefaultConstraint _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new SQLDefaultConstraint();
                  _elem33.read(iprot);
                  struct.defaultConstraints.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setDefaultConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHECK_CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.checkConstraints = new java.util.ArrayList<SQLCheckConstraint>(_list35.size);
                @org.apache.thrift.annotation.Nullable SQLCheckConstraint _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new SQLCheckConstraint();
                  _elem36.read(iprot);
                  struct.checkConstraints.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setCheckConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SQLAllTableConstraints struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.primaryKeys != null) {
        if (struct.isSetPrimaryKeys()) {
          oprot.writeFieldBegin(PRIMARY_KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.primaryKeys.size()));
            for (SQLPrimaryKey _iter38 : struct.primaryKeys)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.foreignKeys != null) {
        if (struct.isSetForeignKeys()) {
          oprot.writeFieldBegin(FOREIGN_KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foreignKeys.size()));
            for (SQLForeignKey _iter39 : struct.foreignKeys)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.uniqueConstraints != null) {
        if (struct.isSetUniqueConstraints()) {
          oprot.writeFieldBegin(UNIQUE_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.uniqueConstraints.size()));
            for (SQLUniqueConstraint _iter40 : struct.uniqueConstraints)
            {
              _iter40.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.notNullConstraints != null) {
        if (struct.isSetNotNullConstraints()) {
          oprot.writeFieldBegin(NOT_NULL_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.notNullConstraints.size()));
            for (SQLNotNullConstraint _iter41 : struct.notNullConstraints)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultConstraints != null) {
        if (struct.isSetDefaultConstraints()) {
          oprot.writeFieldBegin(DEFAULT_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.defaultConstraints.size()));
            for (SQLDefaultConstraint _iter42 : struct.defaultConstraints)
            {
              _iter42.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.checkConstraints != null) {
        if (struct.isSetCheckConstraints()) {
          oprot.writeFieldBegin(CHECK_CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.checkConstraints.size()));
            for (SQLCheckConstraint _iter43 : struct.checkConstraints)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SQLAllTableConstraintsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SQLAllTableConstraintsTupleScheme getScheme() {
      return new SQLAllTableConstraintsTupleScheme();
    }
  }

  private static class SQLAllTableConstraintsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SQLAllTableConstraints> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SQLAllTableConstraints struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPrimaryKeys()) {
        optionals.set(0);
      }
      if (struct.isSetForeignKeys()) {
        optionals.set(1);
      }
      if (struct.isSetUniqueConstraints()) {
        optionals.set(2);
      }
      if (struct.isSetNotNullConstraints()) {
        optionals.set(3);
      }
      if (struct.isSetDefaultConstraints()) {
        optionals.set(4);
      }
      if (struct.isSetCheckConstraints()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPrimaryKeys()) {
        {
          oprot.writeI32(struct.primaryKeys.size());
          for (SQLPrimaryKey _iter44 : struct.primaryKeys)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetForeignKeys()) {
        {
          oprot.writeI32(struct.foreignKeys.size());
          for (SQLForeignKey _iter45 : struct.foreignKeys)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetUniqueConstraints()) {
        {
          oprot.writeI32(struct.uniqueConstraints.size());
          for (SQLUniqueConstraint _iter46 : struct.uniqueConstraints)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetNotNullConstraints()) {
        {
          oprot.writeI32(struct.notNullConstraints.size());
          for (SQLNotNullConstraint _iter47 : struct.notNullConstraints)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetDefaultConstraints()) {
        {
          oprot.writeI32(struct.defaultConstraints.size());
          for (SQLDefaultConstraint _iter48 : struct.defaultConstraints)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetCheckConstraints()) {
        {
          oprot.writeI32(struct.checkConstraints.size());
          for (SQLCheckConstraint _iter49 : struct.checkConstraints)
          {
            _iter49.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SQLAllTableConstraints struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list50 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.primaryKeys = new java.util.ArrayList<SQLPrimaryKey>(_list50.size);
          @org.apache.thrift.annotation.Nullable SQLPrimaryKey _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new SQLPrimaryKey();
            _elem51.read(iprot);
            struct.primaryKeys.add(_elem51);
          }
        }
        struct.setPrimaryKeysIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.foreignKeys = new java.util.ArrayList<SQLForeignKey>(_list53.size);
          @org.apache.thrift.annotation.Nullable SQLForeignKey _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new SQLForeignKey();
            _elem54.read(iprot);
            struct.foreignKeys.add(_elem54);
          }
        }
        struct.setForeignKeysIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list56 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.uniqueConstraints = new java.util.ArrayList<SQLUniqueConstraint>(_list56.size);
          @org.apache.thrift.annotation.Nullable SQLUniqueConstraint _elem57;
          for (int _i58 = 0; _i58 < _list56.size; ++_i58)
          {
            _elem57 = new SQLUniqueConstraint();
            _elem57.read(iprot);
            struct.uniqueConstraints.add(_elem57);
          }
        }
        struct.setUniqueConstraintsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list59 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.notNullConstraints = new java.util.ArrayList<SQLNotNullConstraint>(_list59.size);
          @org.apache.thrift.annotation.Nullable SQLNotNullConstraint _elem60;
          for (int _i61 = 0; _i61 < _list59.size; ++_i61)
          {
            _elem60 = new SQLNotNullConstraint();
            _elem60.read(iprot);
            struct.notNullConstraints.add(_elem60);
          }
        }
        struct.setNotNullConstraintsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list62 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.defaultConstraints = new java.util.ArrayList<SQLDefaultConstraint>(_list62.size);
          @org.apache.thrift.annotation.Nullable SQLDefaultConstraint _elem63;
          for (int _i64 = 0; _i64 < _list62.size; ++_i64)
          {
            _elem63 = new SQLDefaultConstraint();
            _elem63.read(iprot);
            struct.defaultConstraints.add(_elem63);
          }
        }
        struct.setDefaultConstraintsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list65 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.checkConstraints = new java.util.ArrayList<SQLCheckConstraint>(_list65.size);
          @org.apache.thrift.annotation.Nullable SQLCheckConstraint _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = new SQLCheckConstraint();
            _elem66.read(iprot);
            struct.checkConstraints.add(_elem66);
          }
        }
        struct.setCheckConstraintsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

