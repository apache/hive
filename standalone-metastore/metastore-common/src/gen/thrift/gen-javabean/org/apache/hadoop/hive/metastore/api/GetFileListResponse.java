/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetFileListResponse implements org.apache.thrift.TBase<GetFileListResponse, GetFileListResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetFileListResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetFileListResponse");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNumber", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_LIST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileListData", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetFileListResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetFileListResponseTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable FileMetadataType type; // required
  private int versionNumber; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> fileListData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FileMetadataType
     */
    TYPE((short)1, "type"),
    VERSION_NUMBER((short)3, "versionNumber"),
    FILE_LIST_DATA((short)2, "fileListData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 3: // VERSION_NUMBER
          return VERSION_NUMBER;
        case 2: // FILE_LIST_DATA
          return FILE_LIST_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSIONNUMBER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FILE_LIST_DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileMetadataType.class)));
    tmpMap.put(_Fields.VERSION_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("versionNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_LIST_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileListData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetFileListResponse.class, metaDataMap);
  }

  public GetFileListResponse() {
    this.type = org.apache.hadoop.hive.metastore.api.FileMetadataType.HIVE;

  }

  public GetFileListResponse(
    FileMetadataType type,
    int versionNumber)
  {
    this();
    this.type = type;
    this.versionNumber = versionNumber;
    setVersionNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetFileListResponse(GetFileListResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.versionNumber = other.versionNumber;
    if (other.isSetFileListData()) {
      java.util.List<java.nio.ByteBuffer> __this__fileListData = new java.util.ArrayList<java.nio.ByteBuffer>(other.fileListData);
      this.fileListData = __this__fileListData;
    }
  }

  public GetFileListResponse deepCopy() {
    return new GetFileListResponse(this);
  }

  @Override
  public void clear() {
    this.type = org.apache.hadoop.hive.metastore.api.FileMetadataType.HIVE;

    setVersionNumberIsSet(false);
    this.versionNumber = 0;
    this.fileListData = null;
  }

  /**
   * 
   * @see FileMetadataType
   */
  @org.apache.thrift.annotation.Nullable
  public FileMetadataType getType() {
    return this.type;
  }

  /**
   * 
   * @see FileMetadataType
   */
  public void setType(@org.apache.thrift.annotation.Nullable FileMetadataType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getVersionNumber() {
    return this.versionNumber;
  }

  public void setVersionNumber(int versionNumber) {
    this.versionNumber = versionNumber;
    setVersionNumberIsSet(true);
  }

  public void unsetVersionNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNUMBER_ISSET_ID);
  }

  /** Returns true if field versionNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNUMBER_ISSET_ID);
  }

  public void setVersionNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNUMBER_ISSET_ID, value);
  }

  public int getFileListDataSize() {
    return (this.fileListData == null) ? 0 : this.fileListData.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getFileListDataIterator() {
    return (this.fileListData == null) ? null : this.fileListData.iterator();
  }

  public void addToFileListData(java.nio.ByteBuffer elem) {
    if (this.fileListData == null) {
      this.fileListData = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.fileListData.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getFileListData() {
    return this.fileListData;
  }

  public void setFileListData(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> fileListData) {
    this.fileListData = fileListData;
  }

  public void unsetFileListData() {
    this.fileListData = null;
  }

  /** Returns true if field fileListData is set (has been assigned a value) and false otherwise */
  public boolean isSetFileListData() {
    return this.fileListData != null;
  }

  public void setFileListDataIsSet(boolean value) {
    if (!value) {
      this.fileListData = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((FileMetadataType)value);
      }
      break;

    case VERSION_NUMBER:
      if (value == null) {
        unsetVersionNumber();
      } else {
        setVersionNumber((java.lang.Integer)value);
      }
      break;

    case FILE_LIST_DATA:
      if (value == null) {
        unsetFileListData();
      } else {
        setFileListData((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case VERSION_NUMBER:
      return getVersionNumber();

    case FILE_LIST_DATA:
      return getFileListData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case VERSION_NUMBER:
      return isSetVersionNumber();
    case FILE_LIST_DATA:
      return isSetFileListData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GetFileListResponse)
      return this.equals((GetFileListResponse)that);
    return false;
  }

  public boolean equals(GetFileListResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_versionNumber = true;
    boolean that_present_versionNumber = true;
    if (this_present_versionNumber || that_present_versionNumber) {
      if (!(this_present_versionNumber && that_present_versionNumber))
        return false;
      if (this.versionNumber != that.versionNumber)
        return false;
    }

    boolean this_present_fileListData = true && this.isSetFileListData();
    boolean that_present_fileListData = true && that.isSetFileListData();
    if (this_present_fileListData || that_present_fileListData) {
      if (!(this_present_fileListData && that_present_fileListData))
        return false;
      if (!this.fileListData.equals(that.fileListData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + versionNumber;

    hashCode = hashCode * 8191 + ((isSetFileListData()) ? 131071 : 524287);
    if (isSetFileListData())
      hashCode = hashCode * 8191 + fileListData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetFileListResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNumber()).compareTo(other.isSetVersionNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNumber, other.versionNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFileListData()).compareTo(other.isSetFileListData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileListData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileListData, other.fileListData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetFileListResponse(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionNumber:");
    sb.append(this.versionNumber);
    first = false;
    if (isSetFileListData()) {
      if (!first) sb.append(", ");
      sb.append("fileListData:");
      if (this.fileListData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fileListData, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetVersionNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'versionNumber' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetFileListResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetFileListResponseStandardScheme getScheme() {
      return new GetFileListResponseStandardScheme();
    }
  }

  private static class GetFileListResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetFileListResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetFileListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.hadoop.hive.metastore.api.FileMetadataType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionNumber = iprot.readI32();
              struct.setVersionNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_LIST_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1152 = iprot.readListBegin();
                struct.fileListData = new java.util.ArrayList<java.nio.ByteBuffer>(_list1152.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem1153;
                for (int _i1154 = 0; _i1154 < _list1152.size; ++_i1154)
                {
                  _elem1153 = iprot.readBinary();
                  struct.fileListData.add(_elem1153);
                }
                iprot.readListEnd();
              }
              struct.setFileListDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetFileListResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fileListData != null) {
        if (struct.isSetFileListData()) {
          oprot.writeFieldBegin(FILE_LIST_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fileListData.size()));
            for (java.nio.ByteBuffer _iter1155 : struct.fileListData)
            {
              oprot.writeBinary(_iter1155);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(VERSION_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.versionNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetFileListResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetFileListResponseTupleScheme getScheme() {
      return new GetFileListResponseTupleScheme();
    }
  }

  private static class GetFileListResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetFileListResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetFileListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.versionNumber);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetFileListData()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetFileListData()) {
        {
          oprot.writeI32(struct.fileListData.size());
          for (java.nio.ByteBuffer _iter1156 : struct.fileListData)
          {
            oprot.writeBinary(_iter1156);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetFileListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.versionNumber = iprot.readI32();
      struct.setVersionNumberIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.type = org.apache.hadoop.hive.metastore.api.FileMetadataType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list1157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fileListData = new java.util.ArrayList<java.nio.ByteBuffer>(_list1157.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem1158;
          for (int _i1159 = 0; _i1159 < _list1157.size; ++_i1159)
          {
            _elem1158 = iprot.readBinary();
            struct.fileListData.add(_elem1158);
          }
        }
        struct.setFileListDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

