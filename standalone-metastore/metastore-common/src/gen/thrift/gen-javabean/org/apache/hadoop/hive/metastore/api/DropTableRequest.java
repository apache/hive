/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class DropTableRequest implements org.apache.thrift.TBase<DropTableRequest, DropTableRequest._Fields>, java.io.Serializable, Cloneable, Comparable<DropTableRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DropTableRequest");

  private static final org.apache.thrift.protocol.TField CATALOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DELETE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteData", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ENV_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("envContext", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DROP_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dropPartitions", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ASYNC_DROP_FIELD_DESC = new org.apache.thrift.protocol.TField("asyncDrop", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cancel", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DropTableRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DropTableRequestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String catalogName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String dbName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String tableName; // required
  private boolean deleteData; // optional
  private @org.apache.thrift.annotation.Nullable EnvironmentContext envContext; // optional
  private boolean dropPartitions; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  private boolean asyncDrop; // optional
  private boolean cancel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATALOG_NAME((short)1, "catalogName"),
    DB_NAME((short)2, "dbName"),
    TABLE_NAME((short)3, "tableName"),
    DELETE_DATA((short)4, "deleteData"),
    ENV_CONTEXT((short)5, "envContext"),
    DROP_PARTITIONS((short)6, "dropPartitions"),
    ID((short)7, "id"),
    ASYNC_DROP((short)8, "asyncDrop"),
    CANCEL((short)9, "cancel");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATALOG_NAME
          return CATALOG_NAME;
        case 2: // DB_NAME
          return DB_NAME;
        case 3: // TABLE_NAME
          return TABLE_NAME;
        case 4: // DELETE_DATA
          return DELETE_DATA;
        case 5: // ENV_CONTEXT
          return ENV_CONTEXT;
        case 6: // DROP_PARTITIONS
          return DROP_PARTITIONS;
        case 7: // ID
          return ID;
        case 8: // ASYNC_DROP
          return ASYNC_DROP;
        case 9: // CANCEL
          return CANCEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DELETEDATA_ISSET_ID = 0;
  private static final int __DROPPARTITIONS_ISSET_ID = 1;
  private static final int __ASYNCDROP_ISSET_ID = 2;
  private static final int __CANCEL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CATALOG_NAME,_Fields.DELETE_DATA,_Fields.ENV_CONTEXT,_Fields.DROP_PARTITIONS,_Fields.ID,_Fields.ASYNC_DROP,_Fields.CANCEL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATALOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("catalogName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETE_DATA, new org.apache.thrift.meta_data.FieldMetaData("deleteData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENV_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("envContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnvironmentContext.class)));
    tmpMap.put(_Fields.DROP_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("dropPartitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASYNC_DROP, new org.apache.thrift.meta_data.FieldMetaData("asyncDrop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CANCEL, new org.apache.thrift.meta_data.FieldMetaData("cancel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DropTableRequest.class, metaDataMap);
  }

  public DropTableRequest() {
  }

  public DropTableRequest(
    java.lang.String dbName,
    java.lang.String tableName)
  {
    this();
    this.dbName = dbName;
    this.tableName = tableName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DropTableRequest(DropTableRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCatalogName()) {
      this.catalogName = other.catalogName;
    }
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    this.deleteData = other.deleteData;
    if (other.isSetEnvContext()) {
      this.envContext = new EnvironmentContext(other.envContext);
    }
    this.dropPartitions = other.dropPartitions;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.asyncDrop = other.asyncDrop;
    this.cancel = other.cancel;
  }

  public DropTableRequest deepCopy() {
    return new DropTableRequest(this);
  }

  @Override
  public void clear() {
    this.catalogName = null;
    this.dbName = null;
    this.tableName = null;
    setDeleteDataIsSet(false);
    this.deleteData = false;
    this.envContext = null;
    setDropPartitionsIsSet(false);
    this.dropPartitions = false;
    this.id = null;
    setAsyncDropIsSet(false);
    this.asyncDrop = false;
    setCancelIsSet(false);
    this.cancel = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCatalogName() {
    return this.catalogName;
  }

  public void setCatalogName(@org.apache.thrift.annotation.Nullable java.lang.String catalogName) {
    this.catalogName = catalogName;
  }

  public void unsetCatalogName() {
    this.catalogName = null;
  }

  /** Returns true if field catalogName is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogName() {
    return this.catalogName != null;
  }

  public void setCatalogNameIsSet(boolean value) {
    if (!value) {
      this.catalogName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.dbName;
  }

  public void setDbName(@org.apache.thrift.annotation.Nullable java.lang.String dbName) {
    this.dbName = dbName;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.tableName;
  }

  public void setTableName(@org.apache.thrift.annotation.Nullable java.lang.String tableName) {
    this.tableName = tableName;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public boolean isDeleteData() {
    return this.deleteData;
  }

  public void setDeleteData(boolean deleteData) {
    this.deleteData = deleteData;
    setDeleteDataIsSet(true);
  }

  public void unsetDeleteData() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELETEDATA_ISSET_ID);
  }

  /** Returns true if field deleteData is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteData() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELETEDATA_ISSET_ID);
  }

  public void setDeleteDataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELETEDATA_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public EnvironmentContext getEnvContext() {
    return this.envContext;
  }

  public void setEnvContext(@org.apache.thrift.annotation.Nullable EnvironmentContext envContext) {
    this.envContext = envContext;
  }

  public void unsetEnvContext() {
    this.envContext = null;
  }

  /** Returns true if field envContext is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvContext() {
    return this.envContext != null;
  }

  public void setEnvContextIsSet(boolean value) {
    if (!value) {
      this.envContext = null;
    }
  }

  public boolean isDropPartitions() {
    return this.dropPartitions;
  }

  public void setDropPartitions(boolean dropPartitions) {
    this.dropPartitions = dropPartitions;
    setDropPartitionsIsSet(true);
  }

  public void unsetDropPartitions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DROPPARTITIONS_ISSET_ID);
  }

  /** Returns true if field dropPartitions is set (has been assigned a value) and false otherwise */
  public boolean isSetDropPartitions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DROPPARTITIONS_ISSET_ID);
  }

  public void setDropPartitionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DROPPARTITIONS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public void setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public boolean isAsyncDrop() {
    return this.asyncDrop;
  }

  public void setAsyncDrop(boolean asyncDrop) {
    this.asyncDrop = asyncDrop;
    setAsyncDropIsSet(true);
  }

  public void unsetAsyncDrop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASYNCDROP_ISSET_ID);
  }

  /** Returns true if field asyncDrop is set (has been assigned a value) and false otherwise */
  public boolean isSetAsyncDrop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASYNCDROP_ISSET_ID);
  }

  public void setAsyncDropIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASYNCDROP_ISSET_ID, value);
  }

  public boolean isCancel() {
    return this.cancel;
  }

  public void setCancel(boolean cancel) {
    this.cancel = cancel;
    setCancelIsSet(true);
  }

  public void unsetCancel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANCEL_ISSET_ID);
  }

  /** Returns true if field cancel is set (has been assigned a value) and false otherwise */
  public boolean isSetCancel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANCEL_ISSET_ID);
  }

  public void setCancelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANCEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CATALOG_NAME:
      if (value == null) {
        unsetCatalogName();
      } else {
        setCatalogName((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    case DELETE_DATA:
      if (value == null) {
        unsetDeleteData();
      } else {
        setDeleteData((java.lang.Boolean)value);
      }
      break;

    case ENV_CONTEXT:
      if (value == null) {
        unsetEnvContext();
      } else {
        setEnvContext((EnvironmentContext)value);
      }
      break;

    case DROP_PARTITIONS:
      if (value == null) {
        unsetDropPartitions();
      } else {
        setDropPartitions((java.lang.Boolean)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case ASYNC_DROP:
      if (value == null) {
        unsetAsyncDrop();
      } else {
        setAsyncDrop((java.lang.Boolean)value);
      }
      break;

    case CANCEL:
      if (value == null) {
        unsetCancel();
      } else {
        setCancel((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CATALOG_NAME:
      return getCatalogName();

    case DB_NAME:
      return getDbName();

    case TABLE_NAME:
      return getTableName();

    case DELETE_DATA:
      return isDeleteData();

    case ENV_CONTEXT:
      return getEnvContext();

    case DROP_PARTITIONS:
      return isDropPartitions();

    case ID:
      return getId();

    case ASYNC_DROP:
      return isAsyncDrop();

    case CANCEL:
      return isCancel();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CATALOG_NAME:
      return isSetCatalogName();
    case DB_NAME:
      return isSetDbName();
    case TABLE_NAME:
      return isSetTableName();
    case DELETE_DATA:
      return isSetDeleteData();
    case ENV_CONTEXT:
      return isSetEnvContext();
    case DROP_PARTITIONS:
      return isSetDropPartitions();
    case ID:
      return isSetId();
    case ASYNC_DROP:
      return isSetAsyncDrop();
    case CANCEL:
      return isSetCancel();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof DropTableRequest)
      return this.equals((DropTableRequest)that);
    return false;
  }

  public boolean equals(DropTableRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_catalogName = true && this.isSetCatalogName();
    boolean that_present_catalogName = true && that.isSetCatalogName();
    if (this_present_catalogName || that_present_catalogName) {
      if (!(this_present_catalogName && that_present_catalogName))
        return false;
      if (!this.catalogName.equals(that.catalogName))
        return false;
    }

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_deleteData = true && this.isSetDeleteData();
    boolean that_present_deleteData = true && that.isSetDeleteData();
    if (this_present_deleteData || that_present_deleteData) {
      if (!(this_present_deleteData && that_present_deleteData))
        return false;
      if (this.deleteData != that.deleteData)
        return false;
    }

    boolean this_present_envContext = true && this.isSetEnvContext();
    boolean that_present_envContext = true && that.isSetEnvContext();
    if (this_present_envContext || that_present_envContext) {
      if (!(this_present_envContext && that_present_envContext))
        return false;
      if (!this.envContext.equals(that.envContext))
        return false;
    }

    boolean this_present_dropPartitions = true && this.isSetDropPartitions();
    boolean that_present_dropPartitions = true && that.isSetDropPartitions();
    if (this_present_dropPartitions || that_present_dropPartitions) {
      if (!(this_present_dropPartitions && that_present_dropPartitions))
        return false;
      if (this.dropPartitions != that.dropPartitions)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_asyncDrop = true && this.isSetAsyncDrop();
    boolean that_present_asyncDrop = true && that.isSetAsyncDrop();
    if (this_present_asyncDrop || that_present_asyncDrop) {
      if (!(this_present_asyncDrop && that_present_asyncDrop))
        return false;
      if (this.asyncDrop != that.asyncDrop)
        return false;
    }

    boolean this_present_cancel = true && this.isSetCancel();
    boolean that_present_cancel = true && that.isSetCancel();
    if (this_present_cancel || that_present_cancel) {
      if (!(this_present_cancel && that_present_cancel))
        return false;
      if (this.cancel != that.cancel)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCatalogName()) ? 131071 : 524287);
    if (isSetCatalogName())
      hashCode = hashCode * 8191 + catalogName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + dbName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + tableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeleteData()) ? 131071 : 524287);
    if (isSetDeleteData())
      hashCode = hashCode * 8191 + ((deleteData) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnvContext()) ? 131071 : 524287);
    if (isSetEnvContext())
      hashCode = hashCode * 8191 + envContext.hashCode();

    hashCode = hashCode * 8191 + ((isSetDropPartitions()) ? 131071 : 524287);
    if (isSetDropPartitions())
      hashCode = hashCode * 8191 + ((dropPartitions) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetAsyncDrop()) ? 131071 : 524287);
    if (isSetAsyncDrop())
      hashCode = hashCode * 8191 + ((asyncDrop) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCancel()) ? 131071 : 524287);
    if (isSetCancel())
      hashCode = hashCode * 8191 + ((cancel) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(DropTableRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCatalogName(), other.isSetCatalogName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogName, other.catalogName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeleteData(), other.isSetDeleteData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteData, other.deleteData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnvContext(), other.isSetEnvContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envContext, other.envContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDropPartitions(), other.isSetDropPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDropPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dropPartitions, other.dropPartitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAsyncDrop(), other.isSetAsyncDrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsyncDrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asyncDrop, other.asyncDrop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCancel(), other.isSetCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancel, other.cancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DropTableRequest(");
    boolean first = true;

    if (isSetCatalogName()) {
      sb.append("catalogName:");
      if (this.catalogName == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("dbName:");
    if (this.dbName == null) {
      sb.append("null");
    } else {
      sb.append(this.dbName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (isSetDeleteData()) {
      if (!first) sb.append(", ");
      sb.append("deleteData:");
      sb.append(this.deleteData);
      first = false;
    }
    if (isSetEnvContext()) {
      if (!first) sb.append(", ");
      sb.append("envContext:");
      if (this.envContext == null) {
        sb.append("null");
      } else {
        sb.append(this.envContext);
      }
      first = false;
    }
    if (isSetDropPartitions()) {
      if (!first) sb.append(", ");
      sb.append("dropPartitions:");
      sb.append(this.dropPartitions);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetAsyncDrop()) {
      if (!first) sb.append(", ");
      sb.append("asyncDrop:");
      sb.append(this.asyncDrop);
      first = false;
    }
    if (isSetCancel()) {
      if (!first) sb.append(", ");
      sb.append("cancel:");
      sb.append(this.cancel);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetDbName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbName' is unset! Struct:" + toString());
    }

    if (!isSetTableName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (envContext != null) {
      envContext.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DropTableRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DropTableRequestStandardScheme getScheme() {
      return new DropTableRequestStandardScheme();
    }
  }

  private static class DropTableRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<DropTableRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DropTableRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATALOG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalogName = iprot.readString();
              struct.setCatalogNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleteData = iprot.readBool();
              struct.setDeleteDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENV_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.envContext = new EnvironmentContext();
              struct.envContext.read(iprot);
              struct.setEnvContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DROP_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.dropPartitions = iprot.readBool();
              struct.setDropPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASYNC_DROP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.asyncDrop = iprot.readBool();
              struct.setAsyncDropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.cancel = iprot.readBool();
              struct.setCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DropTableRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catalogName != null) {
        if (struct.isSetCatalogName()) {
          oprot.writeFieldBegin(CATALOG_NAME_FIELD_DESC);
          oprot.writeString(struct.catalogName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbName != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.dbName);
        oprot.writeFieldEnd();
      }
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeleteData()) {
        oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);
        oprot.writeBool(struct.deleteData);
        oprot.writeFieldEnd();
      }
      if (struct.envContext != null) {
        if (struct.isSetEnvContext()) {
          oprot.writeFieldBegin(ENV_CONTEXT_FIELD_DESC);
          struct.envContext.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDropPartitions()) {
        oprot.writeFieldBegin(DROP_PARTITIONS_FIELD_DESC);
        oprot.writeBool(struct.dropPartitions);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAsyncDrop()) {
        oprot.writeFieldBegin(ASYNC_DROP_FIELD_DESC);
        oprot.writeBool(struct.asyncDrop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCancel()) {
        oprot.writeFieldBegin(CANCEL_FIELD_DESC);
        oprot.writeBool(struct.cancel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DropTableRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DropTableRequestTupleScheme getScheme() {
      return new DropTableRequestTupleScheme();
    }
  }

  private static class DropTableRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<DropTableRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DropTableRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.dbName);
      oprot.writeString(struct.tableName);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCatalogName()) {
        optionals.set(0);
      }
      if (struct.isSetDeleteData()) {
        optionals.set(1);
      }
      if (struct.isSetEnvContext()) {
        optionals.set(2);
      }
      if (struct.isSetDropPartitions()) {
        optionals.set(3);
      }
      if (struct.isSetId()) {
        optionals.set(4);
      }
      if (struct.isSetAsyncDrop()) {
        optionals.set(5);
      }
      if (struct.isSetCancel()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCatalogName()) {
        oprot.writeString(struct.catalogName);
      }
      if (struct.isSetDeleteData()) {
        oprot.writeBool(struct.deleteData);
      }
      if (struct.isSetEnvContext()) {
        struct.envContext.write(oprot);
      }
      if (struct.isSetDropPartitions()) {
        oprot.writeBool(struct.dropPartitions);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetAsyncDrop()) {
        oprot.writeBool(struct.asyncDrop);
      }
      if (struct.isSetCancel()) {
        oprot.writeBool(struct.cancel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DropTableRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.dbName = iprot.readString();
      struct.setDbNameIsSet(true);
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.catalogName = iprot.readString();
        struct.setCatalogNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deleteData = iprot.readBool();
        struct.setDeleteDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.envContext = new EnvironmentContext();
        struct.envContext.read(iprot);
        struct.setEnvContextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dropPartitions = iprot.readBool();
        struct.setDropPartitionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.asyncDrop = iprot.readBool();
        struct.setAsyncDropIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cancel = iprot.readBool();
        struct.setCancelIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

