/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class AbortCompactResponse implements org.apache.thrift.TBase<AbortCompactResponse, AbortCompactResponse._Fields>, java.io.Serializable, Cloneable, Comparable<AbortCompactResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AbortCompactResponse");

  private static final org.apache.thrift.protocol.TField ABORTEDCOMPACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("abortedcompacts", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AbortCompactResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AbortCompactResponseTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,AbortCompactionResponseElement> abortedcompacts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ABORTEDCOMPACTS((short)1, "abortedcompacts");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ABORTEDCOMPACTS
          return ABORTEDCOMPACTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ABORTEDCOMPACTS, new org.apache.thrift.meta_data.FieldMetaData("abortedcompacts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbortCompactionResponseElement.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AbortCompactResponse.class, metaDataMap);
  }

  public AbortCompactResponse() {
  }

  public AbortCompactResponse(
    java.util.Map<java.lang.Long,AbortCompactionResponseElement> abortedcompacts)
  {
    this();
    this.abortedcompacts = abortedcompacts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AbortCompactResponse(AbortCompactResponse other) {
    if (other.isSetAbortedcompacts()) {
      java.util.Map<java.lang.Long,AbortCompactionResponseElement> __this__abortedcompacts = new java.util.HashMap<java.lang.Long,AbortCompactionResponseElement>(other.abortedcompacts.size());
      for (java.util.Map.Entry<java.lang.Long, AbortCompactionResponseElement> other_element : other.abortedcompacts.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        AbortCompactionResponseElement other_element_value = other_element.getValue();

        java.lang.Long __this__abortedcompacts_copy_key = other_element_key;

        AbortCompactionResponseElement __this__abortedcompacts_copy_value = new AbortCompactionResponseElement(other_element_value);

        __this__abortedcompacts.put(__this__abortedcompacts_copy_key, __this__abortedcompacts_copy_value);
      }
      this.abortedcompacts = __this__abortedcompacts;
    }
  }

  public AbortCompactResponse deepCopy() {
    return new AbortCompactResponse(this);
  }

  @Override
  public void clear() {
    this.abortedcompacts = null;
  }

  public int getAbortedcompactsSize() {
    return (this.abortedcompacts == null) ? 0 : this.abortedcompacts.size();
  }

  public void putToAbortedcompacts(long key, AbortCompactionResponseElement val) {
    if (this.abortedcompacts == null) {
      this.abortedcompacts = new java.util.HashMap<java.lang.Long,AbortCompactionResponseElement>();
    }
    this.abortedcompacts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,AbortCompactionResponseElement> getAbortedcompacts() {
    return this.abortedcompacts;
  }

  public void setAbortedcompacts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,AbortCompactionResponseElement> abortedcompacts) {
    this.abortedcompacts = abortedcompacts;
  }

  public void unsetAbortedcompacts() {
    this.abortedcompacts = null;
  }

  /** Returns true if field abortedcompacts is set (has been assigned a value) and false otherwise */
  public boolean isSetAbortedcompacts() {
    return this.abortedcompacts != null;
  }

  public void setAbortedcompactsIsSet(boolean value) {
    if (!value) {
      this.abortedcompacts = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ABORTEDCOMPACTS:
      if (value == null) {
        unsetAbortedcompacts();
      } else {
        setAbortedcompacts((java.util.Map<java.lang.Long,AbortCompactionResponseElement>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ABORTEDCOMPACTS:
      return getAbortedcompacts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ABORTEDCOMPACTS:
      return isSetAbortedcompacts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AbortCompactResponse)
      return this.equals((AbortCompactResponse)that);
    return false;
  }

  public boolean equals(AbortCompactResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_abortedcompacts = true && this.isSetAbortedcompacts();
    boolean that_present_abortedcompacts = true && that.isSetAbortedcompacts();
    if (this_present_abortedcompacts || that_present_abortedcompacts) {
      if (!(this_present_abortedcompacts && that_present_abortedcompacts))
        return false;
      if (!this.abortedcompacts.equals(that.abortedcompacts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAbortedcompacts()) ? 131071 : 524287);
    if (isSetAbortedcompacts())
      hashCode = hashCode * 8191 + abortedcompacts.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AbortCompactResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAbortedcompacts(), other.isSetAbortedcompacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbortedcompacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abortedcompacts, other.abortedcompacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AbortCompactResponse(");
    boolean first = true;

    sb.append("abortedcompacts:");
    if (this.abortedcompacts == null) {
      sb.append("null");
    } else {
      sb.append(this.abortedcompacts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetAbortedcompacts()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'abortedcompacts' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AbortCompactResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AbortCompactResponseStandardScheme getScheme() {
      return new AbortCompactResponseStandardScheme();
    }
  }

  private static class AbortCompactResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<AbortCompactResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AbortCompactResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ABORTEDCOMPACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map918 = iprot.readMapBegin();
                struct.abortedcompacts = new java.util.HashMap<java.lang.Long,AbortCompactionResponseElement>(2*_map918.size);
                long _key919;
                @org.apache.thrift.annotation.Nullable AbortCompactionResponseElement _val920;
                for (int _i921 = 0; _i921 < _map918.size; ++_i921)
                {
                  _key919 = iprot.readI64();
                  _val920 = new AbortCompactionResponseElement();
                  _val920.read(iprot);
                  struct.abortedcompacts.put(_key919, _val920);
                }
                iprot.readMapEnd();
              }
              struct.setAbortedcompactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AbortCompactResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.abortedcompacts != null) {
        oprot.writeFieldBegin(ABORTEDCOMPACTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.abortedcompacts.size()));
          for (java.util.Map.Entry<java.lang.Long, AbortCompactionResponseElement> _iter922 : struct.abortedcompacts.entrySet())
          {
            oprot.writeI64(_iter922.getKey());
            _iter922.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AbortCompactResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AbortCompactResponseTupleScheme getScheme() {
      return new AbortCompactResponseTupleScheme();
    }
  }

  private static class AbortCompactResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<AbortCompactResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AbortCompactResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.abortedcompacts.size());
        for (java.util.Map.Entry<java.lang.Long, AbortCompactionResponseElement> _iter923 : struct.abortedcompacts.entrySet())
        {
          oprot.writeI64(_iter923.getKey());
          _iter923.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AbortCompactResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map924 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
        struct.abortedcompacts = new java.util.HashMap<java.lang.Long,AbortCompactionResponseElement>(2*_map924.size);
        long _key925;
        @org.apache.thrift.annotation.Nullable AbortCompactionResponseElement _val926;
        for (int _i927 = 0; _i927 < _map924.size; ++_i927)
        {
          _key925 = iprot.readI64();
          _val926 = new AbortCompactionResponseElement();
          _val926.read(iprot);
          struct.abortedcompacts.put(_key925, _val926);
        }
      }
      struct.setAbortedcompactsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

