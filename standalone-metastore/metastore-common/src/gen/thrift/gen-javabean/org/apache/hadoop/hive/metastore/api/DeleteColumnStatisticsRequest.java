/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class DeleteColumnStatisticsRequest implements org.apache.thrift.TBase<DeleteColumnStatisticsRequest, DeleteColumnStatisticsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteColumnStatisticsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteColumnStatisticsRequest");

  private static final org.apache.thrift.protocol.TField CAT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cat_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PART_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("part_names", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COL_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("col_names", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("engine", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TABLE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tableLevel", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeleteColumnStatisticsRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeleteColumnStatisticsRequestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String cat_name; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String db_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String tbl_name; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> part_names; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> col_names; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String engine; // optional
  private boolean tableLevel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAT_NAME((short)1, "cat_name"),
    DB_NAME((short)2, "db_name"),
    TBL_NAME((short)3, "tbl_name"),
    PART_NAMES((short)4, "part_names"),
    COL_NAMES((short)5, "col_names"),
    ENGINE((short)6, "engine"),
    TABLE_LEVEL((short)7, "tableLevel");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAT_NAME
          return CAT_NAME;
        case 2: // DB_NAME
          return DB_NAME;
        case 3: // TBL_NAME
          return TBL_NAME;
        case 4: // PART_NAMES
          return PART_NAMES;
        case 5: // COL_NAMES
          return COL_NAMES;
        case 6: // ENGINE
          return ENGINE;
        case 7: // TABLE_LEVEL
          return TABLE_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLELEVEL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CAT_NAME,_Fields.PART_NAMES,_Fields.COL_NAMES,_Fields.ENGINE,_Fields.TABLE_LEVEL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAT_NAME, new org.apache.thrift.meta_data.FieldMetaData("cat_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbl_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PART_NAMES, new org.apache.thrift.meta_data.FieldMetaData("part_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COL_NAMES, new org.apache.thrift.meta_data.FieldMetaData("col_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ENGINE, new org.apache.thrift.meta_data.FieldMetaData("engine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("tableLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteColumnStatisticsRequest.class, metaDataMap);
  }

  public DeleteColumnStatisticsRequest() {
    this.engine = "hive";

    this.tableLevel = false;

  }

  public DeleteColumnStatisticsRequest(
    java.lang.String db_name,
    java.lang.String tbl_name)
  {
    this();
    this.db_name = db_name;
    this.tbl_name = tbl_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeleteColumnStatisticsRequest(DeleteColumnStatisticsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCat_name()) {
      this.cat_name = other.cat_name;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTbl_name()) {
      this.tbl_name = other.tbl_name;
    }
    if (other.isSetPart_names()) {
      java.util.List<java.lang.String> __this__part_names = new java.util.ArrayList<java.lang.String>(other.part_names);
      this.part_names = __this__part_names;
    }
    if (other.isSetCol_names()) {
      java.util.List<java.lang.String> __this__col_names = new java.util.ArrayList<java.lang.String>(other.col_names);
      this.col_names = __this__col_names;
    }
    if (other.isSetEngine()) {
      this.engine = other.engine;
    }
    this.tableLevel = other.tableLevel;
  }

  public DeleteColumnStatisticsRequest deepCopy() {
    return new DeleteColumnStatisticsRequest(this);
  }

  @Override
  public void clear() {
    this.cat_name = null;
    this.db_name = null;
    this.tbl_name = null;
    this.part_names = null;
    this.col_names = null;
    this.engine = "hive";

    this.tableLevel = false;

  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCat_name() {
    return this.cat_name;
  }

  public void setCat_name(@org.apache.thrift.annotation.Nullable java.lang.String cat_name) {
    this.cat_name = cat_name;
  }

  public void unsetCat_name() {
    this.cat_name = null;
  }

  /** Returns true if field cat_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCat_name() {
    return this.cat_name != null;
  }

  public void setCat_nameIsSet(boolean value) {
    if (!value) {
      this.cat_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public void setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTbl_name() {
    return this.tbl_name;
  }

  public void setTbl_name(@org.apache.thrift.annotation.Nullable java.lang.String tbl_name) {
    this.tbl_name = tbl_name;
  }

  public void unsetTbl_name() {
    this.tbl_name = null;
  }

  /** Returns true if field tbl_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl_name() {
    return this.tbl_name != null;
  }

  public void setTbl_nameIsSet(boolean value) {
    if (!value) {
      this.tbl_name = null;
    }
  }

  public int getPart_namesSize() {
    return (this.part_names == null) ? 0 : this.part_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPart_namesIterator() {
    return (this.part_names == null) ? null : this.part_names.iterator();
  }

  public void addToPart_names(java.lang.String elem) {
    if (this.part_names == null) {
      this.part_names = new java.util.ArrayList<java.lang.String>();
    }
    this.part_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPart_names() {
    return this.part_names;
  }

  public void setPart_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> part_names) {
    this.part_names = part_names;
  }

  public void unsetPart_names() {
    this.part_names = null;
  }

  /** Returns true if field part_names is set (has been assigned a value) and false otherwise */
  public boolean isSetPart_names() {
    return this.part_names != null;
  }

  public void setPart_namesIsSet(boolean value) {
    if (!value) {
      this.part_names = null;
    }
  }

  public int getCol_namesSize() {
    return (this.col_names == null) ? 0 : this.col_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getCol_namesIterator() {
    return (this.col_names == null) ? null : this.col_names.iterator();
  }

  public void addToCol_names(java.lang.String elem) {
    if (this.col_names == null) {
      this.col_names = new java.util.ArrayList<java.lang.String>();
    }
    this.col_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getCol_names() {
    return this.col_names;
  }

  public void setCol_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> col_names) {
    this.col_names = col_names;
  }

  public void unsetCol_names() {
    this.col_names = null;
  }

  /** Returns true if field col_names is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_names() {
    return this.col_names != null;
  }

  public void setCol_namesIsSet(boolean value) {
    if (!value) {
      this.col_names = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEngine() {
    return this.engine;
  }

  public void setEngine(@org.apache.thrift.annotation.Nullable java.lang.String engine) {
    this.engine = engine;
  }

  public void unsetEngine() {
    this.engine = null;
  }

  /** Returns true if field engine is set (has been assigned a value) and false otherwise */
  public boolean isSetEngine() {
    return this.engine != null;
  }

  public void setEngineIsSet(boolean value) {
    if (!value) {
      this.engine = null;
    }
  }

  public boolean isTableLevel() {
    return this.tableLevel;
  }

  public void setTableLevel(boolean tableLevel) {
    this.tableLevel = tableLevel;
    setTableLevelIsSet(true);
  }

  public void unsetTableLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLELEVEL_ISSET_ID);
  }

  /** Returns true if field tableLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetTableLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLELEVEL_ISSET_ID);
  }

  public void setTableLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLELEVEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CAT_NAME:
      if (value == null) {
        unsetCat_name();
      } else {
        setCat_name((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case TBL_NAME:
      if (value == null) {
        unsetTbl_name();
      } else {
        setTbl_name((java.lang.String)value);
      }
      break;

    case PART_NAMES:
      if (value == null) {
        unsetPart_names();
      } else {
        setPart_names((java.util.List<java.lang.String>)value);
      }
      break;

    case COL_NAMES:
      if (value == null) {
        unsetCol_names();
      } else {
        setCol_names((java.util.List<java.lang.String>)value);
      }
      break;

    case ENGINE:
      if (value == null) {
        unsetEngine();
      } else {
        setEngine((java.lang.String)value);
      }
      break;

    case TABLE_LEVEL:
      if (value == null) {
        unsetTableLevel();
      } else {
        setTableLevel((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CAT_NAME:
      return getCat_name();

    case DB_NAME:
      return getDb_name();

    case TBL_NAME:
      return getTbl_name();

    case PART_NAMES:
      return getPart_names();

    case COL_NAMES:
      return getCol_names();

    case ENGINE:
      return getEngine();

    case TABLE_LEVEL:
      return isTableLevel();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CAT_NAME:
      return isSetCat_name();
    case DB_NAME:
      return isSetDb_name();
    case TBL_NAME:
      return isSetTbl_name();
    case PART_NAMES:
      return isSetPart_names();
    case COL_NAMES:
      return isSetCol_names();
    case ENGINE:
      return isSetEngine();
    case TABLE_LEVEL:
      return isSetTableLevel();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof DeleteColumnStatisticsRequest)
      return this.equals((DeleteColumnStatisticsRequest)that);
    return false;
  }

  public boolean equals(DeleteColumnStatisticsRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cat_name = true && this.isSetCat_name();
    boolean that_present_cat_name = true && that.isSetCat_name();
    if (this_present_cat_name || that_present_cat_name) {
      if (!(this_present_cat_name && that_present_cat_name))
        return false;
      if (!this.cat_name.equals(that.cat_name))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_tbl_name = true && this.isSetTbl_name();
    boolean that_present_tbl_name = true && that.isSetTbl_name();
    if (this_present_tbl_name || that_present_tbl_name) {
      if (!(this_present_tbl_name && that_present_tbl_name))
        return false;
      if (!this.tbl_name.equals(that.tbl_name))
        return false;
    }

    boolean this_present_part_names = true && this.isSetPart_names();
    boolean that_present_part_names = true && that.isSetPart_names();
    if (this_present_part_names || that_present_part_names) {
      if (!(this_present_part_names && that_present_part_names))
        return false;
      if (!this.part_names.equals(that.part_names))
        return false;
    }

    boolean this_present_col_names = true && this.isSetCol_names();
    boolean that_present_col_names = true && that.isSetCol_names();
    if (this_present_col_names || that_present_col_names) {
      if (!(this_present_col_names && that_present_col_names))
        return false;
      if (!this.col_names.equals(that.col_names))
        return false;
    }

    boolean this_present_engine = true && this.isSetEngine();
    boolean that_present_engine = true && that.isSetEngine();
    if (this_present_engine || that_present_engine) {
      if (!(this_present_engine && that_present_engine))
        return false;
      if (!this.engine.equals(that.engine))
        return false;
    }

    boolean this_present_tableLevel = true && this.isSetTableLevel();
    boolean that_present_tableLevel = true && that.isSetTableLevel();
    if (this_present_tableLevel || that_present_tableLevel) {
      if (!(this_present_tableLevel && that_present_tableLevel))
        return false;
      if (this.tableLevel != that.tableLevel)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCat_name()) ? 131071 : 524287);
    if (isSetCat_name())
      hashCode = hashCode * 8191 + cat_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTbl_name()) ? 131071 : 524287);
    if (isSetTbl_name())
      hashCode = hashCode * 8191 + tbl_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPart_names()) ? 131071 : 524287);
    if (isSetPart_names())
      hashCode = hashCode * 8191 + part_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetCol_names()) ? 131071 : 524287);
    if (isSetCol_names())
      hashCode = hashCode * 8191 + col_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetEngine()) ? 131071 : 524287);
    if (isSetEngine())
      hashCode = hashCode * 8191 + engine.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableLevel()) ? 131071 : 524287);
    if (isSetTableLevel())
      hashCode = hashCode * 8191 + ((tableLevel) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(DeleteColumnStatisticsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCat_name(), other.isSetCat_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCat_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat_name, other.cat_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTbl_name(), other.isSetTbl_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl_name, other.tbl_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPart_names(), other.isSetPart_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPart_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.part_names, other.part_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCol_names(), other.isSetCol_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_names, other.col_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEngine(), other.isSetEngine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engine, other.engine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableLevel(), other.isSetTableLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableLevel, other.tableLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DeleteColumnStatisticsRequest(");
    boolean first = true;

    if (isSetCat_name()) {
      sb.append("cat_name:");
      if (this.cat_name == null) {
        sb.append("null");
      } else {
        sb.append(this.cat_name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbl_name:");
    if (this.tbl_name == null) {
      sb.append("null");
    } else {
      sb.append(this.tbl_name);
    }
    first = false;
    if (isSetPart_names()) {
      if (!first) sb.append(", ");
      sb.append("part_names:");
      if (this.part_names == null) {
        sb.append("null");
      } else {
        sb.append(this.part_names);
      }
      first = false;
    }
    if (isSetCol_names()) {
      if (!first) sb.append(", ");
      sb.append("col_names:");
      if (this.col_names == null) {
        sb.append("null");
      } else {
        sb.append(this.col_names);
      }
      first = false;
    }
    if (isSetEngine()) {
      if (!first) sb.append(", ");
      sb.append("engine:");
      if (this.engine == null) {
        sb.append("null");
      } else {
        sb.append(this.engine);
      }
      first = false;
    }
    if (isSetTableLevel()) {
      if (!first) sb.append(", ");
      sb.append("tableLevel:");
      sb.append(this.tableLevel);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetDb_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_name' is unset! Struct:" + toString());
    }

    if (!isSetTbl_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tbl_name' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeleteColumnStatisticsRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeleteColumnStatisticsRequestStandardScheme getScheme() {
      return new DeleteColumnStatisticsRequestStandardScheme();
    }
  }

  private static class DeleteColumnStatisticsRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeleteColumnStatisticsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteColumnStatisticsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cat_name = iprot.readString();
              struct.setCat_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl_name = iprot.readString();
              struct.setTbl_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PART_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1568 = iprot.readListBegin();
                struct.part_names = new java.util.ArrayList<java.lang.String>(_list1568.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1569;
                for (int _i1570 = 0; _i1570 < _list1568.size; ++_i1570)
                {
                  _elem1569 = iprot.readString();
                  struct.part_names.add(_elem1569);
                }
                iprot.readListEnd();
              }
              struct.setPart_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COL_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1571 = iprot.readListBegin();
                struct.col_names = new java.util.ArrayList<java.lang.String>(_list1571.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1572;
                for (int _i1573 = 0; _i1573 < _list1571.size; ++_i1573)
                {
                  _elem1572 = iprot.readString();
                  struct.col_names.add(_elem1572);
                }
                iprot.readListEnd();
              }
              struct.setCol_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENGINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engine = iprot.readString();
              struct.setEngineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.tableLevel = iprot.readBool();
              struct.setTableLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteColumnStatisticsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cat_name != null) {
        if (struct.isSetCat_name()) {
          oprot.writeFieldBegin(CAT_NAME_FIELD_DESC);
          oprot.writeString(struct.cat_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.tbl_name);
        oprot.writeFieldEnd();
      }
      if (struct.part_names != null) {
        if (struct.isSetPart_names()) {
          oprot.writeFieldBegin(PART_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_names.size()));
            for (java.lang.String _iter1574 : struct.part_names)
            {
              oprot.writeString(_iter1574);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.col_names != null) {
        if (struct.isSetCol_names()) {
          oprot.writeFieldBegin(COL_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.col_names.size()));
            for (java.lang.String _iter1575 : struct.col_names)
            {
              oprot.writeString(_iter1575);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.engine != null) {
        if (struct.isSetEngine()) {
          oprot.writeFieldBegin(ENGINE_FIELD_DESC);
          oprot.writeString(struct.engine);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTableLevel()) {
        oprot.writeFieldBegin(TABLE_LEVEL_FIELD_DESC);
        oprot.writeBool(struct.tableLevel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeleteColumnStatisticsRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeleteColumnStatisticsRequestTupleScheme getScheme() {
      return new DeleteColumnStatisticsRequestTupleScheme();
    }
  }

  private static class DeleteColumnStatisticsRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeleteColumnStatisticsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeleteColumnStatisticsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.db_name);
      oprot.writeString(struct.tbl_name);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCat_name()) {
        optionals.set(0);
      }
      if (struct.isSetPart_names()) {
        optionals.set(1);
      }
      if (struct.isSetCol_names()) {
        optionals.set(2);
      }
      if (struct.isSetEngine()) {
        optionals.set(3);
      }
      if (struct.isSetTableLevel()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCat_name()) {
        oprot.writeString(struct.cat_name);
      }
      if (struct.isSetPart_names()) {
        {
          oprot.writeI32(struct.part_names.size());
          for (java.lang.String _iter1576 : struct.part_names)
          {
            oprot.writeString(_iter1576);
          }
        }
      }
      if (struct.isSetCol_names()) {
        {
          oprot.writeI32(struct.col_names.size());
          for (java.lang.String _iter1577 : struct.col_names)
          {
            oprot.writeString(_iter1577);
          }
        }
      }
      if (struct.isSetEngine()) {
        oprot.writeString(struct.engine);
      }
      if (struct.isSetTableLevel()) {
        oprot.writeBool(struct.tableLevel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeleteColumnStatisticsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.db_name = iprot.readString();
      struct.setDb_nameIsSet(true);
      struct.tbl_name = iprot.readString();
      struct.setTbl_nameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.cat_name = iprot.readString();
        struct.setCat_nameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list1578 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.part_names = new java.util.ArrayList<java.lang.String>(_list1578.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem1579;
          for (int _i1580 = 0; _i1580 < _list1578.size; ++_i1580)
          {
            _elem1579 = iprot.readString();
            struct.part_names.add(_elem1579);
          }
        }
        struct.setPart_namesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list1581 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.col_names = new java.util.ArrayList<java.lang.String>(_list1581.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem1582;
          for (int _i1583 = 0; _i1583 < _list1581.size; ++_i1583)
          {
            _elem1582 = iprot.readString();
            struct.col_names.add(_elem1582);
          }
        }
        struct.setCol_namesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.engine = iprot.readString();
        struct.setEngineIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tableLevel = iprot.readBool();
        struct.setTableLevelIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

