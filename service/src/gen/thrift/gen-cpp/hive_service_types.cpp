/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hive_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Apache { namespace Hadoop { namespace Hive {

int _kJobTrackerStateValues[] = {
  JobTrackerState::INITIALIZING,
  JobTrackerState::RUNNING
};
const char* _kJobTrackerStateNames[] = {
  "INITIALIZING",
  "RUNNING"
};
const std::map<int, const char*> _JobTrackerState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kJobTrackerStateValues, _kJobTrackerStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


HiveClusterStatus::~HiveClusterStatus() throw() {
}


void HiveClusterStatus::__set_taskTrackers(const int32_t val) {
  this->taskTrackers = val;
}

void HiveClusterStatus::__set_mapTasks(const int32_t val) {
  this->mapTasks = val;
}

void HiveClusterStatus::__set_reduceTasks(const int32_t val) {
  this->reduceTasks = val;
}

void HiveClusterStatus::__set_maxMapTasks(const int32_t val) {
  this->maxMapTasks = val;
}

void HiveClusterStatus::__set_maxReduceTasks(const int32_t val) {
  this->maxReduceTasks = val;
}

void HiveClusterStatus::__set_state(const JobTrackerState::type val) {
  this->state = val;
}

uint32_t HiveClusterStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->taskTrackers);
          this->__isset.taskTrackers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mapTasks);
          this->__isset.mapTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reduceTasks);
          this->__isset.reduceTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxMapTasks);
          this->__isset.maxMapTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxReduceTasks);
          this->__isset.maxReduceTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->state = (JobTrackerState::type)ecast0;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveClusterStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HiveClusterStatus");

  xfer += oprot->writeFieldBegin("taskTrackers", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->taskTrackers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mapTasks", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mapTasks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reduceTasks", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->reduceTasks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxMapTasks", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maxMapTasks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxReduceTasks", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->maxReduceTasks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HiveClusterStatus &a, HiveClusterStatus &b) {
  using ::std::swap;
  swap(a.taskTrackers, b.taskTrackers);
  swap(a.mapTasks, b.mapTasks);
  swap(a.reduceTasks, b.reduceTasks);
  swap(a.maxMapTasks, b.maxMapTasks);
  swap(a.maxReduceTasks, b.maxReduceTasks);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

HiveClusterStatus::HiveClusterStatus(const HiveClusterStatus& other1) {
  taskTrackers = other1.taskTrackers;
  mapTasks = other1.mapTasks;
  reduceTasks = other1.reduceTasks;
  maxMapTasks = other1.maxMapTasks;
  maxReduceTasks = other1.maxReduceTasks;
  state = other1.state;
  __isset = other1.__isset;
}
HiveClusterStatus& HiveClusterStatus::operator=(const HiveClusterStatus& other2) {
  taskTrackers = other2.taskTrackers;
  mapTasks = other2.mapTasks;
  reduceTasks = other2.reduceTasks;
  maxMapTasks = other2.maxMapTasks;
  maxReduceTasks = other2.maxReduceTasks;
  state = other2.state;
  __isset = other2.__isset;
  return *this;
}
void HiveClusterStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveClusterStatus(";
  out << "taskTrackers=" << to_string(taskTrackers);
  out << ", " << "mapTasks=" << to_string(mapTasks);
  out << ", " << "reduceTasks=" << to_string(reduceTasks);
  out << ", " << "maxMapTasks=" << to_string(maxMapTasks);
  out << ", " << "maxReduceTasks=" << to_string(maxReduceTasks);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


HiveServerException::~HiveServerException() throw() {
}


void HiveServerException::__set_message(const std::string& val) {
  this->message = val;
}

void HiveServerException::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void HiveServerException::__set_SQLState(const std::string& val) {
  this->SQLState = val;
}

uint32_t HiveServerException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SQLState);
          this->__isset.SQLState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveServerException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HiveServerException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SQLState", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->SQLState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HiveServerException &a, HiveServerException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.errorCode, b.errorCode);
  swap(a.SQLState, b.SQLState);
  swap(a.__isset, b.__isset);
}

HiveServerException::HiveServerException(const HiveServerException& other3) : TException() {
  message = other3.message;
  errorCode = other3.errorCode;
  SQLState = other3.SQLState;
  __isset = other3.__isset;
}
HiveServerException& HiveServerException::operator=(const HiveServerException& other4) {
  message = other4.message;
  errorCode = other4.errorCode;
  SQLState = other4.SQLState;
  __isset = other4.__isset;
  return *this;
}
void HiveServerException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveServerException(";
  out << "message=" << to_string(message);
  out << ", " << "errorCode=" << to_string(errorCode);
  out << ", " << "SQLState=" << to_string(SQLState);
  out << ")";
}

const char* HiveServerException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: HiveServerException";
  }
}

}}} // namespace
